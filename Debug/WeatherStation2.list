
C:\Users\cwiec\Atollic\TrueSTUDIO\ARM_workspace_7.0\WeatherStation2\Debug\WeatherStation2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000057a4  080001d0  080001d0  000101d0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000148  08005974  08005974  00015974  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000018  08005abc  08005abc  00015abc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  08005ad4  08005ad4  00015ad4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         00000080  20000000  08005ad8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          0000023c  20000080  08005b58  00020080  2**2
                  ALLOC
  7 ._user_heap_stack 00000080  200002bc  08005b58  000202bc  2**0
                  ALLOC
  8 .ARM.attributes 00000029  00000000  00000000  00020080  2**0
                  CONTENTS, READONLY
  9 .debug_info   000123f1  00000000  00000000  000200a9  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 00002a57  00000000  00000000  0003249a  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_aranges 00000ff8  00000000  00000000  00034ef8  2**3
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000f10  00000000  00000000  00035ef0  2**3
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_line   0000517c  00000000  00000000  00036e00  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    000091e8  00000000  00000000  0003bf7c  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .comment      0000007e  00000000  00000000  00045164  2**0
                  CONTENTS, READONLY
 16 .debug_frame  0000b6a4  00000000  00000000  000451e4  2**2
                  CONTENTS, READONLY, DEBUGGING
 17 .stab         00000030  00000000  00000000  00050a40  2**2
                  CONTENTS, READONLY, DEBUGGING
 18 .stabstr      000001b7  00000000  00000000  00050888  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000080 	.word	0x20000080
 80001ec:	00000000 	.word	0x00000000
 80001f0:	0800595c 	.word	0x0800595c

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000084 	.word	0x20000084
 800020c:	0800595c 	.word	0x0800595c

08000210 <__aeabi_frsub>:
 8000210:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000214:	e002      	b.n	800021c <__addsf3>
 8000216:	bf00      	nop

08000218 <__aeabi_fsub>:
 8000218:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

0800021c <__addsf3>:
 800021c:	0042      	lsls	r2, r0, #1
 800021e:	bf1f      	itttt	ne
 8000220:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000224:	ea92 0f03 	teqne	r2, r3
 8000228:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 800022c:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000230:	d06a      	beq.n	8000308 <__addsf3+0xec>
 8000232:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000236:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 800023a:	bfc1      	itttt	gt
 800023c:	18d2      	addgt	r2, r2, r3
 800023e:	4041      	eorgt	r1, r0
 8000240:	4048      	eorgt	r0, r1
 8000242:	4041      	eorgt	r1, r0
 8000244:	bfb8      	it	lt
 8000246:	425b      	neglt	r3, r3
 8000248:	2b19      	cmp	r3, #25
 800024a:	bf88      	it	hi
 800024c:	4770      	bxhi	lr
 800024e:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000252:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000256:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 800025a:	bf18      	it	ne
 800025c:	4240      	negne	r0, r0
 800025e:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000262:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000266:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 800026a:	bf18      	it	ne
 800026c:	4249      	negne	r1, r1
 800026e:	ea92 0f03 	teq	r2, r3
 8000272:	d03f      	beq.n	80002f4 <__addsf3+0xd8>
 8000274:	f1a2 0201 	sub.w	r2, r2, #1
 8000278:	fa41 fc03 	asr.w	ip, r1, r3
 800027c:	eb10 000c 	adds.w	r0, r0, ip
 8000280:	f1c3 0320 	rsb	r3, r3, #32
 8000284:	fa01 f103 	lsl.w	r1, r1, r3
 8000288:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 800028c:	d502      	bpl.n	8000294 <__addsf3+0x78>
 800028e:	4249      	negs	r1, r1
 8000290:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000294:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000298:	d313      	bcc.n	80002c2 <__addsf3+0xa6>
 800029a:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 800029e:	d306      	bcc.n	80002ae <__addsf3+0x92>
 80002a0:	0840      	lsrs	r0, r0, #1
 80002a2:	ea4f 0131 	mov.w	r1, r1, rrx
 80002a6:	f102 0201 	add.w	r2, r2, #1
 80002aa:	2afe      	cmp	r2, #254	; 0xfe
 80002ac:	d251      	bcs.n	8000352 <__addsf3+0x136>
 80002ae:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 80002b2:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80002b6:	bf08      	it	eq
 80002b8:	f020 0001 	biceq.w	r0, r0, #1
 80002bc:	ea40 0003 	orr.w	r0, r0, r3
 80002c0:	4770      	bx	lr
 80002c2:	0049      	lsls	r1, r1, #1
 80002c4:	eb40 0000 	adc.w	r0, r0, r0
 80002c8:	f410 0f00 	tst.w	r0, #8388608	; 0x800000
 80002cc:	f1a2 0201 	sub.w	r2, r2, #1
 80002d0:	d1ed      	bne.n	80002ae <__addsf3+0x92>
 80002d2:	fab0 fc80 	clz	ip, r0
 80002d6:	f1ac 0c08 	sub.w	ip, ip, #8
 80002da:	ebb2 020c 	subs.w	r2, r2, ip
 80002de:	fa00 f00c 	lsl.w	r0, r0, ip
 80002e2:	bfaa      	itet	ge
 80002e4:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 80002e8:	4252      	neglt	r2, r2
 80002ea:	4318      	orrge	r0, r3
 80002ec:	bfbc      	itt	lt
 80002ee:	40d0      	lsrlt	r0, r2
 80002f0:	4318      	orrlt	r0, r3
 80002f2:	4770      	bx	lr
 80002f4:	f092 0f00 	teq	r2, #0
 80002f8:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 80002fc:	bf06      	itte	eq
 80002fe:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000302:	3201      	addeq	r2, #1
 8000304:	3b01      	subne	r3, #1
 8000306:	e7b5      	b.n	8000274 <__addsf3+0x58>
 8000308:	ea4f 0341 	mov.w	r3, r1, lsl #1
 800030c:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000310:	bf18      	it	ne
 8000312:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000316:	d021      	beq.n	800035c <__addsf3+0x140>
 8000318:	ea92 0f03 	teq	r2, r3
 800031c:	d004      	beq.n	8000328 <__addsf3+0x10c>
 800031e:	f092 0f00 	teq	r2, #0
 8000322:	bf08      	it	eq
 8000324:	4608      	moveq	r0, r1
 8000326:	4770      	bx	lr
 8000328:	ea90 0f01 	teq	r0, r1
 800032c:	bf1c      	itt	ne
 800032e:	2000      	movne	r0, #0
 8000330:	4770      	bxne	lr
 8000332:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000336:	d104      	bne.n	8000342 <__addsf3+0x126>
 8000338:	0040      	lsls	r0, r0, #1
 800033a:	bf28      	it	cs
 800033c:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000340:	4770      	bx	lr
 8000342:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000346:	bf3c      	itt	cc
 8000348:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 800034c:	4770      	bxcc	lr
 800034e:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000352:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000356:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 800035a:	4770      	bx	lr
 800035c:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000360:	bf16      	itet	ne
 8000362:	4608      	movne	r0, r1
 8000364:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000368:	4601      	movne	r1, r0
 800036a:	0242      	lsls	r2, r0, #9
 800036c:	bf06      	itte	eq
 800036e:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000372:	ea90 0f01 	teqeq	r0, r1
 8000376:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 800037a:	4770      	bx	lr

0800037c <__aeabi_ui2f>:
 800037c:	f04f 0300 	mov.w	r3, #0
 8000380:	e004      	b.n	800038c <__aeabi_i2f+0x8>
 8000382:	bf00      	nop

08000384 <__aeabi_i2f>:
 8000384:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000388:	bf48      	it	mi
 800038a:	4240      	negmi	r0, r0
 800038c:	ea5f 0c00 	movs.w	ip, r0
 8000390:	bf08      	it	eq
 8000392:	4770      	bxeq	lr
 8000394:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000398:	4601      	mov	r1, r0
 800039a:	f04f 0000 	mov.w	r0, #0
 800039e:	e01c      	b.n	80003da <__aeabi_l2f+0x2a>

080003a0 <__aeabi_ul2f>:
 80003a0:	ea50 0201 	orrs.w	r2, r0, r1
 80003a4:	bf08      	it	eq
 80003a6:	4770      	bxeq	lr
 80003a8:	f04f 0300 	mov.w	r3, #0
 80003ac:	e00a      	b.n	80003c4 <__aeabi_l2f+0x14>
 80003ae:	bf00      	nop

080003b0 <__aeabi_l2f>:
 80003b0:	ea50 0201 	orrs.w	r2, r0, r1
 80003b4:	bf08      	it	eq
 80003b6:	4770      	bxeq	lr
 80003b8:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 80003bc:	d502      	bpl.n	80003c4 <__aeabi_l2f+0x14>
 80003be:	4240      	negs	r0, r0
 80003c0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80003c4:	ea5f 0c01 	movs.w	ip, r1
 80003c8:	bf02      	ittt	eq
 80003ca:	4684      	moveq	ip, r0
 80003cc:	4601      	moveq	r1, r0
 80003ce:	2000      	moveq	r0, #0
 80003d0:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 80003d4:	bf08      	it	eq
 80003d6:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 80003da:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 80003de:	fabc f28c 	clz	r2, ip
 80003e2:	3a08      	subs	r2, #8
 80003e4:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 80003e8:	db10      	blt.n	800040c <__aeabi_l2f+0x5c>
 80003ea:	fa01 fc02 	lsl.w	ip, r1, r2
 80003ee:	4463      	add	r3, ip
 80003f0:	fa00 fc02 	lsl.w	ip, r0, r2
 80003f4:	f1c2 0220 	rsb	r2, r2, #32
 80003f8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003fc:	fa20 f202 	lsr.w	r2, r0, r2
 8000400:	eb43 0002 	adc.w	r0, r3, r2
 8000404:	bf08      	it	eq
 8000406:	f020 0001 	biceq.w	r0, r0, #1
 800040a:	4770      	bx	lr
 800040c:	f102 0220 	add.w	r2, r2, #32
 8000410:	fa01 fc02 	lsl.w	ip, r1, r2
 8000414:	f1c2 0220 	rsb	r2, r2, #32
 8000418:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 800041c:	fa21 f202 	lsr.w	r2, r1, r2
 8000420:	eb43 0002 	adc.w	r0, r3, r2
 8000424:	bf08      	it	eq
 8000426:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 800042a:	4770      	bx	lr

0800042c <__aeabi_fmul>:
 800042c:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000430:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000434:	bf1e      	ittt	ne
 8000436:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 800043a:	ea92 0f0c 	teqne	r2, ip
 800043e:	ea93 0f0c 	teqne	r3, ip
 8000442:	d06f      	beq.n	8000524 <__aeabi_fmul+0xf8>
 8000444:	441a      	add	r2, r3
 8000446:	ea80 0c01 	eor.w	ip, r0, r1
 800044a:	0240      	lsls	r0, r0, #9
 800044c:	bf18      	it	ne
 800044e:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000452:	d01e      	beq.n	8000492 <__aeabi_fmul+0x66>
 8000454:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000458:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 800045c:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000460:	fba0 3101 	umull	r3, r1, r0, r1
 8000464:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000468:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 800046c:	bf3e      	ittt	cc
 800046e:	0049      	lslcc	r1, r1, #1
 8000470:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000474:	005b      	lslcc	r3, r3, #1
 8000476:	ea40 0001 	orr.w	r0, r0, r1
 800047a:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 800047e:	2afd      	cmp	r2, #253	; 0xfd
 8000480:	d81d      	bhi.n	80004be <__aeabi_fmul+0x92>
 8000482:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8000486:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 800048a:	bf08      	it	eq
 800048c:	f020 0001 	biceq.w	r0, r0, #1
 8000490:	4770      	bx	lr
 8000492:	f090 0f00 	teq	r0, #0
 8000496:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 800049a:	bf08      	it	eq
 800049c:	0249      	lsleq	r1, r1, #9
 800049e:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 80004a2:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 80004a6:	3a7f      	subs	r2, #127	; 0x7f
 80004a8:	bfc2      	ittt	gt
 80004aa:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 80004ae:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 80004b2:	4770      	bxgt	lr
 80004b4:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80004b8:	f04f 0300 	mov.w	r3, #0
 80004bc:	3a01      	subs	r2, #1
 80004be:	dc5d      	bgt.n	800057c <__aeabi_fmul+0x150>
 80004c0:	f112 0f19 	cmn.w	r2, #25
 80004c4:	bfdc      	itt	le
 80004c6:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 80004ca:	4770      	bxle	lr
 80004cc:	f1c2 0200 	rsb	r2, r2, #0
 80004d0:	0041      	lsls	r1, r0, #1
 80004d2:	fa21 f102 	lsr.w	r1, r1, r2
 80004d6:	f1c2 0220 	rsb	r2, r2, #32
 80004da:	fa00 fc02 	lsl.w	ip, r0, r2
 80004de:	ea5f 0031 	movs.w	r0, r1, rrx
 80004e2:	f140 0000 	adc.w	r0, r0, #0
 80004e6:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 80004ea:	bf08      	it	eq
 80004ec:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 80004f0:	4770      	bx	lr
 80004f2:	f092 0f00 	teq	r2, #0
 80004f6:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 80004fa:	bf02      	ittt	eq
 80004fc:	0040      	lsleq	r0, r0, #1
 80004fe:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000502:	3a01      	subeq	r2, #1
 8000504:	d0f9      	beq.n	80004fa <__aeabi_fmul+0xce>
 8000506:	ea40 000c 	orr.w	r0, r0, ip
 800050a:	f093 0f00 	teq	r3, #0
 800050e:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000512:	bf02      	ittt	eq
 8000514:	0049      	lsleq	r1, r1, #1
 8000516:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 800051a:	3b01      	subeq	r3, #1
 800051c:	d0f9      	beq.n	8000512 <__aeabi_fmul+0xe6>
 800051e:	ea41 010c 	orr.w	r1, r1, ip
 8000522:	e78f      	b.n	8000444 <__aeabi_fmul+0x18>
 8000524:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000528:	ea92 0f0c 	teq	r2, ip
 800052c:	bf18      	it	ne
 800052e:	ea93 0f0c 	teqne	r3, ip
 8000532:	d00a      	beq.n	800054a <__aeabi_fmul+0x11e>
 8000534:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000538:	bf18      	it	ne
 800053a:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 800053e:	d1d8      	bne.n	80004f2 <__aeabi_fmul+0xc6>
 8000540:	ea80 0001 	eor.w	r0, r0, r1
 8000544:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000548:	4770      	bx	lr
 800054a:	f090 0f00 	teq	r0, #0
 800054e:	bf17      	itett	ne
 8000550:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000554:	4608      	moveq	r0, r1
 8000556:	f091 0f00 	teqne	r1, #0
 800055a:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 800055e:	d014      	beq.n	800058a <__aeabi_fmul+0x15e>
 8000560:	ea92 0f0c 	teq	r2, ip
 8000564:	d101      	bne.n	800056a <__aeabi_fmul+0x13e>
 8000566:	0242      	lsls	r2, r0, #9
 8000568:	d10f      	bne.n	800058a <__aeabi_fmul+0x15e>
 800056a:	ea93 0f0c 	teq	r3, ip
 800056e:	d103      	bne.n	8000578 <__aeabi_fmul+0x14c>
 8000570:	024b      	lsls	r3, r1, #9
 8000572:	bf18      	it	ne
 8000574:	4608      	movne	r0, r1
 8000576:	d108      	bne.n	800058a <__aeabi_fmul+0x15e>
 8000578:	ea80 0001 	eor.w	r0, r0, r1
 800057c:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000580:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000584:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000588:	4770      	bx	lr
 800058a:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 800058e:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 8000592:	4770      	bx	lr

08000594 <__aeabi_fdiv>:
 8000594:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000598:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 800059c:	bf1e      	ittt	ne
 800059e:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 80005a2:	ea92 0f0c 	teqne	r2, ip
 80005a6:	ea93 0f0c 	teqne	r3, ip
 80005aa:	d069      	beq.n	8000680 <__aeabi_fdiv+0xec>
 80005ac:	eba2 0203 	sub.w	r2, r2, r3
 80005b0:	ea80 0c01 	eor.w	ip, r0, r1
 80005b4:	0249      	lsls	r1, r1, #9
 80005b6:	ea4f 2040 	mov.w	r0, r0, lsl #9
 80005ba:	d037      	beq.n	800062c <__aeabi_fdiv+0x98>
 80005bc:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 80005c0:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 80005c4:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 80005c8:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 80005cc:	428b      	cmp	r3, r1
 80005ce:	bf38      	it	cc
 80005d0:	005b      	lslcc	r3, r3, #1
 80005d2:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 80005d6:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 80005da:	428b      	cmp	r3, r1
 80005dc:	bf24      	itt	cs
 80005de:	1a5b      	subcs	r3, r3, r1
 80005e0:	ea40 000c 	orrcs.w	r0, r0, ip
 80005e4:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 80005e8:	bf24      	itt	cs
 80005ea:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 80005ee:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80005f2:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 80005f6:	bf24      	itt	cs
 80005f8:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 80005fc:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000600:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000604:	bf24      	itt	cs
 8000606:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 800060a:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 800060e:	011b      	lsls	r3, r3, #4
 8000610:	bf18      	it	ne
 8000612:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000616:	d1e0      	bne.n	80005da <__aeabi_fdiv+0x46>
 8000618:	2afd      	cmp	r2, #253	; 0xfd
 800061a:	f63f af50 	bhi.w	80004be <__aeabi_fmul+0x92>
 800061e:	428b      	cmp	r3, r1
 8000620:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000624:	bf08      	it	eq
 8000626:	f020 0001 	biceq.w	r0, r0, #1
 800062a:	4770      	bx	lr
 800062c:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000630:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000634:	327f      	adds	r2, #127	; 0x7f
 8000636:	bfc2      	ittt	gt
 8000638:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 800063c:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000640:	4770      	bxgt	lr
 8000642:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000646:	f04f 0300 	mov.w	r3, #0
 800064a:	3a01      	subs	r2, #1
 800064c:	e737      	b.n	80004be <__aeabi_fmul+0x92>
 800064e:	f092 0f00 	teq	r2, #0
 8000652:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000656:	bf02      	ittt	eq
 8000658:	0040      	lsleq	r0, r0, #1
 800065a:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 800065e:	3a01      	subeq	r2, #1
 8000660:	d0f9      	beq.n	8000656 <__aeabi_fdiv+0xc2>
 8000662:	ea40 000c 	orr.w	r0, r0, ip
 8000666:	f093 0f00 	teq	r3, #0
 800066a:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 800066e:	bf02      	ittt	eq
 8000670:	0049      	lsleq	r1, r1, #1
 8000672:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000676:	3b01      	subeq	r3, #1
 8000678:	d0f9      	beq.n	800066e <__aeabi_fdiv+0xda>
 800067a:	ea41 010c 	orr.w	r1, r1, ip
 800067e:	e795      	b.n	80005ac <__aeabi_fdiv+0x18>
 8000680:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000684:	ea92 0f0c 	teq	r2, ip
 8000688:	d108      	bne.n	800069c <__aeabi_fdiv+0x108>
 800068a:	0242      	lsls	r2, r0, #9
 800068c:	f47f af7d 	bne.w	800058a <__aeabi_fmul+0x15e>
 8000690:	ea93 0f0c 	teq	r3, ip
 8000694:	f47f af70 	bne.w	8000578 <__aeabi_fmul+0x14c>
 8000698:	4608      	mov	r0, r1
 800069a:	e776      	b.n	800058a <__aeabi_fmul+0x15e>
 800069c:	ea93 0f0c 	teq	r3, ip
 80006a0:	d104      	bne.n	80006ac <__aeabi_fdiv+0x118>
 80006a2:	024b      	lsls	r3, r1, #9
 80006a4:	f43f af4c 	beq.w	8000540 <__aeabi_fmul+0x114>
 80006a8:	4608      	mov	r0, r1
 80006aa:	e76e      	b.n	800058a <__aeabi_fmul+0x15e>
 80006ac:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 80006b0:	bf18      	it	ne
 80006b2:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 80006b6:	d1ca      	bne.n	800064e <__aeabi_fdiv+0xba>
 80006b8:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 80006bc:	f47f af5c 	bne.w	8000578 <__aeabi_fmul+0x14c>
 80006c0:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 80006c4:	f47f af3c 	bne.w	8000540 <__aeabi_fmul+0x114>
 80006c8:	e75f      	b.n	800058a <__aeabi_fmul+0x15e>
 80006ca:	bf00      	nop

080006cc <__aeabi_f2iz>:
 80006cc:	ea4f 0240 	mov.w	r2, r0, lsl #1
 80006d0:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 80006d4:	d30f      	bcc.n	80006f6 <__aeabi_f2iz+0x2a>
 80006d6:	f04f 039e 	mov.w	r3, #158	; 0x9e
 80006da:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 80006de:	d90d      	bls.n	80006fc <__aeabi_f2iz+0x30>
 80006e0:	ea4f 2300 	mov.w	r3, r0, lsl #8
 80006e4:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80006e8:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 80006ec:	fa23 f002 	lsr.w	r0, r3, r2
 80006f0:	bf18      	it	ne
 80006f2:	4240      	negne	r0, r0
 80006f4:	4770      	bx	lr
 80006f6:	f04f 0000 	mov.w	r0, #0
 80006fa:	4770      	bx	lr
 80006fc:	f112 0f61 	cmn.w	r2, #97	; 0x61
 8000700:	d101      	bne.n	8000706 <__aeabi_f2iz+0x3a>
 8000702:	0242      	lsls	r2, r0, #9
 8000704:	d105      	bne.n	8000712 <__aeabi_f2iz+0x46>
 8000706:	f010 4000 	ands.w	r0, r0, #2147483648	; 0x80000000
 800070a:	bf08      	it	eq
 800070c:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000710:	4770      	bx	lr
 8000712:	f04f 0000 	mov.w	r0, #0
 8000716:	4770      	bx	lr

08000718 <NVIC_PriorityGroupConfig>:
  *     @arg NVIC_PriorityGroup_4: 4 bits for pre-emption priority
  *                                0 bits for subpriority
  * @retval None
  */
void NVIC_PriorityGroupConfig(uint32_t NVIC_PriorityGroup)
{
 8000718:	b480      	push	{r7}
 800071a:	b083      	sub	sp, #12
 800071c:	af00      	add	r7, sp, #0
 800071e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(NVIC_PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to NVIC_PriorityGroup value */
  SCB->AIRCR = AIRCR_VECTKEY_MASK | NVIC_PriorityGroup;
 8000720:	4a05      	ldr	r2, [pc, #20]	; (8000738 <NVIC_PriorityGroupConfig+0x20>)
 8000722:	687b      	ldr	r3, [r7, #4]
 8000724:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000728:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800072c:	60d3      	str	r3, [r2, #12]
}
 800072e:	bf00      	nop
 8000730:	370c      	adds	r7, #12
 8000732:	46bd      	mov	sp, r7
 8000734:	bc80      	pop	{r7}
 8000736:	4770      	bx	lr
 8000738:	e000ed00 	.word	0xe000ed00

0800073c <NVIC_Init>:
  * @param  NVIC_InitStruct: pointer to a NVIC_InitTypeDef structure that contains
  *         the configuration information for the specified NVIC peripheral.
  * @retval None
  */
void NVIC_Init(NVIC_InitTypeDef* NVIC_InitStruct)
{
 800073c:	b480      	push	{r7}
 800073e:	b087      	sub	sp, #28
 8000740:	af00      	add	r7, sp, #0
 8000742:	6078      	str	r0, [r7, #4]
  uint32_t tmppriority = 0x00, tmppre = 0x00, tmpsub = 0x0F;
 8000744:	2300      	movs	r3, #0
 8000746:	617b      	str	r3, [r7, #20]
 8000748:	2300      	movs	r3, #0
 800074a:	613b      	str	r3, [r7, #16]
 800074c:	230f      	movs	r3, #15
 800074e:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NVIC_InitStruct->NVIC_IRQChannelCmd));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(NVIC_InitStruct->NVIC_IRQChannelPreemptionPriority));  
  assert_param(IS_NVIC_SUB_PRIORITY(NVIC_InitStruct->NVIC_IRQChannelSubPriority));
    
  if (NVIC_InitStruct->NVIC_IRQChannelCmd != DISABLE)
 8000750:	687b      	ldr	r3, [r7, #4]
 8000752:	78db      	ldrb	r3, [r3, #3]
 8000754:	2b00      	cmp	r3, #0
 8000756:	d03a      	beq.n	80007ce <NVIC_Init+0x92>
  {
    /* Compute the Corresponding IRQ Priority --------------------------------*/    
    tmppriority = (0x700 - ((SCB->AIRCR) & (uint32_t)0x700))>> 0x08;
 8000758:	4b27      	ldr	r3, [pc, #156]	; (80007f8 <NVIC_Init+0xbc>)
 800075a:	68db      	ldr	r3, [r3, #12]
 800075c:	43db      	mvns	r3, r3
 800075e:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8000762:	0a1b      	lsrs	r3, r3, #8
 8000764:	617b      	str	r3, [r7, #20]
    tmppre = (0x4 - tmppriority);
 8000766:	697b      	ldr	r3, [r7, #20]
 8000768:	f1c3 0304 	rsb	r3, r3, #4
 800076c:	613b      	str	r3, [r7, #16]
    tmpsub = tmpsub >> tmppriority;
 800076e:	68fa      	ldr	r2, [r7, #12]
 8000770:	697b      	ldr	r3, [r7, #20]
 8000772:	fa22 f303 	lsr.w	r3, r2, r3
 8000776:	60fb      	str	r3, [r7, #12]

    tmppriority = (uint32_t)NVIC_InitStruct->NVIC_IRQChannelPreemptionPriority << tmppre;
 8000778:	687b      	ldr	r3, [r7, #4]
 800077a:	785b      	ldrb	r3, [r3, #1]
 800077c:	461a      	mov	r2, r3
 800077e:	693b      	ldr	r3, [r7, #16]
 8000780:	fa02 f303 	lsl.w	r3, r2, r3
 8000784:	617b      	str	r3, [r7, #20]
    tmppriority |=  NVIC_InitStruct->NVIC_IRQChannelSubPriority & tmpsub;
 8000786:	687b      	ldr	r3, [r7, #4]
 8000788:	789b      	ldrb	r3, [r3, #2]
 800078a:	461a      	mov	r2, r3
 800078c:	68fb      	ldr	r3, [r7, #12]
 800078e:	4013      	ands	r3, r2
 8000790:	697a      	ldr	r2, [r7, #20]
 8000792:	4313      	orrs	r3, r2
 8000794:	617b      	str	r3, [r7, #20]
    tmppriority = tmppriority << 0x04;
 8000796:	697b      	ldr	r3, [r7, #20]
 8000798:	011b      	lsls	r3, r3, #4
 800079a:	617b      	str	r3, [r7, #20]
        
    NVIC->IP[NVIC_InitStruct->NVIC_IRQChannel] = tmppriority;
 800079c:	4a17      	ldr	r2, [pc, #92]	; (80007fc <NVIC_Init+0xc0>)
 800079e:	687b      	ldr	r3, [r7, #4]
 80007a0:	781b      	ldrb	r3, [r3, #0]
 80007a2:	6979      	ldr	r1, [r7, #20]
 80007a4:	b2c9      	uxtb	r1, r1
 80007a6:	4413      	add	r3, r2
 80007a8:	460a      	mov	r2, r1
 80007aa:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
    
    /* Enable the Selected IRQ Channels --------------------------------------*/
    NVIC->ISER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
 80007ae:	4a13      	ldr	r2, [pc, #76]	; (80007fc <NVIC_Init+0xc0>)
 80007b0:	687b      	ldr	r3, [r7, #4]
 80007b2:	781b      	ldrb	r3, [r3, #0]
 80007b4:	095b      	lsrs	r3, r3, #5
 80007b6:	b2db      	uxtb	r3, r3
 80007b8:	4618      	mov	r0, r3
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
 80007ba:	687b      	ldr	r3, [r7, #4]
 80007bc:	781b      	ldrb	r3, [r3, #0]
 80007be:	f003 031f 	and.w	r3, r3, #31
 80007c2:	2101      	movs	r1, #1
 80007c4:	fa01 f303 	lsl.w	r3, r1, r3
    tmppriority = tmppriority << 0x04;
        
    NVIC->IP[NVIC_InitStruct->NVIC_IRQChannel] = tmppriority;
    
    /* Enable the Selected IRQ Channels --------------------------------------*/
    NVIC->ISER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
 80007c8:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
  {
    /* Disable the Selected IRQ Channels -------------------------------------*/
    NVIC->ICER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
  }
}
 80007cc:	e00f      	b.n	80007ee <NVIC_Init+0xb2>
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
  }
  else
  {
    /* Disable the Selected IRQ Channels -------------------------------------*/
    NVIC->ICER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
 80007ce:	490b      	ldr	r1, [pc, #44]	; (80007fc <NVIC_Init+0xc0>)
 80007d0:	687b      	ldr	r3, [r7, #4]
 80007d2:	781b      	ldrb	r3, [r3, #0]
 80007d4:	095b      	lsrs	r3, r3, #5
 80007d6:	b2db      	uxtb	r3, r3
 80007d8:	4618      	mov	r0, r3
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
 80007da:	687b      	ldr	r3, [r7, #4]
 80007dc:	781b      	ldrb	r3, [r3, #0]
 80007de:	f003 031f 	and.w	r3, r3, #31
 80007e2:	2201      	movs	r2, #1
 80007e4:	409a      	lsls	r2, r3
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
  }
  else
  {
    /* Disable the Selected IRQ Channels -------------------------------------*/
    NVIC->ICER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
 80007e6:	f100 0320 	add.w	r3, r0, #32
 80007ea:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
  }
}
 80007ee:	bf00      	nop
 80007f0:	371c      	adds	r7, #28
 80007f2:	46bd      	mov	sp, r7
 80007f4:	bc80      	pop	{r7}
 80007f6:	4770      	bx	lr
 80007f8:	e000ed00 	.word	0xe000ed00
 80007fc:	e000e100 	.word	0xe000e100

08000800 <GPIO_Init>:
  * @param  GPIO_InitStruct: pointer to a GPIO_InitTypeDef structure that
  *         contains the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void GPIO_Init(GPIO_TypeDef* GPIOx, GPIO_InitTypeDef* GPIO_InitStruct)
{
 8000800:	b480      	push	{r7}
 8000802:	b089      	sub	sp, #36	; 0x24
 8000804:	af00      	add	r7, sp, #0
 8000806:	6078      	str	r0, [r7, #4]
 8000808:	6039      	str	r1, [r7, #0]
  uint32_t currentmode = 0x00, currentpin = 0x00, pinpos = 0x00, pos = 0x00;
 800080a:	2300      	movs	r3, #0
 800080c:	61fb      	str	r3, [r7, #28]
 800080e:	2300      	movs	r3, #0
 8000810:	613b      	str	r3, [r7, #16]
 8000812:	2300      	movs	r3, #0
 8000814:	61bb      	str	r3, [r7, #24]
 8000816:	2300      	movs	r3, #0
 8000818:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg = 0x00, pinmask = 0x00;
 800081a:	2300      	movs	r3, #0
 800081c:	617b      	str	r3, [r7, #20]
 800081e:	2300      	movs	r3, #0
 8000820:	60bb      	str	r3, [r7, #8]
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GPIO_MODE(GPIO_InitStruct->GPIO_Mode));
  assert_param(IS_GPIO_PIN(GPIO_InitStruct->GPIO_Pin));  
  
/*---------------------------- GPIO Mode Configuration -----------------------*/
  currentmode = ((uint32_t)GPIO_InitStruct->GPIO_Mode) & ((uint32_t)0x0F);
 8000822:	683b      	ldr	r3, [r7, #0]
 8000824:	78db      	ldrb	r3, [r3, #3]
 8000826:	f003 030f 	and.w	r3, r3, #15
 800082a:	61fb      	str	r3, [r7, #28]
  if ((((uint32_t)GPIO_InitStruct->GPIO_Mode) & ((uint32_t)0x10)) != 0x00)
 800082c:	683b      	ldr	r3, [r7, #0]
 800082e:	78db      	ldrb	r3, [r3, #3]
 8000830:	f003 0310 	and.w	r3, r3, #16
 8000834:	2b00      	cmp	r3, #0
 8000836:	d005      	beq.n	8000844 <GPIO_Init+0x44>
  { 
    /* Check the parameters */
    assert_param(IS_GPIO_SPEED(GPIO_InitStruct->GPIO_Speed));
    /* Output mode */
    currentmode |= (uint32_t)GPIO_InitStruct->GPIO_Speed;
 8000838:	683b      	ldr	r3, [r7, #0]
 800083a:	789b      	ldrb	r3, [r3, #2]
 800083c:	461a      	mov	r2, r3
 800083e:	69fb      	ldr	r3, [r7, #28]
 8000840:	4313      	orrs	r3, r2
 8000842:	61fb      	str	r3, [r7, #28]
  }
/*---------------------------- GPIO CRL Configuration ------------------------*/
  /* Configure the eight low port pins */
  if (((uint32_t)GPIO_InitStruct->GPIO_Pin & ((uint32_t)0x00FF)) != 0x00)
 8000844:	683b      	ldr	r3, [r7, #0]
 8000846:	881b      	ldrh	r3, [r3, #0]
 8000848:	b2db      	uxtb	r3, r3
 800084a:	2b00      	cmp	r3, #0
 800084c:	d044      	beq.n	80008d8 <GPIO_Init+0xd8>
  {
    tmpreg = GPIOx->CRL;
 800084e:	687b      	ldr	r3, [r7, #4]
 8000850:	681b      	ldr	r3, [r3, #0]
 8000852:	617b      	str	r3, [r7, #20]
    for (pinpos = 0x00; pinpos < 0x08; pinpos++)
 8000854:	2300      	movs	r3, #0
 8000856:	61bb      	str	r3, [r7, #24]
 8000858:	e038      	b.n	80008cc <GPIO_Init+0xcc>
    {
      pos = ((uint32_t)0x01) << pinpos;
 800085a:	2201      	movs	r2, #1
 800085c:	69bb      	ldr	r3, [r7, #24]
 800085e:	fa02 f303 	lsl.w	r3, r2, r3
 8000862:	60fb      	str	r3, [r7, #12]
      /* Get the port pins position */
      currentpin = (GPIO_InitStruct->GPIO_Pin) & pos;
 8000864:	683b      	ldr	r3, [r7, #0]
 8000866:	881b      	ldrh	r3, [r3, #0]
 8000868:	461a      	mov	r2, r3
 800086a:	68fb      	ldr	r3, [r7, #12]
 800086c:	4013      	ands	r3, r2
 800086e:	613b      	str	r3, [r7, #16]
      if (currentpin == pos)
 8000870:	693a      	ldr	r2, [r7, #16]
 8000872:	68fb      	ldr	r3, [r7, #12]
 8000874:	429a      	cmp	r2, r3
 8000876:	d126      	bne.n	80008c6 <GPIO_Init+0xc6>
      {
        pos = pinpos << 2;
 8000878:	69bb      	ldr	r3, [r7, #24]
 800087a:	009b      	lsls	r3, r3, #2
 800087c:	60fb      	str	r3, [r7, #12]
        /* Clear the corresponding low control register bits */
        pinmask = ((uint32_t)0x0F) << pos;
 800087e:	220f      	movs	r2, #15
 8000880:	68fb      	ldr	r3, [r7, #12]
 8000882:	fa02 f303 	lsl.w	r3, r2, r3
 8000886:	60bb      	str	r3, [r7, #8]
        tmpreg &= ~pinmask;
 8000888:	68bb      	ldr	r3, [r7, #8]
 800088a:	43db      	mvns	r3, r3
 800088c:	697a      	ldr	r2, [r7, #20]
 800088e:	4013      	ands	r3, r2
 8000890:	617b      	str	r3, [r7, #20]
        /* Write the mode configuration in the corresponding bits */
        tmpreg |= (currentmode << pos);
 8000892:	69fa      	ldr	r2, [r7, #28]
 8000894:	68fb      	ldr	r3, [r7, #12]
 8000896:	fa02 f303 	lsl.w	r3, r2, r3
 800089a:	697a      	ldr	r2, [r7, #20]
 800089c:	4313      	orrs	r3, r2
 800089e:	617b      	str	r3, [r7, #20]
        /* Reset the corresponding ODR bit */
        if (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_IPD)
 80008a0:	683b      	ldr	r3, [r7, #0]
 80008a2:	78db      	ldrb	r3, [r3, #3]
 80008a4:	2b28      	cmp	r3, #40	; 0x28
 80008a6:	d105      	bne.n	80008b4 <GPIO_Init+0xb4>
        {
          GPIOx->BRR = (((uint32_t)0x01) << pinpos);
 80008a8:	2201      	movs	r2, #1
 80008aa:	69bb      	ldr	r3, [r7, #24]
 80008ac:	409a      	lsls	r2, r3
 80008ae:	687b      	ldr	r3, [r7, #4]
 80008b0:	615a      	str	r2, [r3, #20]
 80008b2:	e008      	b.n	80008c6 <GPIO_Init+0xc6>
        }
        else
        {
          /* Set the corresponding ODR bit */
          if (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_IPU)
 80008b4:	683b      	ldr	r3, [r7, #0]
 80008b6:	78db      	ldrb	r3, [r3, #3]
 80008b8:	2b48      	cmp	r3, #72	; 0x48
 80008ba:	d104      	bne.n	80008c6 <GPIO_Init+0xc6>
          {
            GPIOx->BSRR = (((uint32_t)0x01) << pinpos);
 80008bc:	2201      	movs	r2, #1
 80008be:	69bb      	ldr	r3, [r7, #24]
 80008c0:	409a      	lsls	r2, r3
 80008c2:	687b      	ldr	r3, [r7, #4]
 80008c4:	611a      	str	r2, [r3, #16]
/*---------------------------- GPIO CRL Configuration ------------------------*/
  /* Configure the eight low port pins */
  if (((uint32_t)GPIO_InitStruct->GPIO_Pin & ((uint32_t)0x00FF)) != 0x00)
  {
    tmpreg = GPIOx->CRL;
    for (pinpos = 0x00; pinpos < 0x08; pinpos++)
 80008c6:	69bb      	ldr	r3, [r7, #24]
 80008c8:	3301      	adds	r3, #1
 80008ca:	61bb      	str	r3, [r7, #24]
 80008cc:	69bb      	ldr	r3, [r7, #24]
 80008ce:	2b07      	cmp	r3, #7
 80008d0:	d9c3      	bls.n	800085a <GPIO_Init+0x5a>
            GPIOx->BSRR = (((uint32_t)0x01) << pinpos);
          }
        }
      }
    }
    GPIOx->CRL = tmpreg;
 80008d2:	687b      	ldr	r3, [r7, #4]
 80008d4:	697a      	ldr	r2, [r7, #20]
 80008d6:	601a      	str	r2, [r3, #0]
  }
/*---------------------------- GPIO CRH Configuration ------------------------*/
  /* Configure the eight high port pins */
  if (GPIO_InitStruct->GPIO_Pin > 0x00FF)
 80008d8:	683b      	ldr	r3, [r7, #0]
 80008da:	881b      	ldrh	r3, [r3, #0]
 80008dc:	2bff      	cmp	r3, #255	; 0xff
 80008de:	d946      	bls.n	800096e <GPIO_Init+0x16e>
  {
    tmpreg = GPIOx->CRH;
 80008e0:	687b      	ldr	r3, [r7, #4]
 80008e2:	685b      	ldr	r3, [r3, #4]
 80008e4:	617b      	str	r3, [r7, #20]
    for (pinpos = 0x00; pinpos < 0x08; pinpos++)
 80008e6:	2300      	movs	r3, #0
 80008e8:	61bb      	str	r3, [r7, #24]
 80008ea:	e03a      	b.n	8000962 <GPIO_Init+0x162>
    {
      pos = (((uint32_t)0x01) << (pinpos + 0x08));
 80008ec:	69bb      	ldr	r3, [r7, #24]
 80008ee:	3308      	adds	r3, #8
 80008f0:	2201      	movs	r2, #1
 80008f2:	fa02 f303 	lsl.w	r3, r2, r3
 80008f6:	60fb      	str	r3, [r7, #12]
      /* Get the port pins position */
      currentpin = ((GPIO_InitStruct->GPIO_Pin) & pos);
 80008f8:	683b      	ldr	r3, [r7, #0]
 80008fa:	881b      	ldrh	r3, [r3, #0]
 80008fc:	461a      	mov	r2, r3
 80008fe:	68fb      	ldr	r3, [r7, #12]
 8000900:	4013      	ands	r3, r2
 8000902:	613b      	str	r3, [r7, #16]
      if (currentpin == pos)
 8000904:	693a      	ldr	r2, [r7, #16]
 8000906:	68fb      	ldr	r3, [r7, #12]
 8000908:	429a      	cmp	r2, r3
 800090a:	d127      	bne.n	800095c <GPIO_Init+0x15c>
      {
        pos = pinpos << 2;
 800090c:	69bb      	ldr	r3, [r7, #24]
 800090e:	009b      	lsls	r3, r3, #2
 8000910:	60fb      	str	r3, [r7, #12]
        /* Clear the corresponding high control register bits */
        pinmask = ((uint32_t)0x0F) << pos;
 8000912:	220f      	movs	r2, #15
 8000914:	68fb      	ldr	r3, [r7, #12]
 8000916:	fa02 f303 	lsl.w	r3, r2, r3
 800091a:	60bb      	str	r3, [r7, #8]
        tmpreg &= ~pinmask;
 800091c:	68bb      	ldr	r3, [r7, #8]
 800091e:	43db      	mvns	r3, r3
 8000920:	697a      	ldr	r2, [r7, #20]
 8000922:	4013      	ands	r3, r2
 8000924:	617b      	str	r3, [r7, #20]
        /* Write the mode configuration in the corresponding bits */
        tmpreg |= (currentmode << pos);
 8000926:	69fa      	ldr	r2, [r7, #28]
 8000928:	68fb      	ldr	r3, [r7, #12]
 800092a:	fa02 f303 	lsl.w	r3, r2, r3
 800092e:	697a      	ldr	r2, [r7, #20]
 8000930:	4313      	orrs	r3, r2
 8000932:	617b      	str	r3, [r7, #20]
        /* Reset the corresponding ODR bit */
        if (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_IPD)
 8000934:	683b      	ldr	r3, [r7, #0]
 8000936:	78db      	ldrb	r3, [r3, #3]
 8000938:	2b28      	cmp	r3, #40	; 0x28
 800093a:	d105      	bne.n	8000948 <GPIO_Init+0x148>
        {
          GPIOx->BRR = (((uint32_t)0x01) << (pinpos + 0x08));
 800093c:	69bb      	ldr	r3, [r7, #24]
 800093e:	3308      	adds	r3, #8
 8000940:	2201      	movs	r2, #1
 8000942:	409a      	lsls	r2, r3
 8000944:	687b      	ldr	r3, [r7, #4]
 8000946:	615a      	str	r2, [r3, #20]
        }
        /* Set the corresponding ODR bit */
        if (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_IPU)
 8000948:	683b      	ldr	r3, [r7, #0]
 800094a:	78db      	ldrb	r3, [r3, #3]
 800094c:	2b48      	cmp	r3, #72	; 0x48
 800094e:	d105      	bne.n	800095c <GPIO_Init+0x15c>
        {
          GPIOx->BSRR = (((uint32_t)0x01) << (pinpos + 0x08));
 8000950:	69bb      	ldr	r3, [r7, #24]
 8000952:	3308      	adds	r3, #8
 8000954:	2201      	movs	r2, #1
 8000956:	409a      	lsls	r2, r3
 8000958:	687b      	ldr	r3, [r7, #4]
 800095a:	611a      	str	r2, [r3, #16]
/*---------------------------- GPIO CRH Configuration ------------------------*/
  /* Configure the eight high port pins */
  if (GPIO_InitStruct->GPIO_Pin > 0x00FF)
  {
    tmpreg = GPIOx->CRH;
    for (pinpos = 0x00; pinpos < 0x08; pinpos++)
 800095c:	69bb      	ldr	r3, [r7, #24]
 800095e:	3301      	adds	r3, #1
 8000960:	61bb      	str	r3, [r7, #24]
 8000962:	69bb      	ldr	r3, [r7, #24]
 8000964:	2b07      	cmp	r3, #7
 8000966:	d9c1      	bls.n	80008ec <GPIO_Init+0xec>
        {
          GPIOx->BSRR = (((uint32_t)0x01) << (pinpos + 0x08));
        }
      }
    }
    GPIOx->CRH = tmpreg;
 8000968:	687b      	ldr	r3, [r7, #4]
 800096a:	697a      	ldr	r2, [r7, #20]
 800096c:	605a      	str	r2, [r3, #4]
  }
}
 800096e:	bf00      	nop
 8000970:	3724      	adds	r7, #36	; 0x24
 8000972:	46bd      	mov	sp, r7
 8000974:	bc80      	pop	{r7}
 8000976:	4770      	bx	lr

08000978 <GPIO_SetBits>:
  * @param  GPIO_Pin: specifies the port bits to be written.
  *   This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void GPIO_SetBits(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8000978:	b480      	push	{r7}
 800097a:	b083      	sub	sp, #12
 800097c:	af00      	add	r7, sp, #0
 800097e:	6078      	str	r0, [r7, #4]
 8000980:	460b      	mov	r3, r1
 8000982:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  
  GPIOx->BSRR = GPIO_Pin;
 8000984:	887a      	ldrh	r2, [r7, #2]
 8000986:	687b      	ldr	r3, [r7, #4]
 8000988:	611a      	str	r2, [r3, #16]
}
 800098a:	bf00      	nop
 800098c:	370c      	adds	r7, #12
 800098e:	46bd      	mov	sp, r7
 8000990:	bc80      	pop	{r7}
 8000992:	4770      	bx	lr

08000994 <GPIO_ResetBits>:
  * @param  GPIO_Pin: specifies the port bits to be written.
  *   This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void GPIO_ResetBits(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8000994:	b480      	push	{r7}
 8000996:	b083      	sub	sp, #12
 8000998:	af00      	add	r7, sp, #0
 800099a:	6078      	str	r0, [r7, #4]
 800099c:	460b      	mov	r3, r1
 800099e:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  
  GPIOx->BRR = GPIO_Pin;
 80009a0:	887a      	ldrh	r2, [r7, #2]
 80009a2:	687b      	ldr	r3, [r7, #4]
 80009a4:	615a      	str	r2, [r3, #20]
}
 80009a6:	bf00      	nop
 80009a8:	370c      	adds	r7, #12
 80009aa:	46bd      	mov	sp, r7
 80009ac:	bc80      	pop	{r7}
 80009ae:	4770      	bx	lr

080009b0 <GPIO_WriteBit>:
  *     @arg Bit_RESET: to clear the port pin
  *     @arg Bit_SET: to set the port pin
  * @retval None
  */
void GPIO_WriteBit(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, BitAction BitVal)
{
 80009b0:	b480      	push	{r7}
 80009b2:	b083      	sub	sp, #12
 80009b4:	af00      	add	r7, sp, #0
 80009b6:	6078      	str	r0, [r7, #4]
 80009b8:	460b      	mov	r3, r1
 80009ba:	807b      	strh	r3, [r7, #2]
 80009bc:	4613      	mov	r3, r2
 80009be:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GET_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_BIT_ACTION(BitVal)); 
  
  if (BitVal != Bit_RESET)
 80009c0:	787b      	ldrb	r3, [r7, #1]
 80009c2:	2b00      	cmp	r3, #0
 80009c4:	d003      	beq.n	80009ce <GPIO_WriteBit+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80009c6:	887a      	ldrh	r2, [r7, #2]
 80009c8:	687b      	ldr	r3, [r7, #4]
 80009ca:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BRR = GPIO_Pin;
  }
}
 80009cc:	e002      	b.n	80009d4 <GPIO_WriteBit+0x24>
  {
    GPIOx->BSRR = GPIO_Pin;
  }
  else
  {
    GPIOx->BRR = GPIO_Pin;
 80009ce:	887a      	ldrh	r2, [r7, #2]
 80009d0:	687b      	ldr	r3, [r7, #4]
 80009d2:	615a      	str	r2, [r3, #20]
  }
}
 80009d4:	bf00      	nop
 80009d6:	370c      	adds	r7, #12
 80009d8:	46bd      	mov	sp, r7
 80009da:	bc80      	pop	{r7}
 80009dc:	4770      	bx	lr
 80009de:	bf00      	nop

080009e0 <RCC_GetClocksFreq>:
  * @note   The result of this function could be not correct when using 
  *         fractional value for HSE crystal.  
  * @retval None
  */
void RCC_GetClocksFreq(RCC_ClocksTypeDef* RCC_Clocks)
{
 80009e0:	b480      	push	{r7}
 80009e2:	b089      	sub	sp, #36	; 0x24
 80009e4:	af00      	add	r7, sp, #0
 80009e6:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0, pllmull = 0, pllsource = 0, presc = 0;
 80009e8:	2300      	movs	r3, #0
 80009ea:	61fb      	str	r3, [r7, #28]
 80009ec:	2300      	movs	r3, #0
 80009ee:	61bb      	str	r3, [r7, #24]
 80009f0:	2300      	movs	r3, #0
 80009f2:	617b      	str	r3, [r7, #20]
 80009f4:	2300      	movs	r3, #0
 80009f6:	613b      	str	r3, [r7, #16]
#ifdef  STM32F10X_CL
  uint32_t prediv1source = 0, prediv1factor = 0, prediv2factor = 0, pll2mull = 0;
#endif /* STM32F10X_CL */

#if defined (STM32F10X_LD_VL) || defined (STM32F10X_MD_VL) || defined (STM32F10X_HD_VL)
  uint32_t prediv1factor = 0;
 80009f8:	2300      	movs	r3, #0
 80009fa:	60fb      	str	r3, [r7, #12]
#endif
    
  /* Get SYSCLK source -------------------------------------------------------*/
  tmp = RCC->CFGR & CFGR_SWS_Mask;
 80009fc:	4b4a      	ldr	r3, [pc, #296]	; (8000b28 <RCC_GetClocksFreq+0x148>)
 80009fe:	685b      	ldr	r3, [r3, #4]
 8000a00:	f003 030c 	and.w	r3, r3, #12
 8000a04:	61fb      	str	r3, [r7, #28]
  
  switch (tmp)
 8000a06:	69fb      	ldr	r3, [r7, #28]
 8000a08:	2b04      	cmp	r3, #4
 8000a0a:	d007      	beq.n	8000a1c <RCC_GetClocksFreq+0x3c>
 8000a0c:	2b08      	cmp	r3, #8
 8000a0e:	d009      	beq.n	8000a24 <RCC_GetClocksFreq+0x44>
 8000a10:	2b00      	cmp	r3, #0
 8000a12:	d12f      	bne.n	8000a74 <RCC_GetClocksFreq+0x94>
  {
    case 0x00:  /* HSI used as system clock */
      RCC_Clocks->SYSCLK_Frequency = HSI_VALUE;
 8000a14:	687b      	ldr	r3, [r7, #4]
 8000a16:	4a45      	ldr	r2, [pc, #276]	; (8000b2c <RCC_GetClocksFreq+0x14c>)
 8000a18:	601a      	str	r2, [r3, #0]
      break;
 8000a1a:	e02f      	b.n	8000a7c <RCC_GetClocksFreq+0x9c>
    case 0x04:  /* HSE used as system clock */
      RCC_Clocks->SYSCLK_Frequency = HSE_VALUE;
 8000a1c:	687b      	ldr	r3, [r7, #4]
 8000a1e:	4a43      	ldr	r2, [pc, #268]	; (8000b2c <RCC_GetClocksFreq+0x14c>)
 8000a20:	601a      	str	r2, [r3, #0]
      break;
 8000a22:	e02b      	b.n	8000a7c <RCC_GetClocksFreq+0x9c>
    case 0x08:  /* PLL used as system clock */

      /* Get PLL clock source and multiplication factor ----------------------*/
      pllmull = RCC->CFGR & CFGR_PLLMull_Mask;
 8000a24:	4b40      	ldr	r3, [pc, #256]	; (8000b28 <RCC_GetClocksFreq+0x148>)
 8000a26:	685b      	ldr	r3, [r3, #4]
 8000a28:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 8000a2c:	61bb      	str	r3, [r7, #24]
      pllsource = RCC->CFGR & CFGR_PLLSRC_Mask;
 8000a2e:	4b3e      	ldr	r3, [pc, #248]	; (8000b28 <RCC_GetClocksFreq+0x148>)
 8000a30:	685b      	ldr	r3, [r3, #4]
 8000a32:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000a36:	617b      	str	r3, [r7, #20]
      
#ifndef STM32F10X_CL      
      pllmull = ( pllmull >> 18) + 2;
 8000a38:	69bb      	ldr	r3, [r7, #24]
 8000a3a:	0c9b      	lsrs	r3, r3, #18
 8000a3c:	3302      	adds	r3, #2
 8000a3e:	61bb      	str	r3, [r7, #24]
      
      if (pllsource == 0x00)
 8000a40:	697b      	ldr	r3, [r7, #20]
 8000a42:	2b00      	cmp	r3, #0
 8000a44:	d106      	bne.n	8000a54 <RCC_GetClocksFreq+0x74>
      {/* HSI oscillator clock divided by 2 selected as PLL clock entry */
        RCC_Clocks->SYSCLK_Frequency = (HSI_VALUE >> 1) * pllmull;
 8000a46:	69bb      	ldr	r3, [r7, #24]
 8000a48:	4a39      	ldr	r2, [pc, #228]	; (8000b30 <RCC_GetClocksFreq+0x150>)
 8000a4a:	fb02 f203 	mul.w	r2, r2, r3
 8000a4e:	687b      	ldr	r3, [r7, #4]
 8000a50:	601a      	str	r2, [r3, #0]
          pll2mull = ((RCC->CFGR2 & CFGR2_PLL2MUL) >> 8 ) + 2; 
          RCC_Clocks->SYSCLK_Frequency = (((HSE_VALUE / prediv2factor) * pll2mull) / prediv1factor) * pllmull;                         
        }
      }
#endif /* STM32F10X_CL */ 
      break;
 8000a52:	e013      	b.n	8000a7c <RCC_GetClocksFreq+0x9c>
        RCC_Clocks->SYSCLK_Frequency = (HSI_VALUE >> 1) * pllmull;
      }
      else
      {
 #if defined (STM32F10X_LD_VL) || defined (STM32F10X_MD_VL) || defined (STM32F10X_HD_VL)
       prediv1factor = (RCC->CFGR2 & CFGR2_PREDIV1) + 1;
 8000a54:	4b34      	ldr	r3, [pc, #208]	; (8000b28 <RCC_GetClocksFreq+0x148>)
 8000a56:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000a58:	f003 030f 	and.w	r3, r3, #15
 8000a5c:	3301      	adds	r3, #1
 8000a5e:	60fb      	str	r3, [r7, #12]
       /* HSE oscillator clock selected as PREDIV1 clock entry */
       RCC_Clocks->SYSCLK_Frequency = (HSE_VALUE / prediv1factor) * pllmull; 
 8000a60:	4a32      	ldr	r2, [pc, #200]	; (8000b2c <RCC_GetClocksFreq+0x14c>)
 8000a62:	68fb      	ldr	r3, [r7, #12]
 8000a64:	fbb2 f3f3 	udiv	r3, r2, r3
 8000a68:	69ba      	ldr	r2, [r7, #24]
 8000a6a:	fb02 f203 	mul.w	r2, r2, r3
 8000a6e:	687b      	ldr	r3, [r7, #4]
 8000a70:	601a      	str	r2, [r3, #0]
          pll2mull = ((RCC->CFGR2 & CFGR2_PLL2MUL) >> 8 ) + 2; 
          RCC_Clocks->SYSCLK_Frequency = (((HSE_VALUE / prediv2factor) * pll2mull) / prediv1factor) * pllmull;                         
        }
      }
#endif /* STM32F10X_CL */ 
      break;
 8000a72:	e003      	b.n	8000a7c <RCC_GetClocksFreq+0x9c>

    default:
      RCC_Clocks->SYSCLK_Frequency = HSI_VALUE;
 8000a74:	687b      	ldr	r3, [r7, #4]
 8000a76:	4a2d      	ldr	r2, [pc, #180]	; (8000b2c <RCC_GetClocksFreq+0x14c>)
 8000a78:	601a      	str	r2, [r3, #0]
      break;
 8000a7a:	bf00      	nop
  }

  /* Compute HCLK, PCLK1, PCLK2 and ADCCLK clocks frequencies ----------------*/
  /* Get HCLK prescaler */
  tmp = RCC->CFGR & CFGR_HPRE_Set_Mask;
 8000a7c:	4b2a      	ldr	r3, [pc, #168]	; (8000b28 <RCC_GetClocksFreq+0x148>)
 8000a7e:	685b      	ldr	r3, [r3, #4]
 8000a80:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8000a84:	61fb      	str	r3, [r7, #28]
  tmp = tmp >> 4;
 8000a86:	69fb      	ldr	r3, [r7, #28]
 8000a88:	091b      	lsrs	r3, r3, #4
 8000a8a:	61fb      	str	r3, [r7, #28]
  presc = APBAHBPrescTable[tmp];
 8000a8c:	4a29      	ldr	r2, [pc, #164]	; (8000b34 <RCC_GetClocksFreq+0x154>)
 8000a8e:	69fb      	ldr	r3, [r7, #28]
 8000a90:	4413      	add	r3, r2
 8000a92:	781b      	ldrb	r3, [r3, #0]
 8000a94:	b2db      	uxtb	r3, r3
 8000a96:	613b      	str	r3, [r7, #16]
  /* HCLK clock frequency */
  RCC_Clocks->HCLK_Frequency = RCC_Clocks->SYSCLK_Frequency >> presc;
 8000a98:	687b      	ldr	r3, [r7, #4]
 8000a9a:	681a      	ldr	r2, [r3, #0]
 8000a9c:	693b      	ldr	r3, [r7, #16]
 8000a9e:	40da      	lsrs	r2, r3
 8000aa0:	687b      	ldr	r3, [r7, #4]
 8000aa2:	605a      	str	r2, [r3, #4]
  /* Get PCLK1 prescaler */
  tmp = RCC->CFGR & CFGR_PPRE1_Set_Mask;
 8000aa4:	4b20      	ldr	r3, [pc, #128]	; (8000b28 <RCC_GetClocksFreq+0x148>)
 8000aa6:	685b      	ldr	r3, [r3, #4]
 8000aa8:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8000aac:	61fb      	str	r3, [r7, #28]
  tmp = tmp >> 8;
 8000aae:	69fb      	ldr	r3, [r7, #28]
 8000ab0:	0a1b      	lsrs	r3, r3, #8
 8000ab2:	61fb      	str	r3, [r7, #28]
  presc = APBAHBPrescTable[tmp];
 8000ab4:	4a1f      	ldr	r2, [pc, #124]	; (8000b34 <RCC_GetClocksFreq+0x154>)
 8000ab6:	69fb      	ldr	r3, [r7, #28]
 8000ab8:	4413      	add	r3, r2
 8000aba:	781b      	ldrb	r3, [r3, #0]
 8000abc:	b2db      	uxtb	r3, r3
 8000abe:	613b      	str	r3, [r7, #16]
  /* PCLK1 clock frequency */
  RCC_Clocks->PCLK1_Frequency = RCC_Clocks->HCLK_Frequency >> presc;
 8000ac0:	687b      	ldr	r3, [r7, #4]
 8000ac2:	685a      	ldr	r2, [r3, #4]
 8000ac4:	693b      	ldr	r3, [r7, #16]
 8000ac6:	40da      	lsrs	r2, r3
 8000ac8:	687b      	ldr	r3, [r7, #4]
 8000aca:	609a      	str	r2, [r3, #8]
  /* Get PCLK2 prescaler */
  tmp = RCC->CFGR & CFGR_PPRE2_Set_Mask;
 8000acc:	4b16      	ldr	r3, [pc, #88]	; (8000b28 <RCC_GetClocksFreq+0x148>)
 8000ace:	685b      	ldr	r3, [r3, #4]
 8000ad0:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
 8000ad4:	61fb      	str	r3, [r7, #28]
  tmp = tmp >> 11;
 8000ad6:	69fb      	ldr	r3, [r7, #28]
 8000ad8:	0adb      	lsrs	r3, r3, #11
 8000ada:	61fb      	str	r3, [r7, #28]
  presc = APBAHBPrescTable[tmp];
 8000adc:	4a15      	ldr	r2, [pc, #84]	; (8000b34 <RCC_GetClocksFreq+0x154>)
 8000ade:	69fb      	ldr	r3, [r7, #28]
 8000ae0:	4413      	add	r3, r2
 8000ae2:	781b      	ldrb	r3, [r3, #0]
 8000ae4:	b2db      	uxtb	r3, r3
 8000ae6:	613b      	str	r3, [r7, #16]
  /* PCLK2 clock frequency */
  RCC_Clocks->PCLK2_Frequency = RCC_Clocks->HCLK_Frequency >> presc;
 8000ae8:	687b      	ldr	r3, [r7, #4]
 8000aea:	685a      	ldr	r2, [r3, #4]
 8000aec:	693b      	ldr	r3, [r7, #16]
 8000aee:	40da      	lsrs	r2, r3
 8000af0:	687b      	ldr	r3, [r7, #4]
 8000af2:	60da      	str	r2, [r3, #12]
  /* Get ADCCLK prescaler */
  tmp = RCC->CFGR & CFGR_ADCPRE_Set_Mask;
 8000af4:	4b0c      	ldr	r3, [pc, #48]	; (8000b28 <RCC_GetClocksFreq+0x148>)
 8000af6:	685b      	ldr	r3, [r3, #4]
 8000af8:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000afc:	61fb      	str	r3, [r7, #28]
  tmp = tmp >> 14;
 8000afe:	69fb      	ldr	r3, [r7, #28]
 8000b00:	0b9b      	lsrs	r3, r3, #14
 8000b02:	61fb      	str	r3, [r7, #28]
  presc = ADCPrescTable[tmp];
 8000b04:	4a0c      	ldr	r2, [pc, #48]	; (8000b38 <RCC_GetClocksFreq+0x158>)
 8000b06:	69fb      	ldr	r3, [r7, #28]
 8000b08:	4413      	add	r3, r2
 8000b0a:	781b      	ldrb	r3, [r3, #0]
 8000b0c:	b2db      	uxtb	r3, r3
 8000b0e:	613b      	str	r3, [r7, #16]
  /* ADCCLK clock frequency */
  RCC_Clocks->ADCCLK_Frequency = RCC_Clocks->PCLK2_Frequency / presc;
 8000b10:	687b      	ldr	r3, [r7, #4]
 8000b12:	68da      	ldr	r2, [r3, #12]
 8000b14:	693b      	ldr	r3, [r7, #16]
 8000b16:	fbb2 f2f3 	udiv	r2, r2, r3
 8000b1a:	687b      	ldr	r3, [r7, #4]
 8000b1c:	611a      	str	r2, [r3, #16]
}
 8000b1e:	bf00      	nop
 8000b20:	3724      	adds	r7, #36	; 0x24
 8000b22:	46bd      	mov	sp, r7
 8000b24:	bc80      	pop	{r7}
 8000b26:	4770      	bx	lr
 8000b28:	40021000 	.word	0x40021000
 8000b2c:	007a1200 	.word	0x007a1200
 8000b30:	003d0900 	.word	0x003d0900
 8000b34:	20000004 	.word	0x20000004
 8000b38:	20000014 	.word	0x20000014

08000b3c <RCC_APB2PeriphClockCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_APB2PeriphClockCmd(uint32_t RCC_APB2Periph, FunctionalState NewState)
{
 8000b3c:	b480      	push	{r7}
 8000b3e:	b083      	sub	sp, #12
 8000b40:	af00      	add	r7, sp, #0
 8000b42:	6078      	str	r0, [r7, #4]
 8000b44:	460b      	mov	r3, r1
 8000b46:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_APB2_PERIPH(RCC_APB2Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8000b48:	78fb      	ldrb	r3, [r7, #3]
 8000b4a:	2b00      	cmp	r3, #0
 8000b4c:	d006      	beq.n	8000b5c <RCC_APB2PeriphClockCmd+0x20>
  {
    RCC->APB2ENR |= RCC_APB2Periph;
 8000b4e:	4909      	ldr	r1, [pc, #36]	; (8000b74 <RCC_APB2PeriphClockCmd+0x38>)
 8000b50:	4b08      	ldr	r3, [pc, #32]	; (8000b74 <RCC_APB2PeriphClockCmd+0x38>)
 8000b52:	699a      	ldr	r2, [r3, #24]
 8000b54:	687b      	ldr	r3, [r7, #4]
 8000b56:	4313      	orrs	r3, r2
 8000b58:	618b      	str	r3, [r1, #24]
  }
  else
  {
    RCC->APB2ENR &= ~RCC_APB2Periph;
  }
}
 8000b5a:	e006      	b.n	8000b6a <RCC_APB2PeriphClockCmd+0x2e>
  {
    RCC->APB2ENR |= RCC_APB2Periph;
  }
  else
  {
    RCC->APB2ENR &= ~RCC_APB2Periph;
 8000b5c:	4905      	ldr	r1, [pc, #20]	; (8000b74 <RCC_APB2PeriphClockCmd+0x38>)
 8000b5e:	4b05      	ldr	r3, [pc, #20]	; (8000b74 <RCC_APB2PeriphClockCmd+0x38>)
 8000b60:	699a      	ldr	r2, [r3, #24]
 8000b62:	687b      	ldr	r3, [r7, #4]
 8000b64:	43db      	mvns	r3, r3
 8000b66:	4013      	ands	r3, r2
 8000b68:	618b      	str	r3, [r1, #24]
  }
}
 8000b6a:	bf00      	nop
 8000b6c:	370c      	adds	r7, #12
 8000b6e:	46bd      	mov	sp, r7
 8000b70:	bc80      	pop	{r7}
 8000b72:	4770      	bx	lr
 8000b74:	40021000 	.word	0x40021000

08000b78 <RCC_APB1PeriphClockCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_APB1PeriphClockCmd(uint32_t RCC_APB1Periph, FunctionalState NewState)
{
 8000b78:	b480      	push	{r7}
 8000b7a:	b083      	sub	sp, #12
 8000b7c:	af00      	add	r7, sp, #0
 8000b7e:	6078      	str	r0, [r7, #4]
 8000b80:	460b      	mov	r3, r1
 8000b82:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_APB1_PERIPH(RCC_APB1Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8000b84:	78fb      	ldrb	r3, [r7, #3]
 8000b86:	2b00      	cmp	r3, #0
 8000b88:	d006      	beq.n	8000b98 <RCC_APB1PeriphClockCmd+0x20>
  {
    RCC->APB1ENR |= RCC_APB1Periph;
 8000b8a:	4909      	ldr	r1, [pc, #36]	; (8000bb0 <RCC_APB1PeriphClockCmd+0x38>)
 8000b8c:	4b08      	ldr	r3, [pc, #32]	; (8000bb0 <RCC_APB1PeriphClockCmd+0x38>)
 8000b8e:	69da      	ldr	r2, [r3, #28]
 8000b90:	687b      	ldr	r3, [r7, #4]
 8000b92:	4313      	orrs	r3, r2
 8000b94:	61cb      	str	r3, [r1, #28]
  }
  else
  {
    RCC->APB1ENR &= ~RCC_APB1Periph;
  }
}
 8000b96:	e006      	b.n	8000ba6 <RCC_APB1PeriphClockCmd+0x2e>
  {
    RCC->APB1ENR |= RCC_APB1Periph;
  }
  else
  {
    RCC->APB1ENR &= ~RCC_APB1Periph;
 8000b98:	4905      	ldr	r1, [pc, #20]	; (8000bb0 <RCC_APB1PeriphClockCmd+0x38>)
 8000b9a:	4b05      	ldr	r3, [pc, #20]	; (8000bb0 <RCC_APB1PeriphClockCmd+0x38>)
 8000b9c:	69da      	ldr	r2, [r3, #28]
 8000b9e:	687b      	ldr	r3, [r7, #4]
 8000ba0:	43db      	mvns	r3, r3
 8000ba2:	4013      	ands	r3, r2
 8000ba4:	61cb      	str	r3, [r1, #28]
  }
}
 8000ba6:	bf00      	nop
 8000ba8:	370c      	adds	r7, #12
 8000baa:	46bd      	mov	sp, r7
 8000bac:	bc80      	pop	{r7}
 8000bae:	4770      	bx	lr
 8000bb0:	40021000 	.word	0x40021000

08000bb4 <SPI_Init>:
  * @param  SPI_InitStruct: pointer to a SPI_InitTypeDef structure that
  *         contains the configuration information for the specified SPI peripheral.
  * @retval None
  */
void SPI_Init(SPI_TypeDef* SPIx, SPI_InitTypeDef* SPI_InitStruct)
{
 8000bb4:	b480      	push	{r7}
 8000bb6:	b085      	sub	sp, #20
 8000bb8:	af00      	add	r7, sp, #0
 8000bba:	6078      	str	r0, [r7, #4]
 8000bbc:	6039      	str	r1, [r7, #0]
  uint16_t tmpreg = 0;
 8000bbe:	2300      	movs	r3, #0
 8000bc0:	81fb      	strh	r3, [r7, #14]
  assert_param(IS_SPI_FIRST_BIT(SPI_InitStruct->SPI_FirstBit));
  assert_param(IS_SPI_CRC_POLYNOMIAL(SPI_InitStruct->SPI_CRCPolynomial));

/*---------------------------- SPIx CR1 Configuration ------------------------*/
  /* Get the SPIx CR1 value */
  tmpreg = SPIx->CR1;
 8000bc2:	687b      	ldr	r3, [r7, #4]
 8000bc4:	881b      	ldrh	r3, [r3, #0]
 8000bc6:	81fb      	strh	r3, [r7, #14]
  /* Clear BIDIMode, BIDIOE, RxONLY, SSM, SSI, LSBFirst, BR, MSTR, CPOL and CPHA bits */
  tmpreg &= CR1_CLEAR_Mask;
 8000bc8:	89fb      	ldrh	r3, [r7, #14]
 8000bca:	f403 5341 	and.w	r3, r3, #12352	; 0x3040
 8000bce:	81fb      	strh	r3, [r7, #14]
  /* Set SSM, SSI and MSTR bits according to SPI_Mode and SPI_NSS values */
  /* Set LSBFirst bit according to SPI_FirstBit value */
  /* Set BR bits according to SPI_BaudRatePrescaler value */
  /* Set CPOL bit according to SPI_CPOL value */
  /* Set CPHA bit according to SPI_CPHA value */
  tmpreg |= (uint16_t)((uint32_t)SPI_InitStruct->SPI_Direction | SPI_InitStruct->SPI_Mode |
 8000bd0:	683b      	ldr	r3, [r7, #0]
 8000bd2:	881a      	ldrh	r2, [r3, #0]
 8000bd4:	683b      	ldr	r3, [r7, #0]
 8000bd6:	885b      	ldrh	r3, [r3, #2]
 8000bd8:	4313      	orrs	r3, r2
 8000bda:	b29a      	uxth	r2, r3
                  SPI_InitStruct->SPI_DataSize | SPI_InitStruct->SPI_CPOL |  
 8000bdc:	683b      	ldr	r3, [r7, #0]
 8000bde:	889b      	ldrh	r3, [r3, #4]
  /* Set SSM, SSI and MSTR bits according to SPI_Mode and SPI_NSS values */
  /* Set LSBFirst bit according to SPI_FirstBit value */
  /* Set BR bits according to SPI_BaudRatePrescaler value */
  /* Set CPOL bit according to SPI_CPOL value */
  /* Set CPHA bit according to SPI_CPHA value */
  tmpreg |= (uint16_t)((uint32_t)SPI_InitStruct->SPI_Direction | SPI_InitStruct->SPI_Mode |
 8000be0:	4313      	orrs	r3, r2
 8000be2:	b29a      	uxth	r2, r3
                  SPI_InitStruct->SPI_DataSize | SPI_InitStruct->SPI_CPOL |  
 8000be4:	683b      	ldr	r3, [r7, #0]
 8000be6:	88db      	ldrh	r3, [r3, #6]
  /* Set SSM, SSI and MSTR bits according to SPI_Mode and SPI_NSS values */
  /* Set LSBFirst bit according to SPI_FirstBit value */
  /* Set BR bits according to SPI_BaudRatePrescaler value */
  /* Set CPOL bit according to SPI_CPOL value */
  /* Set CPHA bit according to SPI_CPHA value */
  tmpreg |= (uint16_t)((uint32_t)SPI_InitStruct->SPI_Direction | SPI_InitStruct->SPI_Mode |
 8000be8:	4313      	orrs	r3, r2
 8000bea:	b29a      	uxth	r2, r3
                  SPI_InitStruct->SPI_DataSize | SPI_InitStruct->SPI_CPOL |  
                  SPI_InitStruct->SPI_CPHA | SPI_InitStruct->SPI_NSS |  
 8000bec:	683b      	ldr	r3, [r7, #0]
 8000bee:	891b      	ldrh	r3, [r3, #8]
  /* Set SSM, SSI and MSTR bits according to SPI_Mode and SPI_NSS values */
  /* Set LSBFirst bit according to SPI_FirstBit value */
  /* Set BR bits according to SPI_BaudRatePrescaler value */
  /* Set CPOL bit according to SPI_CPOL value */
  /* Set CPHA bit according to SPI_CPHA value */
  tmpreg |= (uint16_t)((uint32_t)SPI_InitStruct->SPI_Direction | SPI_InitStruct->SPI_Mode |
 8000bf0:	4313      	orrs	r3, r2
 8000bf2:	b29a      	uxth	r2, r3
                  SPI_InitStruct->SPI_DataSize | SPI_InitStruct->SPI_CPOL |  
                  SPI_InitStruct->SPI_CPHA | SPI_InitStruct->SPI_NSS |  
 8000bf4:	683b      	ldr	r3, [r7, #0]
 8000bf6:	895b      	ldrh	r3, [r3, #10]
  /* Set SSM, SSI and MSTR bits according to SPI_Mode and SPI_NSS values */
  /* Set LSBFirst bit according to SPI_FirstBit value */
  /* Set BR bits according to SPI_BaudRatePrescaler value */
  /* Set CPOL bit according to SPI_CPOL value */
  /* Set CPHA bit according to SPI_CPHA value */
  tmpreg |= (uint16_t)((uint32_t)SPI_InitStruct->SPI_Direction | SPI_InitStruct->SPI_Mode |
 8000bf8:	4313      	orrs	r3, r2
 8000bfa:	b29a      	uxth	r2, r3
                  SPI_InitStruct->SPI_DataSize | SPI_InitStruct->SPI_CPOL |  
                  SPI_InitStruct->SPI_CPHA | SPI_InitStruct->SPI_NSS |  
                  SPI_InitStruct->SPI_BaudRatePrescaler | SPI_InitStruct->SPI_FirstBit);
 8000bfc:	683b      	ldr	r3, [r7, #0]
 8000bfe:	899b      	ldrh	r3, [r3, #12]
  /* Set SSM, SSI and MSTR bits according to SPI_Mode and SPI_NSS values */
  /* Set LSBFirst bit according to SPI_FirstBit value */
  /* Set BR bits according to SPI_BaudRatePrescaler value */
  /* Set CPOL bit according to SPI_CPOL value */
  /* Set CPHA bit according to SPI_CPHA value */
  tmpreg |= (uint16_t)((uint32_t)SPI_InitStruct->SPI_Direction | SPI_InitStruct->SPI_Mode |
 8000c00:	4313      	orrs	r3, r2
 8000c02:	b29a      	uxth	r2, r3
                  SPI_InitStruct->SPI_DataSize | SPI_InitStruct->SPI_CPOL |  
                  SPI_InitStruct->SPI_CPHA | SPI_InitStruct->SPI_NSS |  
                  SPI_InitStruct->SPI_BaudRatePrescaler | SPI_InitStruct->SPI_FirstBit);
 8000c04:	683b      	ldr	r3, [r7, #0]
 8000c06:	89db      	ldrh	r3, [r3, #14]
  /* Set SSM, SSI and MSTR bits according to SPI_Mode and SPI_NSS values */
  /* Set LSBFirst bit according to SPI_FirstBit value */
  /* Set BR bits according to SPI_BaudRatePrescaler value */
  /* Set CPOL bit according to SPI_CPOL value */
  /* Set CPHA bit according to SPI_CPHA value */
  tmpreg |= (uint16_t)((uint32_t)SPI_InitStruct->SPI_Direction | SPI_InitStruct->SPI_Mode |
 8000c08:	4313      	orrs	r3, r2
 8000c0a:	b29a      	uxth	r2, r3
 8000c0c:	89fb      	ldrh	r3, [r7, #14]
 8000c0e:	4313      	orrs	r3, r2
 8000c10:	81fb      	strh	r3, [r7, #14]
                  SPI_InitStruct->SPI_DataSize | SPI_InitStruct->SPI_CPOL |  
                  SPI_InitStruct->SPI_CPHA | SPI_InitStruct->SPI_NSS |  
                  SPI_InitStruct->SPI_BaudRatePrescaler | SPI_InitStruct->SPI_FirstBit);
  /* Write to SPIx CR1 */
  SPIx->CR1 = tmpreg;
 8000c12:	687b      	ldr	r3, [r7, #4]
 8000c14:	89fa      	ldrh	r2, [r7, #14]
 8000c16:	801a      	strh	r2, [r3, #0]
  
  /* Activate the SPI mode (Reset I2SMOD bit in I2SCFGR register) */
  SPIx->I2SCFGR &= SPI_Mode_Select;		
 8000c18:	687b      	ldr	r3, [r7, #4]
 8000c1a:	8b9b      	ldrh	r3, [r3, #28]
 8000c1c:	b29b      	uxth	r3, r3
 8000c1e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8000c22:	b29a      	uxth	r2, r3
 8000c24:	687b      	ldr	r3, [r7, #4]
 8000c26:	839a      	strh	r2, [r3, #28]

/*---------------------------- SPIx CRCPOLY Configuration --------------------*/
  /* Write to SPIx CRCPOLY */
  SPIx->CRCPR = SPI_InitStruct->SPI_CRCPolynomial;
 8000c28:	683b      	ldr	r3, [r7, #0]
 8000c2a:	8a1a      	ldrh	r2, [r3, #16]
 8000c2c:	687b      	ldr	r3, [r7, #4]
 8000c2e:	821a      	strh	r2, [r3, #16]
}
 8000c30:	bf00      	nop
 8000c32:	3714      	adds	r7, #20
 8000c34:	46bd      	mov	sp, r7
 8000c36:	bc80      	pop	{r7}
 8000c38:	4770      	bx	lr
 8000c3a:	bf00      	nop

08000c3c <SPI_StructInit>:
  * @brief  Fills each SPI_InitStruct member with its default value.
  * @param  SPI_InitStruct : pointer to a SPI_InitTypeDef structure which will be initialized.
  * @retval None
  */
void SPI_StructInit(SPI_InitTypeDef* SPI_InitStruct)
{
 8000c3c:	b480      	push	{r7}
 8000c3e:	b083      	sub	sp, #12
 8000c40:	af00      	add	r7, sp, #0
 8000c42:	6078      	str	r0, [r7, #4]
/*--------------- Reset SPI init structure parameters values -----------------*/
  /* Initialize the SPI_Direction member */
  SPI_InitStruct->SPI_Direction = SPI_Direction_2Lines_FullDuplex;
 8000c44:	687b      	ldr	r3, [r7, #4]
 8000c46:	2200      	movs	r2, #0
 8000c48:	801a      	strh	r2, [r3, #0]
  /* initialize the SPI_Mode member */
  SPI_InitStruct->SPI_Mode = SPI_Mode_Slave;
 8000c4a:	687b      	ldr	r3, [r7, #4]
 8000c4c:	2200      	movs	r2, #0
 8000c4e:	805a      	strh	r2, [r3, #2]
  /* initialize the SPI_DataSize member */
  SPI_InitStruct->SPI_DataSize = SPI_DataSize_8b;
 8000c50:	687b      	ldr	r3, [r7, #4]
 8000c52:	2200      	movs	r2, #0
 8000c54:	809a      	strh	r2, [r3, #4]
  /* Initialize the SPI_CPOL member */
  SPI_InitStruct->SPI_CPOL = SPI_CPOL_Low;
 8000c56:	687b      	ldr	r3, [r7, #4]
 8000c58:	2200      	movs	r2, #0
 8000c5a:	80da      	strh	r2, [r3, #6]
  /* Initialize the SPI_CPHA member */
  SPI_InitStruct->SPI_CPHA = SPI_CPHA_1Edge;
 8000c5c:	687b      	ldr	r3, [r7, #4]
 8000c5e:	2200      	movs	r2, #0
 8000c60:	811a      	strh	r2, [r3, #8]
  /* Initialize the SPI_NSS member */
  SPI_InitStruct->SPI_NSS = SPI_NSS_Hard;
 8000c62:	687b      	ldr	r3, [r7, #4]
 8000c64:	2200      	movs	r2, #0
 8000c66:	815a      	strh	r2, [r3, #10]
  /* Initialize the SPI_BaudRatePrescaler member */
  SPI_InitStruct->SPI_BaudRatePrescaler = SPI_BaudRatePrescaler_2;
 8000c68:	687b      	ldr	r3, [r7, #4]
 8000c6a:	2200      	movs	r2, #0
 8000c6c:	819a      	strh	r2, [r3, #12]
  /* Initialize the SPI_FirstBit member */
  SPI_InitStruct->SPI_FirstBit = SPI_FirstBit_MSB;
 8000c6e:	687b      	ldr	r3, [r7, #4]
 8000c70:	2200      	movs	r2, #0
 8000c72:	81da      	strh	r2, [r3, #14]
  /* Initialize the SPI_CRCPolynomial member */
  SPI_InitStruct->SPI_CRCPolynomial = 7;
 8000c74:	687b      	ldr	r3, [r7, #4]
 8000c76:	2207      	movs	r2, #7
 8000c78:	821a      	strh	r2, [r3, #16]
}
 8000c7a:	bf00      	nop
 8000c7c:	370c      	adds	r7, #12
 8000c7e:	46bd      	mov	sp, r7
 8000c80:	bc80      	pop	{r7}
 8000c82:	4770      	bx	lr

08000c84 <SPI_Cmd>:
  * @param  NewState: new state of the SPIx peripheral. 
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void SPI_Cmd(SPI_TypeDef* SPIx, FunctionalState NewState)
{
 8000c84:	b480      	push	{r7}
 8000c86:	b083      	sub	sp, #12
 8000c88:	af00      	add	r7, sp, #0
 8000c8a:	6078      	str	r0, [r7, #4]
 8000c8c:	460b      	mov	r3, r1
 8000c8e:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH(SPIx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8000c90:	78fb      	ldrb	r3, [r7, #3]
 8000c92:	2b00      	cmp	r3, #0
 8000c94:	d008      	beq.n	8000ca8 <SPI_Cmd+0x24>
  {
    /* Enable the selected SPI peripheral */
    SPIx->CR1 |= CR1_SPE_Set;
 8000c96:	687b      	ldr	r3, [r7, #4]
 8000c98:	881b      	ldrh	r3, [r3, #0]
 8000c9a:	b29b      	uxth	r3, r3
 8000c9c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000ca0:	b29a      	uxth	r2, r3
 8000ca2:	687b      	ldr	r3, [r7, #4]
 8000ca4:	801a      	strh	r2, [r3, #0]
  else
  {
    /* Disable the selected SPI peripheral */
    SPIx->CR1 &= CR1_SPE_Reset;
  }
}
 8000ca6:	e007      	b.n	8000cb8 <SPI_Cmd+0x34>
    SPIx->CR1 |= CR1_SPE_Set;
  }
  else
  {
    /* Disable the selected SPI peripheral */
    SPIx->CR1 &= CR1_SPE_Reset;
 8000ca8:	687b      	ldr	r3, [r7, #4]
 8000caa:	881b      	ldrh	r3, [r3, #0]
 8000cac:	b29b      	uxth	r3, r3
 8000cae:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8000cb2:	b29a      	uxth	r2, r3
 8000cb4:	687b      	ldr	r3, [r7, #4]
 8000cb6:	801a      	strh	r2, [r3, #0]
  }
}
 8000cb8:	bf00      	nop
 8000cba:	370c      	adds	r7, #12
 8000cbc:	46bd      	mov	sp, r7
 8000cbe:	bc80      	pop	{r7}
 8000cc0:	4770      	bx	lr
 8000cc2:	bf00      	nop

08000cc4 <SPI_I2S_ITConfig>:
  * @param  NewState: new state of the specified SPI/I2S interrupt.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void SPI_I2S_ITConfig(SPI_TypeDef* SPIx, uint8_t SPI_I2S_IT, FunctionalState NewState)
{
 8000cc4:	b480      	push	{r7}
 8000cc6:	b085      	sub	sp, #20
 8000cc8:	af00      	add	r7, sp, #0
 8000cca:	6078      	str	r0, [r7, #4]
 8000ccc:	460b      	mov	r3, r1
 8000cce:	70fb      	strb	r3, [r7, #3]
 8000cd0:	4613      	mov	r3, r2
 8000cd2:	70bb      	strb	r3, [r7, #2]
  uint16_t itpos = 0, itmask = 0 ;
 8000cd4:	2300      	movs	r3, #0
 8000cd6:	81fb      	strh	r3, [r7, #14]
 8000cd8:	2300      	movs	r3, #0
 8000cda:	81bb      	strh	r3, [r7, #12]
  assert_param(IS_SPI_ALL_PERIPH(SPIx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  assert_param(IS_SPI_I2S_CONFIG_IT(SPI_I2S_IT));

  /* Get the SPI/I2S IT index */
  itpos = SPI_I2S_IT >> 4;
 8000cdc:	78fb      	ldrb	r3, [r7, #3]
 8000cde:	091b      	lsrs	r3, r3, #4
 8000ce0:	b2db      	uxtb	r3, r3
 8000ce2:	81fb      	strh	r3, [r7, #14]

  /* Set the IT mask */
  itmask = (uint16_t)1 << (uint16_t)itpos;
 8000ce4:	89fb      	ldrh	r3, [r7, #14]
 8000ce6:	2201      	movs	r2, #1
 8000ce8:	fa02 f303 	lsl.w	r3, r2, r3
 8000cec:	81bb      	strh	r3, [r7, #12]

  if (NewState != DISABLE)
 8000cee:	78bb      	ldrb	r3, [r7, #2]
 8000cf0:	2b00      	cmp	r3, #0
 8000cf2:	d008      	beq.n	8000d06 <SPI_I2S_ITConfig+0x42>
  {
    /* Enable the selected SPI/I2S interrupt */
    SPIx->CR2 |= itmask;
 8000cf4:	687b      	ldr	r3, [r7, #4]
 8000cf6:	889b      	ldrh	r3, [r3, #4]
 8000cf8:	b29a      	uxth	r2, r3
 8000cfa:	89bb      	ldrh	r3, [r7, #12]
 8000cfc:	4313      	orrs	r3, r2
 8000cfe:	b29a      	uxth	r2, r3
 8000d00:	687b      	ldr	r3, [r7, #4]
 8000d02:	809a      	strh	r2, [r3, #4]
  else
  {
    /* Disable the selected SPI/I2S interrupt */
    SPIx->CR2 &= (uint16_t)~itmask;
  }
}
 8000d04:	e009      	b.n	8000d1a <SPI_I2S_ITConfig+0x56>
    SPIx->CR2 |= itmask;
  }
  else
  {
    /* Disable the selected SPI/I2S interrupt */
    SPIx->CR2 &= (uint16_t)~itmask;
 8000d06:	687b      	ldr	r3, [r7, #4]
 8000d08:	889b      	ldrh	r3, [r3, #4]
 8000d0a:	b29a      	uxth	r2, r3
 8000d0c:	89bb      	ldrh	r3, [r7, #12]
 8000d0e:	43db      	mvns	r3, r3
 8000d10:	b29b      	uxth	r3, r3
 8000d12:	4013      	ands	r3, r2
 8000d14:	b29a      	uxth	r2, r3
 8000d16:	687b      	ldr	r3, [r7, #4]
 8000d18:	809a      	strh	r2, [r3, #4]
  }
}
 8000d1a:	bf00      	nop
 8000d1c:	3714      	adds	r7, #20
 8000d1e:	46bd      	mov	sp, r7
 8000d20:	bc80      	pop	{r7}
 8000d22:	4770      	bx	lr

08000d24 <SPI_I2S_SendData>:
  *   - 2 or 3 in I2S mode
  * @param  Data : Data to be transmitted.
  * @retval None
  */
void SPI_I2S_SendData(SPI_TypeDef* SPIx, uint16_t Data)
{
 8000d24:	b480      	push	{r7}
 8000d26:	b083      	sub	sp, #12
 8000d28:	af00      	add	r7, sp, #0
 8000d2a:	6078      	str	r0, [r7, #4]
 8000d2c:	460b      	mov	r3, r1
 8000d2e:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH(SPIx));
  
  /* Write in the DR register the data to be sent */
  SPIx->DR = Data;
 8000d30:	687b      	ldr	r3, [r7, #4]
 8000d32:	887a      	ldrh	r2, [r7, #2]
 8000d34:	819a      	strh	r2, [r3, #12]
}
 8000d36:	bf00      	nop
 8000d38:	370c      	adds	r7, #12
 8000d3a:	46bd      	mov	sp, r7
 8000d3c:	bc80      	pop	{r7}
 8000d3e:	4770      	bx	lr

08000d40 <SPI_I2S_ReceiveData>:
  *   - 1, 2 or 3 in SPI mode 
  *   - 2 or 3 in I2S mode
  * @retval The value of the received data.
  */
uint16_t SPI_I2S_ReceiveData(SPI_TypeDef* SPIx)
{
 8000d40:	b480      	push	{r7}
 8000d42:	b083      	sub	sp, #12
 8000d44:	af00      	add	r7, sp, #0
 8000d46:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH(SPIx));
  
  /* Return the data in the DR register */
  return SPIx->DR;
 8000d48:	687b      	ldr	r3, [r7, #4]
 8000d4a:	899b      	ldrh	r3, [r3, #12]
 8000d4c:	b29b      	uxth	r3, r3
}
 8000d4e:	4618      	mov	r0, r3
 8000d50:	370c      	adds	r7, #12
 8000d52:	46bd      	mov	sp, r7
 8000d54:	bc80      	pop	{r7}
 8000d56:	4770      	bx	lr

08000d58 <SPI_SSOutputCmd>:
  * @param  NewState: new state of the SPIx SS output. 
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void SPI_SSOutputCmd(SPI_TypeDef* SPIx, FunctionalState NewState)
{
 8000d58:	b480      	push	{r7}
 8000d5a:	b083      	sub	sp, #12
 8000d5c:	af00      	add	r7, sp, #0
 8000d5e:	6078      	str	r0, [r7, #4]
 8000d60:	460b      	mov	r3, r1
 8000d62:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH(SPIx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8000d64:	78fb      	ldrb	r3, [r7, #3]
 8000d66:	2b00      	cmp	r3, #0
 8000d68:	d008      	beq.n	8000d7c <SPI_SSOutputCmd+0x24>
  {
    /* Enable the selected SPI SS output */
    SPIx->CR2 |= CR2_SSOE_Set;
 8000d6a:	687b      	ldr	r3, [r7, #4]
 8000d6c:	889b      	ldrh	r3, [r3, #4]
 8000d6e:	b29b      	uxth	r3, r3
 8000d70:	f043 0304 	orr.w	r3, r3, #4
 8000d74:	b29a      	uxth	r2, r3
 8000d76:	687b      	ldr	r3, [r7, #4]
 8000d78:	809a      	strh	r2, [r3, #4]
  else
  {
    /* Disable the selected SPI SS output */
    SPIx->CR2 &= CR2_SSOE_Reset;
  }
}
 8000d7a:	e007      	b.n	8000d8c <SPI_SSOutputCmd+0x34>
    SPIx->CR2 |= CR2_SSOE_Set;
  }
  else
  {
    /* Disable the selected SPI SS output */
    SPIx->CR2 &= CR2_SSOE_Reset;
 8000d7c:	687b      	ldr	r3, [r7, #4]
 8000d7e:	889b      	ldrh	r3, [r3, #4]
 8000d80:	b29b      	uxth	r3, r3
 8000d82:	f023 0304 	bic.w	r3, r3, #4
 8000d86:	b29a      	uxth	r2, r3
 8000d88:	687b      	ldr	r3, [r7, #4]
 8000d8a:	809a      	strh	r2, [r3, #4]
  }
}
 8000d8c:	bf00      	nop
 8000d8e:	370c      	adds	r7, #12
 8000d90:	46bd      	mov	sp, r7
 8000d92:	bc80      	pop	{r7}
 8000d94:	4770      	bx	lr
 8000d96:	bf00      	nop

08000d98 <SPI_I2S_ClearFlag>:
  *     operation to SPI_SR register (SPI_I2S_GetFlagStatus()) followed by a 
  *     write operation to SPI_CR1 register (SPI_Cmd() to enable the SPI).
  * @retval None
  */
void SPI_I2S_ClearFlag(SPI_TypeDef* SPIx, uint16_t SPI_I2S_FLAG)
{
 8000d98:	b480      	push	{r7}
 8000d9a:	b083      	sub	sp, #12
 8000d9c:	af00      	add	r7, sp, #0
 8000d9e:	6078      	str	r0, [r7, #4]
 8000da0:	460b      	mov	r3, r1
 8000da2:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH(SPIx));
  assert_param(IS_SPI_I2S_CLEAR_FLAG(SPI_I2S_FLAG));
    
    /* Clear the selected SPI CRC Error (CRCERR) flag */
    SPIx->SR = (uint16_t)~SPI_I2S_FLAG;
 8000da4:	887b      	ldrh	r3, [r7, #2]
 8000da6:	43db      	mvns	r3, r3
 8000da8:	b29a      	uxth	r2, r3
 8000daa:	687b      	ldr	r3, [r7, #4]
 8000dac:	811a      	strh	r2, [r3, #8]
}
 8000dae:	bf00      	nop
 8000db0:	370c      	adds	r7, #12
 8000db2:	46bd      	mov	sp, r7
 8000db4:	bc80      	pop	{r7}
 8000db6:	4770      	bx	lr

08000db8 <SPI_I2S_GetITStatus>:
  *     @arg SPI_IT_CRCERR: CRC Error interrupt.
  *     @arg I2S_IT_UDR: Underrun Error interrupt.
  * @retval The new state of SPI_I2S_IT (SET or RESET).
  */
ITStatus SPI_I2S_GetITStatus(SPI_TypeDef* SPIx, uint8_t SPI_I2S_IT)
{
 8000db8:	b480      	push	{r7}
 8000dba:	b085      	sub	sp, #20
 8000dbc:	af00      	add	r7, sp, #0
 8000dbe:	6078      	str	r0, [r7, #4]
 8000dc0:	460b      	mov	r3, r1
 8000dc2:	70fb      	strb	r3, [r7, #3]
  ITStatus bitstatus = RESET;
 8000dc4:	2300      	movs	r3, #0
 8000dc6:	73fb      	strb	r3, [r7, #15]
  uint16_t itpos = 0, itmask = 0, enablestatus = 0;
 8000dc8:	2300      	movs	r3, #0
 8000dca:	81bb      	strh	r3, [r7, #12]
 8000dcc:	2300      	movs	r3, #0
 8000dce:	817b      	strh	r3, [r7, #10]
 8000dd0:	2300      	movs	r3, #0
 8000dd2:	813b      	strh	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH(SPIx));
  assert_param(IS_SPI_I2S_GET_IT(SPI_I2S_IT));

  /* Get the SPI/I2S IT index */
  itpos = 0x01 << (SPI_I2S_IT & 0x0F);
 8000dd4:	78fb      	ldrb	r3, [r7, #3]
 8000dd6:	f003 030f 	and.w	r3, r3, #15
 8000dda:	2201      	movs	r2, #1
 8000ddc:	fa02 f303 	lsl.w	r3, r2, r3
 8000de0:	81bb      	strh	r3, [r7, #12]

  /* Get the SPI/I2S IT mask */
  itmask = SPI_I2S_IT >> 4;
 8000de2:	78fb      	ldrb	r3, [r7, #3]
 8000de4:	091b      	lsrs	r3, r3, #4
 8000de6:	b2db      	uxtb	r3, r3
 8000de8:	817b      	strh	r3, [r7, #10]

  /* Set the IT mask */
  itmask = 0x01 << itmask;
 8000dea:	897b      	ldrh	r3, [r7, #10]
 8000dec:	2201      	movs	r2, #1
 8000dee:	fa02 f303 	lsl.w	r3, r2, r3
 8000df2:	817b      	strh	r3, [r7, #10]

  /* Get the SPI_I2S_IT enable bit status */
  enablestatus = (SPIx->CR2 & itmask) ;
 8000df4:	687b      	ldr	r3, [r7, #4]
 8000df6:	889b      	ldrh	r3, [r3, #4]
 8000df8:	b29a      	uxth	r2, r3
 8000dfa:	897b      	ldrh	r3, [r7, #10]
 8000dfc:	4013      	ands	r3, r2
 8000dfe:	813b      	strh	r3, [r7, #8]

  /* Check the status of the specified SPI/I2S interrupt */
  if (((SPIx->SR & itpos) != (uint16_t)RESET) && enablestatus)
 8000e00:	687b      	ldr	r3, [r7, #4]
 8000e02:	891b      	ldrh	r3, [r3, #8]
 8000e04:	b29a      	uxth	r2, r3
 8000e06:	89bb      	ldrh	r3, [r7, #12]
 8000e08:	4013      	ands	r3, r2
 8000e0a:	b29b      	uxth	r3, r3
 8000e0c:	2b00      	cmp	r3, #0
 8000e0e:	d005      	beq.n	8000e1c <SPI_I2S_GetITStatus+0x64>
 8000e10:	893b      	ldrh	r3, [r7, #8]
 8000e12:	2b00      	cmp	r3, #0
 8000e14:	d002      	beq.n	8000e1c <SPI_I2S_GetITStatus+0x64>
  {
    /* SPI_I2S_IT is set */
    bitstatus = SET;
 8000e16:	2301      	movs	r3, #1
 8000e18:	73fb      	strb	r3, [r7, #15]
 8000e1a:	e001      	b.n	8000e20 <SPI_I2S_GetITStatus+0x68>
  }
  else
  {
    /* SPI_I2S_IT is reset */
    bitstatus = RESET;
 8000e1c:	2300      	movs	r3, #0
 8000e1e:	73fb      	strb	r3, [r7, #15]
  }
  /* Return the SPI_I2S_IT status */
  return bitstatus;
 8000e20:	7bfb      	ldrb	r3, [r7, #15]
}
 8000e22:	4618      	mov	r0, r3
 8000e24:	3714      	adds	r7, #20
 8000e26:	46bd      	mov	sp, r7
 8000e28:	bc80      	pop	{r7}
 8000e2a:	4770      	bx	lr

08000e2c <USART_Init>:
  *         that contains the configuration information for the specified USART 
  *         peripheral.
  * @retval None
  */
void USART_Init(USART_TypeDef* USARTx, USART_InitTypeDef* USART_InitStruct)
{
 8000e2c:	b580      	push	{r7, lr}
 8000e2e:	b08c      	sub	sp, #48	; 0x30
 8000e30:	af00      	add	r7, sp, #0
 8000e32:	6078      	str	r0, [r7, #4]
 8000e34:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0x00, apbclock = 0x00;
 8000e36:	2300      	movs	r3, #0
 8000e38:	62fb      	str	r3, [r7, #44]	; 0x2c
 8000e3a:	2300      	movs	r3, #0
 8000e3c:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t integerdivider = 0x00;
 8000e3e:	2300      	movs	r3, #0
 8000e40:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t fractionaldivider = 0x00;
 8000e42:	2300      	movs	r3, #0
 8000e44:	623b      	str	r3, [r7, #32]
  uint32_t usartxbase = 0;
 8000e46:	2300      	movs	r3, #0
 8000e48:	61fb      	str	r3, [r7, #28]
  if (USART_InitStruct->USART_HardwareFlowControl != USART_HardwareFlowControl_None)
  {
    assert_param(IS_USART_123_PERIPH(USARTx));
  }

  usartxbase = (uint32_t)USARTx;
 8000e4a:	687b      	ldr	r3, [r7, #4]
 8000e4c:	61fb      	str	r3, [r7, #28]

/*---------------------------- USART CR2 Configuration -----------------------*/
  tmpreg = USARTx->CR2;
 8000e4e:	687b      	ldr	r3, [r7, #4]
 8000e50:	8a1b      	ldrh	r3, [r3, #16]
 8000e52:	b29b      	uxth	r3, r3
 8000e54:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Clear STOP[13:12] bits */
  tmpreg &= CR2_STOP_CLEAR_Mask;
 8000e56:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8000e58:	f64c 73ff 	movw	r3, #53247	; 0xcfff
 8000e5c:	4013      	ands	r3, r2
 8000e5e:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Configure the USART Stop Bits, Clock, CPOL, CPHA and LastBit ------------*/
  /* Set STOP[13:12] bits according to USART_StopBits value */
  tmpreg |= (uint32_t)USART_InitStruct->USART_StopBits;
 8000e60:	683b      	ldr	r3, [r7, #0]
 8000e62:	88db      	ldrh	r3, [r3, #6]
 8000e64:	461a      	mov	r2, r3
 8000e66:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000e68:	4313      	orrs	r3, r2
 8000e6a:	62fb      	str	r3, [r7, #44]	; 0x2c
  
  /* Write to USART CR2 */
  USARTx->CR2 = (uint16_t)tmpreg;
 8000e6c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000e6e:	b29a      	uxth	r2, r3
 8000e70:	687b      	ldr	r3, [r7, #4]
 8000e72:	821a      	strh	r2, [r3, #16]

/*---------------------------- USART CR1 Configuration -----------------------*/
  tmpreg = USARTx->CR1;
 8000e74:	687b      	ldr	r3, [r7, #4]
 8000e76:	899b      	ldrh	r3, [r3, #12]
 8000e78:	b29b      	uxth	r3, r3
 8000e7a:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Clear M, PCE, PS, TE and RE bits */
  tmpreg &= CR1_CLEAR_Mask;
 8000e7c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8000e7e:	f64e 13f3 	movw	r3, #59891	; 0xe9f3
 8000e82:	4013      	ands	r3, r2
 8000e84:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Configure the USART Word Length, Parity and mode ----------------------- */
  /* Set the M bits according to USART_WordLength value */
  /* Set PCE and PS bits according to USART_Parity value */
  /* Set TE and RE bits according to USART_Mode value */
  tmpreg |= (uint32_t)USART_InitStruct->USART_WordLength | USART_InitStruct->USART_Parity |
 8000e86:	683b      	ldr	r3, [r7, #0]
 8000e88:	889a      	ldrh	r2, [r3, #4]
 8000e8a:	683b      	ldr	r3, [r7, #0]
 8000e8c:	891b      	ldrh	r3, [r3, #8]
 8000e8e:	4313      	orrs	r3, r2
 8000e90:	b29a      	uxth	r2, r3
            USART_InitStruct->USART_Mode;
 8000e92:	683b      	ldr	r3, [r7, #0]
 8000e94:	895b      	ldrh	r3, [r3, #10]
  tmpreg &= CR1_CLEAR_Mask;
  /* Configure the USART Word Length, Parity and mode ----------------------- */
  /* Set the M bits according to USART_WordLength value */
  /* Set PCE and PS bits according to USART_Parity value */
  /* Set TE and RE bits according to USART_Mode value */
  tmpreg |= (uint32_t)USART_InitStruct->USART_WordLength | USART_InitStruct->USART_Parity |
 8000e96:	4313      	orrs	r3, r2
 8000e98:	b29b      	uxth	r3, r3
 8000e9a:	461a      	mov	r2, r3
 8000e9c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000e9e:	4313      	orrs	r3, r2
 8000ea0:	62fb      	str	r3, [r7, #44]	; 0x2c
            USART_InitStruct->USART_Mode;
  /* Write to USART CR1 */
  USARTx->CR1 = (uint16_t)tmpreg;
 8000ea2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000ea4:	b29a      	uxth	r2, r3
 8000ea6:	687b      	ldr	r3, [r7, #4]
 8000ea8:	819a      	strh	r2, [r3, #12]

/*---------------------------- USART CR3 Configuration -----------------------*/  
  tmpreg = USARTx->CR3;
 8000eaa:	687b      	ldr	r3, [r7, #4]
 8000eac:	8a9b      	ldrh	r3, [r3, #20]
 8000eae:	b29b      	uxth	r3, r3
 8000eb0:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Clear CTSE and RTSE bits */
  tmpreg &= CR3_CLEAR_Mask;
 8000eb2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8000eb4:	f64f 43ff 	movw	r3, #64767	; 0xfcff
 8000eb8:	4013      	ands	r3, r2
 8000eba:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Configure the USART HFC -------------------------------------------------*/
  /* Set CTSE and RTSE bits according to USART_HardwareFlowControl value */
  tmpreg |= USART_InitStruct->USART_HardwareFlowControl;
 8000ebc:	683b      	ldr	r3, [r7, #0]
 8000ebe:	899b      	ldrh	r3, [r3, #12]
 8000ec0:	461a      	mov	r2, r3
 8000ec2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000ec4:	4313      	orrs	r3, r2
 8000ec6:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Write to USART CR3 */
  USARTx->CR3 = (uint16_t)tmpreg;
 8000ec8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000eca:	b29a      	uxth	r2, r3
 8000ecc:	687b      	ldr	r3, [r7, #4]
 8000ece:	829a      	strh	r2, [r3, #20]

/*---------------------------- USART BRR Configuration -----------------------*/
  /* Configure the USART Baud Rate -------------------------------------------*/
  RCC_GetClocksFreq(&RCC_ClocksStatus);
 8000ed0:	f107 0308 	add.w	r3, r7, #8
 8000ed4:	4618      	mov	r0, r3
 8000ed6:	f7ff fd83 	bl	80009e0 <RCC_GetClocksFreq>
  if (usartxbase == USART1_BASE)
 8000eda:	69fb      	ldr	r3, [r7, #28]
 8000edc:	4a2e      	ldr	r2, [pc, #184]	; (8000f98 <USART_Init+0x16c>)
 8000ede:	4293      	cmp	r3, r2
 8000ee0:	d102      	bne.n	8000ee8 <USART_Init+0xbc>
  {
    apbclock = RCC_ClocksStatus.PCLK2_Frequency;
 8000ee2:	697b      	ldr	r3, [r7, #20]
 8000ee4:	62bb      	str	r3, [r7, #40]	; 0x28
 8000ee6:	e001      	b.n	8000eec <USART_Init+0xc0>
  }
  else
  {
    apbclock = RCC_ClocksStatus.PCLK1_Frequency;
 8000ee8:	693b      	ldr	r3, [r7, #16]
 8000eea:	62bb      	str	r3, [r7, #40]	; 0x28
  }
  
  /* Determine the integer part */
  if ((USARTx->CR1 & CR1_OVER8_Set) != 0)
 8000eec:	687b      	ldr	r3, [r7, #4]
 8000eee:	899b      	ldrh	r3, [r3, #12]
 8000ef0:	b29b      	uxth	r3, r3
 8000ef2:	b21b      	sxth	r3, r3
 8000ef4:	2b00      	cmp	r3, #0
 8000ef6:	da0c      	bge.n	8000f12 <USART_Init+0xe6>
  {
    /* Integer part computing in case Oversampling mode is 8 Samples */
    integerdivider = ((25 * apbclock) / (2 * (USART_InitStruct->USART_BaudRate)));    
 8000ef8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8000efa:	4613      	mov	r3, r2
 8000efc:	009b      	lsls	r3, r3, #2
 8000efe:	4413      	add	r3, r2
 8000f00:	009a      	lsls	r2, r3, #2
 8000f02:	441a      	add	r2, r3
 8000f04:	683b      	ldr	r3, [r7, #0]
 8000f06:	681b      	ldr	r3, [r3, #0]
 8000f08:	005b      	lsls	r3, r3, #1
 8000f0a:	fbb2 f3f3 	udiv	r3, r2, r3
 8000f0e:	627b      	str	r3, [r7, #36]	; 0x24
 8000f10:	e00b      	b.n	8000f2a <USART_Init+0xfe>
  }
  else /* if ((USARTx->CR1 & CR1_OVER8_Set) == 0) */
  {
    /* Integer part computing in case Oversampling mode is 16 Samples */
    integerdivider = ((25 * apbclock) / (4 * (USART_InitStruct->USART_BaudRate)));    
 8000f12:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8000f14:	4613      	mov	r3, r2
 8000f16:	009b      	lsls	r3, r3, #2
 8000f18:	4413      	add	r3, r2
 8000f1a:	009a      	lsls	r2, r3, #2
 8000f1c:	441a      	add	r2, r3
 8000f1e:	683b      	ldr	r3, [r7, #0]
 8000f20:	681b      	ldr	r3, [r3, #0]
 8000f22:	009b      	lsls	r3, r3, #2
 8000f24:	fbb2 f3f3 	udiv	r3, r2, r3
 8000f28:	627b      	str	r3, [r7, #36]	; 0x24
  }
  tmpreg = (integerdivider / 100) << 4;
 8000f2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000f2c:	4a1b      	ldr	r2, [pc, #108]	; (8000f9c <USART_Init+0x170>)
 8000f2e:	fba2 2303 	umull	r2, r3, r2, r3
 8000f32:	095b      	lsrs	r3, r3, #5
 8000f34:	011b      	lsls	r3, r3, #4
 8000f36:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Determine the fractional part */
  fractionaldivider = integerdivider - (100 * (tmpreg >> 4));
 8000f38:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000f3a:	091b      	lsrs	r3, r3, #4
 8000f3c:	2264      	movs	r2, #100	; 0x64
 8000f3e:	fb02 f303 	mul.w	r3, r2, r3
 8000f42:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000f44:	1ad3      	subs	r3, r2, r3
 8000f46:	623b      	str	r3, [r7, #32]

  /* Implement the fractional part in the register */
  if ((USARTx->CR1 & CR1_OVER8_Set) != 0)
 8000f48:	687b      	ldr	r3, [r7, #4]
 8000f4a:	899b      	ldrh	r3, [r3, #12]
 8000f4c:	b29b      	uxth	r3, r3
 8000f4e:	b21b      	sxth	r3, r3
 8000f50:	2b00      	cmp	r3, #0
 8000f52:	da0c      	bge.n	8000f6e <USART_Init+0x142>
  {
    tmpreg |= ((((fractionaldivider * 8) + 50) / 100)) & ((uint8_t)0x07);
 8000f54:	6a3b      	ldr	r3, [r7, #32]
 8000f56:	00db      	lsls	r3, r3, #3
 8000f58:	3332      	adds	r3, #50	; 0x32
 8000f5a:	4a10      	ldr	r2, [pc, #64]	; (8000f9c <USART_Init+0x170>)
 8000f5c:	fba2 2303 	umull	r2, r3, r2, r3
 8000f60:	095b      	lsrs	r3, r3, #5
 8000f62:	f003 0307 	and.w	r3, r3, #7
 8000f66:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8000f68:	4313      	orrs	r3, r2
 8000f6a:	62fb      	str	r3, [r7, #44]	; 0x2c
 8000f6c:	e00b      	b.n	8000f86 <USART_Init+0x15a>
  }
  else /* if ((USARTx->CR1 & CR1_OVER8_Set) == 0) */
  {
    tmpreg |= ((((fractionaldivider * 16) + 50) / 100)) & ((uint8_t)0x0F);
 8000f6e:	6a3b      	ldr	r3, [r7, #32]
 8000f70:	011b      	lsls	r3, r3, #4
 8000f72:	3332      	adds	r3, #50	; 0x32
 8000f74:	4a09      	ldr	r2, [pc, #36]	; (8000f9c <USART_Init+0x170>)
 8000f76:	fba2 2303 	umull	r2, r3, r2, r3
 8000f7a:	095b      	lsrs	r3, r3, #5
 8000f7c:	f003 030f 	and.w	r3, r3, #15
 8000f80:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8000f82:	4313      	orrs	r3, r2
 8000f84:	62fb      	str	r3, [r7, #44]	; 0x2c
  }
  
  /* Write to USART BRR */
  USARTx->BRR = (uint16_t)tmpreg;
 8000f86:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000f88:	b29a      	uxth	r2, r3
 8000f8a:	687b      	ldr	r3, [r7, #4]
 8000f8c:	811a      	strh	r2, [r3, #8]
}
 8000f8e:	bf00      	nop
 8000f90:	3730      	adds	r7, #48	; 0x30
 8000f92:	46bd      	mov	sp, r7
 8000f94:	bd80      	pop	{r7, pc}
 8000f96:	bf00      	nop
 8000f98:	40013800 	.word	0x40013800
 8000f9c:	51eb851f 	.word	0x51eb851f

08000fa0 <USART_Cmd>:
  * @param  NewState: new state of the USARTx peripheral.
  *         This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void USART_Cmd(USART_TypeDef* USARTx, FunctionalState NewState)
{
 8000fa0:	b480      	push	{r7}
 8000fa2:	b083      	sub	sp, #12
 8000fa4:	af00      	add	r7, sp, #0
 8000fa6:	6078      	str	r0, [r7, #4]
 8000fa8:	460b      	mov	r3, r1
 8000faa:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 8000fac:	78fb      	ldrb	r3, [r7, #3]
 8000fae:	2b00      	cmp	r3, #0
 8000fb0:	d008      	beq.n	8000fc4 <USART_Cmd+0x24>
  {
    /* Enable the selected USART by setting the UE bit in the CR1 register */
    USARTx->CR1 |= CR1_UE_Set;
 8000fb2:	687b      	ldr	r3, [r7, #4]
 8000fb4:	899b      	ldrh	r3, [r3, #12]
 8000fb6:	b29b      	uxth	r3, r3
 8000fb8:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8000fbc:	b29a      	uxth	r2, r3
 8000fbe:	687b      	ldr	r3, [r7, #4]
 8000fc0:	819a      	strh	r2, [r3, #12]
  else
  {
    /* Disable the selected USART by clearing the UE bit in the CR1 register */
    USARTx->CR1 &= CR1_UE_Reset;
  }
}
 8000fc2:	e007      	b.n	8000fd4 <USART_Cmd+0x34>
    USARTx->CR1 |= CR1_UE_Set;
  }
  else
  {
    /* Disable the selected USART by clearing the UE bit in the CR1 register */
    USARTx->CR1 &= CR1_UE_Reset;
 8000fc4:	687b      	ldr	r3, [r7, #4]
 8000fc6:	899b      	ldrh	r3, [r3, #12]
 8000fc8:	b29b      	uxth	r3, r3
 8000fca:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8000fce:	b29a      	uxth	r2, r3
 8000fd0:	687b      	ldr	r3, [r7, #4]
 8000fd2:	819a      	strh	r2, [r3, #12]
  }
}
 8000fd4:	bf00      	nop
 8000fd6:	370c      	adds	r7, #12
 8000fd8:	46bd      	mov	sp, r7
 8000fda:	bc80      	pop	{r7}
 8000fdc:	4770      	bx	lr
 8000fde:	bf00      	nop

08000fe0 <USART_ITConfig>:
  * @param  NewState: new state of the specified USARTx interrupts.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void USART_ITConfig(USART_TypeDef* USARTx, uint16_t USART_IT, FunctionalState NewState)
{
 8000fe0:	b480      	push	{r7}
 8000fe2:	b087      	sub	sp, #28
 8000fe4:	af00      	add	r7, sp, #0
 8000fe6:	6078      	str	r0, [r7, #4]
 8000fe8:	460b      	mov	r3, r1
 8000fea:	807b      	strh	r3, [r7, #2]
 8000fec:	4613      	mov	r3, r2
 8000fee:	707b      	strb	r3, [r7, #1]
  uint32_t usartreg = 0x00, itpos = 0x00, itmask = 0x00;
 8000ff0:	2300      	movs	r3, #0
 8000ff2:	613b      	str	r3, [r7, #16]
 8000ff4:	2300      	movs	r3, #0
 8000ff6:	60fb      	str	r3, [r7, #12]
 8000ff8:	2300      	movs	r3, #0
 8000ffa:	60bb      	str	r3, [r7, #8]
  uint32_t usartxbase = 0x00;
 8000ffc:	2300      	movs	r3, #0
 8000ffe:	617b      	str	r3, [r7, #20]
  if (USART_IT == USART_IT_CTS)
  {
    assert_param(IS_USART_123_PERIPH(USARTx));
  }   
  
  usartxbase = (uint32_t)USARTx;
 8001000:	687b      	ldr	r3, [r7, #4]
 8001002:	617b      	str	r3, [r7, #20]

  /* Get the USART register index */
  usartreg = (((uint8_t)USART_IT) >> 0x05);
 8001004:	887b      	ldrh	r3, [r7, #2]
 8001006:	b2db      	uxtb	r3, r3
 8001008:	095b      	lsrs	r3, r3, #5
 800100a:	b2db      	uxtb	r3, r3
 800100c:	613b      	str	r3, [r7, #16]

  /* Get the interrupt position */
  itpos = USART_IT & IT_Mask;
 800100e:	887b      	ldrh	r3, [r7, #2]
 8001010:	f003 031f 	and.w	r3, r3, #31
 8001014:	60fb      	str	r3, [r7, #12]
  itmask = (((uint32_t)0x01) << itpos);
 8001016:	2201      	movs	r2, #1
 8001018:	68fb      	ldr	r3, [r7, #12]
 800101a:	fa02 f303 	lsl.w	r3, r2, r3
 800101e:	60bb      	str	r3, [r7, #8]
    
  if (usartreg == 0x01) /* The IT is in CR1 register */
 8001020:	693b      	ldr	r3, [r7, #16]
 8001022:	2b01      	cmp	r3, #1
 8001024:	d103      	bne.n	800102e <USART_ITConfig+0x4e>
  {
    usartxbase += 0x0C;
 8001026:	697b      	ldr	r3, [r7, #20]
 8001028:	330c      	adds	r3, #12
 800102a:	617b      	str	r3, [r7, #20]
 800102c:	e009      	b.n	8001042 <USART_ITConfig+0x62>
  }
  else if (usartreg == 0x02) /* The IT is in CR2 register */
 800102e:	693b      	ldr	r3, [r7, #16]
 8001030:	2b02      	cmp	r3, #2
 8001032:	d103      	bne.n	800103c <USART_ITConfig+0x5c>
  {
    usartxbase += 0x10;
 8001034:	697b      	ldr	r3, [r7, #20]
 8001036:	3310      	adds	r3, #16
 8001038:	617b      	str	r3, [r7, #20]
 800103a:	e002      	b.n	8001042 <USART_ITConfig+0x62>
  }
  else /* The IT is in CR3 register */
  {
    usartxbase += 0x14; 
 800103c:	697b      	ldr	r3, [r7, #20]
 800103e:	3314      	adds	r3, #20
 8001040:	617b      	str	r3, [r7, #20]
  }
  if (NewState != DISABLE)
 8001042:	787b      	ldrb	r3, [r7, #1]
 8001044:	2b00      	cmp	r3, #0
 8001046:	d006      	beq.n	8001056 <USART_ITConfig+0x76>
  {
    *(__IO uint32_t*)usartxbase  |= itmask;
 8001048:	697b      	ldr	r3, [r7, #20]
 800104a:	697a      	ldr	r2, [r7, #20]
 800104c:	6811      	ldr	r1, [r2, #0]
 800104e:	68ba      	ldr	r2, [r7, #8]
 8001050:	430a      	orrs	r2, r1
 8001052:	601a      	str	r2, [r3, #0]
  }
  else
  {
    *(__IO uint32_t*)usartxbase &= ~itmask;
  }
}
 8001054:	e006      	b.n	8001064 <USART_ITConfig+0x84>
  {
    *(__IO uint32_t*)usartxbase  |= itmask;
  }
  else
  {
    *(__IO uint32_t*)usartxbase &= ~itmask;
 8001056:	697b      	ldr	r3, [r7, #20]
 8001058:	697a      	ldr	r2, [r7, #20]
 800105a:	6811      	ldr	r1, [r2, #0]
 800105c:	68ba      	ldr	r2, [r7, #8]
 800105e:	43d2      	mvns	r2, r2
 8001060:	400a      	ands	r2, r1
 8001062:	601a      	str	r2, [r3, #0]
  }
}
 8001064:	bf00      	nop
 8001066:	371c      	adds	r7, #28
 8001068:	46bd      	mov	sp, r7
 800106a:	bc80      	pop	{r7}
 800106c:	4770      	bx	lr
 800106e:	bf00      	nop

08001070 <USART_SendData>:
  *   USART1, USART2, USART3, UART4 or UART5.
  * @param  Data: the data to transmit.
  * @retval None
  */
void USART_SendData(USART_TypeDef* USARTx, uint16_t Data)
{
 8001070:	b480      	push	{r7}
 8001072:	b083      	sub	sp, #12
 8001074:	af00      	add	r7, sp, #0
 8001076:	6078      	str	r0, [r7, #4]
 8001078:	460b      	mov	r3, r1
 800107a:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_USART_DATA(Data)); 
    
  /* Transmit Data */
  USARTx->DR = (Data & (uint16_t)0x01FF);
 800107c:	887b      	ldrh	r3, [r7, #2]
 800107e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001082:	b29a      	uxth	r2, r3
 8001084:	687b      	ldr	r3, [r7, #4]
 8001086:	809a      	strh	r2, [r3, #4]
}
 8001088:	bf00      	nop
 800108a:	370c      	adds	r7, #12
 800108c:	46bd      	mov	sp, r7
 800108e:	bc80      	pop	{r7}
 8001090:	4770      	bx	lr
 8001092:	bf00      	nop

08001094 <USART_ReceiveData>:
  *   This parameter can be one of the following values:
  *   USART1, USART2, USART3, UART4 or UART5.
  * @retval The received data.
  */
uint16_t USART_ReceiveData(USART_TypeDef* USARTx)
{
 8001094:	b480      	push	{r7}
 8001096:	b083      	sub	sp, #12
 8001098:	af00      	add	r7, sp, #0
 800109a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  
  /* Receive Data */
  return (uint16_t)(USARTx->DR & (uint16_t)0x01FF);
 800109c:	687b      	ldr	r3, [r7, #4]
 800109e:	889b      	ldrh	r3, [r3, #4]
 80010a0:	b29b      	uxth	r3, r3
 80010a2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80010a6:	b29b      	uxth	r3, r3
}
 80010a8:	4618      	mov	r0, r3
 80010aa:	370c      	adds	r7, #12
 80010ac:	46bd      	mov	sp, r7
 80010ae:	bc80      	pop	{r7}
 80010b0:	4770      	bx	lr
 80010b2:	bf00      	nop

080010b4 <USART_GetITStatus>:
  *     @arg USART_IT_FE:   Framing Error interrupt
  *     @arg USART_IT_PE:   Parity Error interrupt
  * @retval The new state of USART_IT (SET or RESET).
  */
ITStatus USART_GetITStatus(USART_TypeDef* USARTx, uint16_t USART_IT)
{
 80010b4:	b480      	push	{r7}
 80010b6:	b087      	sub	sp, #28
 80010b8:	af00      	add	r7, sp, #0
 80010ba:	6078      	str	r0, [r7, #4]
 80010bc:	460b      	mov	r3, r1
 80010be:	807b      	strh	r3, [r7, #2]
  uint32_t bitpos = 0x00, itmask = 0x00, usartreg = 0x00;
 80010c0:	2300      	movs	r3, #0
 80010c2:	60fb      	str	r3, [r7, #12]
 80010c4:	2300      	movs	r3, #0
 80010c6:	617b      	str	r3, [r7, #20]
 80010c8:	2300      	movs	r3, #0
 80010ca:	60bb      	str	r3, [r7, #8]
  ITStatus bitstatus = RESET;
 80010cc:	2300      	movs	r3, #0
 80010ce:	74fb      	strb	r3, [r7, #19]
  {
    assert_param(IS_USART_123_PERIPH(USARTx));
  }   
  
  /* Get the USART register index */
  usartreg = (((uint8_t)USART_IT) >> 0x05);
 80010d0:	887b      	ldrh	r3, [r7, #2]
 80010d2:	b2db      	uxtb	r3, r3
 80010d4:	095b      	lsrs	r3, r3, #5
 80010d6:	b2db      	uxtb	r3, r3
 80010d8:	60bb      	str	r3, [r7, #8]
  /* Get the interrupt position */
  itmask = USART_IT & IT_Mask;
 80010da:	887b      	ldrh	r3, [r7, #2]
 80010dc:	f003 031f 	and.w	r3, r3, #31
 80010e0:	617b      	str	r3, [r7, #20]
  itmask = (uint32_t)0x01 << itmask;
 80010e2:	2201      	movs	r2, #1
 80010e4:	697b      	ldr	r3, [r7, #20]
 80010e6:	fa02 f303 	lsl.w	r3, r2, r3
 80010ea:	617b      	str	r3, [r7, #20]
  
  if (usartreg == 0x01) /* The IT  is in CR1 register */
 80010ec:	68bb      	ldr	r3, [r7, #8]
 80010ee:	2b01      	cmp	r3, #1
 80010f0:	d107      	bne.n	8001102 <USART_GetITStatus+0x4e>
  {
    itmask &= USARTx->CR1;
 80010f2:	687b      	ldr	r3, [r7, #4]
 80010f4:	899b      	ldrh	r3, [r3, #12]
 80010f6:	b29b      	uxth	r3, r3
 80010f8:	461a      	mov	r2, r3
 80010fa:	697b      	ldr	r3, [r7, #20]
 80010fc:	4013      	ands	r3, r2
 80010fe:	617b      	str	r3, [r7, #20]
 8001100:	e011      	b.n	8001126 <USART_GetITStatus+0x72>
  }
  else if (usartreg == 0x02) /* The IT  is in CR2 register */
 8001102:	68bb      	ldr	r3, [r7, #8]
 8001104:	2b02      	cmp	r3, #2
 8001106:	d107      	bne.n	8001118 <USART_GetITStatus+0x64>
  {
    itmask &= USARTx->CR2;
 8001108:	687b      	ldr	r3, [r7, #4]
 800110a:	8a1b      	ldrh	r3, [r3, #16]
 800110c:	b29b      	uxth	r3, r3
 800110e:	461a      	mov	r2, r3
 8001110:	697b      	ldr	r3, [r7, #20]
 8001112:	4013      	ands	r3, r2
 8001114:	617b      	str	r3, [r7, #20]
 8001116:	e006      	b.n	8001126 <USART_GetITStatus+0x72>
  }
  else /* The IT  is in CR3 register */
  {
    itmask &= USARTx->CR3;
 8001118:	687b      	ldr	r3, [r7, #4]
 800111a:	8a9b      	ldrh	r3, [r3, #20]
 800111c:	b29b      	uxth	r3, r3
 800111e:	461a      	mov	r2, r3
 8001120:	697b      	ldr	r3, [r7, #20]
 8001122:	4013      	ands	r3, r2
 8001124:	617b      	str	r3, [r7, #20]
  }
  
  bitpos = USART_IT >> 0x08;
 8001126:	887b      	ldrh	r3, [r7, #2]
 8001128:	0a1b      	lsrs	r3, r3, #8
 800112a:	b29b      	uxth	r3, r3
 800112c:	60fb      	str	r3, [r7, #12]
  bitpos = (uint32_t)0x01 << bitpos;
 800112e:	2201      	movs	r2, #1
 8001130:	68fb      	ldr	r3, [r7, #12]
 8001132:	fa02 f303 	lsl.w	r3, r2, r3
 8001136:	60fb      	str	r3, [r7, #12]
  bitpos &= USARTx->SR;
 8001138:	687b      	ldr	r3, [r7, #4]
 800113a:	881b      	ldrh	r3, [r3, #0]
 800113c:	b29b      	uxth	r3, r3
 800113e:	461a      	mov	r2, r3
 8001140:	68fb      	ldr	r3, [r7, #12]
 8001142:	4013      	ands	r3, r2
 8001144:	60fb      	str	r3, [r7, #12]
  if ((itmask != (uint16_t)RESET)&&(bitpos != (uint16_t)RESET))
 8001146:	697b      	ldr	r3, [r7, #20]
 8001148:	2b00      	cmp	r3, #0
 800114a:	d005      	beq.n	8001158 <USART_GetITStatus+0xa4>
 800114c:	68fb      	ldr	r3, [r7, #12]
 800114e:	2b00      	cmp	r3, #0
 8001150:	d002      	beq.n	8001158 <USART_GetITStatus+0xa4>
  {
    bitstatus = SET;
 8001152:	2301      	movs	r3, #1
 8001154:	74fb      	strb	r3, [r7, #19]
 8001156:	e001      	b.n	800115c <USART_GetITStatus+0xa8>
  }
  else
  {
    bitstatus = RESET;
 8001158:	2300      	movs	r3, #0
 800115a:	74fb      	strb	r3, [r7, #19]
  }
  
  return bitstatus;  
 800115c:	7cfb      	ldrb	r3, [r7, #19]
}
 800115e:	4618      	mov	r0, r3
 8001160:	371c      	adds	r7, #28
 8001162:	46bd      	mov	sp, r7
 8001164:	bc80      	pop	{r7}
 8001166:	4770      	bx	lr

08001168 <_ZnwjPv>:
void operator delete[](void*, const std::nothrow_t&) _GLIBCXX_USE_NOEXCEPT
  __attribute__((__externally_visible__));

// Default placement versions of operator new.
inline void* operator new(std::size_t, void* __p) _GLIBCXX_USE_NOEXCEPT
{ return __p; }
 8001168:	b480      	push	{r7}
 800116a:	b083      	sub	sp, #12
 800116c:	af00      	add	r7, sp, #0
 800116e:	6078      	str	r0, [r7, #4]
 8001170:	6039      	str	r1, [r7, #0]
 8001172:	683b      	ldr	r3, [r7, #0]
 8001174:	4618      	mov	r0, r3
 8001176:	370c      	adds	r7, #12
 8001178:	46bd      	mov	sp, r7
 800117a:	bc80      	pop	{r7}
 800117c:	4770      	bx	lr
 800117e:	bf00      	nop

08001180 <_ZSt16__deque_buf_sizej>:
#define _GLIBCXX_DEQUE_BUF_SIZE 512
#endif

  _GLIBCXX_CONSTEXPR inline size_t
  __deque_buf_size(size_t __size)
  { return (__size < _GLIBCXX_DEQUE_BUF_SIZE
 8001180:	b480      	push	{r7}
 8001182:	b083      	sub	sp, #12
 8001184:	af00      	add	r7, sp, #0
 8001186:	6078      	str	r0, [r7, #4]
	    ? size_t(_GLIBCXX_DEQUE_BUF_SIZE / __size) : size_t(1)); }
 8001188:	687b      	ldr	r3, [r7, #4]
 800118a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800118e:	d205      	bcs.n	800119c <_ZSt16__deque_buf_sizej+0x1c>
 8001190:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001194:	687b      	ldr	r3, [r7, #4]
 8001196:	fbb2 f3f3 	udiv	r3, r2, r3
 800119a:	e000      	b.n	800119e <_ZSt16__deque_buf_sizej+0x1e>
 800119c:	2301      	movs	r3, #1
 800119e:	4618      	mov	r0, r3
 80011a0:	370c      	adds	r7, #12
 80011a2:	46bd      	mov	sp, r7
 80011a4:	bc80      	pop	{r7}
 80011a6:	4770      	bx	lr

080011a8 <_ZN3SpiD1Ev>:
	 * @retval None
	 */
	virtual void send() = 0;

	/*destructor*/
	virtual ~Spi() {};
 80011a8:	b580      	push	{r7, lr}
 80011aa:	b082      	sub	sp, #8
 80011ac:	af00      	add	r7, sp, #0
 80011ae:	6078      	str	r0, [r7, #4]
 80011b0:	4a06      	ldr	r2, [pc, #24]	; (80011cc <_ZN3SpiD1Ev+0x24>)
 80011b2:	687b      	ldr	r3, [r7, #4]
 80011b4:	601a      	str	r2, [r3, #0]
 80011b6:	2300      	movs	r3, #0
 80011b8:	2b00      	cmp	r3, #0
 80011ba:	d002      	beq.n	80011c2 <_ZN3SpiD1Ev+0x1a>
 80011bc:	6878      	ldr	r0, [r7, #4]
 80011be:	f004 f8ed 	bl	800539c <_ZdlPv>
 80011c2:	687b      	ldr	r3, [r7, #4]
 80011c4:	4618      	mov	r0, r3
 80011c6:	3708      	adds	r7, #8
 80011c8:	46bd      	mov	sp, r7
 80011ca:	bd80      	pop	{r7, pc}
 80011cc:	08005a00 	.word	0x08005a00

080011d0 <_ZN3SpiD0Ev>:
 80011d0:	b580      	push	{r7, lr}
 80011d2:	b082      	sub	sp, #8
 80011d4:	af00      	add	r7, sp, #0
 80011d6:	6078      	str	r0, [r7, #4]
 80011d8:	6878      	ldr	r0, [r7, #4]
 80011da:	f7ff ffe5 	bl	80011a8 <_ZN3SpiD1Ev>
 80011de:	6878      	ldr	r0, [r7, #4]
 80011e0:	f004 f8dc 	bl	800539c <_ZdlPv>
 80011e4:	687b      	ldr	r3, [r7, #4]
 80011e6:	4618      	mov	r0, r3
 80011e8:	3708      	adds	r7, #8
 80011ea:	46bd      	mov	sp, r7
 80011ec:	bd80      	pop	{r7, pc}
 80011ee:	bf00      	nop

080011f0 <_ZL10storeBytevi>:
static int (*pGetByteSpi)() = 0;
static void (*pStoreByteSpi)(int byte) = 0;
static void (*pDisableCSSpi)() = 0;

static void storeBytev(int byte)
{
 80011f0:	b580      	push	{r7, lr}
 80011f2:	b084      	sub	sp, #16
 80011f4:	af00      	add	r7, sp, #0
 80011f6:	6078      	str	r0, [r7, #4]
	SPI1_class & sp = SPI1_class::getInstance();
 80011f8:	f000 f832 	bl	8001260 <_ZN10SPI1_class11getInstanceEv>
 80011fc:	60f8      	str	r0, [r7, #12]
	sp.storeByte(byte);
 80011fe:	68fb      	ldr	r3, [r7, #12]
 8001200:	681b      	ldr	r3, [r3, #0]
 8001202:	3308      	adds	r3, #8
 8001204:	681b      	ldr	r3, [r3, #0]
 8001206:	6879      	ldr	r1, [r7, #4]
 8001208:	68f8      	ldr	r0, [r7, #12]
 800120a:	4798      	blx	r3
}
 800120c:	bf00      	nop
 800120e:	3710      	adds	r7, #16
 8001210:	46bd      	mov	sp, r7
 8001212:	bd80      	pop	{r7, pc}

08001214 <_ZL8getBytevv>:

static int getBytev()
{
 8001214:	b580      	push	{r7, lr}
 8001216:	b082      	sub	sp, #8
 8001218:	af00      	add	r7, sp, #0
	SPI1_class & sp = SPI1_class::getInstance();
 800121a:	f000 f821 	bl	8001260 <_ZN10SPI1_class11getInstanceEv>
 800121e:	6078      	str	r0, [r7, #4]
	int retVal = sp.getByte();
 8001220:	687b      	ldr	r3, [r7, #4]
 8001222:	681b      	ldr	r3, [r3, #0]
 8001224:	3304      	adds	r3, #4
 8001226:	681b      	ldr	r3, [r3, #0]
 8001228:	6878      	ldr	r0, [r7, #4]
 800122a:	4798      	blx	r3
 800122c:	6038      	str	r0, [r7, #0]
	return retVal;
 800122e:	683b      	ldr	r3, [r7, #0]
}
 8001230:	4618      	mov	r0, r3
 8001232:	3708      	adds	r7, #8
 8001234:	46bd      	mov	sp, r7
 8001236:	bd80      	pop	{r7, pc}

08001238 <_ZL10disableCSvv>:

static void disableCSv()
{
 8001238:	b580      	push	{r7, lr}
 800123a:	b082      	sub	sp, #8
 800123c:	af00      	add	r7, sp, #0
	SPI1_class & sp = SPI1_class::getInstance();
 800123e:	f000 f80f 	bl	8001260 <_ZN10SPI1_class11getInstanceEv>
 8001242:	6078      	str	r0, [r7, #4]
	if(sp.isLastByte())
 8001244:	6878      	ldr	r0, [r7, #4]
 8001246:	f000 f92b 	bl	80014a0 <_ZN10SPI1_class10isLastByteEv>
 800124a:	4603      	mov	r3, r0
 800124c:	2b00      	cmp	r3, #0
 800124e:	d002      	beq.n	8001256 <_ZL10disableCSvv+0x1e>
	{
		sp.disableCS();
 8001250:	6878      	ldr	r0, [r7, #4]
 8001252:	f000 f88d 	bl	8001370 <_ZN10SPI1_class9disableCSEv>
	}
}
 8001256:	bf00      	nop
 8001258:	3708      	adds	r7, #8
 800125a:	46bd      	mov	sp, r7
 800125c:	bd80      	pop	{r7, pc}
 800125e:	bf00      	nop

08001260 <_ZN10SPI1_class11getInstanceEv>:

SPI1_class& SPI1_class::getInstance()
{
 8001260:	b580      	push	{r7, lr}
 8001262:	af00      	add	r7, sp, #0
	static SPI1_class sp;
 8001264:	4b09      	ldr	r3, [pc, #36]	; (800128c <_ZN10SPI1_class11getInstanceEv+0x2c>)
 8001266:	681b      	ldr	r3, [r3, #0]
 8001268:	f003 0301 	and.w	r3, r3, #1
 800126c:	2b00      	cmp	r3, #0
 800126e:	d10a      	bne.n	8001286 <_ZN10SPI1_class11getInstanceEv+0x26>
 8001270:	4807      	ldr	r0, [pc, #28]	; (8001290 <_ZN10SPI1_class11getInstanceEv+0x30>)
 8001272:	f000 f831 	bl	80012d8 <_ZN10SPI1_classC1Ev>
 8001276:	4b05      	ldr	r3, [pc, #20]	; (800128c <_ZN10SPI1_class11getInstanceEv+0x2c>)
 8001278:	2201      	movs	r2, #1
 800127a:	601a      	str	r2, [r3, #0]
 800127c:	4a05      	ldr	r2, [pc, #20]	; (8001294 <_ZN10SPI1_class11getInstanceEv+0x34>)
 800127e:	4906      	ldr	r1, [pc, #24]	; (8001298 <_ZN10SPI1_class11getInstanceEv+0x38>)
 8001280:	4803      	ldr	r0, [pc, #12]	; (8001290 <_ZN10SPI1_class11getInstanceEv+0x30>)
 8001282:	f004 f886 	bl	8005392 <__aeabi_atexit>
	return sp;
 8001286:	4b02      	ldr	r3, [pc, #8]	; (8001290 <_ZN10SPI1_class11getInstanceEv+0x30>)
}
 8001288:	4618      	mov	r0, r3
 800128a:	bd80      	pop	{r7, pc}
 800128c:	200000a8 	.word	0x200000a8
 8001290:	200000ac 	.word	0x200000ac
 8001294:	20000000 	.word	0x20000000
 8001298:	080014d5 	.word	0x080014d5

0800129c <_ZN3SpiC1Ev>:
{
	GPIO_TypeDef* gpioType;
	uint16_t csPin;
};

class Spi {
 800129c:	b480      	push	{r7}
 800129e:	b083      	sub	sp, #12
 80012a0:	af00      	add	r7, sp, #0
 80012a2:	6078      	str	r0, [r7, #4]
 80012a4:	4a04      	ldr	r2, [pc, #16]	; (80012b8 <_ZN3SpiC1Ev+0x1c>)
 80012a6:	687b      	ldr	r3, [r7, #4]
 80012a8:	601a      	str	r2, [r3, #0]
 80012aa:	687b      	ldr	r3, [r7, #4]
 80012ac:	4618      	mov	r0, r3
 80012ae:	370c      	adds	r7, #12
 80012b0:	46bd      	mov	sp, r7
 80012b2:	bc80      	pop	{r7}
 80012b4:	4770      	bx	lr
 80012b6:	bf00      	nop
 80012b8:	08005a00 	.word	0x08005a00

080012bc <_ZNSt5queueI8CommandSSt5dequeIS0_SaIS0_EEED1Ev>:
   *  Members not found in @a normal containers are @c container_type,
   *  which is a typedef for the second Sequence parameter, and @c push and
   *  @c pop, which are standard %queue/FIFO operations.
  */
  template<typename _Tp, typename _Sequence = deque<_Tp> >
    class queue
 80012bc:	b580      	push	{r7, lr}
 80012be:	b082      	sub	sp, #8
 80012c0:	af00      	add	r7, sp, #0
 80012c2:	6078      	str	r0, [r7, #4]
 80012c4:	687b      	ldr	r3, [r7, #4]
 80012c6:	4618      	mov	r0, r3
 80012c8:	f000 f980 	bl	80015cc <_ZNSt5dequeI8CommandSSaIS0_EED1Ev>
 80012cc:	687b      	ldr	r3, [r7, #4]
 80012ce:	4618      	mov	r0, r3
 80012d0:	3708      	adds	r7, #8
 80012d2:	46bd      	mov	sp, r7
 80012d4:	bd80      	pop	{r7, pc}
 80012d6:	bf00      	nop

080012d8 <_ZN10SPI1_classC1Ev>:

SPI1_class::SPI1_class()
 80012d8:	b590      	push	{r4, r7, lr}
 80012da:	b08d      	sub	sp, #52	; 0x34
 80012dc:	af00      	add	r7, sp, #0
 80012de:	6078      	str	r0, [r7, #4]
 80012e0:	687b      	ldr	r3, [r7, #4]
 80012e2:	4618      	mov	r0, r3
 80012e4:	f7ff ffda 	bl	800129c <_ZN3SpiC1Ev>
 80012e8:	4a11      	ldr	r2, [pc, #68]	; (8001330 <_ZN10SPI1_classC1Ev+0x58>)
 80012ea:	687b      	ldr	r3, [r7, #4]
 80012ec:	601a      	str	r2, [r3, #0]
 80012ee:	687b      	ldr	r3, [r7, #4]
 80012f0:	f103 040c 	add.w	r4, r3, #12
 80012f4:	f107 0308 	add.w	r3, r7, #8
 80012f8:	4618      	mov	r0, r3
 80012fa:	f000 f959 	bl	80015b0 <_ZNSt5dequeI8CommandSSaIS0_EEC1Ev>
 80012fe:	f107 0308 	add.w	r3, r7, #8
 8001302:	4619      	mov	r1, r3
 8001304:	4620      	mov	r0, r4
 8001306:	f000 f987 	bl	8001618 <_ZNSt5queueI8CommandSSt5dequeIS0_SaIS0_EEEC1ERKS3_>
 800130a:	f107 0308 	add.w	r3, r7, #8
 800130e:	4618      	mov	r0, r3
 8001310:	f000 f95c 	bl	80015cc <_ZNSt5dequeI8CommandSSaIS0_EED1Ev>
{
	pStoreByteSpi = storeBytev;
 8001314:	4b07      	ldr	r3, [pc, #28]	; (8001334 <_ZN10SPI1_classC1Ev+0x5c>)
 8001316:	4a08      	ldr	r2, [pc, #32]	; (8001338 <_ZN10SPI1_classC1Ev+0x60>)
 8001318:	601a      	str	r2, [r3, #0]
	pGetByteSpi = getBytev;
 800131a:	4b08      	ldr	r3, [pc, #32]	; (800133c <_ZN10SPI1_classC1Ev+0x64>)
 800131c:	4a08      	ldr	r2, [pc, #32]	; (8001340 <_ZN10SPI1_classC1Ev+0x68>)
 800131e:	601a      	str	r2, [r3, #0]
	pDisableCSSpi = disableCSv;
 8001320:	4b08      	ldr	r3, [pc, #32]	; (8001344 <_ZN10SPI1_classC1Ev+0x6c>)
 8001322:	4a09      	ldr	r2, [pc, #36]	; (8001348 <_ZN10SPI1_classC1Ev+0x70>)
 8001324:	601a      	str	r2, [r3, #0]
}
 8001326:	687b      	ldr	r3, [r7, #4]
 8001328:	4618      	mov	r0, r3
 800132a:	3734      	adds	r7, #52	; 0x34
 800132c:	46bd      	mov	sp, r7
 800132e:	bd90      	pop	{r4, r7, pc}
 8001330:	080059e0 	.word	0x080059e0
 8001334:	200000a0 	.word	0x200000a0
 8001338:	080011f1 	.word	0x080011f1
 800133c:	2000009c 	.word	0x2000009c
 8001340:	08001215 	.word	0x08001215
 8001344:	200000a4 	.word	0x200000a4
 8001348:	08001239 	.word	0x08001239

0800134c <_ZN10SPI1_class5setCSE6CSsetS>:

void SPI1_class::setCS(CSsetS settings)
{
 800134c:	b480      	push	{r7}
 800134e:	b085      	sub	sp, #20
 8001350:	af00      	add	r7, sp, #0
 8001352:	60f8      	str	r0, [r7, #12]
 8001354:	1d3b      	adds	r3, r7, #4
 8001356:	e883 0006 	stmia.w	r3, {r1, r2}
	m_csSet.gpioType = settings.gpioType;
 800135a:	687a      	ldr	r2, [r7, #4]
 800135c:	68fb      	ldr	r3, [r7, #12]
 800135e:	605a      	str	r2, [r3, #4]
	m_csSet.csPin = settings.csPin;
 8001360:	893a      	ldrh	r2, [r7, #8]
 8001362:	68fb      	ldr	r3, [r7, #12]
 8001364:	811a      	strh	r2, [r3, #8]
}
 8001366:	bf00      	nop
 8001368:	3714      	adds	r7, #20
 800136a:	46bd      	mov	sp, r7
 800136c:	bc80      	pop	{r7}
 800136e:	4770      	bx	lr

08001370 <_ZN10SPI1_class9disableCSEv>:

void SPI1_class::disableCS()
{
 8001370:	b580      	push	{r7, lr}
 8001372:	b082      	sub	sp, #8
 8001374:	af00      	add	r7, sp, #0
 8001376:	6078      	str	r0, [r7, #4]
	GPIO_SetBits(m_csSet.gpioType,m_csSet.csPin);
 8001378:	687b      	ldr	r3, [r7, #4]
 800137a:	685a      	ldr	r2, [r3, #4]
 800137c:	687b      	ldr	r3, [r7, #4]
 800137e:	891b      	ldrh	r3, [r3, #8]
 8001380:	b29b      	uxth	r3, r3
 8001382:	4619      	mov	r1, r3
 8001384:	4610      	mov	r0, r2
 8001386:	f7ff faf7 	bl	8000978 <GPIO_SetBits>
}
 800138a:	bf00      	nop
 800138c:	3708      	adds	r7, #8
 800138e:	46bd      	mov	sp, r7
 8001390:	bd80      	pop	{r7, pc}
 8001392:	bf00      	nop

08001394 <_ZN10SPI1_class6isBusyEv>:

bool SPI1_class::isBusy()
{
 8001394:	b580      	push	{r7, lr}
 8001396:	b084      	sub	sp, #16
 8001398:	af00      	add	r7, sp, #0
 800139a:	6078      	str	r0, [r7, #4]
	bool state = SPI_I2S_GetITStatus(SPI1,SPI_I2S_IT_TXE);
 800139c:	2171      	movs	r1, #113	; 0x71
 800139e:	4807      	ldr	r0, [pc, #28]	; (80013bc <_ZN10SPI1_class6isBusyEv+0x28>)
 80013a0:	f7ff fd0a 	bl	8000db8 <SPI_I2S_GetITStatus>
 80013a4:	4603      	mov	r3, r0
 80013a6:	2b00      	cmp	r3, #0
 80013a8:	bf14      	ite	ne
 80013aa:	2301      	movne	r3, #1
 80013ac:	2300      	moveq	r3, #0
 80013ae:	73fb      	strb	r3, [r7, #15]
	return state;
 80013b0:	7bfb      	ldrb	r3, [r7, #15]
}
 80013b2:	4618      	mov	r0, r3
 80013b4:	3710      	adds	r7, #16
 80013b6:	46bd      	mov	sp, r7
 80013b8:	bd80      	pop	{r7, pc}
 80013ba:	bf00      	nop
 80013bc:	40013000 	.word	0x40013000

080013c0 <_ZN10SPI1_class7getByteEv>:

int SPI1_class::getByte()
{
 80013c0:	b580      	push	{r7, lr}
 80013c2:	b086      	sub	sp, #24
 80013c4:	af00      	add	r7, sp, #0
 80013c6:	6078      	str	r0, [r7, #4]
	int msg = BUFFER_EMPTY;
 80013c8:	f44f 7380 	mov.w	r3, #256	; 0x100
 80013cc:	617b      	str	r3, [r7, #20]

	if(m_outBuffer.size() != 0)
 80013ce:	687b      	ldr	r3, [r7, #4]
 80013d0:	330c      	adds	r3, #12
 80013d2:	4618      	mov	r0, r3
 80013d4:	f000 f930 	bl	8001638 <_ZNKSt5queueI8CommandSSt5dequeIS0_SaIS0_EEE4sizeEv>
 80013d8:	4603      	mov	r3, r0
 80013da:	2b00      	cmp	r3, #0
 80013dc:	bf14      	ite	ne
 80013de:	2301      	movne	r3, #1
 80013e0:	2300      	moveq	r3, #0
 80013e2:	b2db      	uxtb	r3, r3
 80013e4:	2b00      	cmp	r3, #0
 80013e6:	d021      	beq.n	800142c <_ZN10SPI1_class7getByteEv+0x6c>
	{
		CommandS command = m_outBuffer.front();
 80013e8:	687b      	ldr	r3, [r7, #4]
 80013ea:	330c      	adds	r3, #12
 80013ec:	4618      	mov	r0, r3
 80013ee:	f000 f931 	bl	8001654 <_ZNSt5queueI8CommandSSt5dequeIS0_SaIS0_EEE5frontEv>
 80013f2:	4602      	mov	r2, r0
 80013f4:	f107 030c 	add.w	r3, r7, #12
 80013f8:	e892 0003 	ldmia.w	r2, {r0, r1}
 80013fc:	e883 0003 	stmia.w	r3, {r0, r1}
		msg = command.msg;
 8001400:	68fb      	ldr	r3, [r7, #12]
 8001402:	617b      	str	r3, [r7, #20]

		//update D/C# line
		GPIO_WriteBit(GPIOA,SPI1_D_C_PIN, (BitAction)command.d_c);
 8001404:	7c3b      	ldrb	r3, [r7, #16]
 8001406:	461a      	mov	r2, r3
 8001408:	2140      	movs	r1, #64	; 0x40
 800140a:	480b      	ldr	r0, [pc, #44]	; (8001438 <_ZN10SPI1_class7getByteEv+0x78>)
 800140c:	f7ff fad0 	bl	80009b0 <GPIO_WriteBit>
		GPIO_ResetBits(m_csSet.gpioType,m_csSet.csPin);
 8001410:	687b      	ldr	r3, [r7, #4]
 8001412:	685a      	ldr	r2, [r3, #4]
 8001414:	687b      	ldr	r3, [r7, #4]
 8001416:	891b      	ldrh	r3, [r3, #8]
 8001418:	b29b      	uxth	r3, r3
 800141a:	4619      	mov	r1, r3
 800141c:	4610      	mov	r0, r2
 800141e:	f7ff fab9 	bl	8000994 <GPIO_ResetBits>
		//remove job from queue
		m_outBuffer.pop();
 8001422:	687b      	ldr	r3, [r7, #4]
 8001424:	330c      	adds	r3, #12
 8001426:	4618      	mov	r0, r3
 8001428:	f000 f922 	bl	8001670 <_ZNSt5queueI8CommandSSt5dequeIS0_SaIS0_EEE3popEv>
	}
	return msg;
 800142c:	697b      	ldr	r3, [r7, #20]
}
 800142e:	4618      	mov	r0, r3
 8001430:	3718      	adds	r7, #24
 8001432:	46bd      	mov	sp, r7
 8001434:	bd80      	pop	{r7, pc}
 8001436:	bf00      	nop
 8001438:	40010800 	.word	0x40010800

0800143c <_ZN10SPI1_class9storeByteEi>:

void SPI1_class::storeByte(int byte)
{
 800143c:	b480      	push	{r7}
 800143e:	b083      	sub	sp, #12
 8001440:	af00      	add	r7, sp, #0
 8001442:	6078      	str	r0, [r7, #4]
 8001444:	6039      	str	r1, [r7, #0]
}
 8001446:	bf00      	nop
 8001448:	370c      	adds	r7, #12
 800144a:	46bd      	mov	sp, r7
 800144c:	bc80      	pop	{r7}
 800144e:	4770      	bx	lr

08001450 <_ZN10SPI1_class12storeCommandEi8CommandE>:

void SPI1_class::storeCommand(int msg, CommandE cmd)
{
 8001450:	b580      	push	{r7, lr}
 8001452:	b086      	sub	sp, #24
 8001454:	af00      	add	r7, sp, #0
 8001456:	60f8      	str	r0, [r7, #12]
 8001458:	60b9      	str	r1, [r7, #8]
 800145a:	4613      	mov	r3, r2
 800145c:	71fb      	strb	r3, [r7, #7]
	CommandS commands;
	commands.msg = msg;
 800145e:	68bb      	ldr	r3, [r7, #8]
 8001460:	613b      	str	r3, [r7, #16]
	commands.d_c = cmd;
 8001462:	79fb      	ldrb	r3, [r7, #7]
 8001464:	753b      	strb	r3, [r7, #20]
	m_outBuffer.push(commands);
 8001466:	68fb      	ldr	r3, [r7, #12]
 8001468:	330c      	adds	r3, #12
 800146a:	f107 0210 	add.w	r2, r7, #16
 800146e:	4611      	mov	r1, r2
 8001470:	4618      	mov	r0, r3
 8001472:	f000 f909 	bl	8001688 <_ZNSt5queueI8CommandSSt5dequeIS0_SaIS0_EEE4pushERKS0_>
}
 8001476:	bf00      	nop
 8001478:	3718      	adds	r7, #24
 800147a:	46bd      	mov	sp, r7
 800147c:	bd80      	pop	{r7, pc}
 800147e:	bf00      	nop

08001480 <_ZN10SPI1_class4sendEv>:

void SPI1_class::send()
{
 8001480:	b580      	push	{r7, lr}
 8001482:	b082      	sub	sp, #8
 8001484:	af00      	add	r7, sp, #0
 8001486:	6078      	str	r0, [r7, #4]
	SPI_I2S_ITConfig(SPI1,SPI_I2S_IT_TXE,ENABLE);
 8001488:	2201      	movs	r2, #1
 800148a:	2171      	movs	r1, #113	; 0x71
 800148c:	4803      	ldr	r0, [pc, #12]	; (800149c <_ZN10SPI1_class4sendEv+0x1c>)
 800148e:	f7ff fc19 	bl	8000cc4 <SPI_I2S_ITConfig>
}
 8001492:	bf00      	nop
 8001494:	3708      	adds	r7, #8
 8001496:	46bd      	mov	sp, r7
 8001498:	bd80      	pop	{r7, pc}
 800149a:	bf00      	nop
 800149c:	40013000 	.word	0x40013000

080014a0 <_ZN10SPI1_class10isLastByteEv>:

bool SPI1_class::isLastByte()
{
 80014a0:	b580      	push	{r7, lr}
 80014a2:	b084      	sub	sp, #16
 80014a4:	af00      	add	r7, sp, #0
 80014a6:	6078      	str	r0, [r7, #4]
	bool retVal = false;
 80014a8:	2300      	movs	r3, #0
 80014aa:	73fb      	strb	r3, [r7, #15]
	if(m_outBuffer.size() < 1)
 80014ac:	687b      	ldr	r3, [r7, #4]
 80014ae:	330c      	adds	r3, #12
 80014b0:	4618      	mov	r0, r3
 80014b2:	f000 f8c1 	bl	8001638 <_ZNKSt5queueI8CommandSSt5dequeIS0_SaIS0_EEE4sizeEv>
 80014b6:	4603      	mov	r3, r0
 80014b8:	2b00      	cmp	r3, #0
 80014ba:	bf0c      	ite	eq
 80014bc:	2301      	moveq	r3, #1
 80014be:	2300      	movne	r3, #0
 80014c0:	b2db      	uxtb	r3, r3
 80014c2:	2b00      	cmp	r3, #0
 80014c4:	d001      	beq.n	80014ca <_ZN10SPI1_class10isLastByteEv+0x2a>
	{
		retVal =  true;
 80014c6:	2301      	movs	r3, #1
 80014c8:	73fb      	strb	r3, [r7, #15]
	}
	return retVal;
 80014ca:	7bfb      	ldrb	r3, [r7, #15]
}
 80014cc:	4618      	mov	r0, r3
 80014ce:	3710      	adds	r7, #16
 80014d0:	46bd      	mov	sp, r7
 80014d2:	bd80      	pop	{r7, pc}

080014d4 <_ZN10SPI1_classD1Ev>:

SPI1_class::~SPI1_class()
 80014d4:	b580      	push	{r7, lr}
 80014d6:	b082      	sub	sp, #8
 80014d8:	af00      	add	r7, sp, #0
 80014da:	6078      	str	r0, [r7, #4]
 80014dc:	4a0b      	ldr	r2, [pc, #44]	; (800150c <_ZN10SPI1_classD1Ev+0x38>)
 80014de:	687b      	ldr	r3, [r7, #4]
 80014e0:	601a      	str	r2, [r3, #0]
 80014e2:	687b      	ldr	r3, [r7, #4]
 80014e4:	330c      	adds	r3, #12
 80014e6:	4618      	mov	r0, r3
 80014e8:	f7ff fee8 	bl	80012bc <_ZNSt5queueI8CommandSSt5dequeIS0_SaIS0_EEED1Ev>
 80014ec:	687b      	ldr	r3, [r7, #4]
 80014ee:	4618      	mov	r0, r3
 80014f0:	f7ff fe5a 	bl	80011a8 <_ZN3SpiD1Ev>
{

}
 80014f4:	2300      	movs	r3, #0
 80014f6:	2b00      	cmp	r3, #0
 80014f8:	d002      	beq.n	8001500 <_ZN10SPI1_classD1Ev+0x2c>
 80014fa:	6878      	ldr	r0, [r7, #4]
 80014fc:	f003 ff4e 	bl	800539c <_ZdlPv>
 8001500:	687b      	ldr	r3, [r7, #4]
 8001502:	4618      	mov	r0, r3
 8001504:	3708      	adds	r7, #8
 8001506:	46bd      	mov	sp, r7
 8001508:	bd80      	pop	{r7, pc}
 800150a:	bf00      	nop
 800150c:	080059e0 	.word	0x080059e0

08001510 <_ZN10SPI1_classD0Ev>:
		retVal =  true;
	}
	return retVal;
}

SPI1_class::~SPI1_class()
 8001510:	b580      	push	{r7, lr}
 8001512:	b082      	sub	sp, #8
 8001514:	af00      	add	r7, sp, #0
 8001516:	6078      	str	r0, [r7, #4]
{

}
 8001518:	6878      	ldr	r0, [r7, #4]
 800151a:	f7ff ffdb 	bl	80014d4 <_ZN10SPI1_classD1Ev>
 800151e:	6878      	ldr	r0, [r7, #4]
 8001520:	f003 ff3c 	bl	800539c <_ZdlPv>
 8001524:	687b      	ldr	r3, [r7, #4]
 8001526:	4618      	mov	r0, r3
 8001528:	3708      	adds	r7, #8
 800152a:	46bd      	mov	sp, r7
 800152c:	bd80      	pop	{r7, pc}
 800152e:	bf00      	nop

08001530 <SPI1_IRQHandler>:

extern "C" void SPI1_IRQHandler()
{
 8001530:	b580      	push	{r7, lr}
 8001532:	b082      	sub	sp, #8
 8001534:	af00      	add	r7, sp, #0
	pDisableCSSpi();
 8001536:	4b1b      	ldr	r3, [pc, #108]	; (80015a4 <SPI1_IRQHandler+0x74>)
 8001538:	681b      	ldr	r3, [r3, #0]
 800153a:	4798      	blx	r3

	if(SPI_I2S_GetITStatus(SPI1,SPI_I2S_IT_TXE) != RESET)
 800153c:	2171      	movs	r1, #113	; 0x71
 800153e:	481a      	ldr	r0, [pc, #104]	; (80015a8 <SPI1_IRQHandler+0x78>)
 8001540:	f7ff fc3a 	bl	8000db8 <SPI_I2S_GetITStatus>
 8001544:	4603      	mov	r3, r0
 8001546:	2b00      	cmp	r3, #0
 8001548:	bf14      	ite	ne
 800154a:	2301      	movne	r3, #1
 800154c:	2300      	moveq	r3, #0
 800154e:	b2db      	uxtb	r3, r3
 8001550:	2b00      	cmp	r3, #0
 8001552:	d013      	beq.n	800157c <SPI1_IRQHandler+0x4c>
	{
		int c = pGetByteSpi();
 8001554:	4b15      	ldr	r3, [pc, #84]	; (80015ac <SPI1_IRQHandler+0x7c>)
 8001556:	681b      	ldr	r3, [r3, #0]
 8001558:	4798      	blx	r3
 800155a:	6078      	str	r0, [r7, #4]
		if(c <= 0xFF)
 800155c:	687b      	ldr	r3, [r7, #4]
 800155e:	2bff      	cmp	r3, #255	; 0xff
 8001560:	dc07      	bgt.n	8001572 <SPI1_IRQHandler+0x42>
		{
			SPI_I2S_SendData(SPI1,(uint8_t)c);
 8001562:	687b      	ldr	r3, [r7, #4]
 8001564:	b2db      	uxtb	r3, r3
 8001566:	b29b      	uxth	r3, r3
 8001568:	4619      	mov	r1, r3
 800156a:	480f      	ldr	r0, [pc, #60]	; (80015a8 <SPI1_IRQHandler+0x78>)
 800156c:	f7ff fbda 	bl	8000d24 <SPI_I2S_SendData>
 8001570:	e004      	b.n	800157c <SPI1_IRQHandler+0x4c>
		}
		else
		{
			 SPI_I2S_ITConfig(SPI1, SPI_I2S_IT_TXE, DISABLE);
 8001572:	2200      	movs	r2, #0
 8001574:	2171      	movs	r1, #113	; 0x71
 8001576:	480c      	ldr	r0, [pc, #48]	; (80015a8 <SPI1_IRQHandler+0x78>)
 8001578:	f7ff fba4 	bl	8000cc4 <SPI_I2S_ITConfig>
		}
	}

	if (SPI_I2S_GetITStatus(SPI1, SPI_I2S_IT_RXNE) != RESET)
 800157c:	2160      	movs	r1, #96	; 0x60
 800157e:	480a      	ldr	r0, [pc, #40]	; (80015a8 <SPI1_IRQHandler+0x78>)
 8001580:	f7ff fc1a 	bl	8000db8 <SPI_I2S_GetITStatus>
 8001584:	4603      	mov	r3, r0
 8001586:	2b00      	cmp	r3, #0
 8001588:	bf14      	ite	ne
 800158a:	2301      	movne	r3, #1
 800158c:	2300      	moveq	r3, #0
 800158e:	b2db      	uxtb	r3, r3
 8001590:	2b00      	cmp	r3, #0
 8001592:	d003      	beq.n	800159c <SPI1_IRQHandler+0x6c>
	{
		SPI_I2S_ClearFlag(SPI1,SPI_I2S_FLAG_RXNE);
 8001594:	2101      	movs	r1, #1
 8001596:	4804      	ldr	r0, [pc, #16]	; (80015a8 <SPI1_IRQHandler+0x78>)
 8001598:	f7ff fbfe 	bl	8000d98 <SPI_I2S_ClearFlag>
	}
}
 800159c:	bf00      	nop
 800159e:	3708      	adds	r7, #8
 80015a0:	46bd      	mov	sp, r7
 80015a2:	bd80      	pop	{r7, pc}
 80015a4:	200000a4 	.word	0x200000a4
 80015a8:	40013000 	.word	0x40013000
 80015ac:	2000009c 	.word	0x2000009c

080015b0 <_ZNSt5dequeI8CommandSSaIS0_EEC1Ev>:
      // (assign() and get_allocator() are also listed in this section)

      /**
       *  @brief  Creates a %deque with no elements.
       */
      deque() : _Base() { }
 80015b0:	b580      	push	{r7, lr}
 80015b2:	b082      	sub	sp, #8
 80015b4:	af00      	add	r7, sp, #0
 80015b6:	6078      	str	r0, [r7, #4]
 80015b8:	687b      	ldr	r3, [r7, #4]
 80015ba:	4618      	mov	r0, r3
 80015bc:	f000 f87e 	bl	80016bc <_ZNSt11_Deque_baseI8CommandSSaIS0_EEC1Ev>
 80015c0:	687b      	ldr	r3, [r7, #4]
 80015c2:	4618      	mov	r0, r3
 80015c4:	3708      	adds	r7, #8
 80015c6:	46bd      	mov	sp, r7
 80015c8:	bd80      	pop	{r7, pc}
 80015ca:	bf00      	nop

080015cc <_ZNSt5dequeI8CommandSSaIS0_EED1Ev>:
      /**
       *  The dtor only erases the elements, and note that if the elements
       *  themselves are pointers, the pointed-to memory is not touched in any
       *  way.  Managing the pointer is the user's responsibility.
       */
      ~deque()
 80015cc:	b580      	push	{r7, lr}
 80015ce:	b08a      	sub	sp, #40	; 0x28
 80015d0:	af00      	add	r7, sp, #0
 80015d2:	6078      	str	r0, [r7, #4]
      { _M_destroy_data(begin(), end(), _M_get_Tp_allocator()); }
 80015d4:	f107 0308 	add.w	r3, r7, #8
 80015d8:	6879      	ldr	r1, [r7, #4]
 80015da:	4618      	mov	r0, r3
 80015dc:	f000 f8a2 	bl	8001724 <_ZNSt5dequeI8CommandSSaIS0_EE5beginEv>
 80015e0:	f107 0318 	add.w	r3, r7, #24
 80015e4:	6879      	ldr	r1, [r7, #4]
 80015e6:	4618      	mov	r0, r3
 80015e8:	f000 f8ac 	bl	8001744 <_ZNSt5dequeI8CommandSSaIS0_EE3endEv>
 80015ec:	687b      	ldr	r3, [r7, #4]
 80015ee:	4618      	mov	r0, r3
 80015f0:	f000 f8b8 	bl	8001764 <_ZNSt11_Deque_baseI8CommandSSaIS0_EE19_M_get_Tp_allocatorEv>
 80015f4:	4603      	mov	r3, r0
 80015f6:	f107 0218 	add.w	r2, r7, #24
 80015fa:	f107 0108 	add.w	r1, r7, #8
 80015fe:	6878      	ldr	r0, [r7, #4]
 8001600:	f000 f8d6 	bl	80017b0 <_ZNSt5dequeI8CommandSSaIS0_EE15_M_destroy_dataESt15_Deque_iteratorIS0_RS0_PS0_ES6_RKS1_>
 8001604:	687b      	ldr	r3, [r7, #4]
 8001606:	4618      	mov	r0, r3
 8001608:	f000 f86a 	bl	80016e0 <_ZNSt11_Deque_baseI8CommandSSaIS0_EED1Ev>
 800160c:	687b      	ldr	r3, [r7, #4]
 800160e:	4618      	mov	r0, r3
 8001610:	3728      	adds	r7, #40	; 0x28
 8001612:	46bd      	mov	sp, r7
 8001614:	bd80      	pop	{r7, pc}
 8001616:	bf00      	nop

08001618 <_ZNSt5queueI8CommandSSt5dequeIS0_SaIS0_EEEC1ERKS3_>:
      /**
       *  @brief  Default constructor creates no elements.
       */
#if __cplusplus < 201103L
      explicit
      queue(const _Sequence& __c = _Sequence())
 8001618:	b580      	push	{r7, lr}
 800161a:	b082      	sub	sp, #8
 800161c:	af00      	add	r7, sp, #0
 800161e:	6078      	str	r0, [r7, #4]
 8001620:	6039      	str	r1, [r7, #0]
      : c(__c) { }
 8001622:	687b      	ldr	r3, [r7, #4]
 8001624:	6839      	ldr	r1, [r7, #0]
 8001626:	4618      	mov	r0, r3
 8001628:	f000 f8ce 	bl	80017c8 <_ZNSt5dequeI8CommandSSaIS0_EEC1ERKS2_>
 800162c:	687b      	ldr	r3, [r7, #4]
 800162e:	4618      	mov	r0, r3
 8001630:	3708      	adds	r7, #8
 8001632:	46bd      	mov	sp, r7
 8001634:	bd80      	pop	{r7, pc}
 8001636:	bf00      	nop

08001638 <_ZNKSt5queueI8CommandSSt5dequeIS0_SaIS0_EEE4sizeEv>:
      empty() const
      { return c.empty(); }

      /**  Returns the number of elements in the %queue.  */
      size_type
      size() const
 8001638:	b580      	push	{r7, lr}
 800163a:	b082      	sub	sp, #8
 800163c:	af00      	add	r7, sp, #0
 800163e:	6078      	str	r0, [r7, #4]
      { return c.size(); }
 8001640:	687b      	ldr	r3, [r7, #4]
 8001642:	4618      	mov	r0, r3
 8001644:	f000 f90a 	bl	800185c <_ZNKSt5dequeI8CommandSSaIS0_EE4sizeEv>
 8001648:	4603      	mov	r3, r0
 800164a:	4618      	mov	r0, r3
 800164c:	3708      	adds	r7, #8
 800164e:	46bd      	mov	sp, r7
 8001650:	bd80      	pop	{r7, pc}
 8001652:	bf00      	nop

08001654 <_ZNSt5queueI8CommandSSt5dequeIS0_SaIS0_EEE5frontEv>:
      /**
       *  Returns a read/write reference to the data at the first
       *  element of the %queue.
       */
      reference
      front()
 8001654:	b580      	push	{r7, lr}
 8001656:	b082      	sub	sp, #8
 8001658:	af00      	add	r7, sp, #0
 800165a:	6078      	str	r0, [r7, #4]
      {
	__glibcxx_requires_nonempty();
	return c.front();
 800165c:	687b      	ldr	r3, [r7, #4]
 800165e:	4618      	mov	r0, r3
 8001660:	f000 f90e 	bl	8001880 <_ZNSt5dequeI8CommandSSaIS0_EE5frontEv>
 8001664:	4603      	mov	r3, r0
      }
 8001666:	4618      	mov	r0, r3
 8001668:	3708      	adds	r7, #8
 800166a:	46bd      	mov	sp, r7
 800166c:	bd80      	pop	{r7, pc}
 800166e:	bf00      	nop

08001670 <_ZNSt5queueI8CommandSSt5dequeIS0_SaIS0_EEE3popEv>:
       *  Note that no data is returned, and if the first element's
       *  data is needed, it should be retrieved before pop() is
       *  called.
       */
      void
      pop()
 8001670:	b580      	push	{r7, lr}
 8001672:	b082      	sub	sp, #8
 8001674:	af00      	add	r7, sp, #0
 8001676:	6078      	str	r0, [r7, #4]
      {
	__glibcxx_requires_nonempty();
	c.pop_front();
 8001678:	687b      	ldr	r3, [r7, #4]
 800167a:	4618      	mov	r0, r3
 800167c:	f000 f914 	bl	80018a8 <_ZNSt5dequeI8CommandSSaIS0_EE9pop_frontEv>
      }
 8001680:	bf00      	nop
 8001682:	3708      	adds	r7, #8
 8001684:	46bd      	mov	sp, r7
 8001686:	bd80      	pop	{r7, pc}

08001688 <_ZNSt5queueI8CommandSSt5dequeIS0_SaIS0_EEE4pushERKS0_>:
       *  element at the end of the %queue and assigns the given data
       *  to it.  The time complexity of the operation depends on the
       *  underlying sequence.
       */
      void
      push(const value_type& __x)
 8001688:	b580      	push	{r7, lr}
 800168a:	b082      	sub	sp, #8
 800168c:	af00      	add	r7, sp, #0
 800168e:	6078      	str	r0, [r7, #4]
 8001690:	6039      	str	r1, [r7, #0]
      { c.push_back(__x); }
 8001692:	687b      	ldr	r3, [r7, #4]
 8001694:	6839      	ldr	r1, [r7, #0]
 8001696:	4618      	mov	r0, r3
 8001698:	f000 f926 	bl	80018e8 <_ZNSt5dequeI8CommandSSaIS0_EE9push_backERKS0_>
 800169c:	bf00      	nop
 800169e:	3708      	adds	r7, #8
 80016a0:	46bd      	mov	sp, r7
 80016a2:	bd80      	pop	{r7, pc}

080016a4 <_ZNSt11_Deque_baseI8CommandSSaIS0_EE11_Deque_implD1Ev>:
      typedef typename iterator::_Map_pointer _Map_pointer;

      //This struct encapsulates the implementation of the std::deque
      //standard container and at the same time makes use of the EBO
      //for empty allocators.
      struct _Deque_impl
 80016a4:	b580      	push	{r7, lr}
 80016a6:	b082      	sub	sp, #8
 80016a8:	af00      	add	r7, sp, #0
 80016aa:	6078      	str	r0, [r7, #4]
 80016ac:	6878      	ldr	r0, [r7, #4]
 80016ae:	f000 f959 	bl	8001964 <_ZNSaI8CommandSED1Ev>
 80016b2:	687b      	ldr	r3, [r7, #4]
 80016b4:	4618      	mov	r0, r3
 80016b6:	3708      	adds	r7, #8
 80016b8:	46bd      	mov	sp, r7
 80016ba:	bd80      	pop	{r7, pc}

080016bc <_ZNSt11_Deque_baseI8CommandSSaIS0_EEC1Ev>:
      { return allocator_type(_M_get_Tp_allocator()); }

      typedef _Deque_iterator<_Tp, _Tp&, _Ptr>          iterator;
      typedef _Deque_iterator<_Tp, const _Tp&, _Ptr_const>   const_iterator;

      _Deque_base()
 80016bc:	b580      	push	{r7, lr}
 80016be:	b082      	sub	sp, #8
 80016c0:	af00      	add	r7, sp, #0
 80016c2:	6078      	str	r0, [r7, #4]
      : _M_impl()
 80016c4:	687b      	ldr	r3, [r7, #4]
 80016c6:	4618      	mov	r0, r3
 80016c8:	f000 f930 	bl	800192c <_ZNSt11_Deque_baseI8CommandSSaIS0_EE11_Deque_implC1Ev>
      { _M_initialize_map(0); }
 80016cc:	2100      	movs	r1, #0
 80016ce:	6878      	ldr	r0, [r7, #4]
 80016d0:	f000 f954 	bl	800197c <_ZNSt11_Deque_baseI8CommandSSaIS0_EE17_M_initialize_mapEj>
 80016d4:	687b      	ldr	r3, [r7, #4]
 80016d6:	4618      	mov	r0, r3
 80016d8:	3708      	adds	r7, #8
 80016da:	46bd      	mov	sp, r7
 80016dc:	bd80      	pop	{r7, pc}
 80016de:	bf00      	nop

080016e0 <_ZNSt11_Deque_baseI8CommandSSaIS0_EED1Ev>:
      }
#endif
    };

  template<typename _Tp, typename _Alloc>
    _Deque_base<_Tp, _Alloc>::
 80016e0:	b580      	push	{r7, lr}
 80016e2:	b082      	sub	sp, #8
 80016e4:	af00      	add	r7, sp, #0
 80016e6:	6078      	str	r0, [r7, #4]
    ~_Deque_base() _GLIBCXX_NOEXCEPT
    {
      if (this->_M_impl._M_map)
 80016e8:	687b      	ldr	r3, [r7, #4]
 80016ea:	681b      	ldr	r3, [r3, #0]
 80016ec:	2b00      	cmp	r3, #0
 80016ee:	d010      	beq.n	8001712 <_ZNSt11_Deque_baseI8CommandSSaIS0_EED1Ev+0x32>
	{
	  _M_destroy_nodes(this->_M_impl._M_start._M_node,
 80016f0:	687b      	ldr	r3, [r7, #4]
 80016f2:	6959      	ldr	r1, [r3, #20]
			   this->_M_impl._M_finish._M_node + 1);
 80016f4:	687b      	ldr	r3, [r7, #4]
 80016f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    _Deque_base<_Tp, _Alloc>::
    ~_Deque_base() _GLIBCXX_NOEXCEPT
    {
      if (this->_M_impl._M_map)
	{
	  _M_destroy_nodes(this->_M_impl._M_start._M_node,
 80016f8:	3304      	adds	r3, #4
 80016fa:	461a      	mov	r2, r3
 80016fc:	6878      	ldr	r0, [r7, #4]
 80016fe:	f000 f9a1 	bl	8001a44 <_ZNSt11_Deque_baseI8CommandSSaIS0_EE16_M_destroy_nodesEPPS0_S4_>
			   this->_M_impl._M_finish._M_node + 1);
	  _M_deallocate_map(this->_M_impl._M_map, this->_M_impl._M_map_size);
 8001702:	687b      	ldr	r3, [r7, #4]
 8001704:	6819      	ldr	r1, [r3, #0]
 8001706:	687b      	ldr	r3, [r7, #4]
 8001708:	685b      	ldr	r3, [r3, #4]
 800170a:	461a      	mov	r2, r3
 800170c:	6878      	ldr	r0, [r7, #4]
 800170e:	f000 f9b3 	bl	8001a78 <_ZNSt11_Deque_baseI8CommandSSaIS0_EE17_M_deallocate_mapEPPS0_j>
	}
    }
 8001712:	687b      	ldr	r3, [r7, #4]
 8001714:	4618      	mov	r0, r3
 8001716:	f7ff ffc5 	bl	80016a4 <_ZNSt11_Deque_baseI8CommandSSaIS0_EE11_Deque_implD1Ev>
 800171a:	687b      	ldr	r3, [r7, #4]
 800171c:	4618      	mov	r0, r3
 800171e:	3708      	adds	r7, #8
 8001720:	46bd      	mov	sp, r7
 8001722:	bd80      	pop	{r7, pc}

08001724 <_ZNSt5dequeI8CommandSSaIS0_EE5beginEv>:
      /**
       *  Returns a read/write iterator that points to the first element in the
       *  %deque.  Iteration is done in ordinary element order.
       */
      iterator
      begin() _GLIBCXX_NOEXCEPT
 8001724:	b580      	push	{r7, lr}
 8001726:	b082      	sub	sp, #8
 8001728:	af00      	add	r7, sp, #0
 800172a:	6078      	str	r0, [r7, #4]
 800172c:	6039      	str	r1, [r7, #0]
      { return this->_M_impl._M_start; }
 800172e:	683b      	ldr	r3, [r7, #0]
 8001730:	3308      	adds	r3, #8
 8001732:	4619      	mov	r1, r3
 8001734:	6878      	ldr	r0, [r7, #4]
 8001736:	f000 f81f 	bl	8001778 <_ZNSt15_Deque_iteratorI8CommandSRS0_PS0_EC1ERKS3_>
 800173a:	6878      	ldr	r0, [r7, #4]
 800173c:	3708      	adds	r7, #8
 800173e:	46bd      	mov	sp, r7
 8001740:	bd80      	pop	{r7, pc}
 8001742:	bf00      	nop

08001744 <_ZNSt5dequeI8CommandSSaIS0_EE3endEv>:
       *  Returns a read/write iterator that points one past the last
       *  element in the %deque.  Iteration is done in ordinary
       *  element order.
       */
      iterator
      end() _GLIBCXX_NOEXCEPT
 8001744:	b580      	push	{r7, lr}
 8001746:	b082      	sub	sp, #8
 8001748:	af00      	add	r7, sp, #0
 800174a:	6078      	str	r0, [r7, #4]
 800174c:	6039      	str	r1, [r7, #0]
      { return this->_M_impl._M_finish; }
 800174e:	683b      	ldr	r3, [r7, #0]
 8001750:	3318      	adds	r3, #24
 8001752:	4619      	mov	r1, r3
 8001754:	6878      	ldr	r0, [r7, #4]
 8001756:	f000 f80f 	bl	8001778 <_ZNSt15_Deque_iteratorI8CommandSRS0_PS0_EC1ERKS3_>
 800175a:	6878      	ldr	r0, [r7, #4]
 800175c:	3708      	adds	r7, #8
 800175e:	46bd      	mov	sp, r7
 8001760:	bd80      	pop	{r7, pc}
 8001762:	bf00      	nop

08001764 <_ZNSt11_Deque_baseI8CommandSSaIS0_EE19_M_get_Tp_allocatorEv>:
	  swap(this->_M_map_size, __x._M_map_size);
	}
      };

      _Tp_alloc_type&
      _M_get_Tp_allocator() _GLIBCXX_NOEXCEPT
 8001764:	b480      	push	{r7}
 8001766:	b083      	sub	sp, #12
 8001768:	af00      	add	r7, sp, #0
 800176a:	6078      	str	r0, [r7, #4]
      { return *static_cast<_Tp_alloc_type*>(&this->_M_impl); }
 800176c:	687b      	ldr	r3, [r7, #4]
 800176e:	4618      	mov	r0, r3
 8001770:	370c      	adds	r7, #12
 8001772:	46bd      	mov	sp, r7
 8001774:	bc80      	pop	{r7}
 8001776:	4770      	bx	lr

08001778 <_ZNSt15_Deque_iteratorI8CommandSRS0_PS0_EC1ERKS3_>:
        _M_last(*__y + _S_buffer_size()), _M_node(__y) { }

      _Deque_iterator() _GLIBCXX_NOEXCEPT
      : _M_cur(), _M_first(), _M_last(), _M_node() { }

      _Deque_iterator(const iterator& __x) _GLIBCXX_NOEXCEPT
 8001778:	b480      	push	{r7}
 800177a:	b083      	sub	sp, #12
 800177c:	af00      	add	r7, sp, #0
 800177e:	6078      	str	r0, [r7, #4]
 8001780:	6039      	str	r1, [r7, #0]
      : _M_cur(__x._M_cur), _M_first(__x._M_first),
        _M_last(__x._M_last), _M_node(__x._M_node) { }
 8001782:	683b      	ldr	r3, [r7, #0]
 8001784:	681a      	ldr	r2, [r3, #0]
 8001786:	687b      	ldr	r3, [r7, #4]
 8001788:	601a      	str	r2, [r3, #0]
 800178a:	683b      	ldr	r3, [r7, #0]
 800178c:	685a      	ldr	r2, [r3, #4]
 800178e:	687b      	ldr	r3, [r7, #4]
 8001790:	605a      	str	r2, [r3, #4]
 8001792:	683b      	ldr	r3, [r7, #0]
 8001794:	689a      	ldr	r2, [r3, #8]
 8001796:	687b      	ldr	r3, [r7, #4]
 8001798:	609a      	str	r2, [r3, #8]
 800179a:	683b      	ldr	r3, [r7, #0]
 800179c:	68da      	ldr	r2, [r3, #12]
 800179e:	687b      	ldr	r3, [r7, #4]
 80017a0:	60da      	str	r2, [r3, #12]
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	4618      	mov	r0, r3
 80017a6:	370c      	adds	r7, #12
 80017a8:	46bd      	mov	sp, r7
 80017aa:	bc80      	pop	{r7}
 80017ac:	4770      	bx	lr
 80017ae:	bf00      	nop

080017b0 <_ZNSt5dequeI8CommandSSaIS0_EE15_M_destroy_dataESt15_Deque_iteratorIS0_RS0_PS0_ES6_RKS1_>:
        void
        _M_destroy_data(iterator __first, iterator __last, const _Alloc1&)
        { _M_destroy_data_aux(__first, __last); }

      void
      _M_destroy_data(iterator __first, iterator __last,
 80017b0:	b480      	push	{r7}
 80017b2:	b08d      	sub	sp, #52	; 0x34
 80017b4:	af00      	add	r7, sp, #0
 80017b6:	60f8      	str	r0, [r7, #12]
 80017b8:	60b9      	str	r1, [r7, #8]
 80017ba:	607a      	str	r2, [r7, #4]
 80017bc:	603b      	str	r3, [r7, #0]
		      const std::allocator<_Tp>&)
      {
	if (!__has_trivial_destructor(value_type))
	  _M_destroy_data_aux(__first, __last);
      }
 80017be:	bf00      	nop
 80017c0:	3734      	adds	r7, #52	; 0x34
 80017c2:	46bd      	mov	sp, r7
 80017c4:	bc80      	pop	{r7}
 80017c6:	4770      	bx	lr

080017c8 <_ZNSt5dequeI8CommandSSaIS0_EEC1ERKS2_>:
       *  @param  __x  A %deque of identical element and allocator types.
       *
       *  The newly-created %deque uses a copy of the allocation object used
       *  by @a __x.
       */
      deque(const deque& __x)
 80017c8:	b5b0      	push	{r4, r5, r7, lr}
 80017ca:	b09a      	sub	sp, #104	; 0x68
 80017cc:	af08      	add	r7, sp, #32
 80017ce:	6178      	str	r0, [r7, #20]
 80017d0:	6139      	str	r1, [r7, #16]
      : _Base(_Alloc_traits::_S_select_on_copy(__x._M_get_Tp_allocator()),
	      __x.size())
 80017d2:	697c      	ldr	r4, [r7, #20]
       *
       *  The newly-created %deque uses a copy of the allocation object used
       *  by @a __x.
       */
      deque(const deque& __x)
      : _Base(_Alloc_traits::_S_select_on_copy(__x._M_get_Tp_allocator()),
 80017d4:	693b      	ldr	r3, [r7, #16]
 80017d6:	4618      	mov	r0, r3
 80017d8:	f000 f974 	bl	8001ac4 <_ZNKSt11_Deque_baseI8CommandSSaIS0_EE19_M_get_Tp_allocatorEv>
 80017dc:	4603      	mov	r3, r0
 80017de:	4618      	mov	r0, r3
 80017e0:	f000 f966 	bl	8001ab0 <_ZN9__gnu_cxx14__alloc_traitsISaI8CommandSEE17_S_select_on_copyERKS2_>
 80017e4:	4605      	mov	r5, r0
	      __x.size())
 80017e6:	6938      	ldr	r0, [r7, #16]
 80017e8:	f000 f838 	bl	800185c <_ZNKSt5dequeI8CommandSSaIS0_EE4sizeEv>
 80017ec:	4603      	mov	r3, r0
 80017ee:	461a      	mov	r2, r3
 80017f0:	4629      	mov	r1, r5
 80017f2:	4620      	mov	r0, r4
 80017f4:	f000 f970 	bl	8001ad8 <_ZNSt11_Deque_baseI8CommandSSaIS0_EEC1ERKS1_j>
      { std::__uninitialized_copy_a(__x.begin(), __x.end(), 
 80017f8:	f107 0318 	add.w	r3, r7, #24
 80017fc:	6939      	ldr	r1, [r7, #16]
 80017fe:	4618      	mov	r0, r3
 8001800:	f000 f97e 	bl	8001b00 <_ZNKSt5dequeI8CommandSSaIS0_EE5beginEv>
 8001804:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001808:	6939      	ldr	r1, [r7, #16]
 800180a:	4618      	mov	r0, r3
 800180c:	f000 f988 	bl	8001b20 <_ZNKSt5dequeI8CommandSSaIS0_EE3endEv>
 8001810:	697b      	ldr	r3, [r7, #20]
 8001812:	f103 0208 	add.w	r2, r3, #8
 8001816:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800181a:	4611      	mov	r1, r2
 800181c:	4618      	mov	r0, r3
 800181e:	f7ff ffab 	bl	8001778 <_ZNSt15_Deque_iteratorI8CommandSRS0_PS0_EC1ERKS3_>
				    this->_M_impl._M_start,
				    _M_get_Tp_allocator()); }
 8001822:	697b      	ldr	r3, [r7, #20]
 8001824:	4618      	mov	r0, r3
 8001826:	f7ff ff9d 	bl	8001764 <_ZNSt11_Deque_baseI8CommandSSaIS0_EE19_M_get_Tp_allocatorEv>
 800182a:	4603      	mov	r3, r0
       *  by @a __x.
       */
      deque(const deque& __x)
      : _Base(_Alloc_traits::_S_select_on_copy(__x._M_get_Tp_allocator()),
	      __x.size())
      { std::__uninitialized_copy_a(__x.begin(), __x.end(), 
 800182c:	463d      	mov	r5, r7
 800182e:	9306      	str	r3, [sp, #24]
 8001830:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8001834:	9305      	str	r3, [sp, #20]
 8001836:	ac01      	add	r4, sp, #4
 8001838:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800183c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800183e:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8001842:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001844:	9300      	str	r3, [sp, #0]
 8001846:	f107 0318 	add.w	r3, r7, #24
 800184a:	cb0e      	ldmia	r3, {r1, r2, r3}
 800184c:	4628      	mov	r0, r5
 800184e:	f000 f977 	bl	8001b40 <_ZSt22__uninitialized_copy_aISt15_Deque_iteratorI8CommandSRKS1_PS2_ES0_IS1_RS1_PS1_ES1_ET0_T_SA_S9_RSaIT1_E>
				    this->_M_impl._M_start,
				    _M_get_Tp_allocator()); }
 8001852:	697b      	ldr	r3, [r7, #20]
 8001854:	4618      	mov	r0, r3
 8001856:	3748      	adds	r7, #72	; 0x48
 8001858:	46bd      	mov	sp, r7
 800185a:	bdb0      	pop	{r4, r5, r7, pc}

0800185c <_ZNKSt5dequeI8CommandSSaIS0_EE4sizeEv>:
#endif

      // [23.2.1.2] capacity
      /**  Returns the number of elements in the %deque.  */
      size_type
      size() const _GLIBCXX_NOEXCEPT
 800185c:	b580      	push	{r7, lr}
 800185e:	b082      	sub	sp, #8
 8001860:	af00      	add	r7, sp, #0
 8001862:	6078      	str	r0, [r7, #4]
      { return this->_M_impl._M_finish - this->_M_impl._M_start; }
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	f103 0218 	add.w	r2, r3, #24
 800186a:	687b      	ldr	r3, [r7, #4]
 800186c:	3308      	adds	r3, #8
 800186e:	4619      	mov	r1, r3
 8001870:	4610      	mov	r0, r2
 8001872:	f000 f98d 	bl	8001b90 <_ZStmiI8CommandSRS0_PS0_ENSt15_Deque_iteratorIT_T0_T1_E15difference_typeERKS7_SA_>
 8001876:	4603      	mov	r3, r0
 8001878:	4618      	mov	r0, r3
 800187a:	3708      	adds	r7, #8
 800187c:	46bd      	mov	sp, r7
 800187e:	bd80      	pop	{r7, pc}

08001880 <_ZNSt5dequeI8CommandSSaIS0_EE5frontEv>:
      /**
       *  Returns a read/write reference to the data at the first
       *  element of the %deque.
       */
      reference
      front() _GLIBCXX_NOEXCEPT
 8001880:	b580      	push	{r7, lr}
 8001882:	b086      	sub	sp, #24
 8001884:	af00      	add	r7, sp, #0
 8001886:	6078      	str	r0, [r7, #4]
      { return *begin(); }
 8001888:	f107 0308 	add.w	r3, r7, #8
 800188c:	6879      	ldr	r1, [r7, #4]
 800188e:	4618      	mov	r0, r3
 8001890:	f7ff ff48 	bl	8001724 <_ZNSt5dequeI8CommandSSaIS0_EE5beginEv>
 8001894:	f107 0308 	add.w	r3, r7, #8
 8001898:	4618      	mov	r0, r3
 800189a:	f000 f9a1 	bl	8001be0 <_ZNKSt15_Deque_iteratorI8CommandSRS0_PS0_EdeEv>
 800189e:	4603      	mov	r3, r0
 80018a0:	4618      	mov	r0, r3
 80018a2:	3718      	adds	r7, #24
 80018a4:	46bd      	mov	sp, r7
 80018a6:	bd80      	pop	{r7, pc}

080018a8 <_ZNSt5dequeI8CommandSSaIS0_EE9pop_frontEv>:
       *
       *  Note that no data is returned, and if the first element's data is
       *  needed, it should be retrieved before pop_front() is called.
       */
      void
      pop_front() _GLIBCXX_NOEXCEPT
 80018a8:	b580      	push	{r7, lr}
 80018aa:	b082      	sub	sp, #8
 80018ac:	af00      	add	r7, sp, #0
 80018ae:	6078      	str	r0, [r7, #4]
      {
	if (this->_M_impl._M_start._M_cur
	    != this->_M_impl._M_start._M_last - 1)
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	689a      	ldr	r2, [r3, #8]
 80018b4:	687b      	ldr	r3, [r7, #4]
 80018b6:	691b      	ldr	r3, [r3, #16]
 80018b8:	3b08      	subs	r3, #8
       *  needed, it should be retrieved before pop_front() is called.
       */
      void
      pop_front() _GLIBCXX_NOEXCEPT
      {
	if (this->_M_impl._M_start._M_cur
 80018ba:	429a      	cmp	r2, r3
 80018bc:	d00d      	beq.n	80018da <_ZNSt5dequeI8CommandSSaIS0_EE9pop_frontEv+0x32>
	    != this->_M_impl._M_start._M_last - 1)
	  {
	    _Alloc_traits::destroy(this->_M_impl,
 80018be:	687a      	ldr	r2, [r7, #4]
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	689b      	ldr	r3, [r3, #8]
 80018c4:	4619      	mov	r1, r3
 80018c6:	4610      	mov	r0, r2
 80018c8:	f000 f996 	bl	8001bf8 <_ZN9__gnu_cxx14__alloc_traitsISaI8CommandSEE7destroyERS2_PS1_>
	                           this->_M_impl._M_start._M_cur);
	    ++this->_M_impl._M_start._M_cur;
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	689b      	ldr	r3, [r3, #8]
 80018d0:	f103 0208 	add.w	r2, r3, #8
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	609a      	str	r2, [r3, #8]
	  }
	else
	  _M_pop_front_aux();
      }
 80018d8:	e002      	b.n	80018e0 <_ZNSt5dequeI8CommandSSaIS0_EE9pop_frontEv+0x38>
	    _Alloc_traits::destroy(this->_M_impl,
	                           this->_M_impl._M_start._M_cur);
	    ++this->_M_impl._M_start._M_cur;
	  }
	else
	  _M_pop_front_aux();
 80018da:	6878      	ldr	r0, [r7, #4]
 80018dc:	f000 f99a 	bl	8001c14 <_ZNSt5dequeI8CommandSSaIS0_EE16_M_pop_front_auxEv>
      }
 80018e0:	bf00      	nop
 80018e2:	3708      	adds	r7, #8
 80018e4:	46bd      	mov	sp, r7
 80018e6:	bd80      	pop	{r7, pc}

080018e8 <_ZNSt5dequeI8CommandSSaIS0_EE9push_backERKS0_>:
       *  element at the end of the %deque and assigns the given data
       *  to it.  Due to the nature of a %deque this operation can be
       *  done in constant time.
       */
      void
      push_back(const value_type& __x)
 80018e8:	b580      	push	{r7, lr}
 80018ea:	b082      	sub	sp, #8
 80018ec:	af00      	add	r7, sp, #0
 80018ee:	6078      	str	r0, [r7, #4]
 80018f0:	6039      	str	r1, [r7, #0]
      {
	if (this->_M_impl._M_finish._M_cur
	    != this->_M_impl._M_finish._M_last - 1)
 80018f2:	687b      	ldr	r3, [r7, #4]
 80018f4:	699a      	ldr	r2, [r3, #24]
 80018f6:	687b      	ldr	r3, [r7, #4]
 80018f8:	6a1b      	ldr	r3, [r3, #32]
 80018fa:	3b08      	subs	r3, #8
       *  done in constant time.
       */
      void
      push_back(const value_type& __x)
      {
	if (this->_M_impl._M_finish._M_cur
 80018fc:	429a      	cmp	r2, r3
 80018fe:	d00d      	beq.n	800191c <_ZNSt5dequeI8CommandSSaIS0_EE9push_backERKS0_+0x34>
	    != this->_M_impl._M_finish._M_last - 1)
	  {
	    _Alloc_traits::construct(this->_M_impl,
 8001900:	6878      	ldr	r0, [r7, #4]
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	699b      	ldr	r3, [r3, #24]
 8001906:	683a      	ldr	r2, [r7, #0]
 8001908:	4619      	mov	r1, r3
 800190a:	f000 f9ab 	bl	8001c64 <_ZN9__gnu_cxx14__alloc_traitsISaI8CommandSEE9constructIS1_EEvRS2_PS1_RKT_>
	                             this->_M_impl._M_finish._M_cur, __x);
	    ++this->_M_impl._M_finish._M_cur;
 800190e:	687b      	ldr	r3, [r7, #4]
 8001910:	699b      	ldr	r3, [r3, #24]
 8001912:	f103 0208 	add.w	r2, r3, #8
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	619a      	str	r2, [r3, #24]
	  }
	else
	  _M_push_back_aux(__x);
      }
 800191a:	e003      	b.n	8001924 <_ZNSt5dequeI8CommandSSaIS0_EE9push_backERKS0_+0x3c>
	    _Alloc_traits::construct(this->_M_impl,
	                             this->_M_impl._M_finish._M_cur, __x);
	    ++this->_M_impl._M_finish._M_cur;
	  }
	else
	  _M_push_back_aux(__x);
 800191c:	6839      	ldr	r1, [r7, #0]
 800191e:	6878      	ldr	r0, [r7, #4]
 8001920:	f000 f9b0 	bl	8001c84 <_ZNSt5dequeI8CommandSSaIS0_EE16_M_push_back_auxERKS0_>
      }
 8001924:	bf00      	nop
 8001926:	3708      	adds	r7, #8
 8001928:	46bd      	mov	sp, r7
 800192a:	bd80      	pop	{r7, pc}

0800192c <_ZNSt11_Deque_baseI8CommandSSaIS0_EE11_Deque_implC1Ev>:
	_Map_pointer _M_map;
	size_t _M_map_size;
	iterator _M_start;
	iterator _M_finish;

	_Deque_impl()
 800192c:	b580      	push	{r7, lr}
 800192e:	b082      	sub	sp, #8
 8001930:	af00      	add	r7, sp, #0
 8001932:	6078      	str	r0, [r7, #4]
	: _Tp_alloc_type(), _M_map(), _M_map_size(0),
	  _M_start(), _M_finish()
 8001934:	6878      	ldr	r0, [r7, #4]
 8001936:	f000 f9d1 	bl	8001cdc <_ZNSaI8CommandSEC1Ev>
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	2200      	movs	r2, #0
 800193e:	601a      	str	r2, [r3, #0]
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	2200      	movs	r2, #0
 8001944:	605a      	str	r2, [r3, #4]
 8001946:	687b      	ldr	r3, [r7, #4]
 8001948:	3308      	adds	r3, #8
 800194a:	4618      	mov	r0, r3
 800194c:	f000 f9d2 	bl	8001cf4 <_ZNSt15_Deque_iteratorI8CommandSRS0_PS0_EC1Ev>
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	3318      	adds	r3, #24
 8001954:	4618      	mov	r0, r3
 8001956:	f000 f9cd 	bl	8001cf4 <_ZNSt15_Deque_iteratorI8CommandSRS0_PS0_EC1Ev>
	{ }
 800195a:	687b      	ldr	r3, [r7, #4]
 800195c:	4618      	mov	r0, r3
 800195e:	3708      	adds	r7, #8
 8001960:	46bd      	mov	sp, r7
 8001962:	bd80      	pop	{r7, pc}

08001964 <_ZNSaI8CommandSED1Ev>:
      : __allocator_base<_Tp>(__a) { }

      template<typename _Tp1>
        allocator(const allocator<_Tp1>&) throw() { }

      ~allocator() throw() { }
 8001964:	b580      	push	{r7, lr}
 8001966:	b082      	sub	sp, #8
 8001968:	af00      	add	r7, sp, #0
 800196a:	6078      	str	r0, [r7, #4]
 800196c:	6878      	ldr	r0, [r7, #4]
 800196e:	f000 f9d7 	bl	8001d20 <_ZN9__gnu_cxx13new_allocatorI8CommandSED1Ev>
 8001972:	687b      	ldr	r3, [r7, #4]
 8001974:	4618      	mov	r0, r3
 8001976:	3708      	adds	r7, #8
 8001978:	46bd      	mov	sp, r7
 800197a:	bd80      	pop	{r7, pc}

0800197c <_ZNSt11_Deque_baseI8CommandSSaIS0_EE17_M_initialize_mapEj>:
   *
   *  The initial underlying memory layout is a bit complicated...
  */
  template<typename _Tp, typename _Alloc>
    void
    _Deque_base<_Tp, _Alloc>::
 800197c:	b590      	push	{r4, r7, lr}
 800197e:	b089      	sub	sp, #36	; 0x24
 8001980:	af00      	add	r7, sp, #0
 8001982:	6078      	str	r0, [r7, #4]
 8001984:	6039      	str	r1, [r7, #0]
    _M_initialize_map(size_t __num_elements)
    {
      const size_t __num_nodes = (__num_elements/ __deque_buf_size(sizeof(_Tp))
 8001986:	2008      	movs	r0, #8
 8001988:	f7ff fbfa 	bl	8001180 <_ZSt16__deque_buf_sizej>
 800198c:	4602      	mov	r2, r0
				  + 1);
 800198e:	683b      	ldr	r3, [r7, #0]
 8001990:	fbb3 f3f2 	udiv	r3, r3, r2
 8001994:	3301      	adds	r3, #1
 8001996:	61fb      	str	r3, [r7, #28]

      this->_M_impl._M_map_size = std::max((size_t) _S_initial_map_size,
					   size_t(__num_nodes + 2));
 8001998:	2308      	movs	r3, #8
 800199a:	60fb      	str	r3, [r7, #12]
 800199c:	69fb      	ldr	r3, [r7, #28]
 800199e:	3302      	adds	r3, #2
 80019a0:	613b      	str	r3, [r7, #16]
 80019a2:	f107 0210 	add.w	r2, r7, #16
 80019a6:	f107 030c 	add.w	r3, r7, #12
 80019aa:	4611      	mov	r1, r2
 80019ac:	4618      	mov	r0, r3
 80019ae:	f000 f9c1 	bl	8001d34 <_ZSt3maxIjERKT_S2_S2_>
 80019b2:	4603      	mov	r3, r0
    _M_initialize_map(size_t __num_elements)
    {
      const size_t __num_nodes = (__num_elements/ __deque_buf_size(sizeof(_Tp))
				  + 1);

      this->_M_impl._M_map_size = std::max((size_t) _S_initial_map_size,
 80019b4:	681a      	ldr	r2, [r3, #0]
 80019b6:	687b      	ldr	r3, [r7, #4]
 80019b8:	605a      	str	r2, [r3, #4]
					   size_t(__num_nodes + 2));
      this->_M_impl._M_map = _M_allocate_map(this->_M_impl._M_map_size);
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	685b      	ldr	r3, [r3, #4]
 80019be:	4619      	mov	r1, r3
 80019c0:	6878      	ldr	r0, [r7, #4]
 80019c2:	f000 f9cb 	bl	8001d5c <_ZNSt11_Deque_baseI8CommandSSaIS0_EE15_M_allocate_mapEj>
 80019c6:	4602      	mov	r2, r0
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	601a      	str	r2, [r3, #0]
      // starts in the middle elements and grows outwards.  So nstart may be
      // the beginning of _M_map, but for small maps it may be as far in as
      // _M_map+3.

      _Map_pointer __nstart = (this->_M_impl._M_map
			       + (this->_M_impl._M_map_size - __num_nodes) / 2);
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	681a      	ldr	r2, [r3, #0]
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	6859      	ldr	r1, [r3, #4]
 80019d4:	69fb      	ldr	r3, [r7, #28]
 80019d6:	1acb      	subs	r3, r1, r3
 80019d8:	085b      	lsrs	r3, r3, #1
 80019da:	009b      	lsls	r3, r3, #2
 80019dc:	4413      	add	r3, r2
 80019de:	61bb      	str	r3, [r7, #24]
      _Map_pointer __nfinish = __nstart + __num_nodes;
 80019e0:	69fb      	ldr	r3, [r7, #28]
 80019e2:	009b      	lsls	r3, r3, #2
 80019e4:	69ba      	ldr	r2, [r7, #24]
 80019e6:	4413      	add	r3, r2
 80019e8:	617b      	str	r3, [r7, #20]

      __try
	{ _M_create_nodes(__nstart, __nfinish); }
 80019ea:	697a      	ldr	r2, [r7, #20]
 80019ec:	69b9      	ldr	r1, [r7, #24]
 80019ee:	6878      	ldr	r0, [r7, #4]
 80019f0:	f000 f9d0 	bl	8001d94 <_ZNSt11_Deque_baseI8CommandSSaIS0_EE15_M_create_nodesEPPS0_S4_>
	  this->_M_impl._M_map = _Map_pointer();
	  this->_M_impl._M_map_size = 0;
	  __throw_exception_again;
	}

      this->_M_impl._M_start._M_set_node(__nstart);
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	3308      	adds	r3, #8
 80019f8:	69b9      	ldr	r1, [r7, #24]
 80019fa:	4618      	mov	r0, r3
 80019fc:	f000 f9e4 	bl	8001dc8 <_ZNSt15_Deque_iteratorI8CommandSRS0_PS0_E11_M_set_nodeEPS2_>
      this->_M_impl._M_finish._M_set_node(__nfinish - 1);
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	f103 0218 	add.w	r2, r3, #24
 8001a06:	697b      	ldr	r3, [r7, #20]
 8001a08:	3b04      	subs	r3, #4
 8001a0a:	4619      	mov	r1, r3
 8001a0c:	4610      	mov	r0, r2
 8001a0e:	f000 f9db 	bl	8001dc8 <_ZNSt15_Deque_iteratorI8CommandSRS0_PS0_E11_M_set_nodeEPS2_>
      this->_M_impl._M_start._M_cur = _M_impl._M_start._M_first;
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	68da      	ldr	r2, [r3, #12]
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	609a      	str	r2, [r3, #8]
      this->_M_impl._M_finish._M_cur = (this->_M_impl._M_finish._M_first
					+ __num_elements
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	69dc      	ldr	r4, [r3, #28]
					% __deque_buf_size(sizeof(_Tp)));
 8001a1e:	2008      	movs	r0, #8
 8001a20:	f7ff fbae 	bl	8001180 <_ZSt16__deque_buf_sizej>
 8001a24:	4602      	mov	r2, r0

      this->_M_impl._M_start._M_set_node(__nstart);
      this->_M_impl._M_finish._M_set_node(__nfinish - 1);
      this->_M_impl._M_start._M_cur = _M_impl._M_start._M_first;
      this->_M_impl._M_finish._M_cur = (this->_M_impl._M_finish._M_first
					+ __num_elements
 8001a26:	683b      	ldr	r3, [r7, #0]
 8001a28:	fbb3 f1f2 	udiv	r1, r3, r2
 8001a2c:	fb02 f201 	mul.w	r2, r2, r1
 8001a30:	1a9b      	subs	r3, r3, r2
 8001a32:	00db      	lsls	r3, r3, #3
 8001a34:	18e2      	adds	r2, r4, r3
	}

      this->_M_impl._M_start._M_set_node(__nstart);
      this->_M_impl._M_finish._M_set_node(__nfinish - 1);
      this->_M_impl._M_start._M_cur = _M_impl._M_start._M_first;
      this->_M_impl._M_finish._M_cur = (this->_M_impl._M_finish._M_first
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	619a      	str	r2, [r3, #24]
					+ __num_elements
					% __deque_buf_size(sizeof(_Tp)));
    }
 8001a3a:	bf00      	nop
 8001a3c:	3724      	adds	r7, #36	; 0x24
 8001a3e:	46bd      	mov	sp, r7
 8001a40:	bd90      	pop	{r4, r7, pc}
 8001a42:	bf00      	nop

08001a44 <_ZNSt11_Deque_baseI8CommandSSaIS0_EE16_M_destroy_nodesEPPS0_S4_>:
	}
    }

  template<typename _Tp, typename _Alloc>
    void
    _Deque_base<_Tp, _Alloc>::
 8001a44:	b580      	push	{r7, lr}
 8001a46:	b086      	sub	sp, #24
 8001a48:	af00      	add	r7, sp, #0
 8001a4a:	60f8      	str	r0, [r7, #12]
 8001a4c:	60b9      	str	r1, [r7, #8]
 8001a4e:	607a      	str	r2, [r7, #4]
    _M_destroy_nodes(_Map_pointer __nstart,
		     _Map_pointer __nfinish) _GLIBCXX_NOEXCEPT
    {
      for (_Map_pointer __n = __nstart; __n < __nfinish; ++__n)
 8001a50:	68bb      	ldr	r3, [r7, #8]
 8001a52:	617b      	str	r3, [r7, #20]
 8001a54:	697a      	ldr	r2, [r7, #20]
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	429a      	cmp	r2, r3
 8001a5a:	d209      	bcs.n	8001a70 <_ZNSt11_Deque_baseI8CommandSSaIS0_EE16_M_destroy_nodesEPPS0_S4_+0x2c>
	_M_deallocate_node(*__n);
 8001a5c:	697b      	ldr	r3, [r7, #20]
 8001a5e:	681b      	ldr	r3, [r3, #0]
 8001a60:	4619      	mov	r1, r3
 8001a62:	68f8      	ldr	r0, [r7, #12]
 8001a64:	f000 f9ca 	bl	8001dfc <_ZNSt11_Deque_baseI8CommandSSaIS0_EE18_M_deallocate_nodeEPS0_>
    void
    _Deque_base<_Tp, _Alloc>::
    _M_destroy_nodes(_Map_pointer __nstart,
		     _Map_pointer __nfinish) _GLIBCXX_NOEXCEPT
    {
      for (_Map_pointer __n = __nstart; __n < __nfinish; ++__n)
 8001a68:	697b      	ldr	r3, [r7, #20]
 8001a6a:	3304      	adds	r3, #4
 8001a6c:	617b      	str	r3, [r7, #20]
 8001a6e:	e7f1      	b.n	8001a54 <_ZNSt11_Deque_baseI8CommandSSaIS0_EE16_M_destroy_nodesEPPS0_S4_+0x10>
	_M_deallocate_node(*__n);
    }
 8001a70:	bf00      	nop
 8001a72:	3718      	adds	r7, #24
 8001a74:	46bd      	mov	sp, r7
 8001a76:	bd80      	pop	{r7, pc}

08001a78 <_ZNSt11_Deque_baseI8CommandSSaIS0_EE17_M_deallocate_mapEPPS0_j>:
	_Map_alloc_type __map_alloc = _M_get_map_allocator();
	return _Map_alloc_traits::allocate(__map_alloc, __n);
      }

      void
      _M_deallocate_map(_Map_pointer __p, size_t __n) _GLIBCXX_NOEXCEPT
 8001a78:	b580      	push	{r7, lr}
 8001a7a:	b086      	sub	sp, #24
 8001a7c:	af00      	add	r7, sp, #0
 8001a7e:	60f8      	str	r0, [r7, #12]
 8001a80:	60b9      	str	r1, [r7, #8]
 8001a82:	607a      	str	r2, [r7, #4]
      {
	_Map_alloc_type __map_alloc = _M_get_map_allocator();
 8001a84:	f107 0314 	add.w	r3, r7, #20
 8001a88:	68f9      	ldr	r1, [r7, #12]
 8001a8a:	4618      	mov	r0, r3
 8001a8c:	f000 f9ca 	bl	8001e24 <_ZNKSt11_Deque_baseI8CommandSSaIS0_EE20_M_get_map_allocatorEv>
	_Map_alloc_traits::deallocate(__map_alloc, __p, __n);
 8001a90:	f107 0314 	add.w	r3, r7, #20
 8001a94:	687a      	ldr	r2, [r7, #4]
 8001a96:	68b9      	ldr	r1, [r7, #8]
 8001a98:	4618      	mov	r0, r3
 8001a9a:	f000 f9e1 	bl	8001e60 <_ZN9__gnu_cxx14__alloc_traitsISaIP8CommandSEE10deallocateERS3_PS2_j>
      }

      void
      _M_deallocate_map(_Map_pointer __p, size_t __n) _GLIBCXX_NOEXCEPT
      {
	_Map_alloc_type __map_alloc = _M_get_map_allocator();
 8001a9e:	f107 0314 	add.w	r3, r7, #20
 8001aa2:	4618      	mov	r0, r3
 8001aa4:	f000 f9d0 	bl	8001e48 <_ZNSaIP8CommandSED1Ev>
	_Map_alloc_traits::deallocate(__map_alloc, __p, __n);
      }
 8001aa8:	bf00      	nop
 8001aaa:	3718      	adds	r7, #24
 8001aac:	46bd      	mov	sp, r7
 8001aae:	bd80      	pop	{r7, pc}

08001ab0 <_ZN9__gnu_cxx14__alloc_traitsISaI8CommandSEE17_S_select_on_copyERKS2_>:
    { __a.destroy(__p); }

    static size_type max_size(const _Alloc& __a)
    { return __a.max_size(); }

    static const _Alloc& _S_select_on_copy(const _Alloc& __a) { return __a; }
 8001ab0:	b480      	push	{r7}
 8001ab2:	b083      	sub	sp, #12
 8001ab4:	af00      	add	r7, sp, #0
 8001ab6:	6078      	str	r0, [r7, #4]
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	4618      	mov	r0, r3
 8001abc:	370c      	adds	r7, #12
 8001abe:	46bd      	mov	sp, r7
 8001ac0:	bc80      	pop	{r7}
 8001ac2:	4770      	bx	lr

08001ac4 <_ZNKSt11_Deque_baseI8CommandSSaIS0_EE19_M_get_Tp_allocatorEv>:
      _Tp_alloc_type&
      _M_get_Tp_allocator() _GLIBCXX_NOEXCEPT
      { return *static_cast<_Tp_alloc_type*>(&this->_M_impl); }

      const _Tp_alloc_type&
      _M_get_Tp_allocator() const _GLIBCXX_NOEXCEPT
 8001ac4:	b480      	push	{r7}
 8001ac6:	b083      	sub	sp, #12
 8001ac8:	af00      	add	r7, sp, #0
 8001aca:	6078      	str	r0, [r7, #4]
      { return *static_cast<const _Tp_alloc_type*>(&this->_M_impl); }
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	4618      	mov	r0, r3
 8001ad0:	370c      	adds	r7, #12
 8001ad2:	46bd      	mov	sp, r7
 8001ad4:	bc80      	pop	{r7}
 8001ad6:	4770      	bx	lr

08001ad8 <_ZNSt11_Deque_baseI8CommandSSaIS0_EEC1ERKS1_j>:

      _Deque_base(size_t __num_elements)
      : _M_impl()
      { _M_initialize_map(__num_elements); }

      _Deque_base(const allocator_type& __a, size_t __num_elements)
 8001ad8:	b580      	push	{r7, lr}
 8001ada:	b084      	sub	sp, #16
 8001adc:	af00      	add	r7, sp, #0
 8001ade:	60f8      	str	r0, [r7, #12]
 8001ae0:	60b9      	str	r1, [r7, #8]
 8001ae2:	607a      	str	r2, [r7, #4]
      : _M_impl(__a)
 8001ae4:	68fb      	ldr	r3, [r7, #12]
 8001ae6:	68b9      	ldr	r1, [r7, #8]
 8001ae8:	4618      	mov	r0, r3
 8001aea:	f000 f9c9 	bl	8001e80 <_ZNSt11_Deque_baseI8CommandSSaIS0_EE11_Deque_implC1ERKS1_>
      { _M_initialize_map(__num_elements); }
 8001aee:	6879      	ldr	r1, [r7, #4]
 8001af0:	68f8      	ldr	r0, [r7, #12]
 8001af2:	f7ff ff43 	bl	800197c <_ZNSt11_Deque_baseI8CommandSSaIS0_EE17_M_initialize_mapEj>
 8001af6:	68fb      	ldr	r3, [r7, #12]
 8001af8:	4618      	mov	r0, r3
 8001afa:	3710      	adds	r7, #16
 8001afc:	46bd      	mov	sp, r7
 8001afe:	bd80      	pop	{r7, pc}

08001b00 <_ZNKSt5dequeI8CommandSSaIS0_EE5beginEv>:
      /**
       *  Returns a read-only (constant) iterator that points to the first
       *  element in the %deque.  Iteration is done in ordinary element order.
       */
      const_iterator
      begin() const _GLIBCXX_NOEXCEPT
 8001b00:	b580      	push	{r7, lr}
 8001b02:	b082      	sub	sp, #8
 8001b04:	af00      	add	r7, sp, #0
 8001b06:	6078      	str	r0, [r7, #4]
 8001b08:	6039      	str	r1, [r7, #0]
      { return this->_M_impl._M_start; }
 8001b0a:	683b      	ldr	r3, [r7, #0]
 8001b0c:	3308      	adds	r3, #8
 8001b0e:	4619      	mov	r1, r3
 8001b10:	6878      	ldr	r0, [r7, #4]
 8001b12:	f000 f9d3 	bl	8001ebc <_ZNSt15_Deque_iteratorI8CommandSRKS0_PS1_EC1ERKS_IS0_RS0_PS0_E>
 8001b16:	6878      	ldr	r0, [r7, #4]
 8001b18:	3708      	adds	r7, #8
 8001b1a:	46bd      	mov	sp, r7
 8001b1c:	bd80      	pop	{r7, pc}
 8001b1e:	bf00      	nop

08001b20 <_ZNKSt5dequeI8CommandSSaIS0_EE3endEv>:
       *  Returns a read-only (constant) iterator that points one past
       *  the last element in the %deque.  Iteration is done in
       *  ordinary element order.
       */
      const_iterator
      end() const _GLIBCXX_NOEXCEPT
 8001b20:	b580      	push	{r7, lr}
 8001b22:	b082      	sub	sp, #8
 8001b24:	af00      	add	r7, sp, #0
 8001b26:	6078      	str	r0, [r7, #4]
 8001b28:	6039      	str	r1, [r7, #0]
      { return this->_M_impl._M_finish; }
 8001b2a:	683b      	ldr	r3, [r7, #0]
 8001b2c:	3318      	adds	r3, #24
 8001b2e:	4619      	mov	r1, r3
 8001b30:	6878      	ldr	r0, [r7, #4]
 8001b32:	f000 f9c3 	bl	8001ebc <_ZNSt15_Deque_iteratorI8CommandSRKS0_PS1_EC1ERKS_IS0_RS0_PS0_E>
 8001b36:	6878      	ldr	r0, [r7, #4]
 8001b38:	3708      	adds	r7, #8
 8001b3a:	46bd      	mov	sp, r7
 8001b3c:	bd80      	pop	{r7, pc}
 8001b3e:	bf00      	nop

08001b40 <_ZSt22__uninitialized_copy_aISt15_Deque_iteratorI8CommandSRKS1_PS2_ES0_IS1_RS1_PS1_ES1_ET0_T_SA_S9_RSaIT1_E>:
	}
    }

  template<typename _InputIterator, typename _ForwardIterator, typename _Tp>
    inline _ForwardIterator
    __uninitialized_copy_a(_InputIterator __first, _InputIterator __last,
 8001b40:	b084      	sub	sp, #16
 8001b42:	b5b0      	push	{r4, r5, r7, lr}
 8001b44:	b08c      	sub	sp, #48	; 0x30
 8001b46:	af06      	add	r7, sp, #24
 8001b48:	6078      	str	r0, [r7, #4]
 8001b4a:	f107 002c 	add.w	r0, r7, #44	; 0x2c
 8001b4e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
			   _ForwardIterator __result, allocator<_Tp>&)
    { return std::uninitialized_copy(__first, __last, __result); }
 8001b52:	f107 0308 	add.w	r3, r7, #8
 8001b56:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 8001b58:	4618      	mov	r0, r3
 8001b5a:	f7ff fe0d 	bl	8001778 <_ZNSt15_Deque_iteratorI8CommandSRS0_PS0_EC1ERKS3_>
 8001b5e:	687d      	ldr	r5, [r7, #4]
 8001b60:	f107 0308 	add.w	r3, r7, #8
 8001b64:	9305      	str	r3, [sp, #20]
 8001b66:	ac01      	add	r4, sp, #4
 8001b68:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8001b6c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001b6e:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8001b72:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001b74:	9300      	str	r3, [sp, #0]
 8001b76:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001b7a:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001b7c:	4628      	mov	r0, r5
 8001b7e:	f000 f9b9 	bl	8001ef4 <_ZSt18uninitialized_copyISt15_Deque_iteratorI8CommandSRKS1_PS2_ES0_IS1_RS1_PS1_EET0_T_SA_S9_>
 8001b82:	6878      	ldr	r0, [r7, #4]
 8001b84:	3718      	adds	r7, #24
 8001b86:	46bd      	mov	sp, r7
 8001b88:	e8bd 40b0 	ldmia.w	sp!, {r4, r5, r7, lr}
 8001b8c:	b004      	add	sp, #16
 8001b8e:	4770      	bx	lr

08001b90 <_ZStmiI8CommandSRS0_PS0_ENSt15_Deque_iteratorIT_T0_T1_E15difference_typeERKS7_SA_>:
  // According to the resolution of DR179 not only the various comparison
  // operators but also operator- must accept mixed iterator/const_iterator
  // parameters.
  template<typename _Tp, typename _Ref, typename _Ptr>
    inline typename _Deque_iterator<_Tp, _Ref, _Ptr>::difference_type
    operator-(const _Deque_iterator<_Tp, _Ref, _Ptr>& __x,
 8001b90:	b580      	push	{r7, lr}
 8001b92:	b082      	sub	sp, #8
 8001b94:	af00      	add	r7, sp, #0
 8001b96:	6078      	str	r0, [r7, #4]
 8001b98:	6039      	str	r1, [r7, #0]
	      const _Deque_iterator<_Tp, _Ref, _Ptr>& __y) _GLIBCXX_NOEXCEPT
    {
      return typename _Deque_iterator<_Tp, _Ref, _Ptr>::difference_type
	(_Deque_iterator<_Tp, _Ref, _Ptr>::_S_buffer_size())
 8001b9a:	f000 f9d5 	bl	8001f48 <_ZNSt15_Deque_iteratorI8CommandSRS0_PS0_E14_S_buffer_sizeEv>
 8001b9e:	4603      	mov	r3, r0
	* (__x._M_node - __y._M_node - 1) + (__x._M_cur - __x._M_first)
	+ (__y._M_last - __y._M_cur);
 8001ba0:	461a      	mov	r2, r3
    operator-(const _Deque_iterator<_Tp, _Ref, _Ptr>& __x,
	      const _Deque_iterator<_Tp, _Ref, _Ptr>& __y) _GLIBCXX_NOEXCEPT
    {
      return typename _Deque_iterator<_Tp, _Ref, _Ptr>::difference_type
	(_Deque_iterator<_Tp, _Ref, _Ptr>::_S_buffer_size())
	* (__x._M_node - __y._M_node - 1) + (__x._M_cur - __x._M_first)
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	68db      	ldr	r3, [r3, #12]
	+ (__y._M_last - __y._M_cur);
 8001ba6:	4619      	mov	r1, r3
    operator-(const _Deque_iterator<_Tp, _Ref, _Ptr>& __x,
	      const _Deque_iterator<_Tp, _Ref, _Ptr>& __y) _GLIBCXX_NOEXCEPT
    {
      return typename _Deque_iterator<_Tp, _Ref, _Ptr>::difference_type
	(_Deque_iterator<_Tp, _Ref, _Ptr>::_S_buffer_size())
	* (__x._M_node - __y._M_node - 1) + (__x._M_cur - __x._M_first)
 8001ba8:	683b      	ldr	r3, [r7, #0]
 8001baa:	68db      	ldr	r3, [r3, #12]
	+ (__y._M_last - __y._M_cur);
 8001bac:	1acb      	subs	r3, r1, r3
 8001bae:	109b      	asrs	r3, r3, #2
 8001bb0:	3b01      	subs	r3, #1
 8001bb2:	fb03 f302 	mul.w	r3, r3, r2
    operator-(const _Deque_iterator<_Tp, _Ref, _Ptr>& __x,
	      const _Deque_iterator<_Tp, _Ref, _Ptr>& __y) _GLIBCXX_NOEXCEPT
    {
      return typename _Deque_iterator<_Tp, _Ref, _Ptr>::difference_type
	(_Deque_iterator<_Tp, _Ref, _Ptr>::_S_buffer_size())
	* (__x._M_node - __y._M_node - 1) + (__x._M_cur - __x._M_first)
 8001bb6:	687a      	ldr	r2, [r7, #4]
 8001bb8:	6812      	ldr	r2, [r2, #0]
	+ (__y._M_last - __y._M_cur);
 8001bba:	4611      	mov	r1, r2
    operator-(const _Deque_iterator<_Tp, _Ref, _Ptr>& __x,
	      const _Deque_iterator<_Tp, _Ref, _Ptr>& __y) _GLIBCXX_NOEXCEPT
    {
      return typename _Deque_iterator<_Tp, _Ref, _Ptr>::difference_type
	(_Deque_iterator<_Tp, _Ref, _Ptr>::_S_buffer_size())
	* (__x._M_node - __y._M_node - 1) + (__x._M_cur - __x._M_first)
 8001bbc:	687a      	ldr	r2, [r7, #4]
 8001bbe:	6852      	ldr	r2, [r2, #4]
	+ (__y._M_last - __y._M_cur);
 8001bc0:	1a8a      	subs	r2, r1, r2
 8001bc2:	10d2      	asrs	r2, r2, #3
 8001bc4:	4413      	add	r3, r2
 8001bc6:	683a      	ldr	r2, [r7, #0]
 8001bc8:	6892      	ldr	r2, [r2, #8]
 8001bca:	4611      	mov	r1, r2
 8001bcc:	683a      	ldr	r2, [r7, #0]
 8001bce:	6812      	ldr	r2, [r2, #0]
 8001bd0:	1a8a      	subs	r2, r1, r2
 8001bd2:	10d2      	asrs	r2, r2, #3
 8001bd4:	4413      	add	r3, r2
    }
 8001bd6:	4618      	mov	r0, r3
 8001bd8:	3708      	adds	r7, #8
 8001bda:	46bd      	mov	sp, r7
 8001bdc:	bd80      	pop	{r7, pc}
 8001bde:	bf00      	nop

08001be0 <_ZNKSt15_Deque_iteratorI8CommandSRS0_PS0_EdeEv>:
      iterator
      _M_const_cast() const _GLIBCXX_NOEXCEPT
      { return iterator(_M_cur, _M_node); }

      reference
      operator*() const _GLIBCXX_NOEXCEPT
 8001be0:	b480      	push	{r7}
 8001be2:	b083      	sub	sp, #12
 8001be4:	af00      	add	r7, sp, #0
 8001be6:	6078      	str	r0, [r7, #4]
      { return *_M_cur; }
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	681b      	ldr	r3, [r3, #0]
 8001bec:	4618      	mov	r0, r3
 8001bee:	370c      	adds	r7, #12
 8001bf0:	46bd      	mov	sp, r7
 8001bf2:	bc80      	pop	{r7}
 8001bf4:	4770      	bx	lr
 8001bf6:	bf00      	nop

08001bf8 <_ZN9__gnu_cxx14__alloc_traitsISaI8CommandSEE7destroyERS2_PS1_>:

    template<typename _Tp>
      static void construct(_Alloc& __a, pointer __p, const _Tp& __arg)
      { __a.construct(__p, __arg); }

    static void destroy(_Alloc& __a, pointer __p)
 8001bf8:	b580      	push	{r7, lr}
 8001bfa:	b082      	sub	sp, #8
 8001bfc:	af00      	add	r7, sp, #0
 8001bfe:	6078      	str	r0, [r7, #4]
 8001c00:	6039      	str	r1, [r7, #0]
    { __a.destroy(__p); }
 8001c02:	6839      	ldr	r1, [r7, #0]
 8001c04:	6878      	ldr	r0, [r7, #4]
 8001c06:	f000 f9a7 	bl	8001f58 <_ZN9__gnu_cxx13new_allocatorI8CommandSE7destroyEPS1_>
 8001c0a:	bf00      	nop
 8001c0c:	3708      	adds	r7, #8
 8001c0e:	46bd      	mov	sp, r7
 8001c10:	bd80      	pop	{r7, pc}
 8001c12:	bf00      	nop

08001c14 <_ZNSt5dequeI8CommandSSaIS0_EE16_M_pop_front_auxEv>:
  // Note that if the deque has at least one element (a precondition for this
  // member function), and if
  //   _M_impl._M_start._M_cur == _M_impl._M_start._M_last,
  // then the deque must have at least two nodes.
  template <typename _Tp, typename _Alloc>
    void deque<_Tp, _Alloc>::
 8001c14:	b580      	push	{r7, lr}
 8001c16:	b082      	sub	sp, #8
 8001c18:	af00      	add	r7, sp, #0
 8001c1a:	6078      	str	r0, [r7, #4]
    _M_pop_front_aux()
    {
      _Alloc_traits::destroy(_M_get_Tp_allocator(),
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	4618      	mov	r0, r3
 8001c20:	f7ff fda0 	bl	8001764 <_ZNSt11_Deque_baseI8CommandSSaIS0_EE19_M_get_Tp_allocatorEv>
 8001c24:	4602      	mov	r2, r0
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	689b      	ldr	r3, [r3, #8]
 8001c2a:	4619      	mov	r1, r3
 8001c2c:	4610      	mov	r0, r2
 8001c2e:	f7ff ffe3 	bl	8001bf8 <_ZN9__gnu_cxx14__alloc_traitsISaI8CommandSEE7destroyERS2_PS1_>
			     this->_M_impl._M_start._M_cur);
      _M_deallocate_node(this->_M_impl._M_start._M_first);
 8001c32:	687a      	ldr	r2, [r7, #4]
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	68db      	ldr	r3, [r3, #12]
 8001c38:	4619      	mov	r1, r3
 8001c3a:	4610      	mov	r0, r2
 8001c3c:	f000 f8de 	bl	8001dfc <_ZNSt11_Deque_baseI8CommandSSaIS0_EE18_M_deallocate_nodeEPS0_>
      this->_M_impl._M_start._M_set_node(this->_M_impl._M_start._M_node + 1);
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	f103 0208 	add.w	r2, r3, #8
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	695b      	ldr	r3, [r3, #20]
 8001c4a:	3304      	adds	r3, #4
 8001c4c:	4619      	mov	r1, r3
 8001c4e:	4610      	mov	r0, r2
 8001c50:	f000 f8ba 	bl	8001dc8 <_ZNSt15_Deque_iteratorI8CommandSRS0_PS0_E11_M_set_nodeEPS2_>
      this->_M_impl._M_start._M_cur = this->_M_impl._M_start._M_first;
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	68da      	ldr	r2, [r3, #12]
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	609a      	str	r2, [r3, #8]
    }
 8001c5c:	bf00      	nop
 8001c5e:	3708      	adds	r7, #8
 8001c60:	46bd      	mov	sp, r7
 8001c62:	bd80      	pop	{r7, pc}

08001c64 <_ZN9__gnu_cxx14__alloc_traitsISaI8CommandSEE9constructIS1_EEvRS2_PS1_RKT_>:

    static void deallocate(_Alloc& __a, pointer __p, size_type __n)
    { __a.deallocate(__p, __n); }

    template<typename _Tp>
      static void construct(_Alloc& __a, pointer __p, const _Tp& __arg)
 8001c64:	b580      	push	{r7, lr}
 8001c66:	b084      	sub	sp, #16
 8001c68:	af00      	add	r7, sp, #0
 8001c6a:	60f8      	str	r0, [r7, #12]
 8001c6c:	60b9      	str	r1, [r7, #8]
 8001c6e:	607a      	str	r2, [r7, #4]
      { __a.construct(__p, __arg); }
 8001c70:	687a      	ldr	r2, [r7, #4]
 8001c72:	68b9      	ldr	r1, [r7, #8]
 8001c74:	68f8      	ldr	r0, [r7, #12]
 8001c76:	f000 f979 	bl	8001f6c <_ZN9__gnu_cxx13new_allocatorI8CommandSE9constructEPS1_RKS1_>
 8001c7a:	bf00      	nop
 8001c7c:	3710      	adds	r7, #16
 8001c7e:	46bd      	mov	sp, r7
 8001c80:	bd80      	pop	{r7, pc}
 8001c82:	bf00      	nop

08001c84 <_ZNSt5dequeI8CommandSSaIS0_EE16_M_push_back_auxERKS0_>:
      void
      deque<_Tp, _Alloc>::
      _M_push_back_aux(_Args&&... __args)
#else
      void
      deque<_Tp, _Alloc>::
 8001c84:	b590      	push	{r4, r7, lr}
 8001c86:	b083      	sub	sp, #12
 8001c88:	af00      	add	r7, sp, #0
 8001c8a:	6078      	str	r0, [r7, #4]
 8001c8c:	6039      	str	r1, [r7, #0]
      _M_push_back_aux(const value_type& __t)
#endif
      {
	_M_reserve_map_at_back();
 8001c8e:	2101      	movs	r1, #1
 8001c90:	6878      	ldr	r0, [r7, #4]
 8001c92:	f000 f983 	bl	8001f9c <_ZNSt5dequeI8CommandSSaIS0_EE22_M_reserve_map_at_backEj>
	*(this->_M_impl._M_finish._M_node + 1) = this->_M_allocate_node();
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c9a:	1d1c      	adds	r4, r3, #4
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	4618      	mov	r0, r3
 8001ca0:	f000 f998 	bl	8001fd4 <_ZNSt11_Deque_baseI8CommandSSaIS0_EE16_M_allocate_nodeEv>
 8001ca4:	4603      	mov	r3, r0
 8001ca6:	6023      	str	r3, [r4, #0]
#if __cplusplus >= 201103L
	    _Alloc_traits::construct(this->_M_impl,
	                             this->_M_impl._M_finish._M_cur,
			             std::forward<_Args>(__args)...);
#else
	    this->_M_impl.construct(this->_M_impl._M_finish._M_cur, __t);
 8001ca8:	6878      	ldr	r0, [r7, #4]
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	699b      	ldr	r3, [r3, #24]
 8001cae:	683a      	ldr	r2, [r7, #0]
 8001cb0:	4619      	mov	r1, r3
 8001cb2:	f000 f95b 	bl	8001f6c <_ZN9__gnu_cxx13new_allocatorI8CommandSE9constructEPS1_RKS1_>
#endif
	    this->_M_impl._M_finish._M_set_node(this->_M_impl._M_finish._M_node
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	f103 0218 	add.w	r2, r3, #24
						+ 1);
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
	                             this->_M_impl._M_finish._M_cur,
			             std::forward<_Args>(__args)...);
#else
	    this->_M_impl.construct(this->_M_impl._M_finish._M_cur, __t);
#endif
	    this->_M_impl._M_finish._M_set_node(this->_M_impl._M_finish._M_node
 8001cc0:	3304      	adds	r3, #4
 8001cc2:	4619      	mov	r1, r3
 8001cc4:	4610      	mov	r0, r2
 8001cc6:	f000 f87f 	bl	8001dc8 <_ZNSt15_Deque_iteratorI8CommandSRS0_PS0_E11_M_set_nodeEPS2_>
						+ 1);
	    this->_M_impl._M_finish._M_cur = this->_M_impl._M_finish._M_first;
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	69da      	ldr	r2, [r3, #28]
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	619a      	str	r2, [r3, #24]
	__catch(...)
	  {
	    _M_deallocate_node(*(this->_M_impl._M_finish._M_node + 1));
	    __throw_exception_again;
	  }
      }
 8001cd2:	bf00      	nop
 8001cd4:	370c      	adds	r7, #12
 8001cd6:	46bd      	mov	sp, r7
 8001cd8:	bd90      	pop	{r4, r7, pc}
 8001cda:	bf00      	nop

08001cdc <_ZNSaI8CommandSEC1Ev>:
      // _GLIBCXX_RESOLVE_LIB_DEFECTS
      // 2103. std::allocator propagate_on_container_move_assignment
      typedef true_type propagate_on_container_move_assignment;
#endif

      allocator() throw() { }
 8001cdc:	b580      	push	{r7, lr}
 8001cde:	b082      	sub	sp, #8
 8001ce0:	af00      	add	r7, sp, #0
 8001ce2:	6078      	str	r0, [r7, #4]
 8001ce4:	6878      	ldr	r0, [r7, #4]
 8001ce6:	f000 f987 	bl	8001ff8 <_ZN9__gnu_cxx13new_allocatorI8CommandSEC1Ev>
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	4618      	mov	r0, r3
 8001cee:	3708      	adds	r7, #8
 8001cf0:	46bd      	mov	sp, r7
 8001cf2:	bd80      	pop	{r7, pc}

08001cf4 <_ZNSt15_Deque_iteratorI8CommandSRS0_PS0_EC1Ev>:

      _Deque_iterator(_Elt_pointer __x, _Map_pointer __y) _GLIBCXX_NOEXCEPT
      : _M_cur(__x), _M_first(*__y),
        _M_last(*__y + _S_buffer_size()), _M_node(__y) { }

      _Deque_iterator() _GLIBCXX_NOEXCEPT
 8001cf4:	b480      	push	{r7}
 8001cf6:	b083      	sub	sp, #12
 8001cf8:	af00      	add	r7, sp, #0
 8001cfa:	6078      	str	r0, [r7, #4]
      : _M_cur(), _M_first(), _M_last(), _M_node() { }
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	2200      	movs	r2, #0
 8001d00:	601a      	str	r2, [r3, #0]
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	2200      	movs	r2, #0
 8001d06:	605a      	str	r2, [r3, #4]
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	2200      	movs	r2, #0
 8001d0c:	609a      	str	r2, [r3, #8]
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	2200      	movs	r2, #0
 8001d12:	60da      	str	r2, [r3, #12]
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	4618      	mov	r0, r3
 8001d18:	370c      	adds	r7, #12
 8001d1a:	46bd      	mov	sp, r7
 8001d1c:	bc80      	pop	{r7}
 8001d1e:	4770      	bx	lr

08001d20 <_ZN9__gnu_cxx13new_allocatorI8CommandSED1Ev>:
      new_allocator(const new_allocator&) _GLIBCXX_USE_NOEXCEPT { }

      template<typename _Tp1>
        new_allocator(const new_allocator<_Tp1>&) _GLIBCXX_USE_NOEXCEPT { }

      ~new_allocator() _GLIBCXX_USE_NOEXCEPT { }
 8001d20:	b480      	push	{r7}
 8001d22:	b083      	sub	sp, #12
 8001d24:	af00      	add	r7, sp, #0
 8001d26:	6078      	str	r0, [r7, #4]
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	4618      	mov	r0, r3
 8001d2c:	370c      	adds	r7, #12
 8001d2e:	46bd      	mov	sp, r7
 8001d30:	bc80      	pop	{r7}
 8001d32:	4770      	bx	lr

08001d34 <_ZSt3maxIjERKT_S2_S2_>:
   *  preprocessor macro.
  */
  template<typename _Tp>
    _GLIBCXX14_CONSTEXPR
    inline const _Tp&
    max(const _Tp& __a, const _Tp& __b)
 8001d34:	b480      	push	{r7}
 8001d36:	b083      	sub	sp, #12
 8001d38:	af00      	add	r7, sp, #0
 8001d3a:	6078      	str	r0, [r7, #4]
 8001d3c:	6039      	str	r1, [r7, #0]
    {
      // concept requirements
      __glibcxx_function_requires(_LessThanComparableConcept<_Tp>)
      //return  __a < __b ? __b : __a;
      if (__a < __b)
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	681a      	ldr	r2, [r3, #0]
 8001d42:	683b      	ldr	r3, [r7, #0]
 8001d44:	681b      	ldr	r3, [r3, #0]
 8001d46:	429a      	cmp	r2, r3
 8001d48:	d201      	bcs.n	8001d4e <_ZSt3maxIjERKT_S2_S2_+0x1a>
	return __b;
 8001d4a:	683b      	ldr	r3, [r7, #0]
 8001d4c:	e000      	b.n	8001d50 <_ZSt3maxIjERKT_S2_S2_+0x1c>
      return __a;
 8001d4e:	687b      	ldr	r3, [r7, #4]
    }
 8001d50:	4618      	mov	r0, r3
 8001d52:	370c      	adds	r7, #12
 8001d54:	46bd      	mov	sp, r7
 8001d56:	bc80      	pop	{r7}
 8001d58:	4770      	bx	lr
 8001d5a:	bf00      	nop

08001d5c <_ZNSt11_Deque_baseI8CommandSSaIS0_EE15_M_allocate_mapEj>:
	typedef __gnu_cxx::__alloc_traits<_Tp_alloc_type> _Traits;
	_Traits::deallocate(_M_impl, __p, __deque_buf_size(sizeof(_Tp)));
      }

      _Map_pointer
      _M_allocate_map(size_t __n)
 8001d5c:	b590      	push	{r4, r7, lr}
 8001d5e:	b085      	sub	sp, #20
 8001d60:	af00      	add	r7, sp, #0
 8001d62:	6078      	str	r0, [r7, #4]
 8001d64:	6039      	str	r1, [r7, #0]
      {
	_Map_alloc_type __map_alloc = _M_get_map_allocator();
 8001d66:	f107 030c 	add.w	r3, r7, #12
 8001d6a:	6879      	ldr	r1, [r7, #4]
 8001d6c:	4618      	mov	r0, r3
 8001d6e:	f000 f859 	bl	8001e24 <_ZNKSt11_Deque_baseI8CommandSSaIS0_EE20_M_get_map_allocatorEv>
	return _Map_alloc_traits::allocate(__map_alloc, __n);
 8001d72:	f107 030c 	add.w	r3, r7, #12
 8001d76:	6839      	ldr	r1, [r7, #0]
 8001d78:	4618      	mov	r0, r3
 8001d7a:	f000 f947 	bl	800200c <_ZN9__gnu_cxx14__alloc_traitsISaIP8CommandSEE8allocateERS3_j>
 8001d7e:	4604      	mov	r4, r0
      }

      _Map_pointer
      _M_allocate_map(size_t __n)
      {
	_Map_alloc_type __map_alloc = _M_get_map_allocator();
 8001d80:	f107 030c 	add.w	r3, r7, #12
 8001d84:	4618      	mov	r0, r3
 8001d86:	f000 f85f 	bl	8001e48 <_ZNSaIP8CommandSED1Ev>
	return _Map_alloc_traits::allocate(__map_alloc, __n);
 8001d8a:	4623      	mov	r3, r4
      }
 8001d8c:	4618      	mov	r0, r3
 8001d8e:	3714      	adds	r7, #20
 8001d90:	46bd      	mov	sp, r7
 8001d92:	bd90      	pop	{r4, r7, pc}

08001d94 <_ZNSt11_Deque_baseI8CommandSSaIS0_EE15_M_create_nodesEPPS0_S4_>:
					% __deque_buf_size(sizeof(_Tp)));
    }

  template<typename _Tp, typename _Alloc>
    void
    _Deque_base<_Tp, _Alloc>::
 8001d94:	b580      	push	{r7, lr}
 8001d96:	b086      	sub	sp, #24
 8001d98:	af00      	add	r7, sp, #0
 8001d9a:	60f8      	str	r0, [r7, #12]
 8001d9c:	60b9      	str	r1, [r7, #8]
 8001d9e:	607a      	str	r2, [r7, #4]
    _M_create_nodes(_Map_pointer __nstart, _Map_pointer __nfinish)
    {
      _Map_pointer __cur;
      __try
	{
	  for (__cur = __nstart; __cur < __nfinish; ++__cur)
 8001da0:	68bb      	ldr	r3, [r7, #8]
 8001da2:	617b      	str	r3, [r7, #20]
 8001da4:	697a      	ldr	r2, [r7, #20]
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	429a      	cmp	r2, r3
 8001daa:	d209      	bcs.n	8001dc0 <_ZNSt11_Deque_baseI8CommandSSaIS0_EE15_M_create_nodesEPPS0_S4_+0x2c>
	    *__cur = this->_M_allocate_node();
 8001dac:	68f8      	ldr	r0, [r7, #12]
 8001dae:	f000 f911 	bl	8001fd4 <_ZNSt11_Deque_baseI8CommandSSaIS0_EE16_M_allocate_nodeEv>
 8001db2:	4602      	mov	r2, r0
 8001db4:	697b      	ldr	r3, [r7, #20]
 8001db6:	601a      	str	r2, [r3, #0]
    _M_create_nodes(_Map_pointer __nstart, _Map_pointer __nfinish)
    {
      _Map_pointer __cur;
      __try
	{
	  for (__cur = __nstart; __cur < __nfinish; ++__cur)
 8001db8:	697b      	ldr	r3, [r7, #20]
 8001dba:	3304      	adds	r3, #4
 8001dbc:	617b      	str	r3, [r7, #20]
 8001dbe:	e7f1      	b.n	8001da4 <_ZNSt11_Deque_baseI8CommandSSaIS0_EE15_M_create_nodesEPPS0_S4_+0x10>
      __catch(...)
	{
	  _M_destroy_nodes(__nstart, __cur);
	  __throw_exception_again;
	}
    }
 8001dc0:	bf00      	nop
 8001dc2:	3718      	adds	r7, #24
 8001dc4:	46bd      	mov	sp, r7
 8001dc6:	bd80      	pop	{r7, pc}

08001dc8 <_ZNSt15_Deque_iteratorI8CommandSRS0_PS0_E11_M_set_nodeEPS2_>:
       *  Prepares to traverse new_node.  Sets everything except
       *  _M_cur, which should therefore be set by the caller
       *  immediately afterwards, based on _M_first and _M_last.
       */
      void
      _M_set_node(_Map_pointer __new_node) _GLIBCXX_NOEXCEPT
 8001dc8:	b590      	push	{r4, r7, lr}
 8001dca:	b083      	sub	sp, #12
 8001dcc:	af00      	add	r7, sp, #0
 8001dce:	6078      	str	r0, [r7, #4]
 8001dd0:	6039      	str	r1, [r7, #0]
      {
	_M_node = __new_node;
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	683a      	ldr	r2, [r7, #0]
 8001dd6:	60da      	str	r2, [r3, #12]
	_M_first = *__new_node;
 8001dd8:	683b      	ldr	r3, [r7, #0]
 8001dda:	681a      	ldr	r2, [r3, #0]
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	605a      	str	r2, [r3, #4]
	_M_last = _M_first + difference_type(_S_buffer_size());
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	685c      	ldr	r4, [r3, #4]
 8001de4:	f000 f8b0 	bl	8001f48 <_ZNSt15_Deque_iteratorI8CommandSRS0_PS0_E14_S_buffer_sizeEv>
 8001de8:	4603      	mov	r3, r0
 8001dea:	00db      	lsls	r3, r3, #3
 8001dec:	18e2      	adds	r2, r4, r3
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	609a      	str	r2, [r3, #8]
      }
 8001df2:	bf00      	nop
 8001df4:	370c      	adds	r7, #12
 8001df6:	46bd      	mov	sp, r7
 8001df8:	bd90      	pop	{r4, r7, pc}
 8001dfa:	bf00      	nop

08001dfc <_ZNSt11_Deque_baseI8CommandSSaIS0_EE18_M_deallocate_nodeEPS0_>:
	typedef __gnu_cxx::__alloc_traits<_Tp_alloc_type> _Traits;
	return _Traits::allocate(_M_impl, __deque_buf_size(sizeof(_Tp)));
      }

      void
      _M_deallocate_node(_Ptr __p) _GLIBCXX_NOEXCEPT
 8001dfc:	b590      	push	{r4, r7, lr}
 8001dfe:	b083      	sub	sp, #12
 8001e00:	af00      	add	r7, sp, #0
 8001e02:	6078      	str	r0, [r7, #4]
 8001e04:	6039      	str	r1, [r7, #0]
      {
	typedef __gnu_cxx::__alloc_traits<_Tp_alloc_type> _Traits;
	_Traits::deallocate(_M_impl, __p, __deque_buf_size(sizeof(_Tp)));
 8001e06:	687c      	ldr	r4, [r7, #4]
 8001e08:	2008      	movs	r0, #8
 8001e0a:	f7ff f9b9 	bl	8001180 <_ZSt16__deque_buf_sizej>
 8001e0e:	4603      	mov	r3, r0
 8001e10:	461a      	mov	r2, r3
 8001e12:	6839      	ldr	r1, [r7, #0]
 8001e14:	4620      	mov	r0, r4
 8001e16:	f000 f909 	bl	800202c <_ZN9__gnu_cxx14__alloc_traitsISaI8CommandSEE10deallocateERS2_PS1_j>
      }
 8001e1a:	bf00      	nop
 8001e1c:	370c      	adds	r7, #12
 8001e1e:	46bd      	mov	sp, r7
 8001e20:	bd90      	pop	{r4, r7, pc}
 8001e22:	bf00      	nop

08001e24 <_ZNKSt11_Deque_baseI8CommandSSaIS0_EE20_M_get_map_allocatorEv>:
      const _Tp_alloc_type&
      _M_get_Tp_allocator() const _GLIBCXX_NOEXCEPT
      { return *static_cast<const _Tp_alloc_type*>(&this->_M_impl); }

      _Map_alloc_type
      _M_get_map_allocator() const _GLIBCXX_NOEXCEPT
 8001e24:	b580      	push	{r7, lr}
 8001e26:	b082      	sub	sp, #8
 8001e28:	af00      	add	r7, sp, #0
 8001e2a:	6078      	str	r0, [r7, #4]
 8001e2c:	6039      	str	r1, [r7, #0]
      { return _Map_alloc_type(_M_get_Tp_allocator()); }
 8001e2e:	6838      	ldr	r0, [r7, #0]
 8001e30:	f7ff fe48 	bl	8001ac4 <_ZNKSt11_Deque_baseI8CommandSSaIS0_EE19_M_get_Tp_allocatorEv>
 8001e34:	4603      	mov	r3, r0
 8001e36:	4619      	mov	r1, r3
 8001e38:	6878      	ldr	r0, [r7, #4]
 8001e3a:	f000 f907 	bl	800204c <_ZNSaIP8CommandSEC1IS_EERKSaIT_E>
 8001e3e:	6878      	ldr	r0, [r7, #4]
 8001e40:	3708      	adds	r7, #8
 8001e42:	46bd      	mov	sp, r7
 8001e44:	bd80      	pop	{r7, pc}
 8001e46:	bf00      	nop

08001e48 <_ZNSaIP8CommandSED1Ev>:
      : __allocator_base<_Tp>(__a) { }

      template<typename _Tp1>
        allocator(const allocator<_Tp1>&) throw() { }

      ~allocator() throw() { }
 8001e48:	b580      	push	{r7, lr}
 8001e4a:	b082      	sub	sp, #8
 8001e4c:	af00      	add	r7, sp, #0
 8001e4e:	6078      	str	r0, [r7, #4]
 8001e50:	6878      	ldr	r0, [r7, #4]
 8001e52:	f000 f909 	bl	8002068 <_ZN9__gnu_cxx13new_allocatorIP8CommandSED1Ev>
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	4618      	mov	r0, r3
 8001e5a:	3708      	adds	r7, #8
 8001e5c:	46bd      	mov	sp, r7
 8001e5e:	bd80      	pop	{r7, pc}

08001e60 <_ZN9__gnu_cxx14__alloc_traitsISaIP8CommandSEE10deallocateERS3_PS2_j>:

    static pointer
    allocate(_Alloc& __a, size_type __n)
    { return __a.allocate(__n); }

    static void deallocate(_Alloc& __a, pointer __p, size_type __n)
 8001e60:	b580      	push	{r7, lr}
 8001e62:	b084      	sub	sp, #16
 8001e64:	af00      	add	r7, sp, #0
 8001e66:	60f8      	str	r0, [r7, #12]
 8001e68:	60b9      	str	r1, [r7, #8]
 8001e6a:	607a      	str	r2, [r7, #4]
    { __a.deallocate(__p, __n); }
 8001e6c:	687a      	ldr	r2, [r7, #4]
 8001e6e:	68b9      	ldr	r1, [r7, #8]
 8001e70:	68f8      	ldr	r0, [r7, #12]
 8001e72:	f000 f903 	bl	800207c <_ZN9__gnu_cxx13new_allocatorIP8CommandSE10deallocateEPS2_j>
 8001e76:	bf00      	nop
 8001e78:	3710      	adds	r7, #16
 8001e7a:	46bd      	mov	sp, r7
 8001e7c:	bd80      	pop	{r7, pc}
 8001e7e:	bf00      	nop

08001e80 <_ZNSt11_Deque_baseI8CommandSSaIS0_EE11_Deque_implC1ERKS1_>:
	_Deque_impl()
	: _Tp_alloc_type(), _M_map(), _M_map_size(0),
	  _M_start(), _M_finish()
	{ }

	_Deque_impl(const _Tp_alloc_type& __a) _GLIBCXX_NOEXCEPT
 8001e80:	b580      	push	{r7, lr}
 8001e82:	b082      	sub	sp, #8
 8001e84:	af00      	add	r7, sp, #0
 8001e86:	6078      	str	r0, [r7, #4]
 8001e88:	6039      	str	r1, [r7, #0]
	: _Tp_alloc_type(__a), _M_map(), _M_map_size(0),
	  _M_start(), _M_finish()
 8001e8a:	6839      	ldr	r1, [r7, #0]
 8001e8c:	6878      	ldr	r0, [r7, #4]
 8001e8e:	f000 f903 	bl	8002098 <_ZNSaI8CommandSEC1ERKS0_>
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	2200      	movs	r2, #0
 8001e96:	601a      	str	r2, [r3, #0]
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	2200      	movs	r2, #0
 8001e9c:	605a      	str	r2, [r3, #4]
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	3308      	adds	r3, #8
 8001ea2:	4618      	mov	r0, r3
 8001ea4:	f7ff ff26 	bl	8001cf4 <_ZNSt15_Deque_iteratorI8CommandSRS0_PS0_EC1Ev>
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	3318      	adds	r3, #24
 8001eac:	4618      	mov	r0, r3
 8001eae:	f7ff ff21 	bl	8001cf4 <_ZNSt15_Deque_iteratorI8CommandSRS0_PS0_EC1Ev>
	{ }
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	4618      	mov	r0, r3
 8001eb6:	3708      	adds	r7, #8
 8001eb8:	46bd      	mov	sp, r7
 8001eba:	bd80      	pop	{r7, pc}

08001ebc <_ZNSt15_Deque_iteratorI8CommandSRKS0_PS1_EC1ERKS_IS0_RS0_PS0_E>:
        _M_last(*__y + _S_buffer_size()), _M_node(__y) { }

      _Deque_iterator() _GLIBCXX_NOEXCEPT
      : _M_cur(), _M_first(), _M_last(), _M_node() { }

      _Deque_iterator(const iterator& __x) _GLIBCXX_NOEXCEPT
 8001ebc:	b480      	push	{r7}
 8001ebe:	b083      	sub	sp, #12
 8001ec0:	af00      	add	r7, sp, #0
 8001ec2:	6078      	str	r0, [r7, #4]
 8001ec4:	6039      	str	r1, [r7, #0]
      : _M_cur(__x._M_cur), _M_first(__x._M_first),
        _M_last(__x._M_last), _M_node(__x._M_node) { }
 8001ec6:	683b      	ldr	r3, [r7, #0]
 8001ec8:	681a      	ldr	r2, [r3, #0]
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	601a      	str	r2, [r3, #0]
 8001ece:	683b      	ldr	r3, [r7, #0]
 8001ed0:	685a      	ldr	r2, [r3, #4]
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	605a      	str	r2, [r3, #4]
 8001ed6:	683b      	ldr	r3, [r7, #0]
 8001ed8:	689a      	ldr	r2, [r3, #8]
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	609a      	str	r2, [r3, #8]
 8001ede:	683b      	ldr	r3, [r7, #0]
 8001ee0:	68da      	ldr	r2, [r3, #12]
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	60da      	str	r2, [r3, #12]
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	4618      	mov	r0, r3
 8001eea:	370c      	adds	r7, #12
 8001eec:	46bd      	mov	sp, r7
 8001eee:	bc80      	pop	{r7}
 8001ef0:	4770      	bx	lr
 8001ef2:	bf00      	nop

08001ef4 <_ZSt18uninitialized_copyISt15_Deque_iteratorI8CommandSRKS1_PS2_ES0_IS1_RS1_PS1_EET0_T_SA_S9_>:
   *
   *  Like copy(), but does not require an initialized output range.
  */
  template<typename _InputIterator, typename _ForwardIterator>
    inline _ForwardIterator
    uninitialized_copy(_InputIterator __first, _InputIterator __last,
 8001ef4:	b084      	sub	sp, #16
 8001ef6:	b5b0      	push	{r4, r5, r7, lr}
 8001ef8:	b08e      	sub	sp, #56	; 0x38
 8001efa:	af06      	add	r7, sp, #24
 8001efc:	6078      	str	r0, [r7, #4]
 8001efe:	f107 0034 	add.w	r0, r7, #52	; 0x34
 8001f02:	e880 000e 	stmia.w	r0, {r1, r2, r3}
      typedef typename iterator_traits<_InputIterator>::value_type
	_ValueType1;
      typedef typename iterator_traits<_ForwardIterator>::value_type
	_ValueType2;
#if __cplusplus < 201103L
      const bool __assignable = true;
 8001f06:	2301      	movs	r3, #1
 8001f08:	77fb      	strb	r3, [r7, #31]
#endif

      return std::__uninitialized_copy<__is_trivial(_ValueType1)
				       && __is_trivial(_ValueType2)
				       && __assignable>::
	__uninit_copy(__first, __last, __result);
 8001f0a:	f107 030c 	add.w	r3, r7, #12
 8001f0e:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8001f10:	4618      	mov	r0, r3
 8001f12:	f7ff fc31 	bl	8001778 <_ZNSt15_Deque_iteratorI8CommandSRS0_PS0_EC1ERKS3_>
 8001f16:	687d      	ldr	r5, [r7, #4]
 8001f18:	f107 030c 	add.w	r3, r7, #12
 8001f1c:	9305      	str	r3, [sp, #20]
 8001f1e:	ac01      	add	r4, sp, #4
 8001f20:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8001f24:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001f26:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8001f2a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001f2c:	9300      	str	r3, [sp, #0]
 8001f2e:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8001f32:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001f34:	4628      	mov	r0, r5
 8001f36:	f000 f8bd 	bl	80020b4 <_ZNSt20__uninitialized_copyILb1EE13__uninit_copyISt15_Deque_iteratorI8CommandSRKS3_PS4_ES2_IS3_RS3_PS3_EEET0_T_SC_SB_>
    }
 8001f3a:	6878      	ldr	r0, [r7, #4]
 8001f3c:	3720      	adds	r7, #32
 8001f3e:	46bd      	mov	sp, r7
 8001f40:	e8bd 40b0 	ldmia.w	sp!, {r4, r5, r7, lr}
 8001f44:	b004      	add	sp, #16
 8001f46:	4770      	bx	lr

08001f48 <_ZNSt15_Deque_iteratorI8CommandSRS0_PS0_E14_S_buffer_sizeEv>:
      typedef __iter<const _Tp>		const_iterator;
      typedef __ptr_to<_Tp>		_Elt_pointer;
      typedef __ptr_to<_Elt_pointer>	_Map_pointer;
#endif

      static size_t _S_buffer_size() _GLIBCXX_NOEXCEPT
 8001f48:	b580      	push	{r7, lr}
 8001f4a:	af00      	add	r7, sp, #0
      { return __deque_buf_size(sizeof(_Tp)); }
 8001f4c:	2008      	movs	r0, #8
 8001f4e:	f7ff f917 	bl	8001180 <_ZSt16__deque_buf_sizej>
 8001f52:	4603      	mov	r3, r0
 8001f54:	4618      	mov	r0, r3
 8001f56:	bd80      	pop	{r7, pc}

08001f58 <_ZN9__gnu_cxx13new_allocatorI8CommandSE7destroyEPS1_>:
      void 
      construct(pointer __p, const _Tp& __val) 
      { ::new((void *)__p) _Tp(__val); }

      void 
      destroy(pointer __p) { __p->~_Tp(); }
 8001f58:	b480      	push	{r7}
 8001f5a:	b083      	sub	sp, #12
 8001f5c:	af00      	add	r7, sp, #0
 8001f5e:	6078      	str	r0, [r7, #4]
 8001f60:	6039      	str	r1, [r7, #0]
 8001f62:	bf00      	nop
 8001f64:	370c      	adds	r7, #12
 8001f66:	46bd      	mov	sp, r7
 8001f68:	bc80      	pop	{r7}
 8001f6a:	4770      	bx	lr

08001f6c <_ZN9__gnu_cxx13new_allocatorI8CommandSE9constructEPS1_RKS1_>:
        destroy(_Up* __p) { __p->~_Up(); }
#else
      // _GLIBCXX_RESOLVE_LIB_DEFECTS
      // 402. wrong new expression in [some_] allocator::construct
      void 
      construct(pointer __p, const _Tp& __val) 
 8001f6c:	b580      	push	{r7, lr}
 8001f6e:	b084      	sub	sp, #16
 8001f70:	af00      	add	r7, sp, #0
 8001f72:	60f8      	str	r0, [r7, #12]
 8001f74:	60b9      	str	r1, [r7, #8]
 8001f76:	607a      	str	r2, [r7, #4]
      { ::new((void *)__p) _Tp(__val); }
 8001f78:	68bb      	ldr	r3, [r7, #8]
 8001f7a:	4619      	mov	r1, r3
 8001f7c:	2008      	movs	r0, #8
 8001f7e:	f7ff f8f3 	bl	8001168 <_ZnwjPv>
 8001f82:	4603      	mov	r3, r0
 8001f84:	2b00      	cmp	r3, #0
 8001f86:	d004      	beq.n	8001f92 <_ZN9__gnu_cxx13new_allocatorI8CommandSE9constructEPS1_RKS1_+0x26>
 8001f88:	687a      	ldr	r2, [r7, #4]
 8001f8a:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001f8e:	e883 0003 	stmia.w	r3, {r0, r1}
 8001f92:	bf00      	nop
 8001f94:	3710      	adds	r7, #16
 8001f96:	46bd      	mov	sp, r7
 8001f98:	bd80      	pop	{r7, pc}
 8001f9a:	bf00      	nop

08001f9c <_ZNSt5dequeI8CommandSSaIS0_EE22_M_reserve_map_at_backEj>:
       *  Makes sure the _M_map has space for new nodes.  Does not
       *  actually add the nodes.  Can invalidate _M_map pointers.
       *  (And consequently, %deque iterators.)
       */
      void
      _M_reserve_map_at_back(size_type __nodes_to_add = 1)
 8001f9c:	b580      	push	{r7, lr}
 8001f9e:	b082      	sub	sp, #8
 8001fa0:	af00      	add	r7, sp, #0
 8001fa2:	6078      	str	r0, [r7, #4]
 8001fa4:	6039      	str	r1, [r7, #0]
      {
	if (__nodes_to_add + 1 > this->_M_impl._M_map_size
 8001fa6:	683b      	ldr	r3, [r7, #0]
 8001fa8:	1c5a      	adds	r2, r3, #1
	    - (this->_M_impl._M_finish._M_node - this->_M_impl._M_map))
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	685b      	ldr	r3, [r3, #4]
 8001fae:	6879      	ldr	r1, [r7, #4]
 8001fb0:	6a49      	ldr	r1, [r1, #36]	; 0x24
       *  (And consequently, %deque iterators.)
       */
      void
      _M_reserve_map_at_back(size_type __nodes_to_add = 1)
      {
	if (__nodes_to_add + 1 > this->_M_impl._M_map_size
 8001fb2:	4608      	mov	r0, r1
	    - (this->_M_impl._M_finish._M_node - this->_M_impl._M_map))
 8001fb4:	6879      	ldr	r1, [r7, #4]
 8001fb6:	6809      	ldr	r1, [r1, #0]
       *  (And consequently, %deque iterators.)
       */
      void
      _M_reserve_map_at_back(size_type __nodes_to_add = 1)
      {
	if (__nodes_to_add + 1 > this->_M_impl._M_map_size
 8001fb8:	1a41      	subs	r1, r0, r1
 8001fba:	1089      	asrs	r1, r1, #2
 8001fbc:	1a5b      	subs	r3, r3, r1
 8001fbe:	429a      	cmp	r2, r3
 8001fc0:	d904      	bls.n	8001fcc <_ZNSt5dequeI8CommandSSaIS0_EE22_M_reserve_map_at_backEj+0x30>
	    - (this->_M_impl._M_finish._M_node - this->_M_impl._M_map))
	  _M_reallocate_map(__nodes_to_add, false);
 8001fc2:	2200      	movs	r2, #0
 8001fc4:	6839      	ldr	r1, [r7, #0]
 8001fc6:	6878      	ldr	r0, [r7, #4]
 8001fc8:	f000 f89c 	bl	8002104 <_ZNSt5dequeI8CommandSSaIS0_EE17_M_reallocate_mapEjb>
      }
 8001fcc:	bf00      	nop
 8001fce:	3708      	adds	r7, #8
 8001fd0:	46bd      	mov	sp, r7
 8001fd2:	bd80      	pop	{r7, pc}

08001fd4 <_ZNSt11_Deque_baseI8CommandSSaIS0_EE16_M_allocate_nodeEv>:
      _Map_alloc_type
      _M_get_map_allocator() const _GLIBCXX_NOEXCEPT
      { return _Map_alloc_type(_M_get_Tp_allocator()); }

      _Ptr
      _M_allocate_node()
 8001fd4:	b590      	push	{r4, r7, lr}
 8001fd6:	b083      	sub	sp, #12
 8001fd8:	af00      	add	r7, sp, #0
 8001fda:	6078      	str	r0, [r7, #4]
      { 
	typedef __gnu_cxx::__alloc_traits<_Tp_alloc_type> _Traits;
	return _Traits::allocate(_M_impl, __deque_buf_size(sizeof(_Tp)));
 8001fdc:	687c      	ldr	r4, [r7, #4]
 8001fde:	2008      	movs	r0, #8
 8001fe0:	f7ff f8ce 	bl	8001180 <_ZSt16__deque_buf_sizej>
 8001fe4:	4603      	mov	r3, r0
 8001fe6:	4619      	mov	r1, r3
 8001fe8:	4620      	mov	r0, r4
 8001fea:	f000 f927 	bl	800223c <_ZN9__gnu_cxx14__alloc_traitsISaI8CommandSEE8allocateERS2_j>
 8001fee:	4603      	mov	r3, r0
      }
 8001ff0:	4618      	mov	r0, r3
 8001ff2:	370c      	adds	r7, #12
 8001ff4:	46bd      	mov	sp, r7
 8001ff6:	bd90      	pop	{r4, r7, pc}

08001ff8 <_ZN9__gnu_cxx13new_allocatorI8CommandSEC1Ev>:
      // _GLIBCXX_RESOLVE_LIB_DEFECTS
      // 2103. propagate_on_container_move_assignment
      typedef std::true_type propagate_on_container_move_assignment;
#endif

      new_allocator() _GLIBCXX_USE_NOEXCEPT { }
 8001ff8:	b480      	push	{r7}
 8001ffa:	b083      	sub	sp, #12
 8001ffc:	af00      	add	r7, sp, #0
 8001ffe:	6078      	str	r0, [r7, #4]
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	4618      	mov	r0, r3
 8002004:	370c      	adds	r7, #12
 8002006:	46bd      	mov	sp, r7
 8002008:	bc80      	pop	{r7}
 800200a:	4770      	bx	lr

0800200c <_ZN9__gnu_cxx14__alloc_traitsISaIP8CommandSEE8allocateERS3_j>:
    typedef typename _Alloc::const_reference        const_reference;
    typedef typename _Alloc::size_type              size_type;
    typedef typename _Alloc::difference_type        difference_type;

    static pointer
    allocate(_Alloc& __a, size_type __n)
 800200c:	b580      	push	{r7, lr}
 800200e:	b082      	sub	sp, #8
 8002010:	af00      	add	r7, sp, #0
 8002012:	6078      	str	r0, [r7, #4]
 8002014:	6039      	str	r1, [r7, #0]
    { return __a.allocate(__n); }
 8002016:	2200      	movs	r2, #0
 8002018:	6839      	ldr	r1, [r7, #0]
 800201a:	6878      	ldr	r0, [r7, #4]
 800201c:	f000 f91e 	bl	800225c <_ZN9__gnu_cxx13new_allocatorIP8CommandSE8allocateEjPKv>
 8002020:	4603      	mov	r3, r0
 8002022:	4618      	mov	r0, r3
 8002024:	3708      	adds	r7, #8
 8002026:	46bd      	mov	sp, r7
 8002028:	bd80      	pop	{r7, pc}
 800202a:	bf00      	nop

0800202c <_ZN9__gnu_cxx14__alloc_traitsISaI8CommandSEE10deallocateERS2_PS1_j>:

    static void deallocate(_Alloc& __a, pointer __p, size_type __n)
 800202c:	b580      	push	{r7, lr}
 800202e:	b084      	sub	sp, #16
 8002030:	af00      	add	r7, sp, #0
 8002032:	60f8      	str	r0, [r7, #12]
 8002034:	60b9      	str	r1, [r7, #8]
 8002036:	607a      	str	r2, [r7, #4]
    { __a.deallocate(__p, __n); }
 8002038:	687a      	ldr	r2, [r7, #4]
 800203a:	68b9      	ldr	r1, [r7, #8]
 800203c:	68f8      	ldr	r0, [r7, #12]
 800203e:	f000 f92b 	bl	8002298 <_ZN9__gnu_cxx13new_allocatorI8CommandSE10deallocateEPS1_j>
 8002042:	bf00      	nop
 8002044:	3710      	adds	r7, #16
 8002046:	46bd      	mov	sp, r7
 8002048:	bd80      	pop	{r7, pc}
 800204a:	bf00      	nop

0800204c <_ZNSaIP8CommandSEC1IS_EERKSaIT_E>:

      allocator(const allocator& __a) throw()
      : __allocator_base<_Tp>(__a) { }

      template<typename _Tp1>
        allocator(const allocator<_Tp1>&) throw() { }
 800204c:	b580      	push	{r7, lr}
 800204e:	b082      	sub	sp, #8
 8002050:	af00      	add	r7, sp, #0
 8002052:	6078      	str	r0, [r7, #4]
 8002054:	6039      	str	r1, [r7, #0]
 8002056:	6878      	ldr	r0, [r7, #4]
 8002058:	f000 f92c 	bl	80022b4 <_ZN9__gnu_cxx13new_allocatorIP8CommandSEC1Ev>
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	4618      	mov	r0, r3
 8002060:	3708      	adds	r7, #8
 8002062:	46bd      	mov	sp, r7
 8002064:	bd80      	pop	{r7, pc}
 8002066:	bf00      	nop

08002068 <_ZN9__gnu_cxx13new_allocatorIP8CommandSED1Ev>:
      new_allocator(const new_allocator&) _GLIBCXX_USE_NOEXCEPT { }

      template<typename _Tp1>
        new_allocator(const new_allocator<_Tp1>&) _GLIBCXX_USE_NOEXCEPT { }

      ~new_allocator() _GLIBCXX_USE_NOEXCEPT { }
 8002068:	b480      	push	{r7}
 800206a:	b083      	sub	sp, #12
 800206c:	af00      	add	r7, sp, #0
 800206e:	6078      	str	r0, [r7, #4]
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	4618      	mov	r0, r3
 8002074:	370c      	adds	r7, #12
 8002076:	46bd      	mov	sp, r7
 8002078:	bc80      	pop	{r7}
 800207a:	4770      	bx	lr

0800207c <_ZN9__gnu_cxx13new_allocatorIP8CommandSE10deallocateEPS2_j>:
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
      }

      // __p is not permitted to be a null pointer.
      void
      deallocate(pointer __p, size_type)
 800207c:	b580      	push	{r7, lr}
 800207e:	b084      	sub	sp, #16
 8002080:	af00      	add	r7, sp, #0
 8002082:	60f8      	str	r0, [r7, #12]
 8002084:	60b9      	str	r1, [r7, #8]
 8002086:	607a      	str	r2, [r7, #4]
      { ::operator delete(__p); }
 8002088:	68b8      	ldr	r0, [r7, #8]
 800208a:	f003 f987 	bl	800539c <_ZdlPv>
 800208e:	bf00      	nop
 8002090:	3710      	adds	r7, #16
 8002092:	46bd      	mov	sp, r7
 8002094:	bd80      	pop	{r7, pc}
 8002096:	bf00      	nop

08002098 <_ZNSaI8CommandSEC1ERKS0_>:
      typedef true_type propagate_on_container_move_assignment;
#endif

      allocator() throw() { }

      allocator(const allocator& __a) throw()
 8002098:	b580      	push	{r7, lr}
 800209a:	b082      	sub	sp, #8
 800209c:	af00      	add	r7, sp, #0
 800209e:	6078      	str	r0, [r7, #4]
 80020a0:	6039      	str	r1, [r7, #0]
      : __allocator_base<_Tp>(__a) { }
 80020a2:	6839      	ldr	r1, [r7, #0]
 80020a4:	6878      	ldr	r0, [r7, #4]
 80020a6:	f000 f90f 	bl	80022c8 <_ZN9__gnu_cxx13new_allocatorI8CommandSEC1ERKS2_>
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	4618      	mov	r0, r3
 80020ae:	3708      	adds	r7, #8
 80020b0:	46bd      	mov	sp, r7
 80020b2:	bd80      	pop	{r7, pc}

080020b4 <_ZNSt20__uninitialized_copyILb1EE13__uninit_copyISt15_Deque_iteratorI8CommandSRKS3_PS4_ES2_IS3_RS3_PS3_EEET0_T_SC_SB_>:
  template<>
    struct __uninitialized_copy<true>
    {
      template<typename _InputIterator, typename _ForwardIterator>
        static _ForwardIterator
        __uninit_copy(_InputIterator __first, _InputIterator __last,
 80020b4:	b084      	sub	sp, #16
 80020b6:	b5b0      	push	{r4, r5, r7, lr}
 80020b8:	b08c      	sub	sp, #48	; 0x30
 80020ba:	af06      	add	r7, sp, #24
 80020bc:	6078      	str	r0, [r7, #4]
 80020be:	f107 002c 	add.w	r0, r7, #44	; 0x2c
 80020c2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
		      _ForwardIterator __result)
        { return std::copy(__first, __last, __result); }
 80020c6:	f107 0308 	add.w	r3, r7, #8
 80020ca:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 80020cc:	4618      	mov	r0, r3
 80020ce:	f7ff fb53 	bl	8001778 <_ZNSt15_Deque_iteratorI8CommandSRS0_PS0_EC1ERKS3_>
 80020d2:	687d      	ldr	r5, [r7, #4]
 80020d4:	f107 0308 	add.w	r3, r7, #8
 80020d8:	9305      	str	r3, [sp, #20]
 80020da:	ac01      	add	r4, sp, #4
 80020dc:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80020e0:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80020e2:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 80020e6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80020e8:	9300      	str	r3, [sp, #0]
 80020ea:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80020ee:	cb0e      	ldmia	r3, {r1, r2, r3}
 80020f0:	4628      	mov	r0, r5
 80020f2:	f000 f8f5 	bl	80022e0 <_ZSt4copyISt15_Deque_iteratorI8CommandSRKS1_PS2_ES0_IS1_RS1_PS1_EET0_T_SA_S9_>
 80020f6:	6878      	ldr	r0, [r7, #4]
 80020f8:	3718      	adds	r7, #24
 80020fa:	46bd      	mov	sp, r7
 80020fc:	e8bd 40b0 	ldmia.w	sp!, {r4, r5, r7, lr}
 8002100:	b004      	add	sp, #16
 8002102:	4770      	bx	lr

08002104 <_ZNSt5dequeI8CommandSSaIS0_EE17_M_reallocate_mapEjb>:
        }
    }

  template <typename _Tp, typename _Alloc>
    void
    deque<_Tp, _Alloc>::
 8002104:	b590      	push	{r4, r7, lr}
 8002106:	b08b      	sub	sp, #44	; 0x2c
 8002108:	af00      	add	r7, sp, #0
 800210a:	60f8      	str	r0, [r7, #12]
 800210c:	60b9      	str	r1, [r7, #8]
 800210e:	4613      	mov	r3, r2
 8002110:	71fb      	strb	r3, [r7, #7]
    _M_reallocate_map(size_type __nodes_to_add, bool __add_at_front)
    {
      const size_type __old_num_nodes
	= this->_M_impl._M_finish._M_node - this->_M_impl._M_start._M_node + 1;
 8002112:	68fb      	ldr	r3, [r7, #12]
 8002114:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002116:	461a      	mov	r2, r3
 8002118:	68fb      	ldr	r3, [r7, #12]
 800211a:	695b      	ldr	r3, [r3, #20]
 800211c:	1ad3      	subs	r3, r2, r3
 800211e:	109b      	asrs	r3, r3, #2
 8002120:	3301      	adds	r3, #1
 8002122:	623b      	str	r3, [r7, #32]
      const size_type __new_num_nodes = __old_num_nodes + __nodes_to_add;
 8002124:	68bb      	ldr	r3, [r7, #8]
 8002126:	6a3a      	ldr	r2, [r7, #32]
 8002128:	4413      	add	r3, r2
 800212a:	61fb      	str	r3, [r7, #28]

      _Map_pointer __new_nstart;
      if (this->_M_impl._M_map_size > 2 * __new_num_nodes)
 800212c:	68fb      	ldr	r3, [r7, #12]
 800212e:	685a      	ldr	r2, [r3, #4]
 8002130:	69fb      	ldr	r3, [r7, #28]
 8002132:	005b      	lsls	r3, r3, #1
 8002134:	429a      	cmp	r2, r3
 8002136:	d92d      	bls.n	8002194 <_ZNSt5dequeI8CommandSSaIS0_EE17_M_reallocate_mapEjb+0x90>
	{
	  __new_nstart = this->_M_impl._M_map + (this->_M_impl._M_map_size
 8002138:	68fb      	ldr	r3, [r7, #12]
 800213a:	681a      	ldr	r2, [r3, #0]
					 - __new_num_nodes) / 2
 800213c:	68fb      	ldr	r3, [r7, #12]
 800213e:	6859      	ldr	r1, [r3, #4]
	                 + (__add_at_front ? __nodes_to_add : 0);
 8002140:	69fb      	ldr	r3, [r7, #28]
 8002142:	1acb      	subs	r3, r1, r3
 8002144:	085b      	lsrs	r3, r3, #1
 8002146:	0099      	lsls	r1, r3, #2
 8002148:	79fb      	ldrb	r3, [r7, #7]
 800214a:	2b00      	cmp	r3, #0
 800214c:	d002      	beq.n	8002154 <_ZNSt5dequeI8CommandSSaIS0_EE17_M_reallocate_mapEjb+0x50>
 800214e:	68bb      	ldr	r3, [r7, #8]
 8002150:	009b      	lsls	r3, r3, #2
 8002152:	e000      	b.n	8002156 <_ZNSt5dequeI8CommandSSaIS0_EE17_M_reallocate_mapEjb+0x52>
 8002154:	2300      	movs	r3, #0
 8002156:	440b      	add	r3, r1
      const size_type __new_num_nodes = __old_num_nodes + __nodes_to_add;

      _Map_pointer __new_nstart;
      if (this->_M_impl._M_map_size > 2 * __new_num_nodes)
	{
	  __new_nstart = this->_M_impl._M_map + (this->_M_impl._M_map_size
 8002158:	4413      	add	r3, r2
 800215a:	627b      	str	r3, [r7, #36]	; 0x24
					 - __new_num_nodes) / 2
	                 + (__add_at_front ? __nodes_to_add : 0);
	  if (__new_nstart < this->_M_impl._M_start._M_node)
 800215c:	68fb      	ldr	r3, [r7, #12]
 800215e:	695a      	ldr	r2, [r3, #20]
 8002160:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002162:	429a      	cmp	r2, r3
 8002164:	d909      	bls.n	800217a <_ZNSt5dequeI8CommandSSaIS0_EE17_M_reallocate_mapEjb+0x76>
	    std::copy(this->_M_impl._M_start._M_node,
 8002166:	68fb      	ldr	r3, [r7, #12]
 8002168:	6958      	ldr	r0, [r3, #20]
		      this->_M_impl._M_finish._M_node + 1,
 800216a:	68fb      	ldr	r3, [r7, #12]
 800216c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
	{
	  __new_nstart = this->_M_impl._M_map + (this->_M_impl._M_map_size
					 - __new_num_nodes) / 2
	                 + (__add_at_front ? __nodes_to_add : 0);
	  if (__new_nstart < this->_M_impl._M_start._M_node)
	    std::copy(this->_M_impl._M_start._M_node,
 800216e:	3304      	adds	r3, #4
 8002170:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002172:	4619      	mov	r1, r3
 8002174:	f000 f8ee 	bl	8002354 <_ZSt4copyIPP8CommandSS2_ET0_T_S4_S3_>
 8002178:	e048      	b.n	800220c <_ZNSt5dequeI8CommandSSaIS0_EE17_M_reallocate_mapEjb+0x108>
		      this->_M_impl._M_finish._M_node + 1,
		      __new_nstart);
	  else
	    std::copy_backward(this->_M_impl._M_start._M_node,
 800217a:	68fb      	ldr	r3, [r7, #12]
 800217c:	6958      	ldr	r0, [r3, #20]
			       this->_M_impl._M_finish._M_node + 1,
 800217e:	68fb      	ldr	r3, [r7, #12]
 8002180:	6a5b      	ldr	r3, [r3, #36]	; 0x24
	  if (__new_nstart < this->_M_impl._M_start._M_node)
	    std::copy(this->_M_impl._M_start._M_node,
		      this->_M_impl._M_finish._M_node + 1,
		      __new_nstart);
	  else
	    std::copy_backward(this->_M_impl._M_start._M_node,
 8002182:	1d19      	adds	r1, r3, #4
 8002184:	6a3b      	ldr	r3, [r7, #32]
 8002186:	009b      	lsls	r3, r3, #2
 8002188:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800218a:	4413      	add	r3, r2
 800218c:	461a      	mov	r2, r3
 800218e:	f000 f8f9 	bl	8002384 <_ZSt13copy_backwardIPP8CommandSS2_ET0_T_S4_S3_>
 8002192:	e03b      	b.n	800220c <_ZNSt5dequeI8CommandSSaIS0_EE17_M_reallocate_mapEjb+0x108>
			       __new_nstart + __old_num_nodes);
	}
      else
	{
	  size_type __new_map_size = this->_M_impl._M_map_size
	                             + std::max(this->_M_impl._M_map_size,
 8002194:	68fb      	ldr	r3, [r7, #12]
 8002196:	685c      	ldr	r4, [r3, #4]
 8002198:	68fb      	ldr	r3, [r7, #12]
 800219a:	3304      	adds	r3, #4
 800219c:	f107 0208 	add.w	r2, r7, #8
 80021a0:	4611      	mov	r1, r2
 80021a2:	4618      	mov	r0, r3
 80021a4:	f7ff fdc6 	bl	8001d34 <_ZSt3maxIjERKT_S2_S2_>
 80021a8:	4603      	mov	r3, r0
						__nodes_to_add) + 2;
 80021aa:	681b      	ldr	r3, [r3, #0]
 80021ac:	4423      	add	r3, r4
 80021ae:	3302      	adds	r3, #2
 80021b0:	61bb      	str	r3, [r7, #24]

	  _Map_pointer __new_map = this->_M_allocate_map(__new_map_size);
 80021b2:	68fb      	ldr	r3, [r7, #12]
 80021b4:	69b9      	ldr	r1, [r7, #24]
 80021b6:	4618      	mov	r0, r3
 80021b8:	f7ff fdd0 	bl	8001d5c <_ZNSt11_Deque_baseI8CommandSSaIS0_EE15_M_allocate_mapEj>
 80021bc:	6178      	str	r0, [r7, #20]
	  __new_nstart = __new_map + (__new_map_size - __new_num_nodes) / 2
	                 + (__add_at_front ? __nodes_to_add : 0);
 80021be:	69ba      	ldr	r2, [r7, #24]
 80021c0:	69fb      	ldr	r3, [r7, #28]
 80021c2:	1ad3      	subs	r3, r2, r3
 80021c4:	085b      	lsrs	r3, r3, #1
 80021c6:	009a      	lsls	r2, r3, #2
 80021c8:	79fb      	ldrb	r3, [r7, #7]
 80021ca:	2b00      	cmp	r3, #0
 80021cc:	d002      	beq.n	80021d4 <_ZNSt5dequeI8CommandSSaIS0_EE17_M_reallocate_mapEjb+0xd0>
 80021ce:	68bb      	ldr	r3, [r7, #8]
 80021d0:	009b      	lsls	r3, r3, #2
 80021d2:	e000      	b.n	80021d6 <_ZNSt5dequeI8CommandSSaIS0_EE17_M_reallocate_mapEjb+0xd2>
 80021d4:	2300      	movs	r3, #0
 80021d6:	4413      	add	r3, r2
	  size_type __new_map_size = this->_M_impl._M_map_size
	                             + std::max(this->_M_impl._M_map_size,
						__nodes_to_add) + 2;

	  _Map_pointer __new_map = this->_M_allocate_map(__new_map_size);
	  __new_nstart = __new_map + (__new_map_size - __new_num_nodes) / 2
 80021d8:	697a      	ldr	r2, [r7, #20]
 80021da:	4413      	add	r3, r2
 80021dc:	627b      	str	r3, [r7, #36]	; 0x24
	                 + (__add_at_front ? __nodes_to_add : 0);
	  std::copy(this->_M_impl._M_start._M_node,
 80021de:	68fb      	ldr	r3, [r7, #12]
 80021e0:	6958      	ldr	r0, [r3, #20]
		    this->_M_impl._M_finish._M_node + 1,
 80021e2:	68fb      	ldr	r3, [r7, #12]
 80021e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
						__nodes_to_add) + 2;

	  _Map_pointer __new_map = this->_M_allocate_map(__new_map_size);
	  __new_nstart = __new_map + (__new_map_size - __new_num_nodes) / 2
	                 + (__add_at_front ? __nodes_to_add : 0);
	  std::copy(this->_M_impl._M_start._M_node,
 80021e6:	3304      	adds	r3, #4
 80021e8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80021ea:	4619      	mov	r1, r3
 80021ec:	f000 f8b2 	bl	8002354 <_ZSt4copyIPP8CommandSS2_ET0_T_S4_S3_>
		    this->_M_impl._M_finish._M_node + 1,
		    __new_nstart);
	  _M_deallocate_map(this->_M_impl._M_map, this->_M_impl._M_map_size);
 80021f0:	68f8      	ldr	r0, [r7, #12]
 80021f2:	68fb      	ldr	r3, [r7, #12]
 80021f4:	6819      	ldr	r1, [r3, #0]
 80021f6:	68fb      	ldr	r3, [r7, #12]
 80021f8:	685b      	ldr	r3, [r3, #4]
 80021fa:	461a      	mov	r2, r3
 80021fc:	f7ff fc3c 	bl	8001a78 <_ZNSt11_Deque_baseI8CommandSSaIS0_EE17_M_deallocate_mapEPPS0_j>

	  this->_M_impl._M_map = __new_map;
 8002200:	68fb      	ldr	r3, [r7, #12]
 8002202:	697a      	ldr	r2, [r7, #20]
 8002204:	601a      	str	r2, [r3, #0]
	  this->_M_impl._M_map_size = __new_map_size;
 8002206:	68fb      	ldr	r3, [r7, #12]
 8002208:	69ba      	ldr	r2, [r7, #24]
 800220a:	605a      	str	r2, [r3, #4]
	}

      this->_M_impl._M_start._M_set_node(__new_nstart);
 800220c:	68fb      	ldr	r3, [r7, #12]
 800220e:	3308      	adds	r3, #8
 8002210:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002212:	4618      	mov	r0, r3
 8002214:	f7ff fdd8 	bl	8001dc8 <_ZNSt15_Deque_iteratorI8CommandSRS0_PS0_E11_M_set_nodeEPS2_>
      this->_M_impl._M_finish._M_set_node(__new_nstart + __old_num_nodes - 1);
 8002218:	68fb      	ldr	r3, [r7, #12]
 800221a:	f103 0018 	add.w	r0, r3, #24
 800221e:	6a3b      	ldr	r3, [r7, #32]
 8002220:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8002224:	3b01      	subs	r3, #1
 8002226:	009b      	lsls	r3, r3, #2
 8002228:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800222a:	4413      	add	r3, r2
 800222c:	4619      	mov	r1, r3
 800222e:	f7ff fdcb 	bl	8001dc8 <_ZNSt15_Deque_iteratorI8CommandSRS0_PS0_E11_M_set_nodeEPS2_>
    }
 8002232:	bf00      	nop
 8002234:	372c      	adds	r7, #44	; 0x2c
 8002236:	46bd      	mov	sp, r7
 8002238:	bd90      	pop	{r4, r7, pc}
 800223a:	bf00      	nop

0800223c <_ZN9__gnu_cxx14__alloc_traitsISaI8CommandSEE8allocateERS2_j>:
    typedef typename _Alloc::const_reference        const_reference;
    typedef typename _Alloc::size_type              size_type;
    typedef typename _Alloc::difference_type        difference_type;

    static pointer
    allocate(_Alloc& __a, size_type __n)
 800223c:	b580      	push	{r7, lr}
 800223e:	b082      	sub	sp, #8
 8002240:	af00      	add	r7, sp, #0
 8002242:	6078      	str	r0, [r7, #4]
 8002244:	6039      	str	r1, [r7, #0]
    { return __a.allocate(__n); }
 8002246:	2200      	movs	r2, #0
 8002248:	6839      	ldr	r1, [r7, #0]
 800224a:	6878      	ldr	r0, [r7, #4]
 800224c:	f000 f8b2 	bl	80023b4 <_ZN9__gnu_cxx13new_allocatorI8CommandSE8allocateEjPKv>
 8002250:	4603      	mov	r3, r0
 8002252:	4618      	mov	r0, r3
 8002254:	3708      	adds	r7, #8
 8002256:	46bd      	mov	sp, r7
 8002258:	bd80      	pop	{r7, pc}
 800225a:	bf00      	nop

0800225c <_ZN9__gnu_cxx13new_allocatorIP8CommandSE8allocateEjPKv>:
      { return std::__addressof(__x); }

      // NB: __n is permitted to be 0.  The C++ standard says nothing
      // about what the return value is when __n == 0.
      pointer
      allocate(size_type __n, const void* = 0)
 800225c:	b580      	push	{r7, lr}
 800225e:	b084      	sub	sp, #16
 8002260:	af00      	add	r7, sp, #0
 8002262:	60f8      	str	r0, [r7, #12]
 8002264:	60b9      	str	r1, [r7, #8]
 8002266:	607a      	str	r2, [r7, #4]
      { 
	if (__n > this->max_size())
 8002268:	68f8      	ldr	r0, [r7, #12]
 800226a:	f000 f8c1 	bl	80023f0 <_ZNK9__gnu_cxx13new_allocatorIP8CommandSE8max_sizeEv>
 800226e:	4602      	mov	r2, r0
 8002270:	68bb      	ldr	r3, [r7, #8]
 8002272:	429a      	cmp	r2, r3
 8002274:	bf34      	ite	cc
 8002276:	2301      	movcc	r3, #1
 8002278:	2300      	movcs	r3, #0
 800227a:	b2db      	uxtb	r3, r3
 800227c:	2b00      	cmp	r3, #0
 800227e:	d001      	beq.n	8002284 <_ZN9__gnu_cxx13new_allocatorIP8CommandSE8allocateEjPKv+0x28>
	  std::__throw_bad_alloc();
 8002280:	f003 f88e 	bl	80053a0 <_ZSt17__throw_bad_allocv>

	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
 8002284:	68bb      	ldr	r3, [r7, #8]
 8002286:	009b      	lsls	r3, r3, #2
 8002288:	4618      	mov	r0, r3
 800228a:	f003 f860 	bl	800534e <_Znwj>
 800228e:	4603      	mov	r3, r0
      }
 8002290:	4618      	mov	r0, r3
 8002292:	3710      	adds	r7, #16
 8002294:	46bd      	mov	sp, r7
 8002296:	bd80      	pop	{r7, pc}

08002298 <_ZN9__gnu_cxx13new_allocatorI8CommandSE10deallocateEPS1_j>:

      // __p is not permitted to be a null pointer.
      void
      deallocate(pointer __p, size_type)
 8002298:	b580      	push	{r7, lr}
 800229a:	b084      	sub	sp, #16
 800229c:	af00      	add	r7, sp, #0
 800229e:	60f8      	str	r0, [r7, #12]
 80022a0:	60b9      	str	r1, [r7, #8]
 80022a2:	607a      	str	r2, [r7, #4]
      { ::operator delete(__p); }
 80022a4:	68b8      	ldr	r0, [r7, #8]
 80022a6:	f003 f879 	bl	800539c <_ZdlPv>
 80022aa:	bf00      	nop
 80022ac:	3710      	adds	r7, #16
 80022ae:	46bd      	mov	sp, r7
 80022b0:	bd80      	pop	{r7, pc}
 80022b2:	bf00      	nop

080022b4 <_ZN9__gnu_cxx13new_allocatorIP8CommandSEC1Ev>:
      // _GLIBCXX_RESOLVE_LIB_DEFECTS
      // 2103. propagate_on_container_move_assignment
      typedef std::true_type propagate_on_container_move_assignment;
#endif

      new_allocator() _GLIBCXX_USE_NOEXCEPT { }
 80022b4:	b480      	push	{r7}
 80022b6:	b083      	sub	sp, #12
 80022b8:	af00      	add	r7, sp, #0
 80022ba:	6078      	str	r0, [r7, #4]
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	4618      	mov	r0, r3
 80022c0:	370c      	adds	r7, #12
 80022c2:	46bd      	mov	sp, r7
 80022c4:	bc80      	pop	{r7}
 80022c6:	4770      	bx	lr

080022c8 <_ZN9__gnu_cxx13new_allocatorI8CommandSEC1ERKS2_>:

      new_allocator(const new_allocator&) _GLIBCXX_USE_NOEXCEPT { }
 80022c8:	b480      	push	{r7}
 80022ca:	b083      	sub	sp, #12
 80022cc:	af00      	add	r7, sp, #0
 80022ce:	6078      	str	r0, [r7, #4]
 80022d0:	6039      	str	r1, [r7, #0]
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	4618      	mov	r0, r3
 80022d6:	370c      	adds	r7, #12
 80022d8:	46bd      	mov	sp, r7
 80022da:	bc80      	pop	{r7}
 80022dc:	4770      	bx	lr
 80022de:	bf00      	nop

080022e0 <_ZSt4copyISt15_Deque_iteratorI8CommandSRKS1_PS2_ES0_IS1_RS1_PS1_EET0_T_SA_S9_>:
   *  Note that the end of the output range is permitted to be contained
   *  within [first,last).
  */
  template<typename _II, typename _OI>
    inline _OI
    copy(_II __first, _II __last, _OI __result)
 80022e0:	b084      	sub	sp, #16
 80022e2:	b5b0      	push	{r4, r5, r7, lr}
 80022e4:	b094      	sub	sp, #80	; 0x50
 80022e6:	af06      	add	r7, sp, #24
 80022e8:	6078      	str	r0, [r7, #4]
 80022ea:	f107 004c 	add.w	r0, r7, #76	; 0x4c
 80022ee:	e880 000e 	stmia.w	r0, {r1, r2, r3}
	    typename iterator_traits<_II>::value_type>)
      __glibcxx_requires_valid_range(__first, __last);

      return (std::__copy_move_a2<__is_move_iterator<_II>::__value>
	      (std::__miter_base(__first), std::__miter_base(__last),
	       __result));
 80022f2:	f107 0008 	add.w	r0, r7, #8
 80022f6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80022f8:	9300      	str	r3, [sp, #0]
 80022fa:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80022fe:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002300:	f000 f882 	bl	8002408 <_ZSt12__miter_baseISt15_Deque_iteratorI8CommandSRKS1_PS2_EENSt11_Miter_baseIT_E13iterator_typeES7_>
 8002304:	f107 0018 	add.w	r0, r7, #24
 8002308:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800230a:	9300      	str	r3, [sp, #0]
 800230c:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8002310:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002312:	f000 f879 	bl	8002408 <_ZSt12__miter_baseISt15_Deque_iteratorI8CommandSRKS1_PS2_EENSt11_Miter_baseIT_E13iterator_typeES7_>
 8002316:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800231a:	6ef9      	ldr	r1, [r7, #108]	; 0x6c
 800231c:	4618      	mov	r0, r3
 800231e:	f7ff fa2b 	bl	8001778 <_ZNSt15_Deque_iteratorI8CommandSRS0_PS0_EC1ERKS3_>
 8002322:	687d      	ldr	r5, [r7, #4]
 8002324:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002328:	9305      	str	r3, [sp, #20]
 800232a:	ac01      	add	r4, sp, #4
 800232c:	f107 0318 	add.w	r3, r7, #24
 8002330:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002332:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8002336:	697b      	ldr	r3, [r7, #20]
 8002338:	9300      	str	r3, [sp, #0]
 800233a:	f107 0308 	add.w	r3, r7, #8
 800233e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002340:	4628      	mov	r0, r5
 8002342:	f000 f879 	bl	8002438 <_ZSt14__copy_move_a2ILb0ESt15_Deque_iteratorI8CommandSRKS1_PS2_ES0_IS1_RS1_PS1_EET1_T0_SA_S9_>
    }
 8002346:	6878      	ldr	r0, [r7, #4]
 8002348:	3738      	adds	r7, #56	; 0x38
 800234a:	46bd      	mov	sp, r7
 800234c:	e8bd 40b0 	ldmia.w	sp!, {r4, r5, r7, lr}
 8002350:	b004      	add	sp, #16
 8002352:	4770      	bx	lr

08002354 <_ZSt4copyIPP8CommandSS2_ET0_T_S4_S3_>:
   *  Note that the end of the output range is permitted to be contained
   *  within [first,last).
  */
  template<typename _II, typename _OI>
    inline _OI
    copy(_II __first, _II __last, _OI __result)
 8002354:	b590      	push	{r4, r7, lr}
 8002356:	b085      	sub	sp, #20
 8002358:	af00      	add	r7, sp, #0
 800235a:	60f8      	str	r0, [r7, #12]
 800235c:	60b9      	str	r1, [r7, #8]
 800235e:	607a      	str	r2, [r7, #4]
      __glibcxx_function_requires(_OutputIteratorConcept<_OI,
	    typename iterator_traits<_II>::value_type>)
      __glibcxx_requires_valid_range(__first, __last);

      return (std::__copy_move_a2<__is_move_iterator<_II>::__value>
	      (std::__miter_base(__first), std::__miter_base(__last),
 8002360:	68f8      	ldr	r0, [r7, #12]
 8002362:	f000 f8ab 	bl	80024bc <_ZSt12__miter_baseIPP8CommandSENSt11_Miter_baseIT_E13iterator_typeES4_>
 8002366:	4604      	mov	r4, r0
 8002368:	68b8      	ldr	r0, [r7, #8]
 800236a:	f000 f8a7 	bl	80024bc <_ZSt12__miter_baseIPP8CommandSENSt11_Miter_baseIT_E13iterator_typeES4_>
 800236e:	4603      	mov	r3, r0
	       __result));
 8002370:	687a      	ldr	r2, [r7, #4]
 8002372:	4619      	mov	r1, r3
 8002374:	4620      	mov	r0, r4
 8002376:	f000 f8ad 	bl	80024d4 <_ZSt14__copy_move_a2ILb0EPP8CommandSS2_ET1_T0_S4_S3_>
 800237a:	4603      	mov	r3, r0
    }
 800237c:	4618      	mov	r0, r3
 800237e:	3714      	adds	r7, #20
 8002380:	46bd      	mov	sp, r7
 8002382:	bd90      	pop	{r4, r7, pc}

08002384 <_ZSt13copy_backwardIPP8CommandSS2_ET0_T_S4_S3_>:
   *  Result may not be in the range (first,last].  Use copy instead.  Note
   *  that the start of the output range may overlap [first,last).
  */
  template<typename _BI1, typename _BI2>
    inline _BI2
    copy_backward(_BI1 __first, _BI1 __last, _BI2 __result)
 8002384:	b590      	push	{r4, r7, lr}
 8002386:	b085      	sub	sp, #20
 8002388:	af00      	add	r7, sp, #0
 800238a:	60f8      	str	r0, [r7, #12]
 800238c:	60b9      	str	r1, [r7, #8]
 800238e:	607a      	str	r2, [r7, #4]
	    typename iterator_traits<_BI1>::value_type,
	    typename iterator_traits<_BI2>::value_type>)
      __glibcxx_requires_valid_range(__first, __last);

      return (std::__copy_move_backward_a2<__is_move_iterator<_BI1>::__value>
	      (std::__miter_base(__first), std::__miter_base(__last),
 8002390:	68f8      	ldr	r0, [r7, #12]
 8002392:	f000 f893 	bl	80024bc <_ZSt12__miter_baseIPP8CommandSENSt11_Miter_baseIT_E13iterator_typeES4_>
 8002396:	4604      	mov	r4, r0
 8002398:	68b8      	ldr	r0, [r7, #8]
 800239a:	f000 f88f 	bl	80024bc <_ZSt12__miter_baseIPP8CommandSENSt11_Miter_baseIT_E13iterator_typeES4_>
 800239e:	4603      	mov	r3, r0
	       __result));
 80023a0:	687a      	ldr	r2, [r7, #4]
 80023a2:	4619      	mov	r1, r3
 80023a4:	4620      	mov	r0, r4
 80023a6:	f000 f8b1 	bl	800250c <_ZSt23__copy_move_backward_a2ILb0EPP8CommandSS2_ET1_T0_S4_S3_>
 80023aa:	4603      	mov	r3, r0
    }
 80023ac:	4618      	mov	r0, r3
 80023ae:	3714      	adds	r7, #20
 80023b0:	46bd      	mov	sp, r7
 80023b2:	bd90      	pop	{r4, r7, pc}

080023b4 <_ZN9__gnu_cxx13new_allocatorI8CommandSE8allocateEjPKv>:
      { return std::__addressof(__x); }

      // NB: __n is permitted to be 0.  The C++ standard says nothing
      // about what the return value is when __n == 0.
      pointer
      allocate(size_type __n, const void* = 0)
 80023b4:	b580      	push	{r7, lr}
 80023b6:	b084      	sub	sp, #16
 80023b8:	af00      	add	r7, sp, #0
 80023ba:	60f8      	str	r0, [r7, #12]
 80023bc:	60b9      	str	r1, [r7, #8]
 80023be:	607a      	str	r2, [r7, #4]
      { 
	if (__n > this->max_size())
 80023c0:	68f8      	ldr	r0, [r7, #12]
 80023c2:	f000 f8bf 	bl	8002544 <_ZNK9__gnu_cxx13new_allocatorI8CommandSE8max_sizeEv>
 80023c6:	4602      	mov	r2, r0
 80023c8:	68bb      	ldr	r3, [r7, #8]
 80023ca:	429a      	cmp	r2, r3
 80023cc:	bf34      	ite	cc
 80023ce:	2301      	movcc	r3, #1
 80023d0:	2300      	movcs	r3, #0
 80023d2:	b2db      	uxtb	r3, r3
 80023d4:	2b00      	cmp	r3, #0
 80023d6:	d001      	beq.n	80023dc <_ZN9__gnu_cxx13new_allocatorI8CommandSE8allocateEjPKv+0x28>
	  std::__throw_bad_alloc();
 80023d8:	f002 ffe2 	bl	80053a0 <_ZSt17__throw_bad_allocv>

	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
 80023dc:	68bb      	ldr	r3, [r7, #8]
 80023de:	00db      	lsls	r3, r3, #3
 80023e0:	4618      	mov	r0, r3
 80023e2:	f002 ffb4 	bl	800534e <_Znwj>
 80023e6:	4603      	mov	r3, r0
      }
 80023e8:	4618      	mov	r0, r3
 80023ea:	3710      	adds	r7, #16
 80023ec:	46bd      	mov	sp, r7
 80023ee:	bd80      	pop	{r7, pc}

080023f0 <_ZNK9__gnu_cxx13new_allocatorIP8CommandSE8max_sizeEv>:
      void
      deallocate(pointer __p, size_type)
      { ::operator delete(__p); }

      size_type
      max_size() const _GLIBCXX_USE_NOEXCEPT
 80023f0:	b480      	push	{r7}
 80023f2:	b083      	sub	sp, #12
 80023f4:	af00      	add	r7, sp, #0
 80023f6:	6078      	str	r0, [r7, #4]
      { return size_t(-1) / sizeof(_Tp); }
 80023f8:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
 80023fc:	4618      	mov	r0, r3
 80023fe:	370c      	adds	r7, #12
 8002400:	46bd      	mov	sp, r7
 8002402:	bc80      	pop	{r7}
 8002404:	4770      	bx	lr
 8002406:	bf00      	nop

08002408 <_ZSt12__miter_baseISt15_Deque_iteratorI8CommandSRKS1_PS2_EENSt11_Miter_baseIT_E13iterator_typeES7_>:
    : _Iter_base<_Iterator, __is_move_iterator<_Iterator>::__value>
    { };

  template<typename _Iterator>
    inline typename _Miter_base<_Iterator>::iterator_type
    __miter_base(_Iterator __it)
 8002408:	b084      	sub	sp, #16
 800240a:	b580      	push	{r7, lr}
 800240c:	b084      	sub	sp, #16
 800240e:	af02      	add	r7, sp, #8
 8002410:	6078      	str	r0, [r7, #4]
 8002412:	f107 0014 	add.w	r0, r7, #20
 8002416:	e880 000e 	stmia.w	r0, {r1, r2, r3}
    { return std::_Miter_base<_Iterator>::_S_base(__it); }
 800241a:	6878      	ldr	r0, [r7, #4]
 800241c:	6a3b      	ldr	r3, [r7, #32]
 800241e:	9300      	str	r3, [sp, #0]
 8002420:	f107 0314 	add.w	r3, r7, #20
 8002424:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002426:	f000 f899 	bl	800255c <_ZNSt10_Iter_baseISt15_Deque_iteratorI8CommandSRKS1_PS2_ELb0EE7_S_baseES5_>
 800242a:	6878      	ldr	r0, [r7, #4]
 800242c:	3708      	adds	r7, #8
 800242e:	46bd      	mov	sp, r7
 8002430:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8002434:	b004      	add	sp, #16
 8002436:	4770      	bx	lr

08002438 <_ZSt14__copy_move_a2ILb0ESt15_Deque_iteratorI8CommandSRKS1_PS2_ES0_IS1_RS1_PS1_EET1_T0_SA_S9_>:
    __copy_move_a2(istreambuf_iterator<_CharT, char_traits<_CharT> >,
		   istreambuf_iterator<_CharT, char_traits<_CharT> >, _CharT*);

  template<bool _IsMove, typename _II, typename _OI>
    inline _OI
    __copy_move_a2(_II __first, _II __last, _OI __result)
 8002438:	b084      	sub	sp, #16
 800243a:	b5b0      	push	{r4, r5, r7, lr}
 800243c:	b098      	sub	sp, #96	; 0x60
 800243e:	af06      	add	r7, sp, #24
 8002440:	6078      	str	r0, [r7, #4]
 8002442:	f107 005c 	add.w	r0, r7, #92	; 0x5c
 8002446:	e880 000e 	stmia.w	r0, {r1, r2, r3}
    {
      return _OI(std::__copy_move_a<_IsMove>(std::__niter_base(__first),
					     std::__niter_base(__last),
					     std::__niter_base(__result)));
 800244a:	f107 0008 	add.w	r0, r7, #8
 800244e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002450:	9300      	str	r3, [sp, #0]
 8002452:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8002456:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002458:	f000 f896 	bl	8002588 <_ZSt12__niter_baseISt15_Deque_iteratorI8CommandSRKS1_PS2_EENSt11_Niter_baseIT_E13iterator_typeES7_>
 800245c:	f107 0018 	add.w	r0, r7, #24
 8002460:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002462:	9300      	str	r3, [sp, #0]
 8002464:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8002468:	cb0e      	ldmia	r3, {r1, r2, r3}
 800246a:	f000 f88d 	bl	8002588 <_ZSt12__niter_baseISt15_Deque_iteratorI8CommandSRKS1_PS2_EENSt11_Niter_baseIT_E13iterator_typeES7_>
 800246e:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8002472:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8002474:	4618      	mov	r0, r3
 8002476:	f7ff f97f 	bl	8001778 <_ZNSt15_Deque_iteratorI8CommandSRS0_PS0_EC1ERKS3_>
 800247a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800247e:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8002482:	4611      	mov	r1, r2
 8002484:	4618      	mov	r0, r3
 8002486:	f000 f897 	bl	80025b8 <_ZSt12__niter_baseISt15_Deque_iteratorI8CommandSRS1_PS1_EENSt11_Niter_baseIT_E13iterator_typeES6_>
 800248a:	687d      	ldr	r5, [r7, #4]
 800248c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002490:	9305      	str	r3, [sp, #20]
 8002492:	ac01      	add	r4, sp, #4
 8002494:	f107 0318 	add.w	r3, r7, #24
 8002498:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800249a:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 800249e:	697b      	ldr	r3, [r7, #20]
 80024a0:	9300      	str	r3, [sp, #0]
 80024a2:	f107 0308 	add.w	r3, r7, #8
 80024a6:	cb0e      	ldmia	r3, {r1, r2, r3}
 80024a8:	4628      	mov	r0, r5
 80024aa:	f000 f89b 	bl	80025e4 <_ZSt13__copy_move_aILb0ESt15_Deque_iteratorI8CommandSRKS1_PS2_ES0_IS1_RS1_PS1_EET1_T0_SA_S9_>
    }
 80024ae:	6878      	ldr	r0, [r7, #4]
 80024b0:	3748      	adds	r7, #72	; 0x48
 80024b2:	46bd      	mov	sp, r7
 80024b4:	e8bd 40b0 	ldmia.w	sp!, {r4, r5, r7, lr}
 80024b8:	b004      	add	sp, #16
 80024ba:	4770      	bx	lr

080024bc <_ZSt12__miter_baseIPP8CommandSENSt11_Miter_baseIT_E13iterator_typeES4_>:
    : _Iter_base<_Iterator, __is_move_iterator<_Iterator>::__value>
    { };

  template<typename _Iterator>
    inline typename _Miter_base<_Iterator>::iterator_type
    __miter_base(_Iterator __it)
 80024bc:	b580      	push	{r7, lr}
 80024be:	b082      	sub	sp, #8
 80024c0:	af00      	add	r7, sp, #0
 80024c2:	6078      	str	r0, [r7, #4]
    { return std::_Miter_base<_Iterator>::_S_base(__it); }
 80024c4:	6878      	ldr	r0, [r7, #4]
 80024c6:	f000 f8b7 	bl	8002638 <_ZNSt10_Iter_baseIPP8CommandSLb0EE7_S_baseES2_>
 80024ca:	4603      	mov	r3, r0
 80024cc:	4618      	mov	r0, r3
 80024ce:	3708      	adds	r7, #8
 80024d0:	46bd      	mov	sp, r7
 80024d2:	bd80      	pop	{r7, pc}

080024d4 <_ZSt14__copy_move_a2ILb0EPP8CommandSS2_ET1_T0_S4_S3_>:
    __copy_move_a2(istreambuf_iterator<_CharT, char_traits<_CharT> >,
		   istreambuf_iterator<_CharT, char_traits<_CharT> >, _CharT*);

  template<bool _IsMove, typename _II, typename _OI>
    inline _OI
    __copy_move_a2(_II __first, _II __last, _OI __result)
 80024d4:	b5b0      	push	{r4, r5, r7, lr}
 80024d6:	b084      	sub	sp, #16
 80024d8:	af00      	add	r7, sp, #0
 80024da:	60f8      	str	r0, [r7, #12]
 80024dc:	60b9      	str	r1, [r7, #8]
 80024de:	607a      	str	r2, [r7, #4]
    {
      return _OI(std::__copy_move_a<_IsMove>(std::__niter_base(__first),
 80024e0:	68f8      	ldr	r0, [r7, #12]
 80024e2:	f000 f8b3 	bl	800264c <_ZSt12__niter_baseIPP8CommandSENSt11_Niter_baseIT_E13iterator_typeES4_>
 80024e6:	4604      	mov	r4, r0
 80024e8:	68b8      	ldr	r0, [r7, #8]
 80024ea:	f000 f8af 	bl	800264c <_ZSt12__niter_baseIPP8CommandSENSt11_Niter_baseIT_E13iterator_typeES4_>
 80024ee:	4605      	mov	r5, r0
 80024f0:	6878      	ldr	r0, [r7, #4]
 80024f2:	f000 f8ab 	bl	800264c <_ZSt12__niter_baseIPP8CommandSENSt11_Niter_baseIT_E13iterator_typeES4_>
 80024f6:	4603      	mov	r3, r0
					     std::__niter_base(__last),
					     std::__niter_base(__result)));
 80024f8:	461a      	mov	r2, r3
 80024fa:	4629      	mov	r1, r5
 80024fc:	4620      	mov	r0, r4
 80024fe:	f000 f8b1 	bl	8002664 <_ZSt13__copy_move_aILb0EPP8CommandSS2_ET1_T0_S4_S3_>
 8002502:	4603      	mov	r3, r0
    }
 8002504:	4618      	mov	r0, r3
 8002506:	3710      	adds	r7, #16
 8002508:	46bd      	mov	sp, r7
 800250a:	bdb0      	pop	{r4, r5, r7, pc}

0800250c <_ZSt23__copy_move_backward_a2ILb0EPP8CommandSS2_ET1_T0_S4_S3_>:
								 __result);
    }

  template<bool _IsMove, typename _BI1, typename _BI2>
    inline _BI2
    __copy_move_backward_a2(_BI1 __first, _BI1 __last, _BI2 __result)
 800250c:	b5b0      	push	{r4, r5, r7, lr}
 800250e:	b084      	sub	sp, #16
 8002510:	af00      	add	r7, sp, #0
 8002512:	60f8      	str	r0, [r7, #12]
 8002514:	60b9      	str	r1, [r7, #8]
 8002516:	607a      	str	r2, [r7, #4]
    {
      return _BI2(std::__copy_move_backward_a<_IsMove>
		  (std::__niter_base(__first), std::__niter_base(__last),
 8002518:	68f8      	ldr	r0, [r7, #12]
 800251a:	f000 f897 	bl	800264c <_ZSt12__niter_baseIPP8CommandSENSt11_Niter_baseIT_E13iterator_typeES4_>
 800251e:	4604      	mov	r4, r0
 8002520:	68b8      	ldr	r0, [r7, #8]
 8002522:	f000 f893 	bl	800264c <_ZSt12__niter_baseIPP8CommandSENSt11_Niter_baseIT_E13iterator_typeES4_>
 8002526:	4605      	mov	r5, r0
 8002528:	6878      	ldr	r0, [r7, #4]
 800252a:	f000 f88f 	bl	800264c <_ZSt12__niter_baseIPP8CommandSENSt11_Niter_baseIT_E13iterator_typeES4_>
 800252e:	4603      	mov	r3, r0
		   std::__niter_base(__result)));
 8002530:	461a      	mov	r2, r3
 8002532:	4629      	mov	r1, r5
 8002534:	4620      	mov	r0, r4
 8002536:	f000 f8a7 	bl	8002688 <_ZSt22__copy_move_backward_aILb0EPP8CommandSS2_ET1_T0_S4_S3_>
 800253a:	4603      	mov	r3, r0
    }
 800253c:	4618      	mov	r0, r3
 800253e:	3710      	adds	r7, #16
 8002540:	46bd      	mov	sp, r7
 8002542:	bdb0      	pop	{r4, r5, r7, pc}

08002544 <_ZNK9__gnu_cxx13new_allocatorI8CommandSE8max_sizeEv>:
      void
      deallocate(pointer __p, size_type)
      { ::operator delete(__p); }

      size_type
      max_size() const _GLIBCXX_USE_NOEXCEPT
 8002544:	b480      	push	{r7}
 8002546:	b083      	sub	sp, #12
 8002548:	af00      	add	r7, sp, #0
 800254a:	6078      	str	r0, [r7, #4]
      { return size_t(-1) / sizeof(_Tp); }
 800254c:	f06f 4360 	mvn.w	r3, #3758096384	; 0xe0000000
 8002550:	4618      	mov	r0, r3
 8002552:	370c      	adds	r7, #12
 8002554:	46bd      	mov	sp, r7
 8002556:	bc80      	pop	{r7}
 8002558:	4770      	bx	lr
 800255a:	bf00      	nop

0800255c <_ZNSt10_Iter_baseISt15_Deque_iteratorI8CommandSRKS1_PS2_ELb0EE7_S_baseES5_>:
  // untouched
  template<typename _Iterator, bool _HasBase>
    struct _Iter_base
    {
      typedef _Iterator iterator_type;
      static iterator_type _S_base(_Iterator __it)
 800255c:	b084      	sub	sp, #16
 800255e:	b490      	push	{r4, r7}
 8002560:	b082      	sub	sp, #8
 8002562:	af00      	add	r7, sp, #0
 8002564:	6078      	str	r0, [r7, #4]
 8002566:	f107 0014 	add.w	r0, r7, #20
 800256a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
      { return __it; }
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	461c      	mov	r4, r3
 8002572:	f107 0314 	add.w	r3, r7, #20
 8002576:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002578:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 800257c:	6878      	ldr	r0, [r7, #4]
 800257e:	3708      	adds	r7, #8
 8002580:	46bd      	mov	sp, r7
 8002582:	bc90      	pop	{r4, r7}
 8002584:	b004      	add	sp, #16
 8002586:	4770      	bx	lr

08002588 <_ZSt12__niter_baseISt15_Deque_iteratorI8CommandSRKS1_PS2_EENSt11_Niter_baseIT_E13iterator_typeES7_>:
    : _Iter_base<_Iterator, __is_normal_iterator<_Iterator>::__value>
    { };

  template<typename _Iterator>
    inline typename _Niter_base<_Iterator>::iterator_type
    __niter_base(_Iterator __it)
 8002588:	b084      	sub	sp, #16
 800258a:	b580      	push	{r7, lr}
 800258c:	b084      	sub	sp, #16
 800258e:	af02      	add	r7, sp, #8
 8002590:	6078      	str	r0, [r7, #4]
 8002592:	f107 0014 	add.w	r0, r7, #20
 8002596:	e880 000e 	stmia.w	r0, {r1, r2, r3}
    { return std::_Niter_base<_Iterator>::_S_base(__it); }
 800259a:	6878      	ldr	r0, [r7, #4]
 800259c:	6a3b      	ldr	r3, [r7, #32]
 800259e:	9300      	str	r3, [sp, #0]
 80025a0:	f107 0314 	add.w	r3, r7, #20
 80025a4:	cb0e      	ldmia	r3, {r1, r2, r3}
 80025a6:	f7ff ffd9 	bl	800255c <_ZNSt10_Iter_baseISt15_Deque_iteratorI8CommandSRKS1_PS2_ELb0EE7_S_baseES5_>
 80025aa:	6878      	ldr	r0, [r7, #4]
 80025ac:	3708      	adds	r7, #8
 80025ae:	46bd      	mov	sp, r7
 80025b0:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80025b4:	b004      	add	sp, #16
 80025b6:	4770      	bx	lr

080025b8 <_ZSt12__niter_baseISt15_Deque_iteratorI8CommandSRS1_PS1_EENSt11_Niter_baseIT_E13iterator_typeES6_>:
    : _Iter_base<_Iterator, __is_normal_iterator<_Iterator>::__value>
    { };

  template<typename _Iterator>
    inline typename _Niter_base<_Iterator>::iterator_type
    __niter_base(_Iterator __it)
 80025b8:	b580      	push	{r7, lr}
 80025ba:	b086      	sub	sp, #24
 80025bc:	af00      	add	r7, sp, #0
 80025be:	6078      	str	r0, [r7, #4]
 80025c0:	6039      	str	r1, [r7, #0]
    { return std::_Niter_base<_Iterator>::_S_base(__it); }
 80025c2:	f107 0308 	add.w	r3, r7, #8
 80025c6:	6839      	ldr	r1, [r7, #0]
 80025c8:	4618      	mov	r0, r3
 80025ca:	f7ff f8d5 	bl	8001778 <_ZNSt15_Deque_iteratorI8CommandSRS0_PS0_EC1ERKS3_>
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	f107 0208 	add.w	r2, r7, #8
 80025d4:	4611      	mov	r1, r2
 80025d6:	4618      	mov	r0, r3
 80025d8:	f000 f868 	bl	80026ac <_ZNSt10_Iter_baseISt15_Deque_iteratorI8CommandSRS1_PS1_ELb0EE7_S_baseES4_>
 80025dc:	6878      	ldr	r0, [r7, #4]
 80025de:	3718      	adds	r7, #24
 80025e0:	46bd      	mov	sp, r7
 80025e2:	bd80      	pop	{r7, pc}

080025e4 <_ZSt13__copy_move_aILb0ESt15_Deque_iteratorI8CommandSRKS1_PS2_ES0_IS1_RS1_PS1_EET1_T0_SA_S9_>:
	}
    };

  template<bool _IsMove, typename _II, typename _OI>
    inline _OI
    __copy_move_a(_II __first, _II __last, _OI __result)
 80025e4:	b084      	sub	sp, #16
 80025e6:	b5b0      	push	{r4, r5, r7, lr}
 80025e8:	b08e      	sub	sp, #56	; 0x38
 80025ea:	af06      	add	r7, sp, #24
 80025ec:	6078      	str	r0, [r7, #4]
 80025ee:	f107 0034 	add.w	r0, r7, #52	; 0x34
 80025f2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
      typedef typename iterator_traits<_OI>::value_type _ValueTypeO;
      typedef typename iterator_traits<_II>::iterator_category _Category;
      const bool __simple = (__is_trivial(_ValueTypeI)
	                     && __is_pointer<_II>::__value
	                     && __is_pointer<_OI>::__value
			     && __are_same<_ValueTypeI, _ValueTypeO>::__value);
 80025f6:	2300      	movs	r3, #0
 80025f8:	77fb      	strb	r3, [r7, #31]

      return std::__copy_move<_IsMove, __simple,
	                      _Category>::__copy_m(__first, __last, __result);
 80025fa:	f107 030c 	add.w	r3, r7, #12
 80025fe:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8002600:	4618      	mov	r0, r3
 8002602:	f7ff f8b9 	bl	8001778 <_ZNSt15_Deque_iteratorI8CommandSRS0_PS0_EC1ERKS3_>
 8002606:	687d      	ldr	r5, [r7, #4]
 8002608:	f107 030c 	add.w	r3, r7, #12
 800260c:	9305      	str	r3, [sp, #20]
 800260e:	ac01      	add	r4, sp, #4
 8002610:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8002614:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002616:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 800261a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800261c:	9300      	str	r3, [sp, #0]
 800261e:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8002622:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002624:	4628      	mov	r0, r5
 8002626:	f000 f84f 	bl	80026c8 <_ZNSt11__copy_moveILb0ELb0ESt26random_access_iterator_tagE8__copy_mISt15_Deque_iteratorI8CommandSRKS4_PS5_ES3_IS4_RS4_PS4_EEET0_T_SD_SC_>
    }
 800262a:	6878      	ldr	r0, [r7, #4]
 800262c:	3720      	adds	r7, #32
 800262e:	46bd      	mov	sp, r7
 8002630:	e8bd 40b0 	ldmia.w	sp!, {r4, r5, r7, lr}
 8002634:	b004      	add	sp, #16
 8002636:	4770      	bx	lr

08002638 <_ZNSt10_Iter_baseIPP8CommandSLb0EE7_S_baseES2_>:
  // untouched
  template<typename _Iterator, bool _HasBase>
    struct _Iter_base
    {
      typedef _Iterator iterator_type;
      static iterator_type _S_base(_Iterator __it)
 8002638:	b480      	push	{r7}
 800263a:	b083      	sub	sp, #12
 800263c:	af00      	add	r7, sp, #0
 800263e:	6078      	str	r0, [r7, #4]
      { return __it; }
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	4618      	mov	r0, r3
 8002644:	370c      	adds	r7, #12
 8002646:	46bd      	mov	sp, r7
 8002648:	bc80      	pop	{r7}
 800264a:	4770      	bx	lr

0800264c <_ZSt12__niter_baseIPP8CommandSENSt11_Niter_baseIT_E13iterator_typeES4_>:
    : _Iter_base<_Iterator, __is_normal_iterator<_Iterator>::__value>
    { };

  template<typename _Iterator>
    inline typename _Niter_base<_Iterator>::iterator_type
    __niter_base(_Iterator __it)
 800264c:	b580      	push	{r7, lr}
 800264e:	b082      	sub	sp, #8
 8002650:	af00      	add	r7, sp, #0
 8002652:	6078      	str	r0, [r7, #4]
    { return std::_Niter_base<_Iterator>::_S_base(__it); }
 8002654:	6878      	ldr	r0, [r7, #4]
 8002656:	f7ff ffef 	bl	8002638 <_ZNSt10_Iter_baseIPP8CommandSLb0EE7_S_baseES2_>
 800265a:	4603      	mov	r3, r0
 800265c:	4618      	mov	r0, r3
 800265e:	3708      	adds	r7, #8
 8002660:	46bd      	mov	sp, r7
 8002662:	bd80      	pop	{r7, pc}

08002664 <_ZSt13__copy_move_aILb0EPP8CommandSS2_ET1_T0_S4_S3_>:
	}
    };

  template<bool _IsMove, typename _II, typename _OI>
    inline _OI
    __copy_move_a(_II __first, _II __last, _OI __result)
 8002664:	b580      	push	{r7, lr}
 8002666:	b086      	sub	sp, #24
 8002668:	af00      	add	r7, sp, #0
 800266a:	60f8      	str	r0, [r7, #12]
 800266c:	60b9      	str	r1, [r7, #8]
 800266e:	607a      	str	r2, [r7, #4]
      typedef typename iterator_traits<_OI>::value_type _ValueTypeO;
      typedef typename iterator_traits<_II>::iterator_category _Category;
      const bool __simple = (__is_trivial(_ValueTypeI)
	                     && __is_pointer<_II>::__value
	                     && __is_pointer<_OI>::__value
			     && __are_same<_ValueTypeI, _ValueTypeO>::__value);
 8002670:	2301      	movs	r3, #1
 8002672:	75fb      	strb	r3, [r7, #23]

      return std::__copy_move<_IsMove, __simple,
	                      _Category>::__copy_m(__first, __last, __result);
 8002674:	687a      	ldr	r2, [r7, #4]
 8002676:	68b9      	ldr	r1, [r7, #8]
 8002678:	68f8      	ldr	r0, [r7, #12]
 800267a:	f000 f861 	bl	8002740 <_ZNSt11__copy_moveILb0ELb1ESt26random_access_iterator_tagE8__copy_mIP8CommandSEEPT_PKS5_S8_S6_>
 800267e:	4603      	mov	r3, r0
    }
 8002680:	4618      	mov	r0, r3
 8002682:	3718      	adds	r7, #24
 8002684:	46bd      	mov	sp, r7
 8002686:	bd80      	pop	{r7, pc}

08002688 <_ZSt22__copy_move_backward_aILb0EPP8CommandSS2_ET1_T0_S4_S3_>:
	}
    };

  template<bool _IsMove, typename _BI1, typename _BI2>
    inline _BI2
    __copy_move_backward_a(_BI1 __first, _BI1 __last, _BI2 __result)
 8002688:	b580      	push	{r7, lr}
 800268a:	b086      	sub	sp, #24
 800268c:	af00      	add	r7, sp, #0
 800268e:	60f8      	str	r0, [r7, #12]
 8002690:	60b9      	str	r1, [r7, #8]
 8002692:	607a      	str	r2, [r7, #4]
      typedef typename iterator_traits<_BI2>::value_type _ValueType2;
      typedef typename iterator_traits<_BI1>::iterator_category _Category;
      const bool __simple = (__is_trivial(_ValueType1)
	                     && __is_pointer<_BI1>::__value
	                     && __is_pointer<_BI2>::__value
			     && __are_same<_ValueType1, _ValueType2>::__value);
 8002694:	2301      	movs	r3, #1
 8002696:	75fb      	strb	r3, [r7, #23]

      return std::__copy_move_backward<_IsMove, __simple,
	                               _Category>::__copy_move_b(__first,
								 __last,
								 __result);
 8002698:	687a      	ldr	r2, [r7, #4]
 800269a:	68b9      	ldr	r1, [r7, #8]
 800269c:	68f8      	ldr	r0, [r7, #12]
 800269e:	f000 f86d 	bl	800277c <_ZNSt20__copy_move_backwardILb0ELb1ESt26random_access_iterator_tagE13__copy_move_bIP8CommandSEEPT_PKS5_S8_S6_>
 80026a2:	4603      	mov	r3, r0
    }
 80026a4:	4618      	mov	r0, r3
 80026a6:	3718      	adds	r7, #24
 80026a8:	46bd      	mov	sp, r7
 80026aa:	bd80      	pop	{r7, pc}

080026ac <_ZNSt10_Iter_baseISt15_Deque_iteratorI8CommandSRS1_PS1_ELb0EE7_S_baseES4_>:
  // untouched
  template<typename _Iterator, bool _HasBase>
    struct _Iter_base
    {
      typedef _Iterator iterator_type;
      static iterator_type _S_base(_Iterator __it)
 80026ac:	b580      	push	{r7, lr}
 80026ae:	b082      	sub	sp, #8
 80026b0:	af00      	add	r7, sp, #0
 80026b2:	6078      	str	r0, [r7, #4]
 80026b4:	6039      	str	r1, [r7, #0]
      { return __it; }
 80026b6:	6839      	ldr	r1, [r7, #0]
 80026b8:	6878      	ldr	r0, [r7, #4]
 80026ba:	f7ff f85d 	bl	8001778 <_ZNSt15_Deque_iteratorI8CommandSRS0_PS0_EC1ERKS3_>
 80026be:	6878      	ldr	r0, [r7, #4]
 80026c0:	3708      	adds	r7, #8
 80026c2:	46bd      	mov	sp, r7
 80026c4:	bd80      	pop	{r7, pc}
 80026c6:	bf00      	nop

080026c8 <_ZNSt11__copy_moveILb0ELb0ESt26random_access_iterator_tagE8__copy_mISt15_Deque_iteratorI8CommandSRKS4_PS5_ES3_IS4_RS4_PS4_EEET0_T_SD_SC_>:
  template<>
    struct __copy_move<false, false, random_access_iterator_tag>
    {
      template<typename _II, typename _OI>
        static _OI
        __copy_m(_II __first, _II __last, _OI __result)
 80026c8:	b084      	sub	sp, #16
 80026ca:	b590      	push	{r4, r7, lr}
 80026cc:	b085      	sub	sp, #20
 80026ce:	af00      	add	r7, sp, #0
 80026d0:	6078      	str	r0, [r7, #4]
 80026d2:	f107 0024 	add.w	r0, r7, #36	; 0x24
 80026d6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
        { 
	  typedef typename iterator_traits<_II>::difference_type _Distance;
	  for(_Distance __n = __last - __first; __n > 0; --__n)
 80026da:	f107 0224 	add.w	r2, r7, #36	; 0x24
 80026de:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80026e2:	4611      	mov	r1, r2
 80026e4:	4618      	mov	r0, r3
 80026e6:	f000 f86b 	bl	80027c0 <_ZStmiI8CommandSRKS0_PS1_ENSt15_Deque_iteratorIT_T0_T1_E15difference_typeERKS8_SB_>
 80026ea:	60f8      	str	r0, [r7, #12]
 80026ec:	68fb      	ldr	r3, [r7, #12]
 80026ee:	2b00      	cmp	r3, #0
 80026f0:	dd1a      	ble.n	8002728 <_ZNSt11__copy_moveILb0ELb0ESt26random_access_iterator_tagE8__copy_mISt15_Deque_iteratorI8CommandSRKS4_PS5_ES3_IS4_RS4_PS4_EEET0_T_SD_SC_+0x60>
	    {
	      *__result = *__first;
 80026f2:	6c78      	ldr	r0, [r7, #68]	; 0x44
 80026f4:	f7ff fa74 	bl	8001be0 <_ZNKSt15_Deque_iteratorI8CommandSRS0_PS0_EdeEv>
 80026f8:	4604      	mov	r4, r0
 80026fa:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80026fe:	4618      	mov	r0, r3
 8002700:	f000 f886 	bl	8002810 <_ZNKSt15_Deque_iteratorI8CommandSRKS0_PS1_EdeEv>
 8002704:	4602      	mov	r2, r0
 8002706:	4623      	mov	r3, r4
 8002708:	e892 0003 	ldmia.w	r2, {r0, r1}
 800270c:	e883 0003 	stmia.w	r3, {r0, r1}
	      ++__first;
 8002710:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002714:	4618      	mov	r0, r3
 8002716:	f000 f887 	bl	8002828 <_ZNSt15_Deque_iteratorI8CommandSRKS0_PS1_EppEv>
	      ++__result;
 800271a:	6c78      	ldr	r0, [r7, #68]	; 0x44
 800271c:	f000 f8a4 	bl	8002868 <_ZNSt15_Deque_iteratorI8CommandSRS0_PS0_EppEv>
      template<typename _II, typename _OI>
        static _OI
        __copy_m(_II __first, _II __last, _OI __result)
        { 
	  typedef typename iterator_traits<_II>::difference_type _Distance;
	  for(_Distance __n = __last - __first; __n > 0; --__n)
 8002720:	68fb      	ldr	r3, [r7, #12]
 8002722:	3b01      	subs	r3, #1
 8002724:	60fb      	str	r3, [r7, #12]
 8002726:	e7e1      	b.n	80026ec <_ZNSt11__copy_moveILb0ELb0ESt26random_access_iterator_tagE8__copy_mISt15_Deque_iteratorI8CommandSRKS4_PS5_ES3_IS4_RS4_PS4_EEET0_T_SD_SC_+0x24>
	    {
	      *__result = *__first;
	      ++__first;
	      ++__result;
	    }
	  return __result;
 8002728:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800272a:	6878      	ldr	r0, [r7, #4]
 800272c:	f7ff f824 	bl	8001778 <_ZNSt15_Deque_iteratorI8CommandSRS0_PS0_EC1ERKS3_>
	}
 8002730:	6878      	ldr	r0, [r7, #4]
 8002732:	3714      	adds	r7, #20
 8002734:	46bd      	mov	sp, r7
 8002736:	e8bd 4090 	ldmia.w	sp!, {r4, r7, lr}
 800273a:	b004      	add	sp, #16
 800273c:	4770      	bx	lr
 800273e:	bf00      	nop

08002740 <_ZNSt11__copy_moveILb0ELb1ESt26random_access_iterator_tagE8__copy_mIP8CommandSEEPT_PKS5_S8_S6_>:
  template<bool _IsMove>
    struct __copy_move<_IsMove, true, random_access_iterator_tag>
    {
      template<typename _Tp>
        static _Tp*
        __copy_m(const _Tp* __first, const _Tp* __last, _Tp* __result)
 8002740:	b580      	push	{r7, lr}
 8002742:	b086      	sub	sp, #24
 8002744:	af00      	add	r7, sp, #0
 8002746:	60f8      	str	r0, [r7, #12]
 8002748:	60b9      	str	r1, [r7, #8]
 800274a:	607a      	str	r2, [r7, #4]
#if __cplusplus >= 201103L
	  // trivial types can have deleted assignment
	  static_assert( is_copy_assignable<_Tp>::value,
	                 "type is not assignable" );
#endif
	  const ptrdiff_t _Num = __last - __first;
 800274c:	68ba      	ldr	r2, [r7, #8]
 800274e:	68fb      	ldr	r3, [r7, #12]
 8002750:	1ad3      	subs	r3, r2, r3
 8002752:	109b      	asrs	r3, r3, #2
 8002754:	617b      	str	r3, [r7, #20]
	  if (_Num)
 8002756:	697b      	ldr	r3, [r7, #20]
 8002758:	2b00      	cmp	r3, #0
 800275a:	d006      	beq.n	800276a <_ZNSt11__copy_moveILb0ELb1ESt26random_access_iterator_tagE8__copy_mIP8CommandSEEPT_PKS5_S8_S6_+0x2a>
	    __builtin_memmove(__result, __first, sizeof(_Tp) * _Num);
 800275c:	697b      	ldr	r3, [r7, #20]
 800275e:	009b      	lsls	r3, r3, #2
 8002760:	461a      	mov	r2, r3
 8002762:	68f9      	ldr	r1, [r7, #12]
 8002764:	6878      	ldr	r0, [r7, #4]
 8002766:	f002 ffbb 	bl	80056e0 <memmove>
	  return __result + _Num;
 800276a:	697b      	ldr	r3, [r7, #20]
 800276c:	009b      	lsls	r3, r3, #2
 800276e:	687a      	ldr	r2, [r7, #4]
 8002770:	4413      	add	r3, r2
	}
 8002772:	4618      	mov	r0, r3
 8002774:	3718      	adds	r7, #24
 8002776:	46bd      	mov	sp, r7
 8002778:	bd80      	pop	{r7, pc}
 800277a:	bf00      	nop

0800277c <_ZNSt20__copy_move_backwardILb0ELb1ESt26random_access_iterator_tagE13__copy_move_bIP8CommandSEEPT_PKS5_S8_S6_>:
  template<bool _IsMove>
    struct __copy_move_backward<_IsMove, true, random_access_iterator_tag>
    {
      template<typename _Tp>
        static _Tp*
        __copy_move_b(const _Tp* __first, const _Tp* __last, _Tp* __result)
 800277c:	b580      	push	{r7, lr}
 800277e:	b086      	sub	sp, #24
 8002780:	af00      	add	r7, sp, #0
 8002782:	60f8      	str	r0, [r7, #12]
 8002784:	60b9      	str	r1, [r7, #8]
 8002786:	607a      	str	r2, [r7, #4]
#if __cplusplus >= 201103L
	  // trivial types can have deleted assignment
	  static_assert( is_copy_assignable<_Tp>::value,
	                 "type is not assignable" );
#endif
	  const ptrdiff_t _Num = __last - __first;
 8002788:	68ba      	ldr	r2, [r7, #8]
 800278a:	68fb      	ldr	r3, [r7, #12]
 800278c:	1ad3      	subs	r3, r2, r3
 800278e:	109b      	asrs	r3, r3, #2
 8002790:	617b      	str	r3, [r7, #20]
	  if (_Num)
 8002792:	697b      	ldr	r3, [r7, #20]
 8002794:	2b00      	cmp	r3, #0
 8002796:	d00a      	beq.n	80027ae <_ZNSt20__copy_move_backwardILb0ELb1ESt26random_access_iterator_tagE13__copy_move_bIP8CommandSEEPT_PKS5_S8_S6_+0x32>
	    __builtin_memmove(__result - _Num, __first, sizeof(_Tp) * _Num);
 8002798:	697b      	ldr	r3, [r7, #20]
 800279a:	009b      	lsls	r3, r3, #2
 800279c:	425b      	negs	r3, r3
 800279e:	687a      	ldr	r2, [r7, #4]
 80027a0:	18d0      	adds	r0, r2, r3
 80027a2:	697b      	ldr	r3, [r7, #20]
 80027a4:	009b      	lsls	r3, r3, #2
 80027a6:	461a      	mov	r2, r3
 80027a8:	68f9      	ldr	r1, [r7, #12]
 80027aa:	f002 ff99 	bl	80056e0 <memmove>
	  return __result - _Num;
 80027ae:	697b      	ldr	r3, [r7, #20]
 80027b0:	009b      	lsls	r3, r3, #2
 80027b2:	425b      	negs	r3, r3
 80027b4:	687a      	ldr	r2, [r7, #4]
 80027b6:	4413      	add	r3, r2
	}
 80027b8:	4618      	mov	r0, r3
 80027ba:	3718      	adds	r7, #24
 80027bc:	46bd      	mov	sp, r7
 80027be:	bd80      	pop	{r7, pc}

080027c0 <_ZStmiI8CommandSRKS0_PS1_ENSt15_Deque_iteratorIT_T0_T1_E15difference_typeERKS8_SB_>:
  // According to the resolution of DR179 not only the various comparison
  // operators but also operator- must accept mixed iterator/const_iterator
  // parameters.
  template<typename _Tp, typename _Ref, typename _Ptr>
    inline typename _Deque_iterator<_Tp, _Ref, _Ptr>::difference_type
    operator-(const _Deque_iterator<_Tp, _Ref, _Ptr>& __x,
 80027c0:	b580      	push	{r7, lr}
 80027c2:	b082      	sub	sp, #8
 80027c4:	af00      	add	r7, sp, #0
 80027c6:	6078      	str	r0, [r7, #4]
 80027c8:	6039      	str	r1, [r7, #0]
	      const _Deque_iterator<_Tp, _Ref, _Ptr>& __y) _GLIBCXX_NOEXCEPT
    {
      return typename _Deque_iterator<_Tp, _Ref, _Ptr>::difference_type
	(_Deque_iterator<_Tp, _Ref, _Ptr>::_S_buffer_size())
 80027ca:	f000 f86d 	bl	80028a8 <_ZNSt15_Deque_iteratorI8CommandSRKS0_PS1_E14_S_buffer_sizeEv>
 80027ce:	4603      	mov	r3, r0
	* (__x._M_node - __y._M_node - 1) + (__x._M_cur - __x._M_first)
	+ (__y._M_last - __y._M_cur);
 80027d0:	461a      	mov	r2, r3
    operator-(const _Deque_iterator<_Tp, _Ref, _Ptr>& __x,
	      const _Deque_iterator<_Tp, _Ref, _Ptr>& __y) _GLIBCXX_NOEXCEPT
    {
      return typename _Deque_iterator<_Tp, _Ref, _Ptr>::difference_type
	(_Deque_iterator<_Tp, _Ref, _Ptr>::_S_buffer_size())
	* (__x._M_node - __y._M_node - 1) + (__x._M_cur - __x._M_first)
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	68db      	ldr	r3, [r3, #12]
	+ (__y._M_last - __y._M_cur);
 80027d6:	4619      	mov	r1, r3
    operator-(const _Deque_iterator<_Tp, _Ref, _Ptr>& __x,
	      const _Deque_iterator<_Tp, _Ref, _Ptr>& __y) _GLIBCXX_NOEXCEPT
    {
      return typename _Deque_iterator<_Tp, _Ref, _Ptr>::difference_type
	(_Deque_iterator<_Tp, _Ref, _Ptr>::_S_buffer_size())
	* (__x._M_node - __y._M_node - 1) + (__x._M_cur - __x._M_first)
 80027d8:	683b      	ldr	r3, [r7, #0]
 80027da:	68db      	ldr	r3, [r3, #12]
	+ (__y._M_last - __y._M_cur);
 80027dc:	1acb      	subs	r3, r1, r3
 80027de:	109b      	asrs	r3, r3, #2
 80027e0:	3b01      	subs	r3, #1
 80027e2:	fb03 f302 	mul.w	r3, r3, r2
    operator-(const _Deque_iterator<_Tp, _Ref, _Ptr>& __x,
	      const _Deque_iterator<_Tp, _Ref, _Ptr>& __y) _GLIBCXX_NOEXCEPT
    {
      return typename _Deque_iterator<_Tp, _Ref, _Ptr>::difference_type
	(_Deque_iterator<_Tp, _Ref, _Ptr>::_S_buffer_size())
	* (__x._M_node - __y._M_node - 1) + (__x._M_cur - __x._M_first)
 80027e6:	687a      	ldr	r2, [r7, #4]
 80027e8:	6812      	ldr	r2, [r2, #0]
	+ (__y._M_last - __y._M_cur);
 80027ea:	4611      	mov	r1, r2
    operator-(const _Deque_iterator<_Tp, _Ref, _Ptr>& __x,
	      const _Deque_iterator<_Tp, _Ref, _Ptr>& __y) _GLIBCXX_NOEXCEPT
    {
      return typename _Deque_iterator<_Tp, _Ref, _Ptr>::difference_type
	(_Deque_iterator<_Tp, _Ref, _Ptr>::_S_buffer_size())
	* (__x._M_node - __y._M_node - 1) + (__x._M_cur - __x._M_first)
 80027ec:	687a      	ldr	r2, [r7, #4]
 80027ee:	6852      	ldr	r2, [r2, #4]
	+ (__y._M_last - __y._M_cur);
 80027f0:	1a8a      	subs	r2, r1, r2
 80027f2:	10d2      	asrs	r2, r2, #3
 80027f4:	4413      	add	r3, r2
 80027f6:	683a      	ldr	r2, [r7, #0]
 80027f8:	6892      	ldr	r2, [r2, #8]
 80027fa:	4611      	mov	r1, r2
 80027fc:	683a      	ldr	r2, [r7, #0]
 80027fe:	6812      	ldr	r2, [r2, #0]
 8002800:	1a8a      	subs	r2, r1, r2
 8002802:	10d2      	asrs	r2, r2, #3
 8002804:	4413      	add	r3, r2
    }
 8002806:	4618      	mov	r0, r3
 8002808:	3708      	adds	r7, #8
 800280a:	46bd      	mov	sp, r7
 800280c:	bd80      	pop	{r7, pc}
 800280e:	bf00      	nop

08002810 <_ZNKSt15_Deque_iteratorI8CommandSRKS0_PS1_EdeEv>:
      iterator
      _M_const_cast() const _GLIBCXX_NOEXCEPT
      { return iterator(_M_cur, _M_node); }

      reference
      operator*() const _GLIBCXX_NOEXCEPT
 8002810:	b480      	push	{r7}
 8002812:	b083      	sub	sp, #12
 8002814:	af00      	add	r7, sp, #0
 8002816:	6078      	str	r0, [r7, #4]
      { return *_M_cur; }
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	681b      	ldr	r3, [r3, #0]
 800281c:	4618      	mov	r0, r3
 800281e:	370c      	adds	r7, #12
 8002820:	46bd      	mov	sp, r7
 8002822:	bc80      	pop	{r7}
 8002824:	4770      	bx	lr
 8002826:	bf00      	nop

08002828 <_ZNSt15_Deque_iteratorI8CommandSRKS0_PS1_EppEv>:
      pointer
      operator->() const _GLIBCXX_NOEXCEPT
      { return _M_cur; }

      _Self&
      operator++() _GLIBCXX_NOEXCEPT
 8002828:	b580      	push	{r7, lr}
 800282a:	b082      	sub	sp, #8
 800282c:	af00      	add	r7, sp, #0
 800282e:	6078      	str	r0, [r7, #4]
      {
	++_M_cur;
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	681b      	ldr	r3, [r3, #0]
 8002834:	f103 0208 	add.w	r2, r3, #8
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	601a      	str	r2, [r3, #0]
	if (_M_cur == _M_last)
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	681a      	ldr	r2, [r3, #0]
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	689b      	ldr	r3, [r3, #8]
 8002844:	429a      	cmp	r2, r3
 8002846:	d10a      	bne.n	800285e <_ZNSt15_Deque_iteratorI8CommandSRKS0_PS1_EppEv+0x36>
	  {
	    _M_set_node(_M_node + 1);
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	68db      	ldr	r3, [r3, #12]
 800284c:	3304      	adds	r3, #4
 800284e:	4619      	mov	r1, r3
 8002850:	6878      	ldr	r0, [r7, #4]
 8002852:	f000 f831 	bl	80028b8 <_ZNSt15_Deque_iteratorI8CommandSRKS0_PS1_E11_M_set_nodeEPPS0_>
	    _M_cur = _M_first;
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	685a      	ldr	r2, [r3, #4]
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	601a      	str	r2, [r3, #0]
	  }
	return *this;
 800285e:	687b      	ldr	r3, [r7, #4]
      }
 8002860:	4618      	mov	r0, r3
 8002862:	3708      	adds	r7, #8
 8002864:	46bd      	mov	sp, r7
 8002866:	bd80      	pop	{r7, pc}

08002868 <_ZNSt15_Deque_iteratorI8CommandSRS0_PS0_EppEv>:
      pointer
      operator->() const _GLIBCXX_NOEXCEPT
      { return _M_cur; }

      _Self&
      operator++() _GLIBCXX_NOEXCEPT
 8002868:	b580      	push	{r7, lr}
 800286a:	b082      	sub	sp, #8
 800286c:	af00      	add	r7, sp, #0
 800286e:	6078      	str	r0, [r7, #4]
      {
	++_M_cur;
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	681b      	ldr	r3, [r3, #0]
 8002874:	f103 0208 	add.w	r2, r3, #8
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	601a      	str	r2, [r3, #0]
	if (_M_cur == _M_last)
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	681a      	ldr	r2, [r3, #0]
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	689b      	ldr	r3, [r3, #8]
 8002884:	429a      	cmp	r2, r3
 8002886:	d10a      	bne.n	800289e <_ZNSt15_Deque_iteratorI8CommandSRS0_PS0_EppEv+0x36>
	  {
	    _M_set_node(_M_node + 1);
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	68db      	ldr	r3, [r3, #12]
 800288c:	3304      	adds	r3, #4
 800288e:	4619      	mov	r1, r3
 8002890:	6878      	ldr	r0, [r7, #4]
 8002892:	f7ff fa99 	bl	8001dc8 <_ZNSt15_Deque_iteratorI8CommandSRS0_PS0_E11_M_set_nodeEPS2_>
	    _M_cur = _M_first;
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	685a      	ldr	r2, [r3, #4]
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	601a      	str	r2, [r3, #0]
	  }
	return *this;
 800289e:	687b      	ldr	r3, [r7, #4]
      }
 80028a0:	4618      	mov	r0, r3
 80028a2:	3708      	adds	r7, #8
 80028a4:	46bd      	mov	sp, r7
 80028a6:	bd80      	pop	{r7, pc}

080028a8 <_ZNSt15_Deque_iteratorI8CommandSRKS0_PS1_E14_S_buffer_sizeEv>:
      typedef __iter<const _Tp>		const_iterator;
      typedef __ptr_to<_Tp>		_Elt_pointer;
      typedef __ptr_to<_Elt_pointer>	_Map_pointer;
#endif

      static size_t _S_buffer_size() _GLIBCXX_NOEXCEPT
 80028a8:	b580      	push	{r7, lr}
 80028aa:	af00      	add	r7, sp, #0
      { return __deque_buf_size(sizeof(_Tp)); }
 80028ac:	2008      	movs	r0, #8
 80028ae:	f7fe fc67 	bl	8001180 <_ZSt16__deque_buf_sizej>
 80028b2:	4603      	mov	r3, r0
 80028b4:	4618      	mov	r0, r3
 80028b6:	bd80      	pop	{r7, pc}

080028b8 <_ZNSt15_Deque_iteratorI8CommandSRKS0_PS1_E11_M_set_nodeEPPS0_>:
       *  Prepares to traverse new_node.  Sets everything except
       *  _M_cur, which should therefore be set by the caller
       *  immediately afterwards, based on _M_first and _M_last.
       */
      void
      _M_set_node(_Map_pointer __new_node) _GLIBCXX_NOEXCEPT
 80028b8:	b590      	push	{r4, r7, lr}
 80028ba:	b083      	sub	sp, #12
 80028bc:	af00      	add	r7, sp, #0
 80028be:	6078      	str	r0, [r7, #4]
 80028c0:	6039      	str	r1, [r7, #0]
      {
	_M_node = __new_node;
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	683a      	ldr	r2, [r7, #0]
 80028c6:	60da      	str	r2, [r3, #12]
	_M_first = *__new_node;
 80028c8:	683b      	ldr	r3, [r7, #0]
 80028ca:	681a      	ldr	r2, [r3, #0]
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	605a      	str	r2, [r3, #4]
	_M_last = _M_first + difference_type(_S_buffer_size());
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	685c      	ldr	r4, [r3, #4]
 80028d4:	f7ff ffe8 	bl	80028a8 <_ZNSt15_Deque_iteratorI8CommandSRKS0_PS1_E14_S_buffer_sizeEv>
 80028d8:	4603      	mov	r3, r0
 80028da:	00db      	lsls	r3, r3, #3
 80028dc:	18e2      	adds	r2, r4, r3
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	609a      	str	r2, [r3, #8]
      }
 80028e2:	bf00      	nop
 80028e4:	370c      	adds	r7, #12
 80028e6:	46bd      	mov	sp, r7
 80028e8:	bd90      	pop	{r4, r7, pc}
 80028ea:	bf00      	nop

080028ec <_ZL9storeBytei>:
static int (*pGetByte)() = 0;
static void (*pStoreByte)(int byte) = 0;
static void (*pDisableCS)() = 0;

static void storeByte(int byte)
{
 80028ec:	b580      	push	{r7, lr}
 80028ee:	b084      	sub	sp, #16
 80028f0:	af00      	add	r7, sp, #0
 80028f2:	6078      	str	r0, [r7, #4]
	SPI2_class & sp = SPI2_class::getInstance();
 80028f4:	f000 f832 	bl	800295c <_ZN10SPI2_class11getInstanceEv>
 80028f8:	60f8      	str	r0, [r7, #12]
	sp.storeByte(byte);
 80028fa:	68fb      	ldr	r3, [r7, #12]
 80028fc:	681b      	ldr	r3, [r3, #0]
 80028fe:	3308      	adds	r3, #8
 8002900:	681b      	ldr	r3, [r3, #0]
 8002902:	6879      	ldr	r1, [r7, #4]
 8002904:	68f8      	ldr	r0, [r7, #12]
 8002906:	4798      	blx	r3
}
 8002908:	bf00      	nop
 800290a:	3710      	adds	r7, #16
 800290c:	46bd      	mov	sp, r7
 800290e:	bd80      	pop	{r7, pc}

08002910 <_ZL7getBytev>:

static int getByte()
{
 8002910:	b580      	push	{r7, lr}
 8002912:	b082      	sub	sp, #8
 8002914:	af00      	add	r7, sp, #0
	SPI2_class & sp = SPI2_class::getInstance();
 8002916:	f000 f821 	bl	800295c <_ZN10SPI2_class11getInstanceEv>
 800291a:	6078      	str	r0, [r7, #4]
	int retVal = sp.getByte();
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	681b      	ldr	r3, [r3, #0]
 8002920:	3304      	adds	r3, #4
 8002922:	681b      	ldr	r3, [r3, #0]
 8002924:	6878      	ldr	r0, [r7, #4]
 8002926:	4798      	blx	r3
 8002928:	6038      	str	r0, [r7, #0]
	return retVal;
 800292a:	683b      	ldr	r3, [r7, #0]
}
 800292c:	4618      	mov	r0, r3
 800292e:	3708      	adds	r7, #8
 8002930:	46bd      	mov	sp, r7
 8002932:	bd80      	pop	{r7, pc}

08002934 <_ZL9disableCSv>:

static void disableCS()
{
 8002934:	b580      	push	{r7, lr}
 8002936:	b082      	sub	sp, #8
 8002938:	af00      	add	r7, sp, #0
	SPI2_class & sp = SPI2_class::getInstance();
 800293a:	f000 f80f 	bl	800295c <_ZN10SPI2_class11getInstanceEv>
 800293e:	6078      	str	r0, [r7, #4]
	if(sp.isLastByte())
 8002940:	6878      	ldr	r0, [r7, #4]
 8002942:	f000 f90b 	bl	8002b5c <_ZN10SPI2_class10isLastByteEv>
 8002946:	4603      	mov	r3, r0
 8002948:	2b00      	cmp	r3, #0
 800294a:	d002      	beq.n	8002952 <_ZL9disableCSv+0x1e>
	{
		sp.disableCS();
 800294c:	6878      	ldr	r0, [r7, #4]
 800294e:	f000 f875 	bl	8002a3c <_ZN10SPI2_class9disableCSEv>
	}
}
 8002952:	bf00      	nop
 8002954:	3708      	adds	r7, #8
 8002956:	46bd      	mov	sp, r7
 8002958:	bd80      	pop	{r7, pc}
 800295a:	bf00      	nop

0800295c <_ZN10SPI2_class11getInstanceEv>:

SPI2_class& SPI2_class::getInstance()
{
 800295c:	b580      	push	{r7, lr}
 800295e:	af00      	add	r7, sp, #0
	static SPI2_class sp;
 8002960:	4b09      	ldr	r3, [pc, #36]	; (8002988 <_ZN10SPI2_class11getInstanceEv+0x2c>)
 8002962:	681b      	ldr	r3, [r3, #0]
 8002964:	f003 0301 	and.w	r3, r3, #1
 8002968:	2b00      	cmp	r3, #0
 800296a:	d10a      	bne.n	8002982 <_ZN10SPI2_class11getInstanceEv+0x26>
 800296c:	4807      	ldr	r0, [pc, #28]	; (800298c <_ZN10SPI2_class11getInstanceEv+0x30>)
 800296e:	f000 f813 	bl	8002998 <_ZN10SPI2_classC1Ev>
 8002972:	4b05      	ldr	r3, [pc, #20]	; (8002988 <_ZN10SPI2_class11getInstanceEv+0x2c>)
 8002974:	2201      	movs	r2, #1
 8002976:	601a      	str	r2, [r3, #0]
 8002978:	4a05      	ldr	r2, [pc, #20]	; (8002990 <_ZN10SPI2_class11getInstanceEv+0x34>)
 800297a:	4906      	ldr	r1, [pc, #24]	; (8002994 <_ZN10SPI2_class11getInstanceEv+0x38>)
 800297c:	4803      	ldr	r0, [pc, #12]	; (800298c <_ZN10SPI2_class11getInstanceEv+0x30>)
 800297e:	f002 fd08 	bl	8005392 <__aeabi_atexit>
	return sp;
 8002982:	4b02      	ldr	r3, [pc, #8]	; (800298c <_ZN10SPI2_class11getInstanceEv+0x30>)
}
 8002984:	4618      	mov	r0, r3
 8002986:	bd80      	pop	{r7, pc}
 8002988:	200000ec 	.word	0x200000ec
 800298c:	200000f0 	.word	0x200000f0
 8002990:	20000000 	.word	0x20000000
 8002994:	08002b91 	.word	0x08002b91

08002998 <_ZN10SPI2_classC1Ev>:

SPI2_class::SPI2_class()
 8002998:	b580      	push	{r7, lr}
 800299a:	b082      	sub	sp, #8
 800299c:	af00      	add	r7, sp, #0
 800299e:	6078      	str	r0, [r7, #4]
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	4618      	mov	r0, r3
 80029a4:	f7fe fc7a 	bl	800129c <_ZN3SpiC1Ev>
 80029a8:	4a0b      	ldr	r2, [pc, #44]	; (80029d8 <_ZN10SPI2_classC1Ev+0x40>)
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	601a      	str	r2, [r3, #0]
{
	m_inBuffer = 0;
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	2200      	movs	r2, #0
 80029b2:	609a      	str	r2, [r3, #8]
	m_outBuffer = 0;
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	2200      	movs	r2, #0
 80029b8:	605a      	str	r2, [r3, #4]
	pStoreByte = ::storeByte;
 80029ba:	4b08      	ldr	r3, [pc, #32]	; (80029dc <_ZN10SPI2_classC1Ev+0x44>)
 80029bc:	4a08      	ldr	r2, [pc, #32]	; (80029e0 <_ZN10SPI2_classC1Ev+0x48>)
 80029be:	601a      	str	r2, [r3, #0]
	pGetByte = ::getByte;
 80029c0:	4b08      	ldr	r3, [pc, #32]	; (80029e4 <_ZN10SPI2_classC1Ev+0x4c>)
 80029c2:	4a09      	ldr	r2, [pc, #36]	; (80029e8 <_ZN10SPI2_classC1Ev+0x50>)
 80029c4:	601a      	str	r2, [r3, #0]
	pDisableCS = ::disableCS;
 80029c6:	4b09      	ldr	r3, [pc, #36]	; (80029ec <_ZN10SPI2_classC1Ev+0x54>)
 80029c8:	4a09      	ldr	r2, [pc, #36]	; (80029f0 <_ZN10SPI2_classC1Ev+0x58>)
 80029ca:	601a      	str	r2, [r3, #0]
}
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	4618      	mov	r0, r3
 80029d0:	3708      	adds	r7, #8
 80029d2:	46bd      	mov	sp, r7
 80029d4:	bd80      	pop	{r7, pc}
 80029d6:	bf00      	nop
 80029d8:	08005a20 	.word	0x08005a20
 80029dc:	200000e4 	.word	0x200000e4
 80029e0:	080028ed 	.word	0x080028ed
 80029e4:	200000e0 	.word	0x200000e0
 80029e8:	08002911 	.word	0x08002911
 80029ec:	200000e8 	.word	0x200000e8
 80029f0:	08002935 	.word	0x08002935

080029f4 <_ZN10SPI2_class10setBuffersEPSt5queueIiSt5dequeIiSaIiEEES5_>:

void SPI2_class::setBuffers(BufferQueue* inBuf, BufferQueue* outBuf)
{
 80029f4:	b480      	push	{r7}
 80029f6:	b085      	sub	sp, #20
 80029f8:	af00      	add	r7, sp, #0
 80029fa:	60f8      	str	r0, [r7, #12]
 80029fc:	60b9      	str	r1, [r7, #8]
 80029fe:	607a      	str	r2, [r7, #4]
	m_inBuffer = inBuf;
 8002a00:	68fb      	ldr	r3, [r7, #12]
 8002a02:	68ba      	ldr	r2, [r7, #8]
 8002a04:	609a      	str	r2, [r3, #8]
	m_outBuffer = outBuf;
 8002a06:	68fb      	ldr	r3, [r7, #12]
 8002a08:	687a      	ldr	r2, [r7, #4]
 8002a0a:	605a      	str	r2, [r3, #4]
}
 8002a0c:	bf00      	nop
 8002a0e:	3714      	adds	r7, #20
 8002a10:	46bd      	mov	sp, r7
 8002a12:	bc80      	pop	{r7}
 8002a14:	4770      	bx	lr
 8002a16:	bf00      	nop

08002a18 <_ZN10SPI2_class5setCSE6CSsetS>:

void SPI2_class::setCS(CSsetS settings)
{
 8002a18:	b480      	push	{r7}
 8002a1a:	b085      	sub	sp, #20
 8002a1c:	af00      	add	r7, sp, #0
 8002a1e:	60f8      	str	r0, [r7, #12]
 8002a20:	1d3b      	adds	r3, r7, #4
 8002a22:	e883 0006 	stmia.w	r3, {r1, r2}
	m_csSet.gpioType = settings.gpioType;
 8002a26:	687a      	ldr	r2, [r7, #4]
 8002a28:	68fb      	ldr	r3, [r7, #12]
 8002a2a:	60da      	str	r2, [r3, #12]
	m_csSet.csPin = settings.csPin;
 8002a2c:	893a      	ldrh	r2, [r7, #8]
 8002a2e:	68fb      	ldr	r3, [r7, #12]
 8002a30:	821a      	strh	r2, [r3, #16]
}
 8002a32:	bf00      	nop
 8002a34:	3714      	adds	r7, #20
 8002a36:	46bd      	mov	sp, r7
 8002a38:	bc80      	pop	{r7}
 8002a3a:	4770      	bx	lr

08002a3c <_ZN10SPI2_class9disableCSEv>:

void SPI2_class::disableCS()
{
 8002a3c:	b580      	push	{r7, lr}
 8002a3e:	b082      	sub	sp, #8
 8002a40:	af00      	add	r7, sp, #0
 8002a42:	6078      	str	r0, [r7, #4]
	GPIO_SetBits(m_csSet.gpioType,m_csSet.csPin);
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	68da      	ldr	r2, [r3, #12]
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	8a1b      	ldrh	r3, [r3, #16]
 8002a4c:	b29b      	uxth	r3, r3
 8002a4e:	4619      	mov	r1, r3
 8002a50:	4610      	mov	r0, r2
 8002a52:	f7fd ff91 	bl	8000978 <GPIO_SetBits>
}
 8002a56:	bf00      	nop
 8002a58:	3708      	adds	r7, #8
 8002a5a:	46bd      	mov	sp, r7
 8002a5c:	bd80      	pop	{r7, pc}
 8002a5e:	bf00      	nop

08002a60 <_ZN10SPI2_class6isBusyEv>:

bool SPI2_class::isBusy()
{
 8002a60:	b580      	push	{r7, lr}
 8002a62:	b084      	sub	sp, #16
 8002a64:	af00      	add	r7, sp, #0
 8002a66:	6078      	str	r0, [r7, #4]
	bool state = SPI_I2S_GetITStatus(SPI2,SPI_I2S_IT_TXE);
 8002a68:	2171      	movs	r1, #113	; 0x71
 8002a6a:	4807      	ldr	r0, [pc, #28]	; (8002a88 <_ZN10SPI2_class6isBusyEv+0x28>)
 8002a6c:	f7fe f9a4 	bl	8000db8 <SPI_I2S_GetITStatus>
 8002a70:	4603      	mov	r3, r0
 8002a72:	2b00      	cmp	r3, #0
 8002a74:	bf14      	ite	ne
 8002a76:	2301      	movne	r3, #1
 8002a78:	2300      	moveq	r3, #0
 8002a7a:	73fb      	strb	r3, [r7, #15]
	return state;
 8002a7c:	7bfb      	ldrb	r3, [r7, #15]
}
 8002a7e:	4618      	mov	r0, r3
 8002a80:	3710      	adds	r7, #16
 8002a82:	46bd      	mov	sp, r7
 8002a84:	bd80      	pop	{r7, pc}
 8002a86:	bf00      	nop
 8002a88:	40003800 	.word	0x40003800

08002a8c <_ZN10SPI2_class7getByteEv>:

int SPI2_class::getByte()
{
 8002a8c:	b580      	push	{r7, lr}
 8002a8e:	b084      	sub	sp, #16
 8002a90:	af00      	add	r7, sp, #0
 8002a92:	6078      	str	r0, [r7, #4]
	int byteToSend = BUFFER_EMPTY;
 8002a94:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002a98:	60fb      	str	r3, [r7, #12]
	if(m_outBuffer != 0)
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	685b      	ldr	r3, [r3, #4]
 8002a9e:	2b00      	cmp	r3, #0
 8002aa0:	d023      	beq.n	8002aea <_ZN10SPI2_class7getByteEv+0x5e>
	{
		if(m_outBuffer->size() != 0 )
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	685b      	ldr	r3, [r3, #4]
 8002aa6:	4618      	mov	r0, r3
 8002aa8:	f000 f8e6 	bl	8002c78 <_ZNKSt5queueIiSt5dequeIiSaIiEEE4sizeEv>
 8002aac:	4603      	mov	r3, r0
 8002aae:	2b00      	cmp	r3, #0
 8002ab0:	bf14      	ite	ne
 8002ab2:	2301      	movne	r3, #1
 8002ab4:	2300      	moveq	r3, #0
 8002ab6:	b2db      	uxtb	r3, r3
 8002ab8:	2b00      	cmp	r3, #0
 8002aba:	d019      	beq.n	8002af0 <_ZN10SPI2_class7getByteEv+0x64>
		{
			byteToSend = m_outBuffer->front();
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	685b      	ldr	r3, [r3, #4]
 8002ac0:	4618      	mov	r0, r3
 8002ac2:	f000 f8e7 	bl	8002c94 <_ZNSt5queueIiSt5dequeIiSaIiEEE5frontEv>
 8002ac6:	4603      	mov	r3, r0
 8002ac8:	681b      	ldr	r3, [r3, #0]
 8002aca:	60fb      	str	r3, [r7, #12]
			GPIO_ResetBits(m_csSet.gpioType,m_csSet.csPin);
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	68da      	ldr	r2, [r3, #12]
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	8a1b      	ldrh	r3, [r3, #16]
 8002ad4:	b29b      	uxth	r3, r3
 8002ad6:	4619      	mov	r1, r3
 8002ad8:	4610      	mov	r0, r2
 8002ada:	f7fd ff5b 	bl	8000994 <GPIO_ResetBits>
			m_outBuffer->pop();
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	685b      	ldr	r3, [r3, #4]
 8002ae2:	4618      	mov	r0, r3
 8002ae4:	f000 f8e4 	bl	8002cb0 <_ZNSt5queueIiSt5dequeIiSaIiEEE3popEv>
 8002ae8:	e002      	b.n	8002af0 <_ZN10SPI2_class7getByteEv+0x64>
		}
	}
	else
	{
		printf("m_outBuffer NULL\n\r");
 8002aea:	4804      	ldr	r0, [pc, #16]	; (8002afc <_ZN10SPI2_class7getByteEv+0x70>)
 8002aec:	f002 fa24 	bl	8004f38 <iprintf>
	}
	return byteToSend;
 8002af0:	68fb      	ldr	r3, [r7, #12]
}
 8002af2:	4618      	mov	r0, r3
 8002af4:	3710      	adds	r7, #16
 8002af6:	46bd      	mov	sp, r7
 8002af8:	bd80      	pop	{r7, pc}
 8002afa:	bf00      	nop
 8002afc:	08005974 	.word	0x08005974

08002b00 <_ZN10SPI2_class9storeByteEi>:

void SPI2_class::storeByte(int byte)
{
 8002b00:	b580      	push	{r7, lr}
 8002b02:	b082      	sub	sp, #8
 8002b04:	af00      	add	r7, sp, #0
 8002b06:	6078      	str	r0, [r7, #4]
 8002b08:	6039      	str	r1, [r7, #0]
	if(m_inBuffer != 0)
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	689b      	ldr	r3, [r3, #8]
 8002b0e:	2b00      	cmp	r3, #0
 8002b10:	d007      	beq.n	8002b22 <_ZN10SPI2_class9storeByteEi+0x22>
	{
		m_inBuffer->push(byte);
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	689b      	ldr	r3, [r3, #8]
 8002b16:	463a      	mov	r2, r7
 8002b18:	4611      	mov	r1, r2
 8002b1a:	4618      	mov	r0, r3
 8002b1c:	f000 f8d4 	bl	8002cc8 <_ZNSt5queueIiSt5dequeIiSaIiEEE4pushERKi>
	}
	else
	{
		printf("m_inBuffer NULL\n\r");
	}
}
 8002b20:	e002      	b.n	8002b28 <_ZN10SPI2_class9storeByteEi+0x28>
	{
		m_inBuffer->push(byte);
	}
	else
	{
		printf("m_inBuffer NULL\n\r");
 8002b22:	4803      	ldr	r0, [pc, #12]	; (8002b30 <_ZN10SPI2_class9storeByteEi+0x30>)
 8002b24:	f002 fa08 	bl	8004f38 <iprintf>
	}
}
 8002b28:	bf00      	nop
 8002b2a:	3708      	adds	r7, #8
 8002b2c:	46bd      	mov	sp, r7
 8002b2e:	bd80      	pop	{r7, pc}
 8002b30:	08005988 	.word	0x08005988

08002b34 <_ZN10SPI2_class4sendEv>:

void SPI2_class::send()
{
 8002b34:	b580      	push	{r7, lr}
 8002b36:	b082      	sub	sp, #8
 8002b38:	af00      	add	r7, sp, #0
 8002b3a:	6078      	str	r0, [r7, #4]
	SPI_I2S_ITConfig(SPI2,SPI_I2S_IT_TXE,ENABLE);
 8002b3c:	2201      	movs	r2, #1
 8002b3e:	2171      	movs	r1, #113	; 0x71
 8002b40:	4805      	ldr	r0, [pc, #20]	; (8002b58 <_ZN10SPI2_class4sendEv+0x24>)
 8002b42:	f7fe f8bf 	bl	8000cc4 <SPI_I2S_ITConfig>
	SPI_I2S_ITConfig(SPI2,SPI_I2S_IT_RXNE,ENABLE);
 8002b46:	2201      	movs	r2, #1
 8002b48:	2160      	movs	r1, #96	; 0x60
 8002b4a:	4803      	ldr	r0, [pc, #12]	; (8002b58 <_ZN10SPI2_class4sendEv+0x24>)
 8002b4c:	f7fe f8ba 	bl	8000cc4 <SPI_I2S_ITConfig>
}
 8002b50:	bf00      	nop
 8002b52:	3708      	adds	r7, #8
 8002b54:	46bd      	mov	sp, r7
 8002b56:	bd80      	pop	{r7, pc}
 8002b58:	40003800 	.word	0x40003800

08002b5c <_ZN10SPI2_class10isLastByteEv>:

bool SPI2_class::isLastByte()
{
 8002b5c:	b580      	push	{r7, lr}
 8002b5e:	b084      	sub	sp, #16
 8002b60:	af00      	add	r7, sp, #0
 8002b62:	6078      	str	r0, [r7, #4]
	bool retVal = false;
 8002b64:	2300      	movs	r3, #0
 8002b66:	73fb      	strb	r3, [r7, #15]
	if(m_outBuffer->size() < 1)
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	685b      	ldr	r3, [r3, #4]
 8002b6c:	4618      	mov	r0, r3
 8002b6e:	f000 f883 	bl	8002c78 <_ZNKSt5queueIiSt5dequeIiSaIiEEE4sizeEv>
 8002b72:	4603      	mov	r3, r0
 8002b74:	2b00      	cmp	r3, #0
 8002b76:	bf0c      	ite	eq
 8002b78:	2301      	moveq	r3, #1
 8002b7a:	2300      	movne	r3, #0
 8002b7c:	b2db      	uxtb	r3, r3
 8002b7e:	2b00      	cmp	r3, #0
 8002b80:	d001      	beq.n	8002b86 <_ZN10SPI2_class10isLastByteEv+0x2a>
	{
		retVal =  true;
 8002b82:	2301      	movs	r3, #1
 8002b84:	73fb      	strb	r3, [r7, #15]
	}
	return retVal;
 8002b86:	7bfb      	ldrb	r3, [r7, #15]
}
 8002b88:	4618      	mov	r0, r3
 8002b8a:	3710      	adds	r7, #16
 8002b8c:	46bd      	mov	sp, r7
 8002b8e:	bd80      	pop	{r7, pc}

08002b90 <_ZN10SPI2_classD1Ev>:

SPI2_class::~SPI2_class()
 8002b90:	b580      	push	{r7, lr}
 8002b92:	b082      	sub	sp, #8
 8002b94:	af00      	add	r7, sp, #0
 8002b96:	6078      	str	r0, [r7, #4]
 8002b98:	4a08      	ldr	r2, [pc, #32]	; (8002bbc <_ZN10SPI2_classD1Ev+0x2c>)
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	601a      	str	r2, [r3, #0]
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	4618      	mov	r0, r3
 8002ba2:	f7fe fb01 	bl	80011a8 <_ZN3SpiD1Ev>
{

}
 8002ba6:	2300      	movs	r3, #0
 8002ba8:	2b00      	cmp	r3, #0
 8002baa:	d002      	beq.n	8002bb2 <_ZN10SPI2_classD1Ev+0x22>
 8002bac:	6878      	ldr	r0, [r7, #4]
 8002bae:	f002 fbf5 	bl	800539c <_ZdlPv>
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	4618      	mov	r0, r3
 8002bb6:	3708      	adds	r7, #8
 8002bb8:	46bd      	mov	sp, r7
 8002bba:	bd80      	pop	{r7, pc}
 8002bbc:	08005a20 	.word	0x08005a20

08002bc0 <_ZN10SPI2_classD0Ev>:
		retVal =  true;
	}
	return retVal;
}

SPI2_class::~SPI2_class()
 8002bc0:	b580      	push	{r7, lr}
 8002bc2:	b082      	sub	sp, #8
 8002bc4:	af00      	add	r7, sp, #0
 8002bc6:	6078      	str	r0, [r7, #4]
{

}
 8002bc8:	6878      	ldr	r0, [r7, #4]
 8002bca:	f7ff ffe1 	bl	8002b90 <_ZN10SPI2_classD1Ev>
 8002bce:	6878      	ldr	r0, [r7, #4]
 8002bd0:	f002 fbe4 	bl	800539c <_ZdlPv>
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	4618      	mov	r0, r3
 8002bd8:	3708      	adds	r7, #8
 8002bda:	46bd      	mov	sp, r7
 8002bdc:	bd80      	pop	{r7, pc}
 8002bde:	bf00      	nop

08002be0 <SPI2_IRQHandler>:

extern "C" void SPI2_IRQHandler()
{
 8002be0:	b580      	push	{r7, lr}
 8002be2:	b082      	sub	sp, #8
 8002be4:	af00      	add	r7, sp, #0
	pDisableCS();
 8002be6:	4b20      	ldr	r3, [pc, #128]	; (8002c68 <SPI2_IRQHandler+0x88>)
 8002be8:	681b      	ldr	r3, [r3, #0]
 8002bea:	4798      	blx	r3

	if(SPI_I2S_GetITStatus(SPI2,SPI_I2S_IT_TXE) != RESET)
 8002bec:	2171      	movs	r1, #113	; 0x71
 8002bee:	481f      	ldr	r0, [pc, #124]	; (8002c6c <SPI2_IRQHandler+0x8c>)
 8002bf0:	f7fe f8e2 	bl	8000db8 <SPI_I2S_GetITStatus>
 8002bf4:	4603      	mov	r3, r0
 8002bf6:	2b00      	cmp	r3, #0
 8002bf8:	bf14      	ite	ne
 8002bfa:	2301      	movne	r3, #1
 8002bfc:	2300      	moveq	r3, #0
 8002bfe:	b2db      	uxtb	r3, r3
 8002c00:	2b00      	cmp	r3, #0
 8002c02:	d013      	beq.n	8002c2c <SPI2_IRQHandler+0x4c>
	{
		int c = pGetByte();
 8002c04:	4b1a      	ldr	r3, [pc, #104]	; (8002c70 <SPI2_IRQHandler+0x90>)
 8002c06:	681b      	ldr	r3, [r3, #0]
 8002c08:	4798      	blx	r3
 8002c0a:	6078      	str	r0, [r7, #4]
		if(c <= 0xFF)
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	2bff      	cmp	r3, #255	; 0xff
 8002c10:	dc07      	bgt.n	8002c22 <SPI2_IRQHandler+0x42>
		{
			SPI_I2S_SendData(SPI2,(uint8_t)c);
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	b2db      	uxtb	r3, r3
 8002c16:	b29b      	uxth	r3, r3
 8002c18:	4619      	mov	r1, r3
 8002c1a:	4814      	ldr	r0, [pc, #80]	; (8002c6c <SPI2_IRQHandler+0x8c>)
 8002c1c:	f7fe f882 	bl	8000d24 <SPI_I2S_SendData>
 8002c20:	e004      	b.n	8002c2c <SPI2_IRQHandler+0x4c>
		}
		else
		{
			 SPI_I2S_ITConfig(SPI2, SPI_I2S_IT_TXE, DISABLE);
 8002c22:	2200      	movs	r2, #0
 8002c24:	2171      	movs	r1, #113	; 0x71
 8002c26:	4811      	ldr	r0, [pc, #68]	; (8002c6c <SPI2_IRQHandler+0x8c>)
 8002c28:	f7fe f84c 	bl	8000cc4 <SPI_I2S_ITConfig>
		}
	}

	if (SPI_I2S_GetITStatus(SPI2, SPI_I2S_IT_RXNE) != RESET)
 8002c2c:	2160      	movs	r1, #96	; 0x60
 8002c2e:	480f      	ldr	r0, [pc, #60]	; (8002c6c <SPI2_IRQHandler+0x8c>)
 8002c30:	f7fe f8c2 	bl	8000db8 <SPI_I2S_GetITStatus>
 8002c34:	4603      	mov	r3, r0
 8002c36:	2b00      	cmp	r3, #0
 8002c38:	bf14      	ite	ne
 8002c3a:	2301      	movne	r3, #1
 8002c3c:	2300      	moveq	r3, #0
 8002c3e:	b2db      	uxtb	r3, r3
 8002c40:	2b00      	cmp	r3, #0
 8002c42:	d00c      	beq.n	8002c5e <SPI2_IRQHandler+0x7e>
	{
		int tmp = SPI_I2S_ReceiveData(SPI2);
 8002c44:	4809      	ldr	r0, [pc, #36]	; (8002c6c <SPI2_IRQHandler+0x8c>)
 8002c46:	f7fe f87b 	bl	8000d40 <SPI_I2S_ReceiveData>
 8002c4a:	4603      	mov	r3, r0
 8002c4c:	603b      	str	r3, [r7, #0]
		pStoreByte(tmp);
 8002c4e:	4b09      	ldr	r3, [pc, #36]	; (8002c74 <SPI2_IRQHandler+0x94>)
 8002c50:	681b      	ldr	r3, [r3, #0]
 8002c52:	6838      	ldr	r0, [r7, #0]
 8002c54:	4798      	blx	r3
		SPI_I2S_ClearFlag(SPI2,SPI_I2S_FLAG_RXNE);
 8002c56:	2101      	movs	r1, #1
 8002c58:	4804      	ldr	r0, [pc, #16]	; (8002c6c <SPI2_IRQHandler+0x8c>)
 8002c5a:	f7fe f89d 	bl	8000d98 <SPI_I2S_ClearFlag>
	}
}
 8002c5e:	bf00      	nop
 8002c60:	3708      	adds	r7, #8
 8002c62:	46bd      	mov	sp, r7
 8002c64:	bd80      	pop	{r7, pc}
 8002c66:	bf00      	nop
 8002c68:	200000e8 	.word	0x200000e8
 8002c6c:	40003800 	.word	0x40003800
 8002c70:	200000e0 	.word	0x200000e0
 8002c74:	200000e4 	.word	0x200000e4

08002c78 <_ZNKSt5queueIiSt5dequeIiSaIiEEE4sizeEv>:
      empty() const
      { return c.empty(); }

      /**  Returns the number of elements in the %queue.  */
      size_type
      size() const
 8002c78:	b580      	push	{r7, lr}
 8002c7a:	b082      	sub	sp, #8
 8002c7c:	af00      	add	r7, sp, #0
 8002c7e:	6078      	str	r0, [r7, #4]
      { return c.size(); }
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	4618      	mov	r0, r3
 8002c84:	f000 f82e 	bl	8002ce4 <_ZNKSt5dequeIiSaIiEE4sizeEv>
 8002c88:	4603      	mov	r3, r0
 8002c8a:	4618      	mov	r0, r3
 8002c8c:	3708      	adds	r7, #8
 8002c8e:	46bd      	mov	sp, r7
 8002c90:	bd80      	pop	{r7, pc}
 8002c92:	bf00      	nop

08002c94 <_ZNSt5queueIiSt5dequeIiSaIiEEE5frontEv>:
      /**
       *  Returns a read/write reference to the data at the first
       *  element of the %queue.
       */
      reference
      front()
 8002c94:	b580      	push	{r7, lr}
 8002c96:	b082      	sub	sp, #8
 8002c98:	af00      	add	r7, sp, #0
 8002c9a:	6078      	str	r0, [r7, #4]
      {
	__glibcxx_requires_nonempty();
	return c.front();
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	4618      	mov	r0, r3
 8002ca0:	f000 f832 	bl	8002d08 <_ZNSt5dequeIiSaIiEE5frontEv>
 8002ca4:	4603      	mov	r3, r0
      }
 8002ca6:	4618      	mov	r0, r3
 8002ca8:	3708      	adds	r7, #8
 8002caa:	46bd      	mov	sp, r7
 8002cac:	bd80      	pop	{r7, pc}
 8002cae:	bf00      	nop

08002cb0 <_ZNSt5queueIiSt5dequeIiSaIiEEE3popEv>:
       *  Note that no data is returned, and if the first element's
       *  data is needed, it should be retrieved before pop() is
       *  called.
       */
      void
      pop()
 8002cb0:	b580      	push	{r7, lr}
 8002cb2:	b082      	sub	sp, #8
 8002cb4:	af00      	add	r7, sp, #0
 8002cb6:	6078      	str	r0, [r7, #4]
      {
	__glibcxx_requires_nonempty();
	c.pop_front();
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	4618      	mov	r0, r3
 8002cbc:	f000 f838 	bl	8002d30 <_ZNSt5dequeIiSaIiEE9pop_frontEv>
      }
 8002cc0:	bf00      	nop
 8002cc2:	3708      	adds	r7, #8
 8002cc4:	46bd      	mov	sp, r7
 8002cc6:	bd80      	pop	{r7, pc}

08002cc8 <_ZNSt5queueIiSt5dequeIiSaIiEEE4pushERKi>:
       *  element at the end of the %queue and assigns the given data
       *  to it.  The time complexity of the operation depends on the
       *  underlying sequence.
       */
      void
      push(const value_type& __x)
 8002cc8:	b580      	push	{r7, lr}
 8002cca:	b082      	sub	sp, #8
 8002ccc:	af00      	add	r7, sp, #0
 8002cce:	6078      	str	r0, [r7, #4]
 8002cd0:	6039      	str	r1, [r7, #0]
      { c.push_back(__x); }
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	6839      	ldr	r1, [r7, #0]
 8002cd6:	4618      	mov	r0, r3
 8002cd8:	f000 f84a 	bl	8002d70 <_ZNSt5dequeIiSaIiEE9push_backERKi>
 8002cdc:	bf00      	nop
 8002cde:	3708      	adds	r7, #8
 8002ce0:	46bd      	mov	sp, r7
 8002ce2:	bd80      	pop	{r7, pc}

08002ce4 <_ZNKSt5dequeIiSaIiEE4sizeEv>:
#endif

      // [23.2.1.2] capacity
      /**  Returns the number of elements in the %deque.  */
      size_type
      size() const _GLIBCXX_NOEXCEPT
 8002ce4:	b580      	push	{r7, lr}
 8002ce6:	b082      	sub	sp, #8
 8002ce8:	af00      	add	r7, sp, #0
 8002cea:	6078      	str	r0, [r7, #4]
      { return this->_M_impl._M_finish - this->_M_impl._M_start; }
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	f103 0218 	add.w	r2, r3, #24
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	3308      	adds	r3, #8
 8002cf6:	4619      	mov	r1, r3
 8002cf8:	4610      	mov	r0, r2
 8002cfa:	f000 f85b 	bl	8002db4 <_ZStmiIiRiPiENSt15_Deque_iteratorIT_T0_T1_E15difference_typeERKS6_S9_>
 8002cfe:	4603      	mov	r3, r0
 8002d00:	4618      	mov	r0, r3
 8002d02:	3708      	adds	r7, #8
 8002d04:	46bd      	mov	sp, r7
 8002d06:	bd80      	pop	{r7, pc}

08002d08 <_ZNSt5dequeIiSaIiEE5frontEv>:
      /**
       *  Returns a read/write reference to the data at the first
       *  element of the %deque.
       */
      reference
      front() _GLIBCXX_NOEXCEPT
 8002d08:	b580      	push	{r7, lr}
 8002d0a:	b086      	sub	sp, #24
 8002d0c:	af00      	add	r7, sp, #0
 8002d0e:	6078      	str	r0, [r7, #4]
      { return *begin(); }
 8002d10:	f107 0308 	add.w	r3, r7, #8
 8002d14:	6879      	ldr	r1, [r7, #4]
 8002d16:	4618      	mov	r0, r3
 8002d18:	f000 f874 	bl	8002e04 <_ZNSt5dequeIiSaIiEE5beginEv>
 8002d1c:	f107 0308 	add.w	r3, r7, #8
 8002d20:	4618      	mov	r0, r3
 8002d22:	f000 f87f 	bl	8002e24 <_ZNKSt15_Deque_iteratorIiRiPiEdeEv>
 8002d26:	4603      	mov	r3, r0
 8002d28:	4618      	mov	r0, r3
 8002d2a:	3718      	adds	r7, #24
 8002d2c:	46bd      	mov	sp, r7
 8002d2e:	bd80      	pop	{r7, pc}

08002d30 <_ZNSt5dequeIiSaIiEE9pop_frontEv>:
       *
       *  Note that no data is returned, and if the first element's data is
       *  needed, it should be retrieved before pop_front() is called.
       */
      void
      pop_front() _GLIBCXX_NOEXCEPT
 8002d30:	b580      	push	{r7, lr}
 8002d32:	b082      	sub	sp, #8
 8002d34:	af00      	add	r7, sp, #0
 8002d36:	6078      	str	r0, [r7, #4]
      {
	if (this->_M_impl._M_start._M_cur
	    != this->_M_impl._M_start._M_last - 1)
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	689a      	ldr	r2, [r3, #8]
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	691b      	ldr	r3, [r3, #16]
 8002d40:	3b04      	subs	r3, #4
       *  needed, it should be retrieved before pop_front() is called.
       */
      void
      pop_front() _GLIBCXX_NOEXCEPT
      {
	if (this->_M_impl._M_start._M_cur
 8002d42:	429a      	cmp	r2, r3
 8002d44:	d00c      	beq.n	8002d60 <_ZNSt5dequeIiSaIiEE9pop_frontEv+0x30>
	    != this->_M_impl._M_start._M_last - 1)
	  {
	    _Alloc_traits::destroy(this->_M_impl,
 8002d46:	687a      	ldr	r2, [r7, #4]
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	689b      	ldr	r3, [r3, #8]
 8002d4c:	4619      	mov	r1, r3
 8002d4e:	4610      	mov	r0, r2
 8002d50:	f000 f874 	bl	8002e3c <_ZN9__gnu_cxx14__alloc_traitsISaIiEE7destroyERS1_Pi>
	                           this->_M_impl._M_start._M_cur);
	    ++this->_M_impl._M_start._M_cur;
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	689b      	ldr	r3, [r3, #8]
 8002d58:	1d1a      	adds	r2, r3, #4
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	609a      	str	r2, [r3, #8]
	  }
	else
	  _M_pop_front_aux();
      }
 8002d5e:	e002      	b.n	8002d66 <_ZNSt5dequeIiSaIiEE9pop_frontEv+0x36>
	    _Alloc_traits::destroy(this->_M_impl,
	                           this->_M_impl._M_start._M_cur);
	    ++this->_M_impl._M_start._M_cur;
	  }
	else
	  _M_pop_front_aux();
 8002d60:	6878      	ldr	r0, [r7, #4]
 8002d62:	f000 f879 	bl	8002e58 <_ZNSt5dequeIiSaIiEE16_M_pop_front_auxEv>
      }
 8002d66:	bf00      	nop
 8002d68:	3708      	adds	r7, #8
 8002d6a:	46bd      	mov	sp, r7
 8002d6c:	bd80      	pop	{r7, pc}
 8002d6e:	bf00      	nop

08002d70 <_ZNSt5dequeIiSaIiEE9push_backERKi>:
       *  element at the end of the %deque and assigns the given data
       *  to it.  Due to the nature of a %deque this operation can be
       *  done in constant time.
       */
      void
      push_back(const value_type& __x)
 8002d70:	b580      	push	{r7, lr}
 8002d72:	b082      	sub	sp, #8
 8002d74:	af00      	add	r7, sp, #0
 8002d76:	6078      	str	r0, [r7, #4]
 8002d78:	6039      	str	r1, [r7, #0]
      {
	if (this->_M_impl._M_finish._M_cur
	    != this->_M_impl._M_finish._M_last - 1)
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	699a      	ldr	r2, [r3, #24]
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	6a1b      	ldr	r3, [r3, #32]
 8002d82:	3b04      	subs	r3, #4
       *  done in constant time.
       */
      void
      push_back(const value_type& __x)
      {
	if (this->_M_impl._M_finish._M_cur
 8002d84:	429a      	cmp	r2, r3
 8002d86:	d00c      	beq.n	8002da2 <_ZNSt5dequeIiSaIiEE9push_backERKi+0x32>
	    != this->_M_impl._M_finish._M_last - 1)
	  {
	    _Alloc_traits::construct(this->_M_impl,
 8002d88:	6878      	ldr	r0, [r7, #4]
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	699b      	ldr	r3, [r3, #24]
 8002d8e:	683a      	ldr	r2, [r7, #0]
 8002d90:	4619      	mov	r1, r3
 8002d92:	f000 f889 	bl	8002ea8 <_ZN9__gnu_cxx14__alloc_traitsISaIiEE9constructIiEEvRS1_PiRKT_>
	                             this->_M_impl._M_finish._M_cur, __x);
	    ++this->_M_impl._M_finish._M_cur;
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	699b      	ldr	r3, [r3, #24]
 8002d9a:	1d1a      	adds	r2, r3, #4
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	619a      	str	r2, [r3, #24]
	  }
	else
	  _M_push_back_aux(__x);
      }
 8002da0:	e003      	b.n	8002daa <_ZNSt5dequeIiSaIiEE9push_backERKi+0x3a>
	    _Alloc_traits::construct(this->_M_impl,
	                             this->_M_impl._M_finish._M_cur, __x);
	    ++this->_M_impl._M_finish._M_cur;
	  }
	else
	  _M_push_back_aux(__x);
 8002da2:	6839      	ldr	r1, [r7, #0]
 8002da4:	6878      	ldr	r0, [r7, #4]
 8002da6:	f000 f88f 	bl	8002ec8 <_ZNSt5dequeIiSaIiEE16_M_push_back_auxERKi>
      }
 8002daa:	bf00      	nop
 8002dac:	3708      	adds	r7, #8
 8002dae:	46bd      	mov	sp, r7
 8002db0:	bd80      	pop	{r7, pc}
 8002db2:	bf00      	nop

08002db4 <_ZStmiIiRiPiENSt15_Deque_iteratorIT_T0_T1_E15difference_typeERKS6_S9_>:
  // According to the resolution of DR179 not only the various comparison
  // operators but also operator- must accept mixed iterator/const_iterator
  // parameters.
  template<typename _Tp, typename _Ref, typename _Ptr>
    inline typename _Deque_iterator<_Tp, _Ref, _Ptr>::difference_type
    operator-(const _Deque_iterator<_Tp, _Ref, _Ptr>& __x,
 8002db4:	b580      	push	{r7, lr}
 8002db6:	b082      	sub	sp, #8
 8002db8:	af00      	add	r7, sp, #0
 8002dba:	6078      	str	r0, [r7, #4]
 8002dbc:	6039      	str	r1, [r7, #0]
	      const _Deque_iterator<_Tp, _Ref, _Ptr>& __y) _GLIBCXX_NOEXCEPT
    {
      return typename _Deque_iterator<_Tp, _Ref, _Ptr>::difference_type
	(_Deque_iterator<_Tp, _Ref, _Ptr>::_S_buffer_size())
 8002dbe:	f000 f8af 	bl	8002f20 <_ZNSt15_Deque_iteratorIiRiPiE14_S_buffer_sizeEv>
 8002dc2:	4603      	mov	r3, r0
	* (__x._M_node - __y._M_node - 1) + (__x._M_cur - __x._M_first)
	+ (__y._M_last - __y._M_cur);
 8002dc4:	461a      	mov	r2, r3
    operator-(const _Deque_iterator<_Tp, _Ref, _Ptr>& __x,
	      const _Deque_iterator<_Tp, _Ref, _Ptr>& __y) _GLIBCXX_NOEXCEPT
    {
      return typename _Deque_iterator<_Tp, _Ref, _Ptr>::difference_type
	(_Deque_iterator<_Tp, _Ref, _Ptr>::_S_buffer_size())
	* (__x._M_node - __y._M_node - 1) + (__x._M_cur - __x._M_first)
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	68db      	ldr	r3, [r3, #12]
	+ (__y._M_last - __y._M_cur);
 8002dca:	4619      	mov	r1, r3
    operator-(const _Deque_iterator<_Tp, _Ref, _Ptr>& __x,
	      const _Deque_iterator<_Tp, _Ref, _Ptr>& __y) _GLIBCXX_NOEXCEPT
    {
      return typename _Deque_iterator<_Tp, _Ref, _Ptr>::difference_type
	(_Deque_iterator<_Tp, _Ref, _Ptr>::_S_buffer_size())
	* (__x._M_node - __y._M_node - 1) + (__x._M_cur - __x._M_first)
 8002dcc:	683b      	ldr	r3, [r7, #0]
 8002dce:	68db      	ldr	r3, [r3, #12]
	+ (__y._M_last - __y._M_cur);
 8002dd0:	1acb      	subs	r3, r1, r3
 8002dd2:	109b      	asrs	r3, r3, #2
 8002dd4:	3b01      	subs	r3, #1
 8002dd6:	fb03 f302 	mul.w	r3, r3, r2
    operator-(const _Deque_iterator<_Tp, _Ref, _Ptr>& __x,
	      const _Deque_iterator<_Tp, _Ref, _Ptr>& __y) _GLIBCXX_NOEXCEPT
    {
      return typename _Deque_iterator<_Tp, _Ref, _Ptr>::difference_type
	(_Deque_iterator<_Tp, _Ref, _Ptr>::_S_buffer_size())
	* (__x._M_node - __y._M_node - 1) + (__x._M_cur - __x._M_first)
 8002dda:	687a      	ldr	r2, [r7, #4]
 8002ddc:	6812      	ldr	r2, [r2, #0]
	+ (__y._M_last - __y._M_cur);
 8002dde:	4611      	mov	r1, r2
    operator-(const _Deque_iterator<_Tp, _Ref, _Ptr>& __x,
	      const _Deque_iterator<_Tp, _Ref, _Ptr>& __y) _GLIBCXX_NOEXCEPT
    {
      return typename _Deque_iterator<_Tp, _Ref, _Ptr>::difference_type
	(_Deque_iterator<_Tp, _Ref, _Ptr>::_S_buffer_size())
	* (__x._M_node - __y._M_node - 1) + (__x._M_cur - __x._M_first)
 8002de0:	687a      	ldr	r2, [r7, #4]
 8002de2:	6852      	ldr	r2, [r2, #4]
	+ (__y._M_last - __y._M_cur);
 8002de4:	1a8a      	subs	r2, r1, r2
 8002de6:	1092      	asrs	r2, r2, #2
 8002de8:	4413      	add	r3, r2
 8002dea:	683a      	ldr	r2, [r7, #0]
 8002dec:	6892      	ldr	r2, [r2, #8]
 8002dee:	4611      	mov	r1, r2
 8002df0:	683a      	ldr	r2, [r7, #0]
 8002df2:	6812      	ldr	r2, [r2, #0]
 8002df4:	1a8a      	subs	r2, r1, r2
 8002df6:	1092      	asrs	r2, r2, #2
 8002df8:	4413      	add	r3, r2
    }
 8002dfa:	4618      	mov	r0, r3
 8002dfc:	3708      	adds	r7, #8
 8002dfe:	46bd      	mov	sp, r7
 8002e00:	bd80      	pop	{r7, pc}
 8002e02:	bf00      	nop

08002e04 <_ZNSt5dequeIiSaIiEE5beginEv>:
      /**
       *  Returns a read/write iterator that points to the first element in the
       *  %deque.  Iteration is done in ordinary element order.
       */
      iterator
      begin() _GLIBCXX_NOEXCEPT
 8002e04:	b580      	push	{r7, lr}
 8002e06:	b082      	sub	sp, #8
 8002e08:	af00      	add	r7, sp, #0
 8002e0a:	6078      	str	r0, [r7, #4]
 8002e0c:	6039      	str	r1, [r7, #0]
      { return this->_M_impl._M_start; }
 8002e0e:	683b      	ldr	r3, [r7, #0]
 8002e10:	3308      	adds	r3, #8
 8002e12:	4619      	mov	r1, r3
 8002e14:	6878      	ldr	r0, [r7, #4]
 8002e16:	f000 f88b 	bl	8002f30 <_ZNSt15_Deque_iteratorIiRiPiEC1ERKS2_>
 8002e1a:	6878      	ldr	r0, [r7, #4]
 8002e1c:	3708      	adds	r7, #8
 8002e1e:	46bd      	mov	sp, r7
 8002e20:	bd80      	pop	{r7, pc}
 8002e22:	bf00      	nop

08002e24 <_ZNKSt15_Deque_iteratorIiRiPiEdeEv>:
      iterator
      _M_const_cast() const _GLIBCXX_NOEXCEPT
      { return iterator(_M_cur, _M_node); }

      reference
      operator*() const _GLIBCXX_NOEXCEPT
 8002e24:	b480      	push	{r7}
 8002e26:	b083      	sub	sp, #12
 8002e28:	af00      	add	r7, sp, #0
 8002e2a:	6078      	str	r0, [r7, #4]
      { return *_M_cur; }
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	681b      	ldr	r3, [r3, #0]
 8002e30:	4618      	mov	r0, r3
 8002e32:	370c      	adds	r7, #12
 8002e34:	46bd      	mov	sp, r7
 8002e36:	bc80      	pop	{r7}
 8002e38:	4770      	bx	lr
 8002e3a:	bf00      	nop

08002e3c <_ZN9__gnu_cxx14__alloc_traitsISaIiEE7destroyERS1_Pi>:

    template<typename _Tp>
      static void construct(_Alloc& __a, pointer __p, const _Tp& __arg)
      { __a.construct(__p, __arg); }

    static void destroy(_Alloc& __a, pointer __p)
 8002e3c:	b580      	push	{r7, lr}
 8002e3e:	b082      	sub	sp, #8
 8002e40:	af00      	add	r7, sp, #0
 8002e42:	6078      	str	r0, [r7, #4]
 8002e44:	6039      	str	r1, [r7, #0]
    { __a.destroy(__p); }
 8002e46:	6839      	ldr	r1, [r7, #0]
 8002e48:	6878      	ldr	r0, [r7, #4]
 8002e4a:	f000 f88d 	bl	8002f68 <_ZN9__gnu_cxx13new_allocatorIiE7destroyEPi>
 8002e4e:	bf00      	nop
 8002e50:	3708      	adds	r7, #8
 8002e52:	46bd      	mov	sp, r7
 8002e54:	bd80      	pop	{r7, pc}
 8002e56:	bf00      	nop

08002e58 <_ZNSt5dequeIiSaIiEE16_M_pop_front_auxEv>:
  // Note that if the deque has at least one element (a precondition for this
  // member function), and if
  //   _M_impl._M_start._M_cur == _M_impl._M_start._M_last,
  // then the deque must have at least two nodes.
  template <typename _Tp, typename _Alloc>
    void deque<_Tp, _Alloc>::
 8002e58:	b580      	push	{r7, lr}
 8002e5a:	b082      	sub	sp, #8
 8002e5c:	af00      	add	r7, sp, #0
 8002e5e:	6078      	str	r0, [r7, #4]
    _M_pop_front_aux()
    {
      _Alloc_traits::destroy(_M_get_Tp_allocator(),
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	4618      	mov	r0, r3
 8002e64:	f000 f88a 	bl	8002f7c <_ZNSt11_Deque_baseIiSaIiEE19_M_get_Tp_allocatorEv>
 8002e68:	4602      	mov	r2, r0
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	689b      	ldr	r3, [r3, #8]
 8002e6e:	4619      	mov	r1, r3
 8002e70:	4610      	mov	r0, r2
 8002e72:	f7ff ffe3 	bl	8002e3c <_ZN9__gnu_cxx14__alloc_traitsISaIiEE7destroyERS1_Pi>
			     this->_M_impl._M_start._M_cur);
      _M_deallocate_node(this->_M_impl._M_start._M_first);
 8002e76:	687a      	ldr	r2, [r7, #4]
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	68db      	ldr	r3, [r3, #12]
 8002e7c:	4619      	mov	r1, r3
 8002e7e:	4610      	mov	r0, r2
 8002e80:	f000 f886 	bl	8002f90 <_ZNSt11_Deque_baseIiSaIiEE18_M_deallocate_nodeEPi>
      this->_M_impl._M_start._M_set_node(this->_M_impl._M_start._M_node + 1);
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	f103 0208 	add.w	r2, r3, #8
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	695b      	ldr	r3, [r3, #20]
 8002e8e:	3304      	adds	r3, #4
 8002e90:	4619      	mov	r1, r3
 8002e92:	4610      	mov	r0, r2
 8002e94:	f000 f890 	bl	8002fb8 <_ZNSt15_Deque_iteratorIiRiPiE11_M_set_nodeEPS1_>
      this->_M_impl._M_start._M_cur = this->_M_impl._M_start._M_first;
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	68da      	ldr	r2, [r3, #12]
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	609a      	str	r2, [r3, #8]
    }
 8002ea0:	bf00      	nop
 8002ea2:	3708      	adds	r7, #8
 8002ea4:	46bd      	mov	sp, r7
 8002ea6:	bd80      	pop	{r7, pc}

08002ea8 <_ZN9__gnu_cxx14__alloc_traitsISaIiEE9constructIiEEvRS1_PiRKT_>:

    static void deallocate(_Alloc& __a, pointer __p, size_type __n)
    { __a.deallocate(__p, __n); }

    template<typename _Tp>
      static void construct(_Alloc& __a, pointer __p, const _Tp& __arg)
 8002ea8:	b580      	push	{r7, lr}
 8002eaa:	b084      	sub	sp, #16
 8002eac:	af00      	add	r7, sp, #0
 8002eae:	60f8      	str	r0, [r7, #12]
 8002eb0:	60b9      	str	r1, [r7, #8]
 8002eb2:	607a      	str	r2, [r7, #4]
      { __a.construct(__p, __arg); }
 8002eb4:	687a      	ldr	r2, [r7, #4]
 8002eb6:	68b9      	ldr	r1, [r7, #8]
 8002eb8:	68f8      	ldr	r0, [r7, #12]
 8002eba:	f000 f897 	bl	8002fec <_ZN9__gnu_cxx13new_allocatorIiE9constructEPiRKi>
 8002ebe:	bf00      	nop
 8002ec0:	3710      	adds	r7, #16
 8002ec2:	46bd      	mov	sp, r7
 8002ec4:	bd80      	pop	{r7, pc}
 8002ec6:	bf00      	nop

08002ec8 <_ZNSt5dequeIiSaIiEE16_M_push_back_auxERKi>:
      void
      deque<_Tp, _Alloc>::
      _M_push_back_aux(_Args&&... __args)
#else
      void
      deque<_Tp, _Alloc>::
 8002ec8:	b590      	push	{r4, r7, lr}
 8002eca:	b083      	sub	sp, #12
 8002ecc:	af00      	add	r7, sp, #0
 8002ece:	6078      	str	r0, [r7, #4]
 8002ed0:	6039      	str	r1, [r7, #0]
      _M_push_back_aux(const value_type& __t)
#endif
      {
	_M_reserve_map_at_back();
 8002ed2:	2101      	movs	r1, #1
 8002ed4:	6878      	ldr	r0, [r7, #4]
 8002ed6:	f000 f89f 	bl	8003018 <_ZNSt5dequeIiSaIiEE22_M_reserve_map_at_backEj>
	*(this->_M_impl._M_finish._M_node + 1) = this->_M_allocate_node();
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ede:	1d1c      	adds	r4, r3, #4
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	4618      	mov	r0, r3
 8002ee4:	f000 f8b4 	bl	8003050 <_ZNSt11_Deque_baseIiSaIiEE16_M_allocate_nodeEv>
 8002ee8:	4603      	mov	r3, r0
 8002eea:	6023      	str	r3, [r4, #0]
#if __cplusplus >= 201103L
	    _Alloc_traits::construct(this->_M_impl,
	                             this->_M_impl._M_finish._M_cur,
			             std::forward<_Args>(__args)...);
#else
	    this->_M_impl.construct(this->_M_impl._M_finish._M_cur, __t);
 8002eec:	6878      	ldr	r0, [r7, #4]
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	699b      	ldr	r3, [r3, #24]
 8002ef2:	683a      	ldr	r2, [r7, #0]
 8002ef4:	4619      	mov	r1, r3
 8002ef6:	f000 f879 	bl	8002fec <_ZN9__gnu_cxx13new_allocatorIiE9constructEPiRKi>
#endif
	    this->_M_impl._M_finish._M_set_node(this->_M_impl._M_finish._M_node
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	f103 0218 	add.w	r2, r3, #24
						+ 1);
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
	                             this->_M_impl._M_finish._M_cur,
			             std::forward<_Args>(__args)...);
#else
	    this->_M_impl.construct(this->_M_impl._M_finish._M_cur, __t);
#endif
	    this->_M_impl._M_finish._M_set_node(this->_M_impl._M_finish._M_node
 8002f04:	3304      	adds	r3, #4
 8002f06:	4619      	mov	r1, r3
 8002f08:	4610      	mov	r0, r2
 8002f0a:	f000 f855 	bl	8002fb8 <_ZNSt15_Deque_iteratorIiRiPiE11_M_set_nodeEPS1_>
						+ 1);
	    this->_M_impl._M_finish._M_cur = this->_M_impl._M_finish._M_first;
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	69da      	ldr	r2, [r3, #28]
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	619a      	str	r2, [r3, #24]
	__catch(...)
	  {
	    _M_deallocate_node(*(this->_M_impl._M_finish._M_node + 1));
	    __throw_exception_again;
	  }
      }
 8002f16:	bf00      	nop
 8002f18:	370c      	adds	r7, #12
 8002f1a:	46bd      	mov	sp, r7
 8002f1c:	bd90      	pop	{r4, r7, pc}
 8002f1e:	bf00      	nop

08002f20 <_ZNSt15_Deque_iteratorIiRiPiE14_S_buffer_sizeEv>:
      typedef __iter<const _Tp>		const_iterator;
      typedef __ptr_to<_Tp>		_Elt_pointer;
      typedef __ptr_to<_Elt_pointer>	_Map_pointer;
#endif

      static size_t _S_buffer_size() _GLIBCXX_NOEXCEPT
 8002f20:	b580      	push	{r7, lr}
 8002f22:	af00      	add	r7, sp, #0
      { return __deque_buf_size(sizeof(_Tp)); }
 8002f24:	2004      	movs	r0, #4
 8002f26:	f7fe f92b 	bl	8001180 <_ZSt16__deque_buf_sizej>
 8002f2a:	4603      	mov	r3, r0
 8002f2c:	4618      	mov	r0, r3
 8002f2e:	bd80      	pop	{r7, pc}

08002f30 <_ZNSt15_Deque_iteratorIiRiPiEC1ERKS2_>:
        _M_last(*__y + _S_buffer_size()), _M_node(__y) { }

      _Deque_iterator() _GLIBCXX_NOEXCEPT
      : _M_cur(), _M_first(), _M_last(), _M_node() { }

      _Deque_iterator(const iterator& __x) _GLIBCXX_NOEXCEPT
 8002f30:	b480      	push	{r7}
 8002f32:	b083      	sub	sp, #12
 8002f34:	af00      	add	r7, sp, #0
 8002f36:	6078      	str	r0, [r7, #4]
 8002f38:	6039      	str	r1, [r7, #0]
      : _M_cur(__x._M_cur), _M_first(__x._M_first),
        _M_last(__x._M_last), _M_node(__x._M_node) { }
 8002f3a:	683b      	ldr	r3, [r7, #0]
 8002f3c:	681a      	ldr	r2, [r3, #0]
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	601a      	str	r2, [r3, #0]
 8002f42:	683b      	ldr	r3, [r7, #0]
 8002f44:	685a      	ldr	r2, [r3, #4]
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	605a      	str	r2, [r3, #4]
 8002f4a:	683b      	ldr	r3, [r7, #0]
 8002f4c:	689a      	ldr	r2, [r3, #8]
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	609a      	str	r2, [r3, #8]
 8002f52:	683b      	ldr	r3, [r7, #0]
 8002f54:	68da      	ldr	r2, [r3, #12]
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	60da      	str	r2, [r3, #12]
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	4618      	mov	r0, r3
 8002f5e:	370c      	adds	r7, #12
 8002f60:	46bd      	mov	sp, r7
 8002f62:	bc80      	pop	{r7}
 8002f64:	4770      	bx	lr
 8002f66:	bf00      	nop

08002f68 <_ZN9__gnu_cxx13new_allocatorIiE7destroyEPi>:
      void 
      construct(pointer __p, const _Tp& __val) 
      { ::new((void *)__p) _Tp(__val); }

      void 
      destroy(pointer __p) { __p->~_Tp(); }
 8002f68:	b480      	push	{r7}
 8002f6a:	b083      	sub	sp, #12
 8002f6c:	af00      	add	r7, sp, #0
 8002f6e:	6078      	str	r0, [r7, #4]
 8002f70:	6039      	str	r1, [r7, #0]
 8002f72:	bf00      	nop
 8002f74:	370c      	adds	r7, #12
 8002f76:	46bd      	mov	sp, r7
 8002f78:	bc80      	pop	{r7}
 8002f7a:	4770      	bx	lr

08002f7c <_ZNSt11_Deque_baseIiSaIiEE19_M_get_Tp_allocatorEv>:
	  swap(this->_M_map_size, __x._M_map_size);
	}
      };

      _Tp_alloc_type&
      _M_get_Tp_allocator() _GLIBCXX_NOEXCEPT
 8002f7c:	b480      	push	{r7}
 8002f7e:	b083      	sub	sp, #12
 8002f80:	af00      	add	r7, sp, #0
 8002f82:	6078      	str	r0, [r7, #4]
      { return *static_cast<_Tp_alloc_type*>(&this->_M_impl); }
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	4618      	mov	r0, r3
 8002f88:	370c      	adds	r7, #12
 8002f8a:	46bd      	mov	sp, r7
 8002f8c:	bc80      	pop	{r7}
 8002f8e:	4770      	bx	lr

08002f90 <_ZNSt11_Deque_baseIiSaIiEE18_M_deallocate_nodeEPi>:
	typedef __gnu_cxx::__alloc_traits<_Tp_alloc_type> _Traits;
	return _Traits::allocate(_M_impl, __deque_buf_size(sizeof(_Tp)));
      }

      void
      _M_deallocate_node(_Ptr __p) _GLIBCXX_NOEXCEPT
 8002f90:	b590      	push	{r4, r7, lr}
 8002f92:	b083      	sub	sp, #12
 8002f94:	af00      	add	r7, sp, #0
 8002f96:	6078      	str	r0, [r7, #4]
 8002f98:	6039      	str	r1, [r7, #0]
      {
	typedef __gnu_cxx::__alloc_traits<_Tp_alloc_type> _Traits;
	_Traits::deallocate(_M_impl, __p, __deque_buf_size(sizeof(_Tp)));
 8002f9a:	687c      	ldr	r4, [r7, #4]
 8002f9c:	2004      	movs	r0, #4
 8002f9e:	f7fe f8ef 	bl	8001180 <_ZSt16__deque_buf_sizej>
 8002fa2:	4603      	mov	r3, r0
 8002fa4:	461a      	mov	r2, r3
 8002fa6:	6839      	ldr	r1, [r7, #0]
 8002fa8:	4620      	mov	r0, r4
 8002faa:	f000 f863 	bl	8003074 <_ZN9__gnu_cxx14__alloc_traitsISaIiEE10deallocateERS1_Pij>
      }
 8002fae:	bf00      	nop
 8002fb0:	370c      	adds	r7, #12
 8002fb2:	46bd      	mov	sp, r7
 8002fb4:	bd90      	pop	{r4, r7, pc}
 8002fb6:	bf00      	nop

08002fb8 <_ZNSt15_Deque_iteratorIiRiPiE11_M_set_nodeEPS1_>:
       *  Prepares to traverse new_node.  Sets everything except
       *  _M_cur, which should therefore be set by the caller
       *  immediately afterwards, based on _M_first and _M_last.
       */
      void
      _M_set_node(_Map_pointer __new_node) _GLIBCXX_NOEXCEPT
 8002fb8:	b590      	push	{r4, r7, lr}
 8002fba:	b083      	sub	sp, #12
 8002fbc:	af00      	add	r7, sp, #0
 8002fbe:	6078      	str	r0, [r7, #4]
 8002fc0:	6039      	str	r1, [r7, #0]
      {
	_M_node = __new_node;
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	683a      	ldr	r2, [r7, #0]
 8002fc6:	60da      	str	r2, [r3, #12]
	_M_first = *__new_node;
 8002fc8:	683b      	ldr	r3, [r7, #0]
 8002fca:	681a      	ldr	r2, [r3, #0]
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	605a      	str	r2, [r3, #4]
	_M_last = _M_first + difference_type(_S_buffer_size());
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	685c      	ldr	r4, [r3, #4]
 8002fd4:	f7ff ffa4 	bl	8002f20 <_ZNSt15_Deque_iteratorIiRiPiE14_S_buffer_sizeEv>
 8002fd8:	4603      	mov	r3, r0
 8002fda:	009b      	lsls	r3, r3, #2
 8002fdc:	18e2      	adds	r2, r4, r3
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	609a      	str	r2, [r3, #8]
      }
 8002fe2:	bf00      	nop
 8002fe4:	370c      	adds	r7, #12
 8002fe6:	46bd      	mov	sp, r7
 8002fe8:	bd90      	pop	{r4, r7, pc}
 8002fea:	bf00      	nop

08002fec <_ZN9__gnu_cxx13new_allocatorIiE9constructEPiRKi>:
        destroy(_Up* __p) { __p->~_Up(); }
#else
      // _GLIBCXX_RESOLVE_LIB_DEFECTS
      // 402. wrong new expression in [some_] allocator::construct
      void 
      construct(pointer __p, const _Tp& __val) 
 8002fec:	b580      	push	{r7, lr}
 8002fee:	b084      	sub	sp, #16
 8002ff0:	af00      	add	r7, sp, #0
 8002ff2:	60f8      	str	r0, [r7, #12]
 8002ff4:	60b9      	str	r1, [r7, #8]
 8002ff6:	607a      	str	r2, [r7, #4]
      { ::new((void *)__p) _Tp(__val); }
 8002ff8:	68bb      	ldr	r3, [r7, #8]
 8002ffa:	4619      	mov	r1, r3
 8002ffc:	2004      	movs	r0, #4
 8002ffe:	f7fe f8b3 	bl	8001168 <_ZnwjPv>
 8003002:	4603      	mov	r3, r0
 8003004:	2b00      	cmp	r3, #0
 8003006:	d002      	beq.n	800300e <_ZN9__gnu_cxx13new_allocatorIiE9constructEPiRKi+0x22>
 8003008:	687a      	ldr	r2, [r7, #4]
 800300a:	6812      	ldr	r2, [r2, #0]
 800300c:	601a      	str	r2, [r3, #0]
 800300e:	bf00      	nop
 8003010:	3710      	adds	r7, #16
 8003012:	46bd      	mov	sp, r7
 8003014:	bd80      	pop	{r7, pc}
 8003016:	bf00      	nop

08003018 <_ZNSt5dequeIiSaIiEE22_M_reserve_map_at_backEj>:
       *  Makes sure the _M_map has space for new nodes.  Does not
       *  actually add the nodes.  Can invalidate _M_map pointers.
       *  (And consequently, %deque iterators.)
       */
      void
      _M_reserve_map_at_back(size_type __nodes_to_add = 1)
 8003018:	b580      	push	{r7, lr}
 800301a:	b082      	sub	sp, #8
 800301c:	af00      	add	r7, sp, #0
 800301e:	6078      	str	r0, [r7, #4]
 8003020:	6039      	str	r1, [r7, #0]
      {
	if (__nodes_to_add + 1 > this->_M_impl._M_map_size
 8003022:	683b      	ldr	r3, [r7, #0]
 8003024:	1c5a      	adds	r2, r3, #1
	    - (this->_M_impl._M_finish._M_node - this->_M_impl._M_map))
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	685b      	ldr	r3, [r3, #4]
 800302a:	6879      	ldr	r1, [r7, #4]
 800302c:	6a49      	ldr	r1, [r1, #36]	; 0x24
       *  (And consequently, %deque iterators.)
       */
      void
      _M_reserve_map_at_back(size_type __nodes_to_add = 1)
      {
	if (__nodes_to_add + 1 > this->_M_impl._M_map_size
 800302e:	4608      	mov	r0, r1
	    - (this->_M_impl._M_finish._M_node - this->_M_impl._M_map))
 8003030:	6879      	ldr	r1, [r7, #4]
 8003032:	6809      	ldr	r1, [r1, #0]
       *  (And consequently, %deque iterators.)
       */
      void
      _M_reserve_map_at_back(size_type __nodes_to_add = 1)
      {
	if (__nodes_to_add + 1 > this->_M_impl._M_map_size
 8003034:	1a41      	subs	r1, r0, r1
 8003036:	1089      	asrs	r1, r1, #2
 8003038:	1a5b      	subs	r3, r3, r1
 800303a:	429a      	cmp	r2, r3
 800303c:	d904      	bls.n	8003048 <_ZNSt5dequeIiSaIiEE22_M_reserve_map_at_backEj+0x30>
	    - (this->_M_impl._M_finish._M_node - this->_M_impl._M_map))
	  _M_reallocate_map(__nodes_to_add, false);
 800303e:	2200      	movs	r2, #0
 8003040:	6839      	ldr	r1, [r7, #0]
 8003042:	6878      	ldr	r0, [r7, #4]
 8003044:	f000 f826 	bl	8003094 <_ZNSt5dequeIiSaIiEE17_M_reallocate_mapEjb>
      }
 8003048:	bf00      	nop
 800304a:	3708      	adds	r7, #8
 800304c:	46bd      	mov	sp, r7
 800304e:	bd80      	pop	{r7, pc}

08003050 <_ZNSt11_Deque_baseIiSaIiEE16_M_allocate_nodeEv>:
      _Map_alloc_type
      _M_get_map_allocator() const _GLIBCXX_NOEXCEPT
      { return _Map_alloc_type(_M_get_Tp_allocator()); }

      _Ptr
      _M_allocate_node()
 8003050:	b590      	push	{r4, r7, lr}
 8003052:	b083      	sub	sp, #12
 8003054:	af00      	add	r7, sp, #0
 8003056:	6078      	str	r0, [r7, #4]
      { 
	typedef __gnu_cxx::__alloc_traits<_Tp_alloc_type> _Traits;
	return _Traits::allocate(_M_impl, __deque_buf_size(sizeof(_Tp)));
 8003058:	687c      	ldr	r4, [r7, #4]
 800305a:	2004      	movs	r0, #4
 800305c:	f7fe f890 	bl	8001180 <_ZSt16__deque_buf_sizej>
 8003060:	4603      	mov	r3, r0
 8003062:	4619      	mov	r1, r3
 8003064:	4620      	mov	r0, r4
 8003066:	f000 f8b1 	bl	80031cc <_ZN9__gnu_cxx14__alloc_traitsISaIiEE8allocateERS1_j>
 800306a:	4603      	mov	r3, r0
      }
 800306c:	4618      	mov	r0, r3
 800306e:	370c      	adds	r7, #12
 8003070:	46bd      	mov	sp, r7
 8003072:	bd90      	pop	{r4, r7, pc}

08003074 <_ZN9__gnu_cxx14__alloc_traitsISaIiEE10deallocateERS1_Pij>:

    static pointer
    allocate(_Alloc& __a, size_type __n)
    { return __a.allocate(__n); }

    static void deallocate(_Alloc& __a, pointer __p, size_type __n)
 8003074:	b580      	push	{r7, lr}
 8003076:	b084      	sub	sp, #16
 8003078:	af00      	add	r7, sp, #0
 800307a:	60f8      	str	r0, [r7, #12]
 800307c:	60b9      	str	r1, [r7, #8]
 800307e:	607a      	str	r2, [r7, #4]
    { __a.deallocate(__p, __n); }
 8003080:	687a      	ldr	r2, [r7, #4]
 8003082:	68b9      	ldr	r1, [r7, #8]
 8003084:	68f8      	ldr	r0, [r7, #12]
 8003086:	f000 f8b1 	bl	80031ec <_ZN9__gnu_cxx13new_allocatorIiE10deallocateEPij>
 800308a:	bf00      	nop
 800308c:	3710      	adds	r7, #16
 800308e:	46bd      	mov	sp, r7
 8003090:	bd80      	pop	{r7, pc}
 8003092:	bf00      	nop

08003094 <_ZNSt5dequeIiSaIiEE17_M_reallocate_mapEjb>:
        }
    }

  template <typename _Tp, typename _Alloc>
    void
    deque<_Tp, _Alloc>::
 8003094:	b590      	push	{r4, r7, lr}
 8003096:	b08b      	sub	sp, #44	; 0x2c
 8003098:	af00      	add	r7, sp, #0
 800309a:	60f8      	str	r0, [r7, #12]
 800309c:	60b9      	str	r1, [r7, #8]
 800309e:	4613      	mov	r3, r2
 80030a0:	71fb      	strb	r3, [r7, #7]
    _M_reallocate_map(size_type __nodes_to_add, bool __add_at_front)
    {
      const size_type __old_num_nodes
	= this->_M_impl._M_finish._M_node - this->_M_impl._M_start._M_node + 1;
 80030a2:	68fb      	ldr	r3, [r7, #12]
 80030a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030a6:	461a      	mov	r2, r3
 80030a8:	68fb      	ldr	r3, [r7, #12]
 80030aa:	695b      	ldr	r3, [r3, #20]
 80030ac:	1ad3      	subs	r3, r2, r3
 80030ae:	109b      	asrs	r3, r3, #2
 80030b0:	3301      	adds	r3, #1
 80030b2:	623b      	str	r3, [r7, #32]
      const size_type __new_num_nodes = __old_num_nodes + __nodes_to_add;
 80030b4:	68bb      	ldr	r3, [r7, #8]
 80030b6:	6a3a      	ldr	r2, [r7, #32]
 80030b8:	4413      	add	r3, r2
 80030ba:	61fb      	str	r3, [r7, #28]

      _Map_pointer __new_nstart;
      if (this->_M_impl._M_map_size > 2 * __new_num_nodes)
 80030bc:	68fb      	ldr	r3, [r7, #12]
 80030be:	685a      	ldr	r2, [r3, #4]
 80030c0:	69fb      	ldr	r3, [r7, #28]
 80030c2:	005b      	lsls	r3, r3, #1
 80030c4:	429a      	cmp	r2, r3
 80030c6:	d92d      	bls.n	8003124 <_ZNSt5dequeIiSaIiEE17_M_reallocate_mapEjb+0x90>
	{
	  __new_nstart = this->_M_impl._M_map + (this->_M_impl._M_map_size
 80030c8:	68fb      	ldr	r3, [r7, #12]
 80030ca:	681a      	ldr	r2, [r3, #0]
					 - __new_num_nodes) / 2
 80030cc:	68fb      	ldr	r3, [r7, #12]
 80030ce:	6859      	ldr	r1, [r3, #4]
	                 + (__add_at_front ? __nodes_to_add : 0);
 80030d0:	69fb      	ldr	r3, [r7, #28]
 80030d2:	1acb      	subs	r3, r1, r3
 80030d4:	085b      	lsrs	r3, r3, #1
 80030d6:	0099      	lsls	r1, r3, #2
 80030d8:	79fb      	ldrb	r3, [r7, #7]
 80030da:	2b00      	cmp	r3, #0
 80030dc:	d002      	beq.n	80030e4 <_ZNSt5dequeIiSaIiEE17_M_reallocate_mapEjb+0x50>
 80030de:	68bb      	ldr	r3, [r7, #8]
 80030e0:	009b      	lsls	r3, r3, #2
 80030e2:	e000      	b.n	80030e6 <_ZNSt5dequeIiSaIiEE17_M_reallocate_mapEjb+0x52>
 80030e4:	2300      	movs	r3, #0
 80030e6:	440b      	add	r3, r1
      const size_type __new_num_nodes = __old_num_nodes + __nodes_to_add;

      _Map_pointer __new_nstart;
      if (this->_M_impl._M_map_size > 2 * __new_num_nodes)
	{
	  __new_nstart = this->_M_impl._M_map + (this->_M_impl._M_map_size
 80030e8:	4413      	add	r3, r2
 80030ea:	627b      	str	r3, [r7, #36]	; 0x24
					 - __new_num_nodes) / 2
	                 + (__add_at_front ? __nodes_to_add : 0);
	  if (__new_nstart < this->_M_impl._M_start._M_node)
 80030ec:	68fb      	ldr	r3, [r7, #12]
 80030ee:	695a      	ldr	r2, [r3, #20]
 80030f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030f2:	429a      	cmp	r2, r3
 80030f4:	d909      	bls.n	800310a <_ZNSt5dequeIiSaIiEE17_M_reallocate_mapEjb+0x76>
	    std::copy(this->_M_impl._M_start._M_node,
 80030f6:	68fb      	ldr	r3, [r7, #12]
 80030f8:	6958      	ldr	r0, [r3, #20]
		      this->_M_impl._M_finish._M_node + 1,
 80030fa:	68fb      	ldr	r3, [r7, #12]
 80030fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
	{
	  __new_nstart = this->_M_impl._M_map + (this->_M_impl._M_map_size
					 - __new_num_nodes) / 2
	                 + (__add_at_front ? __nodes_to_add : 0);
	  if (__new_nstart < this->_M_impl._M_start._M_node)
	    std::copy(this->_M_impl._M_start._M_node,
 80030fe:	3304      	adds	r3, #4
 8003100:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003102:	4619      	mov	r1, r3
 8003104:	f000 f880 	bl	8003208 <_ZSt4copyIPPiS1_ET0_T_S3_S2_>
 8003108:	e048      	b.n	800319c <_ZNSt5dequeIiSaIiEE17_M_reallocate_mapEjb+0x108>
		      this->_M_impl._M_finish._M_node + 1,
		      __new_nstart);
	  else
	    std::copy_backward(this->_M_impl._M_start._M_node,
 800310a:	68fb      	ldr	r3, [r7, #12]
 800310c:	6958      	ldr	r0, [r3, #20]
			       this->_M_impl._M_finish._M_node + 1,
 800310e:	68fb      	ldr	r3, [r7, #12]
 8003110:	6a5b      	ldr	r3, [r3, #36]	; 0x24
	  if (__new_nstart < this->_M_impl._M_start._M_node)
	    std::copy(this->_M_impl._M_start._M_node,
		      this->_M_impl._M_finish._M_node + 1,
		      __new_nstart);
	  else
	    std::copy_backward(this->_M_impl._M_start._M_node,
 8003112:	1d19      	adds	r1, r3, #4
 8003114:	6a3b      	ldr	r3, [r7, #32]
 8003116:	009b      	lsls	r3, r3, #2
 8003118:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800311a:	4413      	add	r3, r2
 800311c:	461a      	mov	r2, r3
 800311e:	f000 f88b 	bl	8003238 <_ZSt13copy_backwardIPPiS1_ET0_T_S3_S2_>
 8003122:	e03b      	b.n	800319c <_ZNSt5dequeIiSaIiEE17_M_reallocate_mapEjb+0x108>
			       __new_nstart + __old_num_nodes);
	}
      else
	{
	  size_type __new_map_size = this->_M_impl._M_map_size
	                             + std::max(this->_M_impl._M_map_size,
 8003124:	68fb      	ldr	r3, [r7, #12]
 8003126:	685c      	ldr	r4, [r3, #4]
 8003128:	68fb      	ldr	r3, [r7, #12]
 800312a:	3304      	adds	r3, #4
 800312c:	f107 0208 	add.w	r2, r7, #8
 8003130:	4611      	mov	r1, r2
 8003132:	4618      	mov	r0, r3
 8003134:	f7fe fdfe 	bl	8001d34 <_ZSt3maxIjERKT_S2_S2_>
 8003138:	4603      	mov	r3, r0
						__nodes_to_add) + 2;
 800313a:	681b      	ldr	r3, [r3, #0]
 800313c:	4423      	add	r3, r4
 800313e:	3302      	adds	r3, #2
 8003140:	61bb      	str	r3, [r7, #24]

	  _Map_pointer __new_map = this->_M_allocate_map(__new_map_size);
 8003142:	68fb      	ldr	r3, [r7, #12]
 8003144:	69b9      	ldr	r1, [r7, #24]
 8003146:	4618      	mov	r0, r3
 8003148:	f000 f88e 	bl	8003268 <_ZNSt11_Deque_baseIiSaIiEE15_M_allocate_mapEj>
 800314c:	6178      	str	r0, [r7, #20]
	  __new_nstart = __new_map + (__new_map_size - __new_num_nodes) / 2
	                 + (__add_at_front ? __nodes_to_add : 0);
 800314e:	69ba      	ldr	r2, [r7, #24]
 8003150:	69fb      	ldr	r3, [r7, #28]
 8003152:	1ad3      	subs	r3, r2, r3
 8003154:	085b      	lsrs	r3, r3, #1
 8003156:	009a      	lsls	r2, r3, #2
 8003158:	79fb      	ldrb	r3, [r7, #7]
 800315a:	2b00      	cmp	r3, #0
 800315c:	d002      	beq.n	8003164 <_ZNSt5dequeIiSaIiEE17_M_reallocate_mapEjb+0xd0>
 800315e:	68bb      	ldr	r3, [r7, #8]
 8003160:	009b      	lsls	r3, r3, #2
 8003162:	e000      	b.n	8003166 <_ZNSt5dequeIiSaIiEE17_M_reallocate_mapEjb+0xd2>
 8003164:	2300      	movs	r3, #0
 8003166:	4413      	add	r3, r2
	  size_type __new_map_size = this->_M_impl._M_map_size
	                             + std::max(this->_M_impl._M_map_size,
						__nodes_to_add) + 2;

	  _Map_pointer __new_map = this->_M_allocate_map(__new_map_size);
	  __new_nstart = __new_map + (__new_map_size - __new_num_nodes) / 2
 8003168:	697a      	ldr	r2, [r7, #20]
 800316a:	4413      	add	r3, r2
 800316c:	627b      	str	r3, [r7, #36]	; 0x24
	                 + (__add_at_front ? __nodes_to_add : 0);
	  std::copy(this->_M_impl._M_start._M_node,
 800316e:	68fb      	ldr	r3, [r7, #12]
 8003170:	6958      	ldr	r0, [r3, #20]
		    this->_M_impl._M_finish._M_node + 1,
 8003172:	68fb      	ldr	r3, [r7, #12]
 8003174:	6a5b      	ldr	r3, [r3, #36]	; 0x24
						__nodes_to_add) + 2;

	  _Map_pointer __new_map = this->_M_allocate_map(__new_map_size);
	  __new_nstart = __new_map + (__new_map_size - __new_num_nodes) / 2
	                 + (__add_at_front ? __nodes_to_add : 0);
	  std::copy(this->_M_impl._M_start._M_node,
 8003176:	3304      	adds	r3, #4
 8003178:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800317a:	4619      	mov	r1, r3
 800317c:	f000 f844 	bl	8003208 <_ZSt4copyIPPiS1_ET0_T_S3_S2_>
		    this->_M_impl._M_finish._M_node + 1,
		    __new_nstart);
	  _M_deallocate_map(this->_M_impl._M_map, this->_M_impl._M_map_size);
 8003180:	68f8      	ldr	r0, [r7, #12]
 8003182:	68fb      	ldr	r3, [r7, #12]
 8003184:	6819      	ldr	r1, [r3, #0]
 8003186:	68fb      	ldr	r3, [r7, #12]
 8003188:	685b      	ldr	r3, [r3, #4]
 800318a:	461a      	mov	r2, r3
 800318c:	f000 f888 	bl	80032a0 <_ZNSt11_Deque_baseIiSaIiEE17_M_deallocate_mapEPPij>

	  this->_M_impl._M_map = __new_map;
 8003190:	68fb      	ldr	r3, [r7, #12]
 8003192:	697a      	ldr	r2, [r7, #20]
 8003194:	601a      	str	r2, [r3, #0]
	  this->_M_impl._M_map_size = __new_map_size;
 8003196:	68fb      	ldr	r3, [r7, #12]
 8003198:	69ba      	ldr	r2, [r7, #24]
 800319a:	605a      	str	r2, [r3, #4]
	}

      this->_M_impl._M_start._M_set_node(__new_nstart);
 800319c:	68fb      	ldr	r3, [r7, #12]
 800319e:	3308      	adds	r3, #8
 80031a0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80031a2:	4618      	mov	r0, r3
 80031a4:	f7ff ff08 	bl	8002fb8 <_ZNSt15_Deque_iteratorIiRiPiE11_M_set_nodeEPS1_>
      this->_M_impl._M_finish._M_set_node(__new_nstart + __old_num_nodes - 1);
 80031a8:	68fb      	ldr	r3, [r7, #12]
 80031aa:	f103 0018 	add.w	r0, r3, #24
 80031ae:	6a3b      	ldr	r3, [r7, #32]
 80031b0:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80031b4:	3b01      	subs	r3, #1
 80031b6:	009b      	lsls	r3, r3, #2
 80031b8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80031ba:	4413      	add	r3, r2
 80031bc:	4619      	mov	r1, r3
 80031be:	f7ff fefb 	bl	8002fb8 <_ZNSt15_Deque_iteratorIiRiPiE11_M_set_nodeEPS1_>
    }
 80031c2:	bf00      	nop
 80031c4:	372c      	adds	r7, #44	; 0x2c
 80031c6:	46bd      	mov	sp, r7
 80031c8:	bd90      	pop	{r4, r7, pc}
 80031ca:	bf00      	nop

080031cc <_ZN9__gnu_cxx14__alloc_traitsISaIiEE8allocateERS1_j>:
    typedef typename _Alloc::const_reference        const_reference;
    typedef typename _Alloc::size_type              size_type;
    typedef typename _Alloc::difference_type        difference_type;

    static pointer
    allocate(_Alloc& __a, size_type __n)
 80031cc:	b580      	push	{r7, lr}
 80031ce:	b082      	sub	sp, #8
 80031d0:	af00      	add	r7, sp, #0
 80031d2:	6078      	str	r0, [r7, #4]
 80031d4:	6039      	str	r1, [r7, #0]
    { return __a.allocate(__n); }
 80031d6:	2200      	movs	r2, #0
 80031d8:	6839      	ldr	r1, [r7, #0]
 80031da:	6878      	ldr	r0, [r7, #4]
 80031dc:	f000 f87c 	bl	80032d8 <_ZN9__gnu_cxx13new_allocatorIiE8allocateEjPKv>
 80031e0:	4603      	mov	r3, r0
 80031e2:	4618      	mov	r0, r3
 80031e4:	3708      	adds	r7, #8
 80031e6:	46bd      	mov	sp, r7
 80031e8:	bd80      	pop	{r7, pc}
 80031ea:	bf00      	nop

080031ec <_ZN9__gnu_cxx13new_allocatorIiE10deallocateEPij>:
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
      }

      // __p is not permitted to be a null pointer.
      void
      deallocate(pointer __p, size_type)
 80031ec:	b580      	push	{r7, lr}
 80031ee:	b084      	sub	sp, #16
 80031f0:	af00      	add	r7, sp, #0
 80031f2:	60f8      	str	r0, [r7, #12]
 80031f4:	60b9      	str	r1, [r7, #8]
 80031f6:	607a      	str	r2, [r7, #4]
      { ::operator delete(__p); }
 80031f8:	68b8      	ldr	r0, [r7, #8]
 80031fa:	f002 f8cf 	bl	800539c <_ZdlPv>
 80031fe:	bf00      	nop
 8003200:	3710      	adds	r7, #16
 8003202:	46bd      	mov	sp, r7
 8003204:	bd80      	pop	{r7, pc}
 8003206:	bf00      	nop

08003208 <_ZSt4copyIPPiS1_ET0_T_S3_S2_>:
   *  Note that the end of the output range is permitted to be contained
   *  within [first,last).
  */
  template<typename _II, typename _OI>
    inline _OI
    copy(_II __first, _II __last, _OI __result)
 8003208:	b590      	push	{r4, r7, lr}
 800320a:	b085      	sub	sp, #20
 800320c:	af00      	add	r7, sp, #0
 800320e:	60f8      	str	r0, [r7, #12]
 8003210:	60b9      	str	r1, [r7, #8]
 8003212:	607a      	str	r2, [r7, #4]
      __glibcxx_function_requires(_OutputIteratorConcept<_OI,
	    typename iterator_traits<_II>::value_type>)
      __glibcxx_requires_valid_range(__first, __last);

      return (std::__copy_move_a2<__is_move_iterator<_II>::__value>
	      (std::__miter_base(__first), std::__miter_base(__last),
 8003214:	68f8      	ldr	r0, [r7, #12]
 8003216:	f000 f87d 	bl	8003314 <_ZSt12__miter_baseIPPiENSt11_Miter_baseIT_E13iterator_typeES3_>
 800321a:	4604      	mov	r4, r0
 800321c:	68b8      	ldr	r0, [r7, #8]
 800321e:	f000 f879 	bl	8003314 <_ZSt12__miter_baseIPPiENSt11_Miter_baseIT_E13iterator_typeES3_>
 8003222:	4603      	mov	r3, r0
	       __result));
 8003224:	687a      	ldr	r2, [r7, #4]
 8003226:	4619      	mov	r1, r3
 8003228:	4620      	mov	r0, r4
 800322a:	f000 f87f 	bl	800332c <_ZSt14__copy_move_a2ILb0EPPiS1_ET1_T0_S3_S2_>
 800322e:	4603      	mov	r3, r0
    }
 8003230:	4618      	mov	r0, r3
 8003232:	3714      	adds	r7, #20
 8003234:	46bd      	mov	sp, r7
 8003236:	bd90      	pop	{r4, r7, pc}

08003238 <_ZSt13copy_backwardIPPiS1_ET0_T_S3_S2_>:
   *  Result may not be in the range (first,last].  Use copy instead.  Note
   *  that the start of the output range may overlap [first,last).
  */
  template<typename _BI1, typename _BI2>
    inline _BI2
    copy_backward(_BI1 __first, _BI1 __last, _BI2 __result)
 8003238:	b590      	push	{r4, r7, lr}
 800323a:	b085      	sub	sp, #20
 800323c:	af00      	add	r7, sp, #0
 800323e:	60f8      	str	r0, [r7, #12]
 8003240:	60b9      	str	r1, [r7, #8]
 8003242:	607a      	str	r2, [r7, #4]
	    typename iterator_traits<_BI1>::value_type,
	    typename iterator_traits<_BI2>::value_type>)
      __glibcxx_requires_valid_range(__first, __last);

      return (std::__copy_move_backward_a2<__is_move_iterator<_BI1>::__value>
	      (std::__miter_base(__first), std::__miter_base(__last),
 8003244:	68f8      	ldr	r0, [r7, #12]
 8003246:	f000 f865 	bl	8003314 <_ZSt12__miter_baseIPPiENSt11_Miter_baseIT_E13iterator_typeES3_>
 800324a:	4604      	mov	r4, r0
 800324c:	68b8      	ldr	r0, [r7, #8]
 800324e:	f000 f861 	bl	8003314 <_ZSt12__miter_baseIPPiENSt11_Miter_baseIT_E13iterator_typeES3_>
 8003252:	4603      	mov	r3, r0
	       __result));
 8003254:	687a      	ldr	r2, [r7, #4]
 8003256:	4619      	mov	r1, r3
 8003258:	4620      	mov	r0, r4
 800325a:	f000 f883 	bl	8003364 <_ZSt23__copy_move_backward_a2ILb0EPPiS1_ET1_T0_S3_S2_>
 800325e:	4603      	mov	r3, r0
    }
 8003260:	4618      	mov	r0, r3
 8003262:	3714      	adds	r7, #20
 8003264:	46bd      	mov	sp, r7
 8003266:	bd90      	pop	{r4, r7, pc}

08003268 <_ZNSt11_Deque_baseIiSaIiEE15_M_allocate_mapEj>:
	typedef __gnu_cxx::__alloc_traits<_Tp_alloc_type> _Traits;
	_Traits::deallocate(_M_impl, __p, __deque_buf_size(sizeof(_Tp)));
      }

      _Map_pointer
      _M_allocate_map(size_t __n)
 8003268:	b590      	push	{r4, r7, lr}
 800326a:	b085      	sub	sp, #20
 800326c:	af00      	add	r7, sp, #0
 800326e:	6078      	str	r0, [r7, #4]
 8003270:	6039      	str	r1, [r7, #0]
      {
	_Map_alloc_type __map_alloc = _M_get_map_allocator();
 8003272:	f107 030c 	add.w	r3, r7, #12
 8003276:	6879      	ldr	r1, [r7, #4]
 8003278:	4618      	mov	r0, r3
 800327a:	f000 f88f 	bl	800339c <_ZNKSt11_Deque_baseIiSaIiEE20_M_get_map_allocatorEv>
	return _Map_alloc_traits::allocate(__map_alloc, __n);
 800327e:	f107 030c 	add.w	r3, r7, #12
 8003282:	6839      	ldr	r1, [r7, #0]
 8003284:	4618      	mov	r0, r3
 8003286:	f000 f8a7 	bl	80033d8 <_ZN9__gnu_cxx14__alloc_traitsISaIPiEE8allocateERS2_j>
 800328a:	4604      	mov	r4, r0
      }

      _Map_pointer
      _M_allocate_map(size_t __n)
      {
	_Map_alloc_type __map_alloc = _M_get_map_allocator();
 800328c:	f107 030c 	add.w	r3, r7, #12
 8003290:	4618      	mov	r0, r3
 8003292:	f000 f895 	bl	80033c0 <_ZNSaIPiED1Ev>
	return _Map_alloc_traits::allocate(__map_alloc, __n);
 8003296:	4623      	mov	r3, r4
      }
 8003298:	4618      	mov	r0, r3
 800329a:	3714      	adds	r7, #20
 800329c:	46bd      	mov	sp, r7
 800329e:	bd90      	pop	{r4, r7, pc}

080032a0 <_ZNSt11_Deque_baseIiSaIiEE17_M_deallocate_mapEPPij>:

      void
      _M_deallocate_map(_Map_pointer __p, size_t __n) _GLIBCXX_NOEXCEPT
 80032a0:	b580      	push	{r7, lr}
 80032a2:	b086      	sub	sp, #24
 80032a4:	af00      	add	r7, sp, #0
 80032a6:	60f8      	str	r0, [r7, #12]
 80032a8:	60b9      	str	r1, [r7, #8]
 80032aa:	607a      	str	r2, [r7, #4]
      {
	_Map_alloc_type __map_alloc = _M_get_map_allocator();
 80032ac:	f107 0314 	add.w	r3, r7, #20
 80032b0:	68f9      	ldr	r1, [r7, #12]
 80032b2:	4618      	mov	r0, r3
 80032b4:	f000 f872 	bl	800339c <_ZNKSt11_Deque_baseIiSaIiEE20_M_get_map_allocatorEv>
	_Map_alloc_traits::deallocate(__map_alloc, __p, __n);
 80032b8:	f107 0314 	add.w	r3, r7, #20
 80032bc:	687a      	ldr	r2, [r7, #4]
 80032be:	68b9      	ldr	r1, [r7, #8]
 80032c0:	4618      	mov	r0, r3
 80032c2:	f000 f899 	bl	80033f8 <_ZN9__gnu_cxx14__alloc_traitsISaIPiEE10deallocateERS2_PS1_j>
      }

      void
      _M_deallocate_map(_Map_pointer __p, size_t __n) _GLIBCXX_NOEXCEPT
      {
	_Map_alloc_type __map_alloc = _M_get_map_allocator();
 80032c6:	f107 0314 	add.w	r3, r7, #20
 80032ca:	4618      	mov	r0, r3
 80032cc:	f000 f878 	bl	80033c0 <_ZNSaIPiED1Ev>
	_Map_alloc_traits::deallocate(__map_alloc, __p, __n);
      }
 80032d0:	bf00      	nop
 80032d2:	3718      	adds	r7, #24
 80032d4:	46bd      	mov	sp, r7
 80032d6:	bd80      	pop	{r7, pc}

080032d8 <_ZN9__gnu_cxx13new_allocatorIiE8allocateEjPKv>:
      { return std::__addressof(__x); }

      // NB: __n is permitted to be 0.  The C++ standard says nothing
      // about what the return value is when __n == 0.
      pointer
      allocate(size_type __n, const void* = 0)
 80032d8:	b580      	push	{r7, lr}
 80032da:	b084      	sub	sp, #16
 80032dc:	af00      	add	r7, sp, #0
 80032de:	60f8      	str	r0, [r7, #12]
 80032e0:	60b9      	str	r1, [r7, #8]
 80032e2:	607a      	str	r2, [r7, #4]
      { 
	if (__n > this->max_size())
 80032e4:	68f8      	ldr	r0, [r7, #12]
 80032e6:	f000 f897 	bl	8003418 <_ZNK9__gnu_cxx13new_allocatorIiE8max_sizeEv>
 80032ea:	4602      	mov	r2, r0
 80032ec:	68bb      	ldr	r3, [r7, #8]
 80032ee:	429a      	cmp	r2, r3
 80032f0:	bf34      	ite	cc
 80032f2:	2301      	movcc	r3, #1
 80032f4:	2300      	movcs	r3, #0
 80032f6:	b2db      	uxtb	r3, r3
 80032f8:	2b00      	cmp	r3, #0
 80032fa:	d001      	beq.n	8003300 <_ZN9__gnu_cxx13new_allocatorIiE8allocateEjPKv+0x28>
	  std::__throw_bad_alloc();
 80032fc:	f002 f850 	bl	80053a0 <_ZSt17__throw_bad_allocv>

	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
 8003300:	68bb      	ldr	r3, [r7, #8]
 8003302:	009b      	lsls	r3, r3, #2
 8003304:	4618      	mov	r0, r3
 8003306:	f002 f822 	bl	800534e <_Znwj>
 800330a:	4603      	mov	r3, r0
      }
 800330c:	4618      	mov	r0, r3
 800330e:	3710      	adds	r7, #16
 8003310:	46bd      	mov	sp, r7
 8003312:	bd80      	pop	{r7, pc}

08003314 <_ZSt12__miter_baseIPPiENSt11_Miter_baseIT_E13iterator_typeES3_>:
    : _Iter_base<_Iterator, __is_move_iterator<_Iterator>::__value>
    { };

  template<typename _Iterator>
    inline typename _Miter_base<_Iterator>::iterator_type
    __miter_base(_Iterator __it)
 8003314:	b580      	push	{r7, lr}
 8003316:	b082      	sub	sp, #8
 8003318:	af00      	add	r7, sp, #0
 800331a:	6078      	str	r0, [r7, #4]
    { return std::_Miter_base<_Iterator>::_S_base(__it); }
 800331c:	6878      	ldr	r0, [r7, #4]
 800331e:	f000 f887 	bl	8003430 <_ZNSt10_Iter_baseIPPiLb0EE7_S_baseES1_>
 8003322:	4603      	mov	r3, r0
 8003324:	4618      	mov	r0, r3
 8003326:	3708      	adds	r7, #8
 8003328:	46bd      	mov	sp, r7
 800332a:	bd80      	pop	{r7, pc}

0800332c <_ZSt14__copy_move_a2ILb0EPPiS1_ET1_T0_S3_S2_>:
    __copy_move_a2(istreambuf_iterator<_CharT, char_traits<_CharT> >,
		   istreambuf_iterator<_CharT, char_traits<_CharT> >, _CharT*);

  template<bool _IsMove, typename _II, typename _OI>
    inline _OI
    __copy_move_a2(_II __first, _II __last, _OI __result)
 800332c:	b5b0      	push	{r4, r5, r7, lr}
 800332e:	b084      	sub	sp, #16
 8003330:	af00      	add	r7, sp, #0
 8003332:	60f8      	str	r0, [r7, #12]
 8003334:	60b9      	str	r1, [r7, #8]
 8003336:	607a      	str	r2, [r7, #4]
    {
      return _OI(std::__copy_move_a<_IsMove>(std::__niter_base(__first),
 8003338:	68f8      	ldr	r0, [r7, #12]
 800333a:	f000 f883 	bl	8003444 <_ZSt12__niter_baseIPPiENSt11_Niter_baseIT_E13iterator_typeES3_>
 800333e:	4604      	mov	r4, r0
 8003340:	68b8      	ldr	r0, [r7, #8]
 8003342:	f000 f87f 	bl	8003444 <_ZSt12__niter_baseIPPiENSt11_Niter_baseIT_E13iterator_typeES3_>
 8003346:	4605      	mov	r5, r0
 8003348:	6878      	ldr	r0, [r7, #4]
 800334a:	f000 f87b 	bl	8003444 <_ZSt12__niter_baseIPPiENSt11_Niter_baseIT_E13iterator_typeES3_>
 800334e:	4603      	mov	r3, r0
					     std::__niter_base(__last),
					     std::__niter_base(__result)));
 8003350:	461a      	mov	r2, r3
 8003352:	4629      	mov	r1, r5
 8003354:	4620      	mov	r0, r4
 8003356:	f000 f881 	bl	800345c <_ZSt13__copy_move_aILb0EPPiS1_ET1_T0_S3_S2_>
 800335a:	4603      	mov	r3, r0
    }
 800335c:	4618      	mov	r0, r3
 800335e:	3710      	adds	r7, #16
 8003360:	46bd      	mov	sp, r7
 8003362:	bdb0      	pop	{r4, r5, r7, pc}

08003364 <_ZSt23__copy_move_backward_a2ILb0EPPiS1_ET1_T0_S3_S2_>:
								 __result);
    }

  template<bool _IsMove, typename _BI1, typename _BI2>
    inline _BI2
    __copy_move_backward_a2(_BI1 __first, _BI1 __last, _BI2 __result)
 8003364:	b5b0      	push	{r4, r5, r7, lr}
 8003366:	b084      	sub	sp, #16
 8003368:	af00      	add	r7, sp, #0
 800336a:	60f8      	str	r0, [r7, #12]
 800336c:	60b9      	str	r1, [r7, #8]
 800336e:	607a      	str	r2, [r7, #4]
    {
      return _BI2(std::__copy_move_backward_a<_IsMove>
		  (std::__niter_base(__first), std::__niter_base(__last),
 8003370:	68f8      	ldr	r0, [r7, #12]
 8003372:	f000 f867 	bl	8003444 <_ZSt12__niter_baseIPPiENSt11_Niter_baseIT_E13iterator_typeES3_>
 8003376:	4604      	mov	r4, r0
 8003378:	68b8      	ldr	r0, [r7, #8]
 800337a:	f000 f863 	bl	8003444 <_ZSt12__niter_baseIPPiENSt11_Niter_baseIT_E13iterator_typeES3_>
 800337e:	4605      	mov	r5, r0
 8003380:	6878      	ldr	r0, [r7, #4]
 8003382:	f000 f85f 	bl	8003444 <_ZSt12__niter_baseIPPiENSt11_Niter_baseIT_E13iterator_typeES3_>
 8003386:	4603      	mov	r3, r0
		   std::__niter_base(__result)));
 8003388:	461a      	mov	r2, r3
 800338a:	4629      	mov	r1, r5
 800338c:	4620      	mov	r0, r4
 800338e:	f000 f877 	bl	8003480 <_ZSt22__copy_move_backward_aILb0EPPiS1_ET1_T0_S3_S2_>
 8003392:	4603      	mov	r3, r0
    }
 8003394:	4618      	mov	r0, r3
 8003396:	3710      	adds	r7, #16
 8003398:	46bd      	mov	sp, r7
 800339a:	bdb0      	pop	{r4, r5, r7, pc}

0800339c <_ZNKSt11_Deque_baseIiSaIiEE20_M_get_map_allocatorEv>:
      const _Tp_alloc_type&
      _M_get_Tp_allocator() const _GLIBCXX_NOEXCEPT
      { return *static_cast<const _Tp_alloc_type*>(&this->_M_impl); }

      _Map_alloc_type
      _M_get_map_allocator() const _GLIBCXX_NOEXCEPT
 800339c:	b580      	push	{r7, lr}
 800339e:	b082      	sub	sp, #8
 80033a0:	af00      	add	r7, sp, #0
 80033a2:	6078      	str	r0, [r7, #4]
 80033a4:	6039      	str	r1, [r7, #0]
      { return _Map_alloc_type(_M_get_Tp_allocator()); }
 80033a6:	6838      	ldr	r0, [r7, #0]
 80033a8:	f000 f87c 	bl	80034a4 <_ZNKSt11_Deque_baseIiSaIiEE19_M_get_Tp_allocatorEv>
 80033ac:	4603      	mov	r3, r0
 80033ae:	4619      	mov	r1, r3
 80033b0:	6878      	ldr	r0, [r7, #4]
 80033b2:	f000 f881 	bl	80034b8 <_ZNSaIPiEC1IiEERKSaIT_E>
 80033b6:	6878      	ldr	r0, [r7, #4]
 80033b8:	3708      	adds	r7, #8
 80033ba:	46bd      	mov	sp, r7
 80033bc:	bd80      	pop	{r7, pc}
 80033be:	bf00      	nop

080033c0 <_ZNSaIPiED1Ev>:

      template<typename _Tp1>
        allocator(const allocator<_Tp1>&) throw() { }

      ~allocator() throw() { }
 80033c0:	b580      	push	{r7, lr}
 80033c2:	b082      	sub	sp, #8
 80033c4:	af00      	add	r7, sp, #0
 80033c6:	6078      	str	r0, [r7, #4]
 80033c8:	6878      	ldr	r0, [r7, #4]
 80033ca:	f000 f883 	bl	80034d4 <_ZN9__gnu_cxx13new_allocatorIPiED1Ev>
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	4618      	mov	r0, r3
 80033d2:	3708      	adds	r7, #8
 80033d4:	46bd      	mov	sp, r7
 80033d6:	bd80      	pop	{r7, pc}

080033d8 <_ZN9__gnu_cxx14__alloc_traitsISaIPiEE8allocateERS2_j>:
    typedef typename _Alloc::const_reference        const_reference;
    typedef typename _Alloc::size_type              size_type;
    typedef typename _Alloc::difference_type        difference_type;

    static pointer
    allocate(_Alloc& __a, size_type __n)
 80033d8:	b580      	push	{r7, lr}
 80033da:	b082      	sub	sp, #8
 80033dc:	af00      	add	r7, sp, #0
 80033de:	6078      	str	r0, [r7, #4]
 80033e0:	6039      	str	r1, [r7, #0]
    { return __a.allocate(__n); }
 80033e2:	2200      	movs	r2, #0
 80033e4:	6839      	ldr	r1, [r7, #0]
 80033e6:	6878      	ldr	r0, [r7, #4]
 80033e8:	f000 f87e 	bl	80034e8 <_ZN9__gnu_cxx13new_allocatorIPiE8allocateEjPKv>
 80033ec:	4603      	mov	r3, r0
 80033ee:	4618      	mov	r0, r3
 80033f0:	3708      	adds	r7, #8
 80033f2:	46bd      	mov	sp, r7
 80033f4:	bd80      	pop	{r7, pc}
 80033f6:	bf00      	nop

080033f8 <_ZN9__gnu_cxx14__alloc_traitsISaIPiEE10deallocateERS2_PS1_j>:

    static void deallocate(_Alloc& __a, pointer __p, size_type __n)
 80033f8:	b580      	push	{r7, lr}
 80033fa:	b084      	sub	sp, #16
 80033fc:	af00      	add	r7, sp, #0
 80033fe:	60f8      	str	r0, [r7, #12]
 8003400:	60b9      	str	r1, [r7, #8]
 8003402:	607a      	str	r2, [r7, #4]
    { __a.deallocate(__p, __n); }
 8003404:	687a      	ldr	r2, [r7, #4]
 8003406:	68b9      	ldr	r1, [r7, #8]
 8003408:	68f8      	ldr	r0, [r7, #12]
 800340a:	f000 f88b 	bl	8003524 <_ZN9__gnu_cxx13new_allocatorIPiE10deallocateEPS1_j>
 800340e:	bf00      	nop
 8003410:	3710      	adds	r7, #16
 8003412:	46bd      	mov	sp, r7
 8003414:	bd80      	pop	{r7, pc}
 8003416:	bf00      	nop

08003418 <_ZNK9__gnu_cxx13new_allocatorIiE8max_sizeEv>:
      void
      deallocate(pointer __p, size_type)
      { ::operator delete(__p); }

      size_type
      max_size() const _GLIBCXX_USE_NOEXCEPT
 8003418:	b480      	push	{r7}
 800341a:	b083      	sub	sp, #12
 800341c:	af00      	add	r7, sp, #0
 800341e:	6078      	str	r0, [r7, #4]
      { return size_t(-1) / sizeof(_Tp); }
 8003420:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
 8003424:	4618      	mov	r0, r3
 8003426:	370c      	adds	r7, #12
 8003428:	46bd      	mov	sp, r7
 800342a:	bc80      	pop	{r7}
 800342c:	4770      	bx	lr
 800342e:	bf00      	nop

08003430 <_ZNSt10_Iter_baseIPPiLb0EE7_S_baseES1_>:
  // untouched
  template<typename _Iterator, bool _HasBase>
    struct _Iter_base
    {
      typedef _Iterator iterator_type;
      static iterator_type _S_base(_Iterator __it)
 8003430:	b480      	push	{r7}
 8003432:	b083      	sub	sp, #12
 8003434:	af00      	add	r7, sp, #0
 8003436:	6078      	str	r0, [r7, #4]
      { return __it; }
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	4618      	mov	r0, r3
 800343c:	370c      	adds	r7, #12
 800343e:	46bd      	mov	sp, r7
 8003440:	bc80      	pop	{r7}
 8003442:	4770      	bx	lr

08003444 <_ZSt12__niter_baseIPPiENSt11_Niter_baseIT_E13iterator_typeES3_>:
    : _Iter_base<_Iterator, __is_normal_iterator<_Iterator>::__value>
    { };

  template<typename _Iterator>
    inline typename _Niter_base<_Iterator>::iterator_type
    __niter_base(_Iterator __it)
 8003444:	b580      	push	{r7, lr}
 8003446:	b082      	sub	sp, #8
 8003448:	af00      	add	r7, sp, #0
 800344a:	6078      	str	r0, [r7, #4]
    { return std::_Niter_base<_Iterator>::_S_base(__it); }
 800344c:	6878      	ldr	r0, [r7, #4]
 800344e:	f7ff ffef 	bl	8003430 <_ZNSt10_Iter_baseIPPiLb0EE7_S_baseES1_>
 8003452:	4603      	mov	r3, r0
 8003454:	4618      	mov	r0, r3
 8003456:	3708      	adds	r7, #8
 8003458:	46bd      	mov	sp, r7
 800345a:	bd80      	pop	{r7, pc}

0800345c <_ZSt13__copy_move_aILb0EPPiS1_ET1_T0_S3_S2_>:
	}
    };

  template<bool _IsMove, typename _II, typename _OI>
    inline _OI
    __copy_move_a(_II __first, _II __last, _OI __result)
 800345c:	b580      	push	{r7, lr}
 800345e:	b086      	sub	sp, #24
 8003460:	af00      	add	r7, sp, #0
 8003462:	60f8      	str	r0, [r7, #12]
 8003464:	60b9      	str	r1, [r7, #8]
 8003466:	607a      	str	r2, [r7, #4]
      typedef typename iterator_traits<_OI>::value_type _ValueTypeO;
      typedef typename iterator_traits<_II>::iterator_category _Category;
      const bool __simple = (__is_trivial(_ValueTypeI)
	                     && __is_pointer<_II>::__value
	                     && __is_pointer<_OI>::__value
			     && __are_same<_ValueTypeI, _ValueTypeO>::__value);
 8003468:	2301      	movs	r3, #1
 800346a:	75fb      	strb	r3, [r7, #23]

      return std::__copy_move<_IsMove, __simple,
	                      _Category>::__copy_m(__first, __last, __result);
 800346c:	687a      	ldr	r2, [r7, #4]
 800346e:	68b9      	ldr	r1, [r7, #8]
 8003470:	68f8      	ldr	r0, [r7, #12]
 8003472:	f000 f865 	bl	8003540 <_ZNSt11__copy_moveILb0ELb1ESt26random_access_iterator_tagE8__copy_mIPiEEPT_PKS4_S7_S5_>
 8003476:	4603      	mov	r3, r0
    }
 8003478:	4618      	mov	r0, r3
 800347a:	3718      	adds	r7, #24
 800347c:	46bd      	mov	sp, r7
 800347e:	bd80      	pop	{r7, pc}

08003480 <_ZSt22__copy_move_backward_aILb0EPPiS1_ET1_T0_S3_S2_>:
	}
    };

  template<bool _IsMove, typename _BI1, typename _BI2>
    inline _BI2
    __copy_move_backward_a(_BI1 __first, _BI1 __last, _BI2 __result)
 8003480:	b580      	push	{r7, lr}
 8003482:	b086      	sub	sp, #24
 8003484:	af00      	add	r7, sp, #0
 8003486:	60f8      	str	r0, [r7, #12]
 8003488:	60b9      	str	r1, [r7, #8]
 800348a:	607a      	str	r2, [r7, #4]
      typedef typename iterator_traits<_BI2>::value_type _ValueType2;
      typedef typename iterator_traits<_BI1>::iterator_category _Category;
      const bool __simple = (__is_trivial(_ValueType1)
	                     && __is_pointer<_BI1>::__value
	                     && __is_pointer<_BI2>::__value
			     && __are_same<_ValueType1, _ValueType2>::__value);
 800348c:	2301      	movs	r3, #1
 800348e:	75fb      	strb	r3, [r7, #23]

      return std::__copy_move_backward<_IsMove, __simple,
	                               _Category>::__copy_move_b(__first,
								 __last,
								 __result);
 8003490:	687a      	ldr	r2, [r7, #4]
 8003492:	68b9      	ldr	r1, [r7, #8]
 8003494:	68f8      	ldr	r0, [r7, #12]
 8003496:	f000 f871 	bl	800357c <_ZNSt20__copy_move_backwardILb0ELb1ESt26random_access_iterator_tagE13__copy_move_bIPiEEPT_PKS4_S7_S5_>
 800349a:	4603      	mov	r3, r0
    }
 800349c:	4618      	mov	r0, r3
 800349e:	3718      	adds	r7, #24
 80034a0:	46bd      	mov	sp, r7
 80034a2:	bd80      	pop	{r7, pc}

080034a4 <_ZNKSt11_Deque_baseIiSaIiEE19_M_get_Tp_allocatorEv>:
      _Tp_alloc_type&
      _M_get_Tp_allocator() _GLIBCXX_NOEXCEPT
      { return *static_cast<_Tp_alloc_type*>(&this->_M_impl); }

      const _Tp_alloc_type&
      _M_get_Tp_allocator() const _GLIBCXX_NOEXCEPT
 80034a4:	b480      	push	{r7}
 80034a6:	b083      	sub	sp, #12
 80034a8:	af00      	add	r7, sp, #0
 80034aa:	6078      	str	r0, [r7, #4]
      { return *static_cast<const _Tp_alloc_type*>(&this->_M_impl); }
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	4618      	mov	r0, r3
 80034b0:	370c      	adds	r7, #12
 80034b2:	46bd      	mov	sp, r7
 80034b4:	bc80      	pop	{r7}
 80034b6:	4770      	bx	lr

080034b8 <_ZNSaIPiEC1IiEERKSaIT_E>:

      allocator(const allocator& __a) throw()
      : __allocator_base<_Tp>(__a) { }

      template<typename _Tp1>
        allocator(const allocator<_Tp1>&) throw() { }
 80034b8:	b580      	push	{r7, lr}
 80034ba:	b082      	sub	sp, #8
 80034bc:	af00      	add	r7, sp, #0
 80034be:	6078      	str	r0, [r7, #4]
 80034c0:	6039      	str	r1, [r7, #0]
 80034c2:	6878      	ldr	r0, [r7, #4]
 80034c4:	f000 f87c 	bl	80035c0 <_ZN9__gnu_cxx13new_allocatorIPiEC1Ev>
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	4618      	mov	r0, r3
 80034cc:	3708      	adds	r7, #8
 80034ce:	46bd      	mov	sp, r7
 80034d0:	bd80      	pop	{r7, pc}
 80034d2:	bf00      	nop

080034d4 <_ZN9__gnu_cxx13new_allocatorIPiED1Ev>:
      new_allocator(const new_allocator&) _GLIBCXX_USE_NOEXCEPT { }

      template<typename _Tp1>
        new_allocator(const new_allocator<_Tp1>&) _GLIBCXX_USE_NOEXCEPT { }

      ~new_allocator() _GLIBCXX_USE_NOEXCEPT { }
 80034d4:	b480      	push	{r7}
 80034d6:	b083      	sub	sp, #12
 80034d8:	af00      	add	r7, sp, #0
 80034da:	6078      	str	r0, [r7, #4]
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	4618      	mov	r0, r3
 80034e0:	370c      	adds	r7, #12
 80034e2:	46bd      	mov	sp, r7
 80034e4:	bc80      	pop	{r7}
 80034e6:	4770      	bx	lr

080034e8 <_ZN9__gnu_cxx13new_allocatorIPiE8allocateEjPKv>:
      { return std::__addressof(__x); }

      // NB: __n is permitted to be 0.  The C++ standard says nothing
      // about what the return value is when __n == 0.
      pointer
      allocate(size_type __n, const void* = 0)
 80034e8:	b580      	push	{r7, lr}
 80034ea:	b084      	sub	sp, #16
 80034ec:	af00      	add	r7, sp, #0
 80034ee:	60f8      	str	r0, [r7, #12]
 80034f0:	60b9      	str	r1, [r7, #8]
 80034f2:	607a      	str	r2, [r7, #4]
      { 
	if (__n > this->max_size())
 80034f4:	68f8      	ldr	r0, [r7, #12]
 80034f6:	f000 f86d 	bl	80035d4 <_ZNK9__gnu_cxx13new_allocatorIPiE8max_sizeEv>
 80034fa:	4602      	mov	r2, r0
 80034fc:	68bb      	ldr	r3, [r7, #8]
 80034fe:	429a      	cmp	r2, r3
 8003500:	bf34      	ite	cc
 8003502:	2301      	movcc	r3, #1
 8003504:	2300      	movcs	r3, #0
 8003506:	b2db      	uxtb	r3, r3
 8003508:	2b00      	cmp	r3, #0
 800350a:	d001      	beq.n	8003510 <_ZN9__gnu_cxx13new_allocatorIPiE8allocateEjPKv+0x28>
	  std::__throw_bad_alloc();
 800350c:	f001 ff48 	bl	80053a0 <_ZSt17__throw_bad_allocv>

	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
 8003510:	68bb      	ldr	r3, [r7, #8]
 8003512:	009b      	lsls	r3, r3, #2
 8003514:	4618      	mov	r0, r3
 8003516:	f001 ff1a 	bl	800534e <_Znwj>
 800351a:	4603      	mov	r3, r0
      }
 800351c:	4618      	mov	r0, r3
 800351e:	3710      	adds	r7, #16
 8003520:	46bd      	mov	sp, r7
 8003522:	bd80      	pop	{r7, pc}

08003524 <_ZN9__gnu_cxx13new_allocatorIPiE10deallocateEPS1_j>:

      // __p is not permitted to be a null pointer.
      void
      deallocate(pointer __p, size_type)
 8003524:	b580      	push	{r7, lr}
 8003526:	b084      	sub	sp, #16
 8003528:	af00      	add	r7, sp, #0
 800352a:	60f8      	str	r0, [r7, #12]
 800352c:	60b9      	str	r1, [r7, #8]
 800352e:	607a      	str	r2, [r7, #4]
      { ::operator delete(__p); }
 8003530:	68b8      	ldr	r0, [r7, #8]
 8003532:	f001 ff33 	bl	800539c <_ZdlPv>
 8003536:	bf00      	nop
 8003538:	3710      	adds	r7, #16
 800353a:	46bd      	mov	sp, r7
 800353c:	bd80      	pop	{r7, pc}
 800353e:	bf00      	nop

08003540 <_ZNSt11__copy_moveILb0ELb1ESt26random_access_iterator_tagE8__copy_mIPiEEPT_PKS4_S7_S5_>:
  template<bool _IsMove>
    struct __copy_move<_IsMove, true, random_access_iterator_tag>
    {
      template<typename _Tp>
        static _Tp*
        __copy_m(const _Tp* __first, const _Tp* __last, _Tp* __result)
 8003540:	b580      	push	{r7, lr}
 8003542:	b086      	sub	sp, #24
 8003544:	af00      	add	r7, sp, #0
 8003546:	60f8      	str	r0, [r7, #12]
 8003548:	60b9      	str	r1, [r7, #8]
 800354a:	607a      	str	r2, [r7, #4]
#if __cplusplus >= 201103L
	  // trivial types can have deleted assignment
	  static_assert( is_copy_assignable<_Tp>::value,
	                 "type is not assignable" );
#endif
	  const ptrdiff_t _Num = __last - __first;
 800354c:	68ba      	ldr	r2, [r7, #8]
 800354e:	68fb      	ldr	r3, [r7, #12]
 8003550:	1ad3      	subs	r3, r2, r3
 8003552:	109b      	asrs	r3, r3, #2
 8003554:	617b      	str	r3, [r7, #20]
	  if (_Num)
 8003556:	697b      	ldr	r3, [r7, #20]
 8003558:	2b00      	cmp	r3, #0
 800355a:	d006      	beq.n	800356a <_ZNSt11__copy_moveILb0ELb1ESt26random_access_iterator_tagE8__copy_mIPiEEPT_PKS4_S7_S5_+0x2a>
	    __builtin_memmove(__result, __first, sizeof(_Tp) * _Num);
 800355c:	697b      	ldr	r3, [r7, #20]
 800355e:	009b      	lsls	r3, r3, #2
 8003560:	461a      	mov	r2, r3
 8003562:	68f9      	ldr	r1, [r7, #12]
 8003564:	6878      	ldr	r0, [r7, #4]
 8003566:	f002 f8bb 	bl	80056e0 <memmove>
	  return __result + _Num;
 800356a:	697b      	ldr	r3, [r7, #20]
 800356c:	009b      	lsls	r3, r3, #2
 800356e:	687a      	ldr	r2, [r7, #4]
 8003570:	4413      	add	r3, r2
	}
 8003572:	4618      	mov	r0, r3
 8003574:	3718      	adds	r7, #24
 8003576:	46bd      	mov	sp, r7
 8003578:	bd80      	pop	{r7, pc}
 800357a:	bf00      	nop

0800357c <_ZNSt20__copy_move_backwardILb0ELb1ESt26random_access_iterator_tagE13__copy_move_bIPiEEPT_PKS4_S7_S5_>:
  template<bool _IsMove>
    struct __copy_move_backward<_IsMove, true, random_access_iterator_tag>
    {
      template<typename _Tp>
        static _Tp*
        __copy_move_b(const _Tp* __first, const _Tp* __last, _Tp* __result)
 800357c:	b580      	push	{r7, lr}
 800357e:	b086      	sub	sp, #24
 8003580:	af00      	add	r7, sp, #0
 8003582:	60f8      	str	r0, [r7, #12]
 8003584:	60b9      	str	r1, [r7, #8]
 8003586:	607a      	str	r2, [r7, #4]
#if __cplusplus >= 201103L
	  // trivial types can have deleted assignment
	  static_assert( is_copy_assignable<_Tp>::value,
	                 "type is not assignable" );
#endif
	  const ptrdiff_t _Num = __last - __first;
 8003588:	68ba      	ldr	r2, [r7, #8]
 800358a:	68fb      	ldr	r3, [r7, #12]
 800358c:	1ad3      	subs	r3, r2, r3
 800358e:	109b      	asrs	r3, r3, #2
 8003590:	617b      	str	r3, [r7, #20]
	  if (_Num)
 8003592:	697b      	ldr	r3, [r7, #20]
 8003594:	2b00      	cmp	r3, #0
 8003596:	d00a      	beq.n	80035ae <_ZNSt20__copy_move_backwardILb0ELb1ESt26random_access_iterator_tagE13__copy_move_bIPiEEPT_PKS4_S7_S5_+0x32>
	    __builtin_memmove(__result - _Num, __first, sizeof(_Tp) * _Num);
 8003598:	697b      	ldr	r3, [r7, #20]
 800359a:	009b      	lsls	r3, r3, #2
 800359c:	425b      	negs	r3, r3
 800359e:	687a      	ldr	r2, [r7, #4]
 80035a0:	18d0      	adds	r0, r2, r3
 80035a2:	697b      	ldr	r3, [r7, #20]
 80035a4:	009b      	lsls	r3, r3, #2
 80035a6:	461a      	mov	r2, r3
 80035a8:	68f9      	ldr	r1, [r7, #12]
 80035aa:	f002 f899 	bl	80056e0 <memmove>
	  return __result - _Num;
 80035ae:	697b      	ldr	r3, [r7, #20]
 80035b0:	009b      	lsls	r3, r3, #2
 80035b2:	425b      	negs	r3, r3
 80035b4:	687a      	ldr	r2, [r7, #4]
 80035b6:	4413      	add	r3, r2
	}
 80035b8:	4618      	mov	r0, r3
 80035ba:	3718      	adds	r7, #24
 80035bc:	46bd      	mov	sp, r7
 80035be:	bd80      	pop	{r7, pc}

080035c0 <_ZN9__gnu_cxx13new_allocatorIPiEC1Ev>:
      // _GLIBCXX_RESOLVE_LIB_DEFECTS
      // 2103. propagate_on_container_move_assignment
      typedef std::true_type propagate_on_container_move_assignment;
#endif

      new_allocator() _GLIBCXX_USE_NOEXCEPT { }
 80035c0:	b480      	push	{r7}
 80035c2:	b083      	sub	sp, #12
 80035c4:	af00      	add	r7, sp, #0
 80035c6:	6078      	str	r0, [r7, #4]
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	4618      	mov	r0, r3
 80035cc:	370c      	adds	r7, #12
 80035ce:	46bd      	mov	sp, r7
 80035d0:	bc80      	pop	{r7}
 80035d2:	4770      	bx	lr

080035d4 <_ZNK9__gnu_cxx13new_allocatorIPiE8max_sizeEv>:
      void
      deallocate(pointer __p, size_type)
      { ::operator delete(__p); }

      size_type
      max_size() const _GLIBCXX_USE_NOEXCEPT
 80035d4:	b480      	push	{r7}
 80035d6:	b083      	sub	sp, #12
 80035d8:	af00      	add	r7, sp, #0
 80035da:	6078      	str	r0, [r7, #4]
      { return size_t(-1) / sizeof(_Tp); }
 80035dc:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
 80035e0:	4618      	mov	r0, r3
 80035e2:	370c      	adds	r7, #12
 80035e4:	46bd      	mov	sp, r7
 80035e6:	bc80      	pop	{r7}
 80035e8:	4770      	bx	lr
 80035ea:	bf00      	nop

080035ec <_ZN7DisplayC1Ev>:
#include <Display/Display.h>
#include "userSettings.h"
#include <stdio.h>


Display::Display() : sp(&SPI1_class::getInstance())
 80035ec:	b580      	push	{r7, lr}
 80035ee:	b084      	sub	sp, #16
 80035f0:	af00      	add	r7, sp, #0
 80035f2:	6078      	str	r0, [r7, #4]
 80035f4:	4a99      	ldr	r2, [pc, #612]	; (800385c <_ZN7DisplayC1Ev+0x270>)
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	601a      	str	r2, [r3, #0]
 80035fa:	f7fd fe31 	bl	8001260 <_ZN10SPI1_class11getInstanceEv>
 80035fe:	4602      	mov	r2, r0
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	605a      	str	r2, [r3, #4]
{
	/*setting of chip select for display*/
	CSsetS csSetting;
	csSetting.csPin = SPI1_CS_PIN;
 8003604:	2310      	movs	r3, #16
 8003606:	81bb      	strh	r3, [r7, #12]
	csSetting.gpioType = GPIOA;
 8003608:	4b95      	ldr	r3, [pc, #596]	; (8003860 <_ZN7DisplayC1Ev+0x274>)
 800360a:	60bb      	str	r3, [r7, #8]
	sp->setCS(csSetting);
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	6858      	ldr	r0, [r3, #4]
 8003610:	f107 0308 	add.w	r3, r7, #8
 8003614:	e893 0006 	ldmia.w	r3, {r1, r2}
 8003618:	f7fd fe98 	bl	800134c <_ZN10SPI1_class5setCSE6CSsetS>

	GPIO_ResetBits(GPIOC, SPI1_RES_PIN);
 800361c:	2110      	movs	r1, #16
 800361e:	4891      	ldr	r0, [pc, #580]	; (8003864 <_ZN7DisplayC1Ev+0x278>)
 8003620:	f7fd f9b8 	bl	8000994 <GPIO_ResetBits>
	GPIO_SetBits(GPIOC, SPI1_RES_PIN);
 8003624:	2110      	movs	r1, #16
 8003626:	488f      	ldr	r0, [pc, #572]	; (8003864 <_ZN7DisplayC1Ev+0x278>)
 8003628:	f7fd f9a6 	bl	8000978 <GPIO_SetBits>

	sp->storeCommand(CMD_DISPLAY_OFF);          //Display Off
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	685b      	ldr	r3, [r3, #4]
 8003630:	2200      	movs	r2, #0
 8003632:	21ae      	movs	r1, #174	; 0xae
 8003634:	4618      	mov	r0, r3
 8003636:	f7fd ff0b 	bl	8001450 <_ZN10SPI1_class12storeCommandEi8CommandE>
	sp->storeCommand(CMD_SET_CONTRAST_A);       //Set contrast for color A
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	685b      	ldr	r3, [r3, #4]
 800363e:	2200      	movs	r2, #0
 8003640:	2181      	movs	r1, #129	; 0x81
 8003642:	4618      	mov	r0, r3
 8003644:	f7fd ff04 	bl	8001450 <_ZN10SPI1_class12storeCommandEi8CommandE>
	sp->storeCommand(0xFF);                     //255
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	685b      	ldr	r3, [r3, #4]
 800364c:	2200      	movs	r2, #0
 800364e:	21ff      	movs	r1, #255	; 0xff
 8003650:	4618      	mov	r0, r3
 8003652:	f7fd fefd 	bl	8001450 <_ZN10SPI1_class12storeCommandEi8CommandE>
	sp->storeCommand(CMD_SET_CONTRAST_B);       //Set contrast for color B
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	685b      	ldr	r3, [r3, #4]
 800365a:	2200      	movs	r2, #0
 800365c:	2182      	movs	r1, #130	; 0x82
 800365e:	4618      	mov	r0, r3
 8003660:	f7fd fef6 	bl	8001450 <_ZN10SPI1_class12storeCommandEi8CommandE>
	sp->storeCommand(0xFF );                     //255
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	685b      	ldr	r3, [r3, #4]
 8003668:	2200      	movs	r2, #0
 800366a:	21ff      	movs	r1, #255	; 0xff
 800366c:	4618      	mov	r0, r3
 800366e:	f7fd feef 	bl	8001450 <_ZN10SPI1_class12storeCommandEi8CommandE>
	sp->storeCommand(CMD_SET_CONTRAST_C);       //Set contrast for color C
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	685b      	ldr	r3, [r3, #4]
 8003676:	2200      	movs	r2, #0
 8003678:	2183      	movs	r1, #131	; 0x83
 800367a:	4618      	mov	r0, r3
 800367c:	f7fd fee8 	bl	8001450 <_ZN10SPI1_class12storeCommandEi8CommandE>
	sp->storeCommand(0xFF);                     //255
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	685b      	ldr	r3, [r3, #4]
 8003684:	2200      	movs	r2, #0
 8003686:	21ff      	movs	r1, #255	; 0xff
 8003688:	4618      	mov	r0, r3
 800368a:	f7fd fee1 	bl	8001450 <_ZN10SPI1_class12storeCommandEi8CommandE>
	sp->storeCommand(CMD_MASTER_CURRENT_CONTROL);//master current control
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	685b      	ldr	r3, [r3, #4]
 8003692:	2200      	movs	r2, #0
 8003694:	2187      	movs	r1, #135	; 0x87
 8003696:	4618      	mov	r0, r3
 8003698:	f7fd feda 	bl	8001450 <_ZN10SPI1_class12storeCommandEi8CommandE>
	sp->storeCommand(0x06);                     //6
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	685b      	ldr	r3, [r3, #4]
 80036a0:	2200      	movs	r2, #0
 80036a2:	2106      	movs	r1, #6
 80036a4:	4618      	mov	r0, r3
 80036a6:	f7fd fed3 	bl	8001450 <_ZN10SPI1_class12storeCommandEi8CommandE>
	sp->storeCommand(CMD_SET_PRECHARGE_SPEED_A);//Set Second Pre-change Speed For ColorA
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	685b      	ldr	r3, [r3, #4]
 80036ae:	2200      	movs	r2, #0
 80036b0:	218a      	movs	r1, #138	; 0x8a
 80036b2:	4618      	mov	r0, r3
 80036b4:	f7fd fecc 	bl	8001450 <_ZN10SPI1_class12storeCommandEi8CommandE>
	sp->storeCommand(0x64);                     //100
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	685b      	ldr	r3, [r3, #4]
 80036bc:	2200      	movs	r2, #0
 80036be:	2164      	movs	r1, #100	; 0x64
 80036c0:	4618      	mov	r0, r3
 80036c2:	f7fd fec5 	bl	8001450 <_ZN10SPI1_class12storeCommandEi8CommandE>
	sp->storeCommand(CMD_SET_PRECHARGE_SPEED_B);//Set Second Pre-change Speed For ColorB
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	685b      	ldr	r3, [r3, #4]
 80036ca:	2200      	movs	r2, #0
 80036cc:	218b      	movs	r1, #139	; 0x8b
 80036ce:	4618      	mov	r0, r3
 80036d0:	f7fd febe 	bl	8001450 <_ZN10SPI1_class12storeCommandEi8CommandE>
	sp->storeCommand(0x78);                     //120
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	685b      	ldr	r3, [r3, #4]
 80036d8:	2200      	movs	r2, #0
 80036da:	2178      	movs	r1, #120	; 0x78
 80036dc:	4618      	mov	r0, r3
 80036de:	f7fd feb7 	bl	8001450 <_ZN10SPI1_class12storeCommandEi8CommandE>
	sp->storeCommand(CMD_SET_PRECHARGE_SPEED_C);//Set Second Pre-change Speed For ColorC
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	685b      	ldr	r3, [r3, #4]
 80036e6:	2200      	movs	r2, #0
 80036e8:	218c      	movs	r1, #140	; 0x8c
 80036ea:	4618      	mov	r0, r3
 80036ec:	f7fd feb0 	bl	8001450 <_ZN10SPI1_class12storeCommandEi8CommandE>
	sp->storeCommand(0x64);                     //100
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	685b      	ldr	r3, [r3, #4]
 80036f4:	2200      	movs	r2, #0
 80036f6:	2164      	movs	r1, #100	; 0x64
 80036f8:	4618      	mov	r0, r3
 80036fa:	f7fd fea9 	bl	8001450 <_ZN10SPI1_class12storeCommandEi8CommandE>
	sp->storeCommand(CMD_SET_REMAP);            //set remap & data format
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	685b      	ldr	r3, [r3, #4]
 8003702:	2200      	movs	r2, #0
 8003704:	21a0      	movs	r1, #160	; 0xa0
 8003706:	4618      	mov	r0, r3
 8003708:	f7fd fea2 	bl	8001450 <_ZN10SPI1_class12storeCommandEi8CommandE>
	sp->storeCommand(0x72);                     //0x72
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	685b      	ldr	r3, [r3, #4]
 8003710:	2200      	movs	r2, #0
 8003712:	2172      	movs	r1, #114	; 0x72
 8003714:	4618      	mov	r0, r3
 8003716:	f7fd fe9b 	bl	8001450 <_ZN10SPI1_class12storeCommandEi8CommandE>
	sp->storeCommand(CMD_SET_DISPLAY_START_LINE);//Set display Start Line
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	685b      	ldr	r3, [r3, #4]
 800371e:	2200      	movs	r2, #0
 8003720:	21a1      	movs	r1, #161	; 0xa1
 8003722:	4618      	mov	r0, r3
 8003724:	f7fd fe94 	bl	8001450 <_ZN10SPI1_class12storeCommandEi8CommandE>
	sp->storeCommand(0x0);
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	685b      	ldr	r3, [r3, #4]
 800372c:	2200      	movs	r2, #0
 800372e:	2100      	movs	r1, #0
 8003730:	4618      	mov	r0, r3
 8003732:	f7fd fe8d 	bl	8001450 <_ZN10SPI1_class12storeCommandEi8CommandE>
	sp->storeCommand(CMD_SET_DISPLAY_OFFSET);   //Set display offset
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	685b      	ldr	r3, [r3, #4]
 800373a:	2200      	movs	r2, #0
 800373c:	21a2      	movs	r1, #162	; 0xa2
 800373e:	4618      	mov	r0, r3
 8003740:	f7fd fe86 	bl	8001450 <_ZN10SPI1_class12storeCommandEi8CommandE>
	sp->storeCommand(0x0);
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	685b      	ldr	r3, [r3, #4]
 8003748:	2200      	movs	r2, #0
 800374a:	2100      	movs	r1, #0
 800374c:	4618      	mov	r0, r3
 800374e:	f7fd fe7f 	bl	8001450 <_ZN10SPI1_class12storeCommandEi8CommandE>
	sp->storeCommand(CMD_NORMAL_DISPLAY);       //Set display mode
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	685b      	ldr	r3, [r3, #4]
 8003756:	2200      	movs	r2, #0
 8003758:	21a4      	movs	r1, #164	; 0xa4
 800375a:	4618      	mov	r0, r3
 800375c:	f7fd fe78 	bl	8001450 <_ZN10SPI1_class12storeCommandEi8CommandE>
	sp->storeCommand(CMD_SET_MULTIPLEX_RATIO);  //Set multiplex ratio
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	685b      	ldr	r3, [r3, #4]
 8003764:	2200      	movs	r2, #0
 8003766:	21a8      	movs	r1, #168	; 0xa8
 8003768:	4618      	mov	r0, r3
 800376a:	f7fd fe71 	bl	8001450 <_ZN10SPI1_class12storeCommandEi8CommandE>
	sp->storeCommand(0x3F);
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	685b      	ldr	r3, [r3, #4]
 8003772:	2200      	movs	r2, #0
 8003774:	213f      	movs	r1, #63	; 0x3f
 8003776:	4618      	mov	r0, r3
 8003778:	f7fd fe6a 	bl	8001450 <_ZN10SPI1_class12storeCommandEi8CommandE>
	sp->storeCommand(CMD_SET_MASTER_CONFIGURE); //Set master configuration
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	685b      	ldr	r3, [r3, #4]
 8003780:	2200      	movs	r2, #0
 8003782:	21ad      	movs	r1, #173	; 0xad
 8003784:	4618      	mov	r0, r3
 8003786:	f7fd fe63 	bl	8001450 <_ZN10SPI1_class12storeCommandEi8CommandE>
	sp->storeCommand(0x8E);
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	685b      	ldr	r3, [r3, #4]
 800378e:	2200      	movs	r2, #0
 8003790:	218e      	movs	r1, #142	; 0x8e
 8003792:	4618      	mov	r0, r3
 8003794:	f7fd fe5c 	bl	8001450 <_ZN10SPI1_class12storeCommandEi8CommandE>
	sp->storeCommand(CMD_POWER_SAVE_MODE);      //Set Power Save Mode
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	685b      	ldr	r3, [r3, #4]
 800379c:	2200      	movs	r2, #0
 800379e:	21b0      	movs	r1, #176	; 0xb0
 80037a0:	4618      	mov	r0, r3
 80037a2:	f7fd fe55 	bl	8001450 <_ZN10SPI1_class12storeCommandEi8CommandE>
	sp->storeCommand(0x00);                     //0x00
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	685b      	ldr	r3, [r3, #4]
 80037aa:	2200      	movs	r2, #0
 80037ac:	2100      	movs	r1, #0
 80037ae:	4618      	mov	r0, r3
 80037b0:	f7fd fe4e 	bl	8001450 <_ZN10SPI1_class12storeCommandEi8CommandE>
	sp->storeCommand(CMD_PHASE_PERIOD_ADJUSTMENT);//phase 1 and 2 period adjustment
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	685b      	ldr	r3, [r3, #4]
 80037b8:	2200      	movs	r2, #0
 80037ba:	21b1      	movs	r1, #177	; 0xb1
 80037bc:	4618      	mov	r0, r3
 80037be:	f7fd fe47 	bl	8001450 <_ZN10SPI1_class12storeCommandEi8CommandE>
	sp->storeCommand(0x31);                     //0x31
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	685b      	ldr	r3, [r3, #4]
 80037c6:	2200      	movs	r2, #0
 80037c8:	2131      	movs	r1, #49	; 0x31
 80037ca:	4618      	mov	r0, r3
 80037cc:	f7fd fe40 	bl	8001450 <_ZN10SPI1_class12storeCommandEi8CommandE>
	sp->storeCommand(CMD_DISPLAY_CLOCK_DIV);    //display clock divider/oscillator frequency
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	685b      	ldr	r3, [r3, #4]
 80037d4:	2200      	movs	r2, #0
 80037d6:	21b3      	movs	r1, #179	; 0xb3
 80037d8:	4618      	mov	r0, r3
 80037da:	f7fd fe39 	bl	8001450 <_ZN10SPI1_class12storeCommandEi8CommandE>
	sp->storeCommand(0xF0);
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	685b      	ldr	r3, [r3, #4]
 80037e2:	2200      	movs	r2, #0
 80037e4:	21f0      	movs	r1, #240	; 0xf0
 80037e6:	4618      	mov	r0, r3
 80037e8:	f7fd fe32 	bl	8001450 <_ZN10SPI1_class12storeCommandEi8CommandE>
	sp->storeCommand(CMD_SET_PRECHARGE_VOLTAGE);//Set Pre-Change Level
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	685b      	ldr	r3, [r3, #4]
 80037f0:	2200      	movs	r2, #0
 80037f2:	21bb      	movs	r1, #187	; 0xbb
 80037f4:	4618      	mov	r0, r3
 80037f6:	f7fd fe2b 	bl	8001450 <_ZN10SPI1_class12storeCommandEi8CommandE>
	sp->storeCommand(0x3A);
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	685b      	ldr	r3, [r3, #4]
 80037fe:	2200      	movs	r2, #0
 8003800:	213a      	movs	r1, #58	; 0x3a
 8003802:	4618      	mov	r0, r3
 8003804:	f7fd fe24 	bl	8001450 <_ZN10SPI1_class12storeCommandEi8CommandE>
	sp->storeCommand(CMD_SET_V_VOLTAGE);        //Set vcomH
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	685b      	ldr	r3, [r3, #4]
 800380c:	2200      	movs	r2, #0
 800380e:	21be      	movs	r1, #190	; 0xbe
 8003810:	4618      	mov	r0, r3
 8003812:	f7fd fe1d 	bl	8001450 <_ZN10SPI1_class12storeCommandEi8CommandE>
	sp->storeCommand(0x3E);
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	685b      	ldr	r3, [r3, #4]
 800381a:	2200      	movs	r2, #0
 800381c:	213e      	movs	r1, #62	; 0x3e
 800381e:	4618      	mov	r0, r3
 8003820:	f7fd fe16 	bl	8001450 <_ZN10SPI1_class12storeCommandEi8CommandE>
	sp->storeCommand(CMD_DEACTIVE_SCROLLING);   //disable scrolling
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	685b      	ldr	r3, [r3, #4]
 8003828:	2200      	movs	r2, #0
 800382a:	212e      	movs	r1, #46	; 0x2e
 800382c:	4618      	mov	r0, r3
 800382e:	f7fd fe0f 	bl	8001450 <_ZN10SPI1_class12storeCommandEi8CommandE>
	sp->storeCommand(CMD_NORMAL_BRIGHTNESS_DISPLAY_ON);//set display on
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	685b      	ldr	r3, [r3, #4]
 8003836:	2200      	movs	r2, #0
 8003838:	21af      	movs	r1, #175	; 0xaf
 800383a:	4618      	mov	r0, r3
 800383c:	f7fd fe08 	bl	8001450 <_ZN10SPI1_class12storeCommandEi8CommandE>

	sp->send();
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	685b      	ldr	r3, [r3, #4]
 8003844:	681b      	ldr	r3, [r3, #0]
 8003846:	330c      	adds	r3, #12
 8003848:	681b      	ldr	r3, [r3, #0]
 800384a:	687a      	ldr	r2, [r7, #4]
 800384c:	6852      	ldr	r2, [r2, #4]
 800384e:	4610      	mov	r0, r2
 8003850:	4798      	blx	r3
}
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	4618      	mov	r0, r3
 8003856:	3710      	adds	r7, #16
 8003858:	46bd      	mov	sp, r7
 800385a:	bd80      	pop	{r7, pc}
 800385c:	08005a40 	.word	0x08005a40
 8003860:	40010800 	.word	0x40010800
 8003864:	40011000 	.word	0x40011000

08003868 <_ZN7DisplayD1Ev>:

Display::~Display()
 8003868:	b580      	push	{r7, lr}
 800386a:	b082      	sub	sp, #8
 800386c:	af00      	add	r7, sp, #0
 800386e:	6078      	str	r0, [r7, #4]
 8003870:	4a06      	ldr	r2, [pc, #24]	; (800388c <_ZN7DisplayD1Ev+0x24>)
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	601a      	str	r2, [r3, #0]
{

}
 8003876:	2300      	movs	r3, #0
 8003878:	2b00      	cmp	r3, #0
 800387a:	d002      	beq.n	8003882 <_ZN7DisplayD1Ev+0x1a>
 800387c:	6878      	ldr	r0, [r7, #4]
 800387e:	f001 fd8d 	bl	800539c <_ZdlPv>
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	4618      	mov	r0, r3
 8003886:	3708      	adds	r7, #8
 8003888:	46bd      	mov	sp, r7
 800388a:	bd80      	pop	{r7, pc}
 800388c:	08005a40 	.word	0x08005a40

08003890 <_ZN7DisplayD0Ev>:
	sp->storeCommand(CMD_NORMAL_BRIGHTNESS_DISPLAY_ON);//set display on

	sp->send();
}

Display::~Display()
 8003890:	b580      	push	{r7, lr}
 8003892:	b082      	sub	sp, #8
 8003894:	af00      	add	r7, sp, #0
 8003896:	6078      	str	r0, [r7, #4]
{

}
 8003898:	6878      	ldr	r0, [r7, #4]
 800389a:	f7ff ffe5 	bl	8003868 <_ZN7DisplayD1Ev>
 800389e:	6878      	ldr	r0, [r7, #4]
 80038a0:	f001 fd7c 	bl	800539c <_ZdlPv>
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	4618      	mov	r0, r3
 80038a8:	3708      	adds	r7, #8
 80038aa:	46bd      	mov	sp, r7
 80038ac:	bd80      	pop	{r7, pc}
 80038ae:	bf00      	nop

080038b0 <_ZN7Display13setBackgroundEt>:

	sp->send();
}

void Display::setBackground(uint16_t color)
{
 80038b0:	b580      	push	{r7, lr}
 80038b2:	b082      	sub	sp, #8
 80038b4:	af00      	add	r7, sp, #0
 80038b6:	6078      	str	r0, [r7, #4]
 80038b8:	460b      	mov	r3, r1
 80038ba:	807b      	strh	r3, [r7, #2]
	sp->storeCommand(CMD_FILL_WINDOW);//fill window
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	685b      	ldr	r3, [r3, #4]
 80038c0:	2200      	movs	r2, #0
 80038c2:	2126      	movs	r1, #38	; 0x26
 80038c4:	4618      	mov	r0, r3
 80038c6:	f7fd fdc3 	bl	8001450 <_ZN10SPI1_class12storeCommandEi8CommandE>
	sp->storeCommand(ENABLE_FILL);
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	685b      	ldr	r3, [r3, #4]
 80038ce:	2200      	movs	r2, #0
 80038d0:	2101      	movs	r1, #1
 80038d2:	4618      	mov	r0, r3
 80038d4:	f7fd fdbc 	bl	8001450 <_ZN10SPI1_class12storeCommandEi8CommandE>
	sp->storeCommand(CMD_DRAW_RECTANGLE);//draw rectangle
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	685b      	ldr	r3, [r3, #4]
 80038dc:	2200      	movs	r2, #0
 80038de:	2122      	movs	r1, #34	; 0x22
 80038e0:	4618      	mov	r0, r3
 80038e2:	f7fd fdb5 	bl	8001450 <_ZN10SPI1_class12storeCommandEi8CommandE>
	sp->storeCommand(0);//start column
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	685b      	ldr	r3, [r3, #4]
 80038ea:	2200      	movs	r2, #0
 80038ec:	2100      	movs	r1, #0
 80038ee:	4618      	mov	r0, r3
 80038f0:	f7fd fdae 	bl	8001450 <_ZN10SPI1_class12storeCommandEi8CommandE>
	sp->storeCommand(0);//start row
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	685b      	ldr	r3, [r3, #4]
 80038f8:	2200      	movs	r2, #0
 80038fa:	2100      	movs	r1, #0
 80038fc:	4618      	mov	r0, r3
 80038fe:	f7fd fda7 	bl	8001450 <_ZN10SPI1_class12storeCommandEi8CommandE>
	sp->storeCommand(95);//end column
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	685b      	ldr	r3, [r3, #4]
 8003906:	2200      	movs	r2, #0
 8003908:	215f      	movs	r1, #95	; 0x5f
 800390a:	4618      	mov	r0, r3
 800390c:	f7fd fda0 	bl	8001450 <_ZN10SPI1_class12storeCommandEi8CommandE>
	sp->storeCommand(63);//end row
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	685b      	ldr	r3, [r3, #4]
 8003914:	2200      	movs	r2, #0
 8003916:	213f      	movs	r1, #63	; 0x3f
 8003918:	4618      	mov	r0, r3
 800391a:	f7fd fd99 	bl	8001450 <_ZN10SPI1_class12storeCommandEi8CommandE>

	//frame
	sp->storeCommand((color >> 9) & 0x3F);//R
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	6858      	ldr	r0, [r3, #4]
 8003922:	887b      	ldrh	r3, [r7, #2]
 8003924:	125b      	asrs	r3, r3, #9
 8003926:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800392a:	2200      	movs	r2, #0
 800392c:	4619      	mov	r1, r3
 800392e:	f7fd fd8f 	bl	8001450 <_ZN10SPI1_class12storeCommandEi8CommandE>
	sp->storeCommand((color >> 4) & 0x3F);//G
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	6858      	ldr	r0, [r3, #4]
 8003936:	887b      	ldrh	r3, [r7, #2]
 8003938:	111b      	asrs	r3, r3, #4
 800393a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800393e:	2200      	movs	r2, #0
 8003940:	4619      	mov	r1, r3
 8003942:	f7fd fd85 	bl	8001450 <_ZN10SPI1_class12storeCommandEi8CommandE>
	sp->storeCommand((color << 2) & 0x3F);//B
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	6858      	ldr	r0, [r3, #4]
 800394a:	887b      	ldrh	r3, [r7, #2]
 800394c:	009b      	lsls	r3, r3, #2
 800394e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003952:	2200      	movs	r2, #0
 8003954:	4619      	mov	r1, r3
 8003956:	f7fd fd7b 	bl	8001450 <_ZN10SPI1_class12storeCommandEi8CommandE>

	//fill
	sp->storeCommand((color >> 9) & 0x3F);//R
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	6858      	ldr	r0, [r3, #4]
 800395e:	887b      	ldrh	r3, [r7, #2]
 8003960:	125b      	asrs	r3, r3, #9
 8003962:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003966:	2200      	movs	r2, #0
 8003968:	4619      	mov	r1, r3
 800396a:	f7fd fd71 	bl	8001450 <_ZN10SPI1_class12storeCommandEi8CommandE>
	sp->storeCommand((color >> 4) & 0x3F);//G
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	6858      	ldr	r0, [r3, #4]
 8003972:	887b      	ldrh	r3, [r7, #2]
 8003974:	111b      	asrs	r3, r3, #4
 8003976:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800397a:	2200      	movs	r2, #0
 800397c:	4619      	mov	r1, r3
 800397e:	f7fd fd67 	bl	8001450 <_ZN10SPI1_class12storeCommandEi8CommandE>
	sp->storeCommand((color << 2) & 0x3F);//B
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	6858      	ldr	r0, [r3, #4]
 8003986:	887b      	ldrh	r3, [r7, #2]
 8003988:	009b      	lsls	r3, r3, #2
 800398a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800398e:	2200      	movs	r2, #0
 8003990:	4619      	mov	r1, r3
 8003992:	f7fd fd5d 	bl	8001450 <_ZN10SPI1_class12storeCommandEi8CommandE>
	sp->send();
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	685b      	ldr	r3, [r3, #4]
 800399a:	681b      	ldr	r3, [r3, #0]
 800399c:	330c      	adds	r3, #12
 800399e:	681b      	ldr	r3, [r3, #0]
 80039a0:	687a      	ldr	r2, [r7, #4]
 80039a2:	6852      	ldr	r2, [r2, #4]
 80039a4:	4610      	mov	r0, r2
 80039a6:	4798      	blx	r3
}
 80039a8:	bf00      	nop
 80039aa:	3708      	adds	r7, #8
 80039ac:	46bd      	mov	sp, r7
 80039ae:	bd80      	pop	{r7, pc}

080039b0 <_ZNSt5queueIiSt5dequeIiSaIiEEED1Ev>:
   *  Members not found in @a normal containers are @c container_type,
   *  which is a typedef for the second Sequence parameter, and @c push and
   *  @c pop, which are standard %queue/FIFO operations.
  */
  template<typename _Tp, typename _Sequence = deque<_Tp> >
    class queue
 80039b0:	b580      	push	{r7, lr}
 80039b2:	b082      	sub	sp, #8
 80039b4:	af00      	add	r7, sp, #0
 80039b6:	6078      	str	r0, [r7, #4]
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	4618      	mov	r0, r3
 80039bc:	f000 f9a6 	bl	8003d0c <_ZNSt5dequeIiSaIiEED1Ev>
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	4618      	mov	r0, r3
 80039c4:	3708      	adds	r7, #8
 80039c6:	46bd      	mov	sp, r7
 80039c8:	bd80      	pop	{r7, pc}
 80039ca:	bf00      	nop

080039cc <_ZN7HIH6030C1Ev>:
 */

#include <Sensors/HIH6030.h>
#include <stdio.h>

HIH6030::HIH6030():
 80039cc:	b590      	push	{r4, r7, lr}
 80039ce:	b097      	sub	sp, #92	; 0x5c
 80039d0:	af00      	add	r7, sp, #0
 80039d2:	6078      	str	r0, [r7, #4]
	 m_temperature(0)
	,m_humidity(0)
	,m_sp(&SPI2_class::getInstance())
 80039d4:	4a2a      	ldr	r2, [pc, #168]	; (8003a80 <_ZN7HIH6030C1Ev+0xb4>)
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	601a      	str	r2, [r3, #0]
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	f04f 0200 	mov.w	r2, #0
 80039e0:	605a      	str	r2, [r3, #4]
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	f04f 0200 	mov.w	r2, #0
 80039e8:	609a      	str	r2, [r3, #8]
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	f103 040c 	add.w	r4, r3, #12
 80039f0:	f107 0308 	add.w	r3, r7, #8
 80039f4:	4618      	mov	r0, r3
 80039f6:	f000 f97b 	bl	8003cf0 <_ZNSt5dequeIiSaIiEEC1Ev>
 80039fa:	f107 0308 	add.w	r3, r7, #8
 80039fe:	4619      	mov	r1, r3
 8003a00:	4620      	mov	r0, r4
 8003a02:	f000 f9a9 	bl	8003d58 <_ZNSt5queueIiSt5dequeIiSaIiEEEC1ERKS2_>
 8003a06:	f107 0308 	add.w	r3, r7, #8
 8003a0a:	4618      	mov	r0, r3
 8003a0c:	f000 f97e 	bl	8003d0c <_ZNSt5dequeIiSaIiEED1Ev>
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	f103 0434 	add.w	r4, r3, #52	; 0x34
 8003a16:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8003a1a:	4618      	mov	r0, r3
 8003a1c:	f000 f968 	bl	8003cf0 <_ZNSt5dequeIiSaIiEEC1Ev>
 8003a20:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8003a24:	4619      	mov	r1, r3
 8003a26:	4620      	mov	r0, r4
 8003a28:	f000 f996 	bl	8003d58 <_ZNSt5queueIiSt5dequeIiSaIiEEEC1ERKS2_>
 8003a2c:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8003a30:	4618      	mov	r0, r3
 8003a32:	f000 f96b 	bl	8003d0c <_ZNSt5dequeIiSaIiEED1Ev>
 8003a36:	f7fe ff91 	bl	800295c <_ZN10SPI2_class11getInstanceEv>
 8003a3a:	4602      	mov	r2, r0
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	665a      	str	r2, [r3, #100]	; 0x64
{
	m_csSetting.gpioType = GPIOB;
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	4a10      	ldr	r2, [pc, #64]	; (8003a84 <_ZN7HIH6030C1Ev+0xb8>)
 8003a44:	65da      	str	r2, [r3, #92]	; 0x5c
	m_csSetting.csPin = GPIO_Pin_12;
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8003a4c:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
	m_sp->setBuffers(&m_inBuf,&m_outBuf);
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	6e58      	ldr	r0, [r3, #100]	; 0x64
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	f103 0134 	add.w	r1, r3, #52	; 0x34
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	330c      	adds	r3, #12
 8003a5e:	461a      	mov	r2, r3
 8003a60:	f7fe ffc8 	bl	80029f4 <_ZN10SPI2_class10setBuffersEPSt5queueIiSt5dequeIiSaIiEEES5_>
	m_sp->setCS(m_csSetting);
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	6e58      	ldr	r0, [r3, #100]	; 0x64
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	335c      	adds	r3, #92	; 0x5c
 8003a6c:	e893 0006 	ldmia.w	r3, {r1, r2}
 8003a70:	f7fe ffd2 	bl	8002a18 <_ZN10SPI2_class5setCSE6CSsetS>
}
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	4618      	mov	r0, r3
 8003a78:	375c      	adds	r7, #92	; 0x5c
 8003a7a:	46bd      	mov	sp, r7
 8003a7c:	bd90      	pop	{r4, r7, pc}
 8003a7e:	bf00      	nop
 8003a80:	08005a50 	.word	0x08005a50
 8003a84:	40010c00 	.word	0x40010c00

08003a88 <_ZN7HIH6030D1Ev>:

HIH6030::~HIH6030()
 8003a88:	b580      	push	{r7, lr}
 8003a8a:	b082      	sub	sp, #8
 8003a8c:	af00      	add	r7, sp, #0
 8003a8e:	6078      	str	r0, [r7, #4]
 8003a90:	4a0b      	ldr	r2, [pc, #44]	; (8003ac0 <_ZN7HIH6030D1Ev+0x38>)
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	601a      	str	r2, [r3, #0]
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	3334      	adds	r3, #52	; 0x34
 8003a9a:	4618      	mov	r0, r3
 8003a9c:	f7ff ff88 	bl	80039b0 <_ZNSt5queueIiSt5dequeIiSaIiEEED1Ev>
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	330c      	adds	r3, #12
 8003aa4:	4618      	mov	r0, r3
 8003aa6:	f7ff ff83 	bl	80039b0 <_ZNSt5queueIiSt5dequeIiSaIiEEED1Ev>
{

}
 8003aaa:	2300      	movs	r3, #0
 8003aac:	2b00      	cmp	r3, #0
 8003aae:	d002      	beq.n	8003ab6 <_ZN7HIH6030D1Ev+0x2e>
 8003ab0:	6878      	ldr	r0, [r7, #4]
 8003ab2:	f001 fc73 	bl	800539c <_ZdlPv>
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	4618      	mov	r0, r3
 8003aba:	3708      	adds	r7, #8
 8003abc:	46bd      	mov	sp, r7
 8003abe:	bd80      	pop	{r7, pc}
 8003ac0:	08005a50 	.word	0x08005a50

08003ac4 <_ZN7HIH6030D0Ev>:
	m_csSetting.csPin = GPIO_Pin_12;
	m_sp->setBuffers(&m_inBuf,&m_outBuf);
	m_sp->setCS(m_csSetting);
}

HIH6030::~HIH6030()
 8003ac4:	b580      	push	{r7, lr}
 8003ac6:	b082      	sub	sp, #8
 8003ac8:	af00      	add	r7, sp, #0
 8003aca:	6078      	str	r0, [r7, #4]
{

}
 8003acc:	6878      	ldr	r0, [r7, #4]
 8003ace:	f7ff ffdb 	bl	8003a88 <_ZN7HIH6030D1Ev>
 8003ad2:	6878      	ldr	r0, [r7, #4]
 8003ad4:	f001 fc62 	bl	800539c <_ZdlPv>
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	4618      	mov	r0, r3
 8003adc:	3708      	adds	r7, #8
 8003ade:	46bd      	mov	sp, r7
 8003ae0:	bd80      	pop	{r7, pc}
 8003ae2:	bf00      	nop

08003ae4 <_ZN7HIH603014getTemperatureEv>:

int HIH6030::getTemperature()
{
 8003ae4:	b580      	push	{r7, lr}
 8003ae6:	b082      	sub	sp, #8
 8003ae8:	af00      	add	r7, sp, #0
 8003aea:	6078      	str	r0, [r7, #4]
	return (m_temperature * 100);
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	685b      	ldr	r3, [r3, #4]
 8003af0:	4906      	ldr	r1, [pc, #24]	; (8003b0c <_ZN7HIH603014getTemperatureEv+0x28>)
 8003af2:	4618      	mov	r0, r3
 8003af4:	f7fc fc9a 	bl	800042c <__aeabi_fmul>
 8003af8:	4603      	mov	r3, r0
 8003afa:	4618      	mov	r0, r3
 8003afc:	f7fc fde6 	bl	80006cc <__aeabi_f2iz>
 8003b00:	4603      	mov	r3, r0
}
 8003b02:	4618      	mov	r0, r3
 8003b04:	3708      	adds	r7, #8
 8003b06:	46bd      	mov	sp, r7
 8003b08:	bd80      	pop	{r7, pc}
 8003b0a:	bf00      	nop
 8003b0c:	42c80000 	.word	0x42c80000

08003b10 <_ZN7HIH603011getHumidityEv>:

int HIH6030::getHumidity()
{
 8003b10:	b580      	push	{r7, lr}
 8003b12:	b082      	sub	sp, #8
 8003b14:	af00      	add	r7, sp, #0
 8003b16:	6078      	str	r0, [r7, #4]
	return (m_humidity * 100);
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	689b      	ldr	r3, [r3, #8]
 8003b1c:	4906      	ldr	r1, [pc, #24]	; (8003b38 <_ZN7HIH603011getHumidityEv+0x28>)
 8003b1e:	4618      	mov	r0, r3
 8003b20:	f7fc fc84 	bl	800042c <__aeabi_fmul>
 8003b24:	4603      	mov	r3, r0
 8003b26:	4618      	mov	r0, r3
 8003b28:	f7fc fdd0 	bl	80006cc <__aeabi_f2iz>
 8003b2c:	4603      	mov	r3, r0
}
 8003b2e:	4618      	mov	r0, r3
 8003b30:	3708      	adds	r7, #8
 8003b32:	46bd      	mov	sp, r7
 8003b34:	bd80      	pop	{r7, pc}
 8003b36:	bf00      	nop
 8003b38:	42c80000 	.word	0x42c80000

08003b3c <_ZN7HIH603014measureRequestEv>:

void HIH6030::measureRequest()
{
 8003b3c:	b580      	push	{r7, lr}
 8003b3e:	b084      	sub	sp, #16
 8003b40:	af00      	add	r7, sp, #0
 8003b42:	6078      	str	r0, [r7, #4]
	if(m_sp->isBusy() ==  false)
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003b48:	681b      	ldr	r3, [r3, #0]
 8003b4a:	681b      	ldr	r3, [r3, #0]
 8003b4c:	687a      	ldr	r2, [r7, #4]
 8003b4e:	6e52      	ldr	r2, [r2, #100]	; 0x64
 8003b50:	4610      	mov	r0, r2
 8003b52:	4798      	blx	r3
 8003b54:	4603      	mov	r3, r0
 8003b56:	f083 0301 	eor.w	r3, r3, #1
 8003b5a:	b2db      	uxtb	r3, r3
 8003b5c:	2b00      	cmp	r3, #0
 8003b5e:	d013      	beq.n	8003b88 <_ZN7HIH603014measureRequestEv+0x4c>
	{
		m_outBuf.push(0xAA);
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	f103 020c 	add.w	r2, r3, #12
 8003b66:	23aa      	movs	r3, #170	; 0xaa
 8003b68:	60fb      	str	r3, [r7, #12]
 8003b6a:	f107 030c 	add.w	r3, r7, #12
 8003b6e:	4619      	mov	r1, r3
 8003b70:	4610      	mov	r0, r2
 8003b72:	f7ff f8a9 	bl	8002cc8 <_ZNSt5queueIiSt5dequeIiSaIiEEE4pushERKi>
		m_sp->send();
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003b7a:	681b      	ldr	r3, [r3, #0]
 8003b7c:	330c      	adds	r3, #12
 8003b7e:	681b      	ldr	r3, [r3, #0]
 8003b80:	687a      	ldr	r2, [r7, #4]
 8003b82:	6e52      	ldr	r2, [r2, #100]	; 0x64
 8003b84:	4610      	mov	r0, r2
 8003b86:	4798      	blx	r3
	}
	m_inBuf.pop();
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	3334      	adds	r3, #52	; 0x34
 8003b8c:	4618      	mov	r0, r3
 8003b8e:	f7ff f88f 	bl	8002cb0 <_ZNSt5queueIiSt5dequeIiSaIiEEE3popEv>
}
 8003b92:	bf00      	nop
 8003b94:	3710      	adds	r7, #16
 8003b96:	46bd      	mov	sp, r7
 8003b98:	bd80      	pop	{r7, pc}
 8003b9a:	bf00      	nop

08003b9c <_ZN7HIH603015getMeasurementsEv>:

void HIH6030::getMeasurements()
{
 8003b9c:	b580      	push	{r7, lr}
 8003b9e:	b08a      	sub	sp, #40	; 0x28
 8003ba0:	af00      	add	r7, sp, #0
 8003ba2:	6078      	str	r0, [r7, #4]
	if(m_sp->isBusy() ==  false)
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003ba8:	681b      	ldr	r3, [r3, #0]
 8003baa:	681b      	ldr	r3, [r3, #0]
 8003bac:	687a      	ldr	r2, [r7, #4]
 8003bae:	6e52      	ldr	r2, [r2, #100]	; 0x64
 8003bb0:	4610      	mov	r0, r2
 8003bb2:	4798      	blx	r3
 8003bb4:	4603      	mov	r3, r0
 8003bb6:	f083 0301 	eor.w	r3, r3, #1
 8003bba:	b2db      	uxtb	r3, r3
 8003bbc:	2b00      	cmp	r3, #0
 8003bbe:	d034      	beq.n	8003c2a <_ZN7HIH603015getMeasurementsEv+0x8e>
	{
		m_outBuf.push(0xFF);
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	f103 020c 	add.w	r2, r3, #12
 8003bc6:	23ff      	movs	r3, #255	; 0xff
 8003bc8:	60bb      	str	r3, [r7, #8]
 8003bca:	f107 0308 	add.w	r3, r7, #8
 8003bce:	4619      	mov	r1, r3
 8003bd0:	4610      	mov	r0, r2
 8003bd2:	f7ff f879 	bl	8002cc8 <_ZNSt5queueIiSt5dequeIiSaIiEEE4pushERKi>
		m_outBuf.push(0xFF);
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	f103 020c 	add.w	r2, r3, #12
 8003bdc:	23ff      	movs	r3, #255	; 0xff
 8003bde:	60fb      	str	r3, [r7, #12]
 8003be0:	f107 030c 	add.w	r3, r7, #12
 8003be4:	4619      	mov	r1, r3
 8003be6:	4610      	mov	r0, r2
 8003be8:	f7ff f86e 	bl	8002cc8 <_ZNSt5queueIiSt5dequeIiSaIiEEE4pushERKi>
		m_outBuf.push(0xFF);
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	f103 020c 	add.w	r2, r3, #12
 8003bf2:	23ff      	movs	r3, #255	; 0xff
 8003bf4:	613b      	str	r3, [r7, #16]
 8003bf6:	f107 0310 	add.w	r3, r7, #16
 8003bfa:	4619      	mov	r1, r3
 8003bfc:	4610      	mov	r0, r2
 8003bfe:	f7ff f863 	bl	8002cc8 <_ZNSt5queueIiSt5dequeIiSaIiEEE4pushERKi>
		m_outBuf.push(0xFF);
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	f103 020c 	add.w	r2, r3, #12
 8003c08:	23ff      	movs	r3, #255	; 0xff
 8003c0a:	617b      	str	r3, [r7, #20]
 8003c0c:	f107 0314 	add.w	r3, r7, #20
 8003c10:	4619      	mov	r1, r3
 8003c12:	4610      	mov	r0, r2
 8003c14:	f7ff f858 	bl	8002cc8 <_ZNSt5queueIiSt5dequeIiSaIiEEE4pushERKi>
		m_sp->send();
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003c1c:	681b      	ldr	r3, [r3, #0]
 8003c1e:	330c      	adds	r3, #12
 8003c20:	681b      	ldr	r3, [r3, #0]
 8003c22:	687a      	ldr	r2, [r7, #4]
 8003c24:	6e52      	ldr	r2, [r2, #100]	; 0x64
 8003c26:	4610      	mov	r0, r2
 8003c28:	4798      	blx	r3
	}

	int tmp = 0;
 8003c2a:	2300      	movs	r3, #0
 8003c2c:	623b      	str	r3, [r7, #32]
	unsigned int pomiar = 0;
 8003c2e:	2300      	movs	r3, #0
 8003c30:	627b      	str	r3, [r7, #36]	; 0x24
	do
	{
		tmp = m_inBuf.front();
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	3334      	adds	r3, #52	; 0x34
 8003c36:	4618      	mov	r0, r3
 8003c38:	f7ff f82c 	bl	8002c94 <_ZNSt5queueIiSt5dequeIiSaIiEEE5frontEv>
 8003c3c:	4603      	mov	r3, r0
 8003c3e:	681b      	ldr	r3, [r3, #0]
 8003c40:	623b      	str	r3, [r7, #32]
		m_inBuf.pop();
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	3334      	adds	r3, #52	; 0x34
 8003c46:	4618      	mov	r0, r3
 8003c48:	f7ff f832 	bl	8002cb0 <_ZNSt5queueIiSt5dequeIiSaIiEEE3popEv>
		pomiar = (pomiar << 8);
 8003c4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c4e:	021b      	lsls	r3, r3, #8
 8003c50:	627b      	str	r3, [r7, #36]	; 0x24
		pomiar |= tmp;
 8003c52:	6a3b      	ldr	r3, [r7, #32]
 8003c54:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003c56:	4313      	orrs	r3, r2
 8003c58:	627b      	str	r3, [r7, #36]	; 0x24

	}while(m_inBuf.size());
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	3334      	adds	r3, #52	; 0x34
 8003c5e:	4618      	mov	r0, r3
 8003c60:	f7ff f80a 	bl	8002c78 <_ZNKSt5queueIiSt5dequeIiSaIiEEE4sizeEv>
 8003c64:	4603      	mov	r3, r0
		m_sp->send();
	}

	int tmp = 0;
	unsigned int pomiar = 0;
	do
 8003c66:	2b00      	cmp	r3, #0
 8003c68:	bf14      	ite	ne
 8003c6a:	2301      	movne	r3, #1
 8003c6c:	2300      	moveq	r3, #0
 8003c6e:	b2db      	uxtb	r3, r3
 8003c70:	2b00      	cmp	r3, #0
 8003c72:	d000      	beq.n	8003c76 <_ZN7HIH603015getMeasurementsEv+0xda>
 8003c74:	e7dd      	b.n	8003c32 <_ZN7HIH603015getMeasurementsEv+0x96>
		pomiar = (pomiar << 8);
		pomiar |= tmp;

	}while(m_inBuf.size());

	int h = (pomiar >> 16 ) & 0x3FFF;
 8003c76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c78:	0c1b      	lsrs	r3, r3, #16
 8003c7a:	f3c3 030d 	ubfx	r3, r3, #0, #14
 8003c7e:	61fb      	str	r3, [r7, #28]
	int t = (pomiar >> 2 ) & 0x3FFF;
 8003c80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c82:	089b      	lsrs	r3, r3, #2
 8003c84:	f3c3 030d 	ubfx	r3, r3, #0, #14
 8003c88:	61bb      	str	r3, [r7, #24]

	m_humidity 	= (((float)h * 100) / 16382);
 8003c8a:	69f8      	ldr	r0, [r7, #28]
 8003c8c:	f7fc fb7a 	bl	8000384 <__aeabi_i2f>
 8003c90:	4603      	mov	r3, r0
 8003c92:	4913      	ldr	r1, [pc, #76]	; (8003ce0 <_ZN7HIH603015getMeasurementsEv+0x144>)
 8003c94:	4618      	mov	r0, r3
 8003c96:	f7fc fbc9 	bl	800042c <__aeabi_fmul>
 8003c9a:	4603      	mov	r3, r0
 8003c9c:	4911      	ldr	r1, [pc, #68]	; (8003ce4 <_ZN7HIH603015getMeasurementsEv+0x148>)
 8003c9e:	4618      	mov	r0, r3
 8003ca0:	f7fc fc78 	bl	8000594 <__aeabi_fdiv>
 8003ca4:	4603      	mov	r3, r0
 8003ca6:	461a      	mov	r2, r3
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	609a      	str	r2, [r3, #8]
	m_temperature = (((float)t * 165) / 16382)-40;
 8003cac:	69b8      	ldr	r0, [r7, #24]
 8003cae:	f7fc fb69 	bl	8000384 <__aeabi_i2f>
 8003cb2:	4603      	mov	r3, r0
 8003cb4:	490c      	ldr	r1, [pc, #48]	; (8003ce8 <_ZN7HIH603015getMeasurementsEv+0x14c>)
 8003cb6:	4618      	mov	r0, r3
 8003cb8:	f7fc fbb8 	bl	800042c <__aeabi_fmul>
 8003cbc:	4603      	mov	r3, r0
 8003cbe:	4909      	ldr	r1, [pc, #36]	; (8003ce4 <_ZN7HIH603015getMeasurementsEv+0x148>)
 8003cc0:	4618      	mov	r0, r3
 8003cc2:	f7fc fc67 	bl	8000594 <__aeabi_fdiv>
 8003cc6:	4603      	mov	r3, r0
 8003cc8:	4908      	ldr	r1, [pc, #32]	; (8003cec <_ZN7HIH603015getMeasurementsEv+0x150>)
 8003cca:	4618      	mov	r0, r3
 8003ccc:	f7fc faa4 	bl	8000218 <__aeabi_fsub>
 8003cd0:	4603      	mov	r3, r0
 8003cd2:	461a      	mov	r2, r3
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	605a      	str	r2, [r3, #4]
}
 8003cd8:	bf00      	nop
 8003cda:	3728      	adds	r7, #40	; 0x28
 8003cdc:	46bd      	mov	sp, r7
 8003cde:	bd80      	pop	{r7, pc}
 8003ce0:	42c80000 	.word	0x42c80000
 8003ce4:	467ff800 	.word	0x467ff800
 8003ce8:	43250000 	.word	0x43250000
 8003cec:	42200000 	.word	0x42200000

08003cf0 <_ZNSt5dequeIiSaIiEEC1Ev>:
      // (assign() and get_allocator() are also listed in this section)

      /**
       *  @brief  Creates a %deque with no elements.
       */
      deque() : _Base() { }
 8003cf0:	b580      	push	{r7, lr}
 8003cf2:	b082      	sub	sp, #8
 8003cf4:	af00      	add	r7, sp, #0
 8003cf6:	6078      	str	r0, [r7, #4]
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	4618      	mov	r0, r3
 8003cfc:	f000 f848 	bl	8003d90 <_ZNSt11_Deque_baseIiSaIiEEC1Ev>
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	4618      	mov	r0, r3
 8003d04:	3708      	adds	r7, #8
 8003d06:	46bd      	mov	sp, r7
 8003d08:	bd80      	pop	{r7, pc}
 8003d0a:	bf00      	nop

08003d0c <_ZNSt5dequeIiSaIiEED1Ev>:
      /**
       *  The dtor only erases the elements, and note that if the elements
       *  themselves are pointers, the pointed-to memory is not touched in any
       *  way.  Managing the pointer is the user's responsibility.
       */
      ~deque()
 8003d0c:	b580      	push	{r7, lr}
 8003d0e:	b08a      	sub	sp, #40	; 0x28
 8003d10:	af00      	add	r7, sp, #0
 8003d12:	6078      	str	r0, [r7, #4]
      { _M_destroy_data(begin(), end(), _M_get_Tp_allocator()); }
 8003d14:	f107 0308 	add.w	r3, r7, #8
 8003d18:	6879      	ldr	r1, [r7, #4]
 8003d1a:	4618      	mov	r0, r3
 8003d1c:	f7ff f872 	bl	8002e04 <_ZNSt5dequeIiSaIiEE5beginEv>
 8003d20:	f107 0318 	add.w	r3, r7, #24
 8003d24:	6879      	ldr	r1, [r7, #4]
 8003d26:	4618      	mov	r0, r3
 8003d28:	f000 f866 	bl	8003df8 <_ZNSt5dequeIiSaIiEE3endEv>
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	4618      	mov	r0, r3
 8003d30:	f7ff f924 	bl	8002f7c <_ZNSt11_Deque_baseIiSaIiEE19_M_get_Tp_allocatorEv>
 8003d34:	4603      	mov	r3, r0
 8003d36:	f107 0218 	add.w	r2, r7, #24
 8003d3a:	f107 0108 	add.w	r1, r7, #8
 8003d3e:	6878      	ldr	r0, [r7, #4]
 8003d40:	f000 f86a 	bl	8003e18 <_ZNSt5dequeIiSaIiEE15_M_destroy_dataESt15_Deque_iteratorIiRiPiES5_RKS0_>
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	4618      	mov	r0, r3
 8003d48:	f000 f834 	bl	8003db4 <_ZNSt11_Deque_baseIiSaIiEED1Ev>
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	4618      	mov	r0, r3
 8003d50:	3728      	adds	r7, #40	; 0x28
 8003d52:	46bd      	mov	sp, r7
 8003d54:	bd80      	pop	{r7, pc}
 8003d56:	bf00      	nop

08003d58 <_ZNSt5queueIiSt5dequeIiSaIiEEEC1ERKS2_>:
      /**
       *  @brief  Default constructor creates no elements.
       */
#if __cplusplus < 201103L
      explicit
      queue(const _Sequence& __c = _Sequence())
 8003d58:	b580      	push	{r7, lr}
 8003d5a:	b082      	sub	sp, #8
 8003d5c:	af00      	add	r7, sp, #0
 8003d5e:	6078      	str	r0, [r7, #4]
 8003d60:	6039      	str	r1, [r7, #0]
      : c(__c) { }
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	6839      	ldr	r1, [r7, #0]
 8003d66:	4618      	mov	r0, r3
 8003d68:	f000 f862 	bl	8003e30 <_ZNSt5dequeIiSaIiEEC1ERKS1_>
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	4618      	mov	r0, r3
 8003d70:	3708      	adds	r7, #8
 8003d72:	46bd      	mov	sp, r7
 8003d74:	bd80      	pop	{r7, pc}
 8003d76:	bf00      	nop

08003d78 <_ZNSt11_Deque_baseIiSaIiEE11_Deque_implD1Ev>:
      typedef typename iterator::_Map_pointer _Map_pointer;

      //This struct encapsulates the implementation of the std::deque
      //standard container and at the same time makes use of the EBO
      //for empty allocators.
      struct _Deque_impl
 8003d78:	b580      	push	{r7, lr}
 8003d7a:	b082      	sub	sp, #8
 8003d7c:	af00      	add	r7, sp, #0
 8003d7e:	6078      	str	r0, [r7, #4]
 8003d80:	6878      	ldr	r0, [r7, #4]
 8003d82:	f000 f8bb 	bl	8003efc <_ZNSaIiED1Ev>
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	4618      	mov	r0, r3
 8003d8a:	3708      	adds	r7, #8
 8003d8c:	46bd      	mov	sp, r7
 8003d8e:	bd80      	pop	{r7, pc}

08003d90 <_ZNSt11_Deque_baseIiSaIiEEC1Ev>:
      { return allocator_type(_M_get_Tp_allocator()); }

      typedef _Deque_iterator<_Tp, _Tp&, _Ptr>          iterator;
      typedef _Deque_iterator<_Tp, const _Tp&, _Ptr_const>   const_iterator;

      _Deque_base()
 8003d90:	b580      	push	{r7, lr}
 8003d92:	b082      	sub	sp, #8
 8003d94:	af00      	add	r7, sp, #0
 8003d96:	6078      	str	r0, [r7, #4]
      : _M_impl()
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	4618      	mov	r0, r3
 8003d9c:	f000 f892 	bl	8003ec4 <_ZNSt11_Deque_baseIiSaIiEE11_Deque_implC1Ev>
      { _M_initialize_map(0); }
 8003da0:	2100      	movs	r1, #0
 8003da2:	6878      	ldr	r0, [r7, #4]
 8003da4:	f000 f8b6 	bl	8003f14 <_ZNSt11_Deque_baseIiSaIiEE17_M_initialize_mapEj>
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	4618      	mov	r0, r3
 8003dac:	3708      	adds	r7, #8
 8003dae:	46bd      	mov	sp, r7
 8003db0:	bd80      	pop	{r7, pc}
 8003db2:	bf00      	nop

08003db4 <_ZNSt11_Deque_baseIiSaIiEED1Ev>:
      }
#endif
    };

  template<typename _Tp, typename _Alloc>
    _Deque_base<_Tp, _Alloc>::
 8003db4:	b580      	push	{r7, lr}
 8003db6:	b082      	sub	sp, #8
 8003db8:	af00      	add	r7, sp, #0
 8003dba:	6078      	str	r0, [r7, #4]
    ~_Deque_base() _GLIBCXX_NOEXCEPT
    {
      if (this->_M_impl._M_map)
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	681b      	ldr	r3, [r3, #0]
 8003dc0:	2b00      	cmp	r3, #0
 8003dc2:	d010      	beq.n	8003de6 <_ZNSt11_Deque_baseIiSaIiEED1Ev+0x32>
	{
	  _M_destroy_nodes(this->_M_impl._M_start._M_node,
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	6959      	ldr	r1, [r3, #20]
			   this->_M_impl._M_finish._M_node + 1);
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    _Deque_base<_Tp, _Alloc>::
    ~_Deque_base() _GLIBCXX_NOEXCEPT
    {
      if (this->_M_impl._M_map)
	{
	  _M_destroy_nodes(this->_M_impl._M_start._M_node,
 8003dcc:	3304      	adds	r3, #4
 8003dce:	461a      	mov	r2, r3
 8003dd0:	6878      	ldr	r0, [r7, #4]
 8003dd2:	f000 f903 	bl	8003fdc <_ZNSt11_Deque_baseIiSaIiEE16_M_destroy_nodesEPPiS3_>
			   this->_M_impl._M_finish._M_node + 1);
	  _M_deallocate_map(this->_M_impl._M_map, this->_M_impl._M_map_size);
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	6819      	ldr	r1, [r3, #0]
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	685b      	ldr	r3, [r3, #4]
 8003dde:	461a      	mov	r2, r3
 8003de0:	6878      	ldr	r0, [r7, #4]
 8003de2:	f7ff fa5d 	bl	80032a0 <_ZNSt11_Deque_baseIiSaIiEE17_M_deallocate_mapEPPij>
	}
    }
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	4618      	mov	r0, r3
 8003dea:	f7ff ffc5 	bl	8003d78 <_ZNSt11_Deque_baseIiSaIiEE11_Deque_implD1Ev>
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	4618      	mov	r0, r3
 8003df2:	3708      	adds	r7, #8
 8003df4:	46bd      	mov	sp, r7
 8003df6:	bd80      	pop	{r7, pc}

08003df8 <_ZNSt5dequeIiSaIiEE3endEv>:
       *  Returns a read/write iterator that points one past the last
       *  element in the %deque.  Iteration is done in ordinary
       *  element order.
       */
      iterator
      end() _GLIBCXX_NOEXCEPT
 8003df8:	b580      	push	{r7, lr}
 8003dfa:	b082      	sub	sp, #8
 8003dfc:	af00      	add	r7, sp, #0
 8003dfe:	6078      	str	r0, [r7, #4]
 8003e00:	6039      	str	r1, [r7, #0]
      { return this->_M_impl._M_finish; }
 8003e02:	683b      	ldr	r3, [r7, #0]
 8003e04:	3318      	adds	r3, #24
 8003e06:	4619      	mov	r1, r3
 8003e08:	6878      	ldr	r0, [r7, #4]
 8003e0a:	f7ff f891 	bl	8002f30 <_ZNSt15_Deque_iteratorIiRiPiEC1ERKS2_>
 8003e0e:	6878      	ldr	r0, [r7, #4]
 8003e10:	3708      	adds	r7, #8
 8003e12:	46bd      	mov	sp, r7
 8003e14:	bd80      	pop	{r7, pc}
 8003e16:	bf00      	nop

08003e18 <_ZNSt5dequeIiSaIiEE15_M_destroy_dataESt15_Deque_iteratorIiRiPiES5_RKS0_>:
        void
        _M_destroy_data(iterator __first, iterator __last, const _Alloc1&)
        { _M_destroy_data_aux(__first, __last); }

      void
      _M_destroy_data(iterator __first, iterator __last,
 8003e18:	b480      	push	{r7}
 8003e1a:	b08d      	sub	sp, #52	; 0x34
 8003e1c:	af00      	add	r7, sp, #0
 8003e1e:	60f8      	str	r0, [r7, #12]
 8003e20:	60b9      	str	r1, [r7, #8]
 8003e22:	607a      	str	r2, [r7, #4]
 8003e24:	603b      	str	r3, [r7, #0]
		      const std::allocator<_Tp>&)
      {
	if (!__has_trivial_destructor(value_type))
	  _M_destroy_data_aux(__first, __last);
      }
 8003e26:	bf00      	nop
 8003e28:	3734      	adds	r7, #52	; 0x34
 8003e2a:	46bd      	mov	sp, r7
 8003e2c:	bc80      	pop	{r7}
 8003e2e:	4770      	bx	lr

08003e30 <_ZNSt5dequeIiSaIiEEC1ERKS1_>:
       *  @param  __x  A %deque of identical element and allocator types.
       *
       *  The newly-created %deque uses a copy of the allocation object used
       *  by @a __x.
       */
      deque(const deque& __x)
 8003e30:	b5b0      	push	{r4, r5, r7, lr}
 8003e32:	b09a      	sub	sp, #104	; 0x68
 8003e34:	af08      	add	r7, sp, #32
 8003e36:	6178      	str	r0, [r7, #20]
 8003e38:	6139      	str	r1, [r7, #16]
      : _Base(_Alloc_traits::_S_select_on_copy(__x._M_get_Tp_allocator()),
	      __x.size())
 8003e3a:	697c      	ldr	r4, [r7, #20]
       *
       *  The newly-created %deque uses a copy of the allocation object used
       *  by @a __x.
       */
      deque(const deque& __x)
      : _Base(_Alloc_traits::_S_select_on_copy(__x._M_get_Tp_allocator()),
 8003e3c:	693b      	ldr	r3, [r7, #16]
 8003e3e:	4618      	mov	r0, r3
 8003e40:	f7ff fb30 	bl	80034a4 <_ZNKSt11_Deque_baseIiSaIiEE19_M_get_Tp_allocatorEv>
 8003e44:	4603      	mov	r3, r0
 8003e46:	4618      	mov	r0, r3
 8003e48:	f000 f8e2 	bl	8004010 <_ZN9__gnu_cxx14__alloc_traitsISaIiEE17_S_select_on_copyERKS1_>
 8003e4c:	4605      	mov	r5, r0
	      __x.size())
 8003e4e:	6938      	ldr	r0, [r7, #16]
 8003e50:	f7fe ff48 	bl	8002ce4 <_ZNKSt5dequeIiSaIiEE4sizeEv>
 8003e54:	4603      	mov	r3, r0
 8003e56:	461a      	mov	r2, r3
 8003e58:	4629      	mov	r1, r5
 8003e5a:	4620      	mov	r0, r4
 8003e5c:	f000 f8e2 	bl	8004024 <_ZNSt11_Deque_baseIiSaIiEEC1ERKS0_j>
      { std::__uninitialized_copy_a(__x.begin(), __x.end(), 
 8003e60:	f107 0318 	add.w	r3, r7, #24
 8003e64:	6939      	ldr	r1, [r7, #16]
 8003e66:	4618      	mov	r0, r3
 8003e68:	f000 f8f0 	bl	800404c <_ZNKSt5dequeIiSaIiEE5beginEv>
 8003e6c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8003e70:	6939      	ldr	r1, [r7, #16]
 8003e72:	4618      	mov	r0, r3
 8003e74:	f000 f8fa 	bl	800406c <_ZNKSt5dequeIiSaIiEE3endEv>
 8003e78:	697b      	ldr	r3, [r7, #20]
 8003e7a:	f103 0208 	add.w	r2, r3, #8
 8003e7e:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8003e82:	4611      	mov	r1, r2
 8003e84:	4618      	mov	r0, r3
 8003e86:	f7ff f853 	bl	8002f30 <_ZNSt15_Deque_iteratorIiRiPiEC1ERKS2_>
				    this->_M_impl._M_start,
				    _M_get_Tp_allocator()); }
 8003e8a:	697b      	ldr	r3, [r7, #20]
 8003e8c:	4618      	mov	r0, r3
 8003e8e:	f7ff f875 	bl	8002f7c <_ZNSt11_Deque_baseIiSaIiEE19_M_get_Tp_allocatorEv>
 8003e92:	4603      	mov	r3, r0
       *  by @a __x.
       */
      deque(const deque& __x)
      : _Base(_Alloc_traits::_S_select_on_copy(__x._M_get_Tp_allocator()),
	      __x.size())
      { std::__uninitialized_copy_a(__x.begin(), __x.end(), 
 8003e94:	463d      	mov	r5, r7
 8003e96:	9306      	str	r3, [sp, #24]
 8003e98:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8003e9c:	9305      	str	r3, [sp, #20]
 8003e9e:	ac01      	add	r4, sp, #4
 8003ea0:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8003ea4:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8003ea6:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8003eaa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003eac:	9300      	str	r3, [sp, #0]
 8003eae:	f107 0318 	add.w	r3, r7, #24
 8003eb2:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003eb4:	4628      	mov	r0, r5
 8003eb6:	f000 f8e9 	bl	800408c <_ZSt22__uninitialized_copy_aISt15_Deque_iteratorIiRKiPS1_ES0_IiRiPiEiET0_T_S9_S8_RSaIT1_E>
				    this->_M_impl._M_start,
				    _M_get_Tp_allocator()); }
 8003eba:	697b      	ldr	r3, [r7, #20]
 8003ebc:	4618      	mov	r0, r3
 8003ebe:	3748      	adds	r7, #72	; 0x48
 8003ec0:	46bd      	mov	sp, r7
 8003ec2:	bdb0      	pop	{r4, r5, r7, pc}

08003ec4 <_ZNSt11_Deque_baseIiSaIiEE11_Deque_implC1Ev>:
	_Map_pointer _M_map;
	size_t _M_map_size;
	iterator _M_start;
	iterator _M_finish;

	_Deque_impl()
 8003ec4:	b580      	push	{r7, lr}
 8003ec6:	b082      	sub	sp, #8
 8003ec8:	af00      	add	r7, sp, #0
 8003eca:	6078      	str	r0, [r7, #4]
	: _Tp_alloc_type(), _M_map(), _M_map_size(0),
	  _M_start(), _M_finish()
 8003ecc:	6878      	ldr	r0, [r7, #4]
 8003ece:	f000 f905 	bl	80040dc <_ZNSaIiEC1Ev>
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	2200      	movs	r2, #0
 8003ed6:	601a      	str	r2, [r3, #0]
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	2200      	movs	r2, #0
 8003edc:	605a      	str	r2, [r3, #4]
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	3308      	adds	r3, #8
 8003ee2:	4618      	mov	r0, r3
 8003ee4:	f000 f906 	bl	80040f4 <_ZNSt15_Deque_iteratorIiRiPiEC1Ev>
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	3318      	adds	r3, #24
 8003eec:	4618      	mov	r0, r3
 8003eee:	f000 f901 	bl	80040f4 <_ZNSt15_Deque_iteratorIiRiPiEC1Ev>
	{ }
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	4618      	mov	r0, r3
 8003ef6:	3708      	adds	r7, #8
 8003ef8:	46bd      	mov	sp, r7
 8003efa:	bd80      	pop	{r7, pc}

08003efc <_ZNSaIiED1Ev>:

      ~allocator() throw() { }
 8003efc:	b580      	push	{r7, lr}
 8003efe:	b082      	sub	sp, #8
 8003f00:	af00      	add	r7, sp, #0
 8003f02:	6078      	str	r0, [r7, #4]
 8003f04:	6878      	ldr	r0, [r7, #4]
 8003f06:	f000 f90b 	bl	8004120 <_ZN9__gnu_cxx13new_allocatorIiED1Ev>
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	4618      	mov	r0, r3
 8003f0e:	3708      	adds	r7, #8
 8003f10:	46bd      	mov	sp, r7
 8003f12:	bd80      	pop	{r7, pc}

08003f14 <_ZNSt11_Deque_baseIiSaIiEE17_M_initialize_mapEj>:
   *
   *  The initial underlying memory layout is a bit complicated...
  */
  template<typename _Tp, typename _Alloc>
    void
    _Deque_base<_Tp, _Alloc>::
 8003f14:	b590      	push	{r4, r7, lr}
 8003f16:	b089      	sub	sp, #36	; 0x24
 8003f18:	af00      	add	r7, sp, #0
 8003f1a:	6078      	str	r0, [r7, #4]
 8003f1c:	6039      	str	r1, [r7, #0]
    _M_initialize_map(size_t __num_elements)
    {
      const size_t __num_nodes = (__num_elements/ __deque_buf_size(sizeof(_Tp))
 8003f1e:	2004      	movs	r0, #4
 8003f20:	f7fd f92e 	bl	8001180 <_ZSt16__deque_buf_sizej>
 8003f24:	4602      	mov	r2, r0
				  + 1);
 8003f26:	683b      	ldr	r3, [r7, #0]
 8003f28:	fbb3 f3f2 	udiv	r3, r3, r2
 8003f2c:	3301      	adds	r3, #1
 8003f2e:	61fb      	str	r3, [r7, #28]

      this->_M_impl._M_map_size = std::max((size_t) _S_initial_map_size,
					   size_t(__num_nodes + 2));
 8003f30:	2308      	movs	r3, #8
 8003f32:	60fb      	str	r3, [r7, #12]
 8003f34:	69fb      	ldr	r3, [r7, #28]
 8003f36:	3302      	adds	r3, #2
 8003f38:	613b      	str	r3, [r7, #16]
 8003f3a:	f107 0210 	add.w	r2, r7, #16
 8003f3e:	f107 030c 	add.w	r3, r7, #12
 8003f42:	4611      	mov	r1, r2
 8003f44:	4618      	mov	r0, r3
 8003f46:	f7fd fef5 	bl	8001d34 <_ZSt3maxIjERKT_S2_S2_>
 8003f4a:	4603      	mov	r3, r0
    _M_initialize_map(size_t __num_elements)
    {
      const size_t __num_nodes = (__num_elements/ __deque_buf_size(sizeof(_Tp))
				  + 1);

      this->_M_impl._M_map_size = std::max((size_t) _S_initial_map_size,
 8003f4c:	681a      	ldr	r2, [r3, #0]
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	605a      	str	r2, [r3, #4]
					   size_t(__num_nodes + 2));
      this->_M_impl._M_map = _M_allocate_map(this->_M_impl._M_map_size);
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	685b      	ldr	r3, [r3, #4]
 8003f56:	4619      	mov	r1, r3
 8003f58:	6878      	ldr	r0, [r7, #4]
 8003f5a:	f7ff f985 	bl	8003268 <_ZNSt11_Deque_baseIiSaIiEE15_M_allocate_mapEj>
 8003f5e:	4602      	mov	r2, r0
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	601a      	str	r2, [r3, #0]
      // starts in the middle elements and grows outwards.  So nstart may be
      // the beginning of _M_map, but for small maps it may be as far in as
      // _M_map+3.

      _Map_pointer __nstart = (this->_M_impl._M_map
			       + (this->_M_impl._M_map_size - __num_nodes) / 2);
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	681a      	ldr	r2, [r3, #0]
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	6859      	ldr	r1, [r3, #4]
 8003f6c:	69fb      	ldr	r3, [r7, #28]
 8003f6e:	1acb      	subs	r3, r1, r3
 8003f70:	085b      	lsrs	r3, r3, #1
 8003f72:	009b      	lsls	r3, r3, #2
 8003f74:	4413      	add	r3, r2
 8003f76:	61bb      	str	r3, [r7, #24]
      _Map_pointer __nfinish = __nstart + __num_nodes;
 8003f78:	69fb      	ldr	r3, [r7, #28]
 8003f7a:	009b      	lsls	r3, r3, #2
 8003f7c:	69ba      	ldr	r2, [r7, #24]
 8003f7e:	4413      	add	r3, r2
 8003f80:	617b      	str	r3, [r7, #20]

      __try
	{ _M_create_nodes(__nstart, __nfinish); }
 8003f82:	697a      	ldr	r2, [r7, #20]
 8003f84:	69b9      	ldr	r1, [r7, #24]
 8003f86:	6878      	ldr	r0, [r7, #4]
 8003f88:	f000 f8d4 	bl	8004134 <_ZNSt11_Deque_baseIiSaIiEE15_M_create_nodesEPPiS3_>
	  this->_M_impl._M_map = _Map_pointer();
	  this->_M_impl._M_map_size = 0;
	  __throw_exception_again;
	}

      this->_M_impl._M_start._M_set_node(__nstart);
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	3308      	adds	r3, #8
 8003f90:	69b9      	ldr	r1, [r7, #24]
 8003f92:	4618      	mov	r0, r3
 8003f94:	f7ff f810 	bl	8002fb8 <_ZNSt15_Deque_iteratorIiRiPiE11_M_set_nodeEPS1_>
      this->_M_impl._M_finish._M_set_node(__nfinish - 1);
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	f103 0218 	add.w	r2, r3, #24
 8003f9e:	697b      	ldr	r3, [r7, #20]
 8003fa0:	3b04      	subs	r3, #4
 8003fa2:	4619      	mov	r1, r3
 8003fa4:	4610      	mov	r0, r2
 8003fa6:	f7ff f807 	bl	8002fb8 <_ZNSt15_Deque_iteratorIiRiPiE11_M_set_nodeEPS1_>
      this->_M_impl._M_start._M_cur = _M_impl._M_start._M_first;
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	68da      	ldr	r2, [r3, #12]
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	609a      	str	r2, [r3, #8]
      this->_M_impl._M_finish._M_cur = (this->_M_impl._M_finish._M_first
					+ __num_elements
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	69dc      	ldr	r4, [r3, #28]
					% __deque_buf_size(sizeof(_Tp)));
 8003fb6:	2004      	movs	r0, #4
 8003fb8:	f7fd f8e2 	bl	8001180 <_ZSt16__deque_buf_sizej>
 8003fbc:	4602      	mov	r2, r0

      this->_M_impl._M_start._M_set_node(__nstart);
      this->_M_impl._M_finish._M_set_node(__nfinish - 1);
      this->_M_impl._M_start._M_cur = _M_impl._M_start._M_first;
      this->_M_impl._M_finish._M_cur = (this->_M_impl._M_finish._M_first
					+ __num_elements
 8003fbe:	683b      	ldr	r3, [r7, #0]
 8003fc0:	fbb3 f1f2 	udiv	r1, r3, r2
 8003fc4:	fb02 f201 	mul.w	r2, r2, r1
 8003fc8:	1a9b      	subs	r3, r3, r2
 8003fca:	009b      	lsls	r3, r3, #2
 8003fcc:	18e2      	adds	r2, r4, r3
	}

      this->_M_impl._M_start._M_set_node(__nstart);
      this->_M_impl._M_finish._M_set_node(__nfinish - 1);
      this->_M_impl._M_start._M_cur = _M_impl._M_start._M_first;
      this->_M_impl._M_finish._M_cur = (this->_M_impl._M_finish._M_first
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	619a      	str	r2, [r3, #24]
					+ __num_elements
					% __deque_buf_size(sizeof(_Tp)));
    }
 8003fd2:	bf00      	nop
 8003fd4:	3724      	adds	r7, #36	; 0x24
 8003fd6:	46bd      	mov	sp, r7
 8003fd8:	bd90      	pop	{r4, r7, pc}
 8003fda:	bf00      	nop

08003fdc <_ZNSt11_Deque_baseIiSaIiEE16_M_destroy_nodesEPPiS3_>:
	}
    }

  template<typename _Tp, typename _Alloc>
    void
    _Deque_base<_Tp, _Alloc>::
 8003fdc:	b580      	push	{r7, lr}
 8003fde:	b086      	sub	sp, #24
 8003fe0:	af00      	add	r7, sp, #0
 8003fe2:	60f8      	str	r0, [r7, #12]
 8003fe4:	60b9      	str	r1, [r7, #8]
 8003fe6:	607a      	str	r2, [r7, #4]
    _M_destroy_nodes(_Map_pointer __nstart,
		     _Map_pointer __nfinish) _GLIBCXX_NOEXCEPT
    {
      for (_Map_pointer __n = __nstart; __n < __nfinish; ++__n)
 8003fe8:	68bb      	ldr	r3, [r7, #8]
 8003fea:	617b      	str	r3, [r7, #20]
 8003fec:	697a      	ldr	r2, [r7, #20]
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	429a      	cmp	r2, r3
 8003ff2:	d209      	bcs.n	8004008 <_ZNSt11_Deque_baseIiSaIiEE16_M_destroy_nodesEPPiS3_+0x2c>
	_M_deallocate_node(*__n);
 8003ff4:	697b      	ldr	r3, [r7, #20]
 8003ff6:	681b      	ldr	r3, [r3, #0]
 8003ff8:	4619      	mov	r1, r3
 8003ffa:	68f8      	ldr	r0, [r7, #12]
 8003ffc:	f7fe ffc8 	bl	8002f90 <_ZNSt11_Deque_baseIiSaIiEE18_M_deallocate_nodeEPi>
    void
    _Deque_base<_Tp, _Alloc>::
    _M_destroy_nodes(_Map_pointer __nstart,
		     _Map_pointer __nfinish) _GLIBCXX_NOEXCEPT
    {
      for (_Map_pointer __n = __nstart; __n < __nfinish; ++__n)
 8004000:	697b      	ldr	r3, [r7, #20]
 8004002:	3304      	adds	r3, #4
 8004004:	617b      	str	r3, [r7, #20]
 8004006:	e7f1      	b.n	8003fec <_ZNSt11_Deque_baseIiSaIiEE16_M_destroy_nodesEPPiS3_+0x10>
	_M_deallocate_node(*__n);
    }
 8004008:	bf00      	nop
 800400a:	3718      	adds	r7, #24
 800400c:	46bd      	mov	sp, r7
 800400e:	bd80      	pop	{r7, pc}

08004010 <_ZN9__gnu_cxx14__alloc_traitsISaIiEE17_S_select_on_copyERKS1_>:
    { __a.destroy(__p); }

    static size_type max_size(const _Alloc& __a)
    { return __a.max_size(); }

    static const _Alloc& _S_select_on_copy(const _Alloc& __a) { return __a; }
 8004010:	b480      	push	{r7}
 8004012:	b083      	sub	sp, #12
 8004014:	af00      	add	r7, sp, #0
 8004016:	6078      	str	r0, [r7, #4]
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	4618      	mov	r0, r3
 800401c:	370c      	adds	r7, #12
 800401e:	46bd      	mov	sp, r7
 8004020:	bc80      	pop	{r7}
 8004022:	4770      	bx	lr

08004024 <_ZNSt11_Deque_baseIiSaIiEEC1ERKS0_j>:

      _Deque_base(size_t __num_elements)
      : _M_impl()
      { _M_initialize_map(__num_elements); }

      _Deque_base(const allocator_type& __a, size_t __num_elements)
 8004024:	b580      	push	{r7, lr}
 8004026:	b084      	sub	sp, #16
 8004028:	af00      	add	r7, sp, #0
 800402a:	60f8      	str	r0, [r7, #12]
 800402c:	60b9      	str	r1, [r7, #8]
 800402e:	607a      	str	r2, [r7, #4]
      : _M_impl(__a)
 8004030:	68fb      	ldr	r3, [r7, #12]
 8004032:	68b9      	ldr	r1, [r7, #8]
 8004034:	4618      	mov	r0, r3
 8004036:	f000 f897 	bl	8004168 <_ZNSt11_Deque_baseIiSaIiEE11_Deque_implC1ERKS0_>
      { _M_initialize_map(__num_elements); }
 800403a:	6879      	ldr	r1, [r7, #4]
 800403c:	68f8      	ldr	r0, [r7, #12]
 800403e:	f7ff ff69 	bl	8003f14 <_ZNSt11_Deque_baseIiSaIiEE17_M_initialize_mapEj>
 8004042:	68fb      	ldr	r3, [r7, #12]
 8004044:	4618      	mov	r0, r3
 8004046:	3710      	adds	r7, #16
 8004048:	46bd      	mov	sp, r7
 800404a:	bd80      	pop	{r7, pc}

0800404c <_ZNKSt5dequeIiSaIiEE5beginEv>:
      /**
       *  Returns a read-only (constant) iterator that points to the first
       *  element in the %deque.  Iteration is done in ordinary element order.
       */
      const_iterator
      begin() const _GLIBCXX_NOEXCEPT
 800404c:	b580      	push	{r7, lr}
 800404e:	b082      	sub	sp, #8
 8004050:	af00      	add	r7, sp, #0
 8004052:	6078      	str	r0, [r7, #4]
 8004054:	6039      	str	r1, [r7, #0]
      { return this->_M_impl._M_start; }
 8004056:	683b      	ldr	r3, [r7, #0]
 8004058:	3308      	adds	r3, #8
 800405a:	4619      	mov	r1, r3
 800405c:	6878      	ldr	r0, [r7, #4]
 800405e:	f000 f8a1 	bl	80041a4 <_ZNSt15_Deque_iteratorIiRKiPS0_EC1ERKS_IiRiPiE>
 8004062:	6878      	ldr	r0, [r7, #4]
 8004064:	3708      	adds	r7, #8
 8004066:	46bd      	mov	sp, r7
 8004068:	bd80      	pop	{r7, pc}
 800406a:	bf00      	nop

0800406c <_ZNKSt5dequeIiSaIiEE3endEv>:
       *  Returns a read-only (constant) iterator that points one past
       *  the last element in the %deque.  Iteration is done in
       *  ordinary element order.
       */
      const_iterator
      end() const _GLIBCXX_NOEXCEPT
 800406c:	b580      	push	{r7, lr}
 800406e:	b082      	sub	sp, #8
 8004070:	af00      	add	r7, sp, #0
 8004072:	6078      	str	r0, [r7, #4]
 8004074:	6039      	str	r1, [r7, #0]
      { return this->_M_impl._M_finish; }
 8004076:	683b      	ldr	r3, [r7, #0]
 8004078:	3318      	adds	r3, #24
 800407a:	4619      	mov	r1, r3
 800407c:	6878      	ldr	r0, [r7, #4]
 800407e:	f000 f891 	bl	80041a4 <_ZNSt15_Deque_iteratorIiRKiPS0_EC1ERKS_IiRiPiE>
 8004082:	6878      	ldr	r0, [r7, #4]
 8004084:	3708      	adds	r7, #8
 8004086:	46bd      	mov	sp, r7
 8004088:	bd80      	pop	{r7, pc}
 800408a:	bf00      	nop

0800408c <_ZSt22__uninitialized_copy_aISt15_Deque_iteratorIiRKiPS1_ES0_IiRiPiEiET0_T_S9_S8_RSaIT1_E>:
	}
    }

  template<typename _InputIterator, typename _ForwardIterator, typename _Tp>
    inline _ForwardIterator
    __uninitialized_copy_a(_InputIterator __first, _InputIterator __last,
 800408c:	b084      	sub	sp, #16
 800408e:	b5b0      	push	{r4, r5, r7, lr}
 8004090:	b08c      	sub	sp, #48	; 0x30
 8004092:	af06      	add	r7, sp, #24
 8004094:	6078      	str	r0, [r7, #4]
 8004096:	f107 002c 	add.w	r0, r7, #44	; 0x2c
 800409a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
			   _ForwardIterator __result, allocator<_Tp>&)
    { return std::uninitialized_copy(__first, __last, __result); }
 800409e:	f107 0308 	add.w	r3, r7, #8
 80040a2:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 80040a4:	4618      	mov	r0, r3
 80040a6:	f7fe ff43 	bl	8002f30 <_ZNSt15_Deque_iteratorIiRiPiEC1ERKS2_>
 80040aa:	687d      	ldr	r5, [r7, #4]
 80040ac:	f107 0308 	add.w	r3, r7, #8
 80040b0:	9305      	str	r3, [sp, #20]
 80040b2:	ac01      	add	r4, sp, #4
 80040b4:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80040b8:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80040ba:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 80040be:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80040c0:	9300      	str	r3, [sp, #0]
 80040c2:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80040c6:	cb0e      	ldmia	r3, {r1, r2, r3}
 80040c8:	4628      	mov	r0, r5
 80040ca:	f000 f887 	bl	80041dc <_ZSt18uninitialized_copyISt15_Deque_iteratorIiRKiPS1_ES0_IiRiPiEET0_T_S9_S8_>
 80040ce:	6878      	ldr	r0, [r7, #4]
 80040d0:	3718      	adds	r7, #24
 80040d2:	46bd      	mov	sp, r7
 80040d4:	e8bd 40b0 	ldmia.w	sp!, {r4, r5, r7, lr}
 80040d8:	b004      	add	sp, #16
 80040da:	4770      	bx	lr

080040dc <_ZNSaIiEC1Ev>:
      // _GLIBCXX_RESOLVE_LIB_DEFECTS
      // 2103. std::allocator propagate_on_container_move_assignment
      typedef true_type propagate_on_container_move_assignment;
#endif

      allocator() throw() { }
 80040dc:	b580      	push	{r7, lr}
 80040de:	b082      	sub	sp, #8
 80040e0:	af00      	add	r7, sp, #0
 80040e2:	6078      	str	r0, [r7, #4]
 80040e4:	6878      	ldr	r0, [r7, #4]
 80040e6:	f000 f8a3 	bl	8004230 <_ZN9__gnu_cxx13new_allocatorIiEC1Ev>
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	4618      	mov	r0, r3
 80040ee:	3708      	adds	r7, #8
 80040f0:	46bd      	mov	sp, r7
 80040f2:	bd80      	pop	{r7, pc}

080040f4 <_ZNSt15_Deque_iteratorIiRiPiEC1Ev>:

      _Deque_iterator(_Elt_pointer __x, _Map_pointer __y) _GLIBCXX_NOEXCEPT
      : _M_cur(__x), _M_first(*__y),
        _M_last(*__y + _S_buffer_size()), _M_node(__y) { }

      _Deque_iterator() _GLIBCXX_NOEXCEPT
 80040f4:	b480      	push	{r7}
 80040f6:	b083      	sub	sp, #12
 80040f8:	af00      	add	r7, sp, #0
 80040fa:	6078      	str	r0, [r7, #4]
      : _M_cur(), _M_first(), _M_last(), _M_node() { }
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	2200      	movs	r2, #0
 8004100:	601a      	str	r2, [r3, #0]
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	2200      	movs	r2, #0
 8004106:	605a      	str	r2, [r3, #4]
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	2200      	movs	r2, #0
 800410c:	609a      	str	r2, [r3, #8]
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	2200      	movs	r2, #0
 8004112:	60da      	str	r2, [r3, #12]
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	4618      	mov	r0, r3
 8004118:	370c      	adds	r7, #12
 800411a:	46bd      	mov	sp, r7
 800411c:	bc80      	pop	{r7}
 800411e:	4770      	bx	lr

08004120 <_ZN9__gnu_cxx13new_allocatorIiED1Ev>:
      new_allocator(const new_allocator&) _GLIBCXX_USE_NOEXCEPT { }

      template<typename _Tp1>
        new_allocator(const new_allocator<_Tp1>&) _GLIBCXX_USE_NOEXCEPT { }

      ~new_allocator() _GLIBCXX_USE_NOEXCEPT { }
 8004120:	b480      	push	{r7}
 8004122:	b083      	sub	sp, #12
 8004124:	af00      	add	r7, sp, #0
 8004126:	6078      	str	r0, [r7, #4]
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	4618      	mov	r0, r3
 800412c:	370c      	adds	r7, #12
 800412e:	46bd      	mov	sp, r7
 8004130:	bc80      	pop	{r7}
 8004132:	4770      	bx	lr

08004134 <_ZNSt11_Deque_baseIiSaIiEE15_M_create_nodesEPPiS3_>:
					% __deque_buf_size(sizeof(_Tp)));
    }

  template<typename _Tp, typename _Alloc>
    void
    _Deque_base<_Tp, _Alloc>::
 8004134:	b580      	push	{r7, lr}
 8004136:	b086      	sub	sp, #24
 8004138:	af00      	add	r7, sp, #0
 800413a:	60f8      	str	r0, [r7, #12]
 800413c:	60b9      	str	r1, [r7, #8]
 800413e:	607a      	str	r2, [r7, #4]
    _M_create_nodes(_Map_pointer __nstart, _Map_pointer __nfinish)
    {
      _Map_pointer __cur;
      __try
	{
	  for (__cur = __nstart; __cur < __nfinish; ++__cur)
 8004140:	68bb      	ldr	r3, [r7, #8]
 8004142:	617b      	str	r3, [r7, #20]
 8004144:	697a      	ldr	r2, [r7, #20]
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	429a      	cmp	r2, r3
 800414a:	d209      	bcs.n	8004160 <_ZNSt11_Deque_baseIiSaIiEE15_M_create_nodesEPPiS3_+0x2c>
	    *__cur = this->_M_allocate_node();
 800414c:	68f8      	ldr	r0, [r7, #12]
 800414e:	f7fe ff7f 	bl	8003050 <_ZNSt11_Deque_baseIiSaIiEE16_M_allocate_nodeEv>
 8004152:	4602      	mov	r2, r0
 8004154:	697b      	ldr	r3, [r7, #20]
 8004156:	601a      	str	r2, [r3, #0]
    _M_create_nodes(_Map_pointer __nstart, _Map_pointer __nfinish)
    {
      _Map_pointer __cur;
      __try
	{
	  for (__cur = __nstart; __cur < __nfinish; ++__cur)
 8004158:	697b      	ldr	r3, [r7, #20]
 800415a:	3304      	adds	r3, #4
 800415c:	617b      	str	r3, [r7, #20]
 800415e:	e7f1      	b.n	8004144 <_ZNSt11_Deque_baseIiSaIiEE15_M_create_nodesEPPiS3_+0x10>
      __catch(...)
	{
	  _M_destroy_nodes(__nstart, __cur);
	  __throw_exception_again;
	}
    }
 8004160:	bf00      	nop
 8004162:	3718      	adds	r7, #24
 8004164:	46bd      	mov	sp, r7
 8004166:	bd80      	pop	{r7, pc}

08004168 <_ZNSt11_Deque_baseIiSaIiEE11_Deque_implC1ERKS0_>:
	_Deque_impl()
	: _Tp_alloc_type(), _M_map(), _M_map_size(0),
	  _M_start(), _M_finish()
	{ }

	_Deque_impl(const _Tp_alloc_type& __a) _GLIBCXX_NOEXCEPT
 8004168:	b580      	push	{r7, lr}
 800416a:	b082      	sub	sp, #8
 800416c:	af00      	add	r7, sp, #0
 800416e:	6078      	str	r0, [r7, #4]
 8004170:	6039      	str	r1, [r7, #0]
	: _Tp_alloc_type(__a), _M_map(), _M_map_size(0),
	  _M_start(), _M_finish()
 8004172:	6839      	ldr	r1, [r7, #0]
 8004174:	6878      	ldr	r0, [r7, #4]
 8004176:	f000 f865 	bl	8004244 <_ZNSaIiEC1ERKS_>
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	2200      	movs	r2, #0
 800417e:	601a      	str	r2, [r3, #0]
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	2200      	movs	r2, #0
 8004184:	605a      	str	r2, [r3, #4]
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	3308      	adds	r3, #8
 800418a:	4618      	mov	r0, r3
 800418c:	f7ff ffb2 	bl	80040f4 <_ZNSt15_Deque_iteratorIiRiPiEC1Ev>
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	3318      	adds	r3, #24
 8004194:	4618      	mov	r0, r3
 8004196:	f7ff ffad 	bl	80040f4 <_ZNSt15_Deque_iteratorIiRiPiEC1Ev>
	{ }
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	4618      	mov	r0, r3
 800419e:	3708      	adds	r7, #8
 80041a0:	46bd      	mov	sp, r7
 80041a2:	bd80      	pop	{r7, pc}

080041a4 <_ZNSt15_Deque_iteratorIiRKiPS0_EC1ERKS_IiRiPiE>:
        _M_last(*__y + _S_buffer_size()), _M_node(__y) { }

      _Deque_iterator() _GLIBCXX_NOEXCEPT
      : _M_cur(), _M_first(), _M_last(), _M_node() { }

      _Deque_iterator(const iterator& __x) _GLIBCXX_NOEXCEPT
 80041a4:	b480      	push	{r7}
 80041a6:	b083      	sub	sp, #12
 80041a8:	af00      	add	r7, sp, #0
 80041aa:	6078      	str	r0, [r7, #4]
 80041ac:	6039      	str	r1, [r7, #0]
      : _M_cur(__x._M_cur), _M_first(__x._M_first),
        _M_last(__x._M_last), _M_node(__x._M_node) { }
 80041ae:	683b      	ldr	r3, [r7, #0]
 80041b0:	681a      	ldr	r2, [r3, #0]
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	601a      	str	r2, [r3, #0]
 80041b6:	683b      	ldr	r3, [r7, #0]
 80041b8:	685a      	ldr	r2, [r3, #4]
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	605a      	str	r2, [r3, #4]
 80041be:	683b      	ldr	r3, [r7, #0]
 80041c0:	689a      	ldr	r2, [r3, #8]
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	609a      	str	r2, [r3, #8]
 80041c6:	683b      	ldr	r3, [r7, #0]
 80041c8:	68da      	ldr	r2, [r3, #12]
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	60da      	str	r2, [r3, #12]
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	4618      	mov	r0, r3
 80041d2:	370c      	adds	r7, #12
 80041d4:	46bd      	mov	sp, r7
 80041d6:	bc80      	pop	{r7}
 80041d8:	4770      	bx	lr
 80041da:	bf00      	nop

080041dc <_ZSt18uninitialized_copyISt15_Deque_iteratorIiRKiPS1_ES0_IiRiPiEET0_T_S9_S8_>:
   *
   *  Like copy(), but does not require an initialized output range.
  */
  template<typename _InputIterator, typename _ForwardIterator>
    inline _ForwardIterator
    uninitialized_copy(_InputIterator __first, _InputIterator __last,
 80041dc:	b084      	sub	sp, #16
 80041de:	b5b0      	push	{r4, r5, r7, lr}
 80041e0:	b08e      	sub	sp, #56	; 0x38
 80041e2:	af06      	add	r7, sp, #24
 80041e4:	6078      	str	r0, [r7, #4]
 80041e6:	f107 0034 	add.w	r0, r7, #52	; 0x34
 80041ea:	e880 000e 	stmia.w	r0, {r1, r2, r3}
      typedef typename iterator_traits<_InputIterator>::value_type
	_ValueType1;
      typedef typename iterator_traits<_ForwardIterator>::value_type
	_ValueType2;
#if __cplusplus < 201103L
      const bool __assignable = true;
 80041ee:	2301      	movs	r3, #1
 80041f0:	77fb      	strb	r3, [r7, #31]
#endif

      return std::__uninitialized_copy<__is_trivial(_ValueType1)
				       && __is_trivial(_ValueType2)
				       && __assignable>::
	__uninit_copy(__first, __last, __result);
 80041f2:	f107 030c 	add.w	r3, r7, #12
 80041f6:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80041f8:	4618      	mov	r0, r3
 80041fa:	f7fe fe99 	bl	8002f30 <_ZNSt15_Deque_iteratorIiRiPiEC1ERKS2_>
 80041fe:	687d      	ldr	r5, [r7, #4]
 8004200:	f107 030c 	add.w	r3, r7, #12
 8004204:	9305      	str	r3, [sp, #20]
 8004206:	ac01      	add	r4, sp, #4
 8004208:	f107 0344 	add.w	r3, r7, #68	; 0x44
 800420c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800420e:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8004212:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004214:	9300      	str	r3, [sp, #0]
 8004216:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800421a:	cb0e      	ldmia	r3, {r1, r2, r3}
 800421c:	4628      	mov	r0, r5
 800421e:	f000 f81f 	bl	8004260 <_ZNSt20__uninitialized_copyILb1EE13__uninit_copyISt15_Deque_iteratorIiRKiPS3_ES2_IiRiPiEEET0_T_SB_SA_>
    }
 8004222:	6878      	ldr	r0, [r7, #4]
 8004224:	3720      	adds	r7, #32
 8004226:	46bd      	mov	sp, r7
 8004228:	e8bd 40b0 	ldmia.w	sp!, {r4, r5, r7, lr}
 800422c:	b004      	add	sp, #16
 800422e:	4770      	bx	lr

08004230 <_ZN9__gnu_cxx13new_allocatorIiEC1Ev>:
      // _GLIBCXX_RESOLVE_LIB_DEFECTS
      // 2103. propagate_on_container_move_assignment
      typedef std::true_type propagate_on_container_move_assignment;
#endif

      new_allocator() _GLIBCXX_USE_NOEXCEPT { }
 8004230:	b480      	push	{r7}
 8004232:	b083      	sub	sp, #12
 8004234:	af00      	add	r7, sp, #0
 8004236:	6078      	str	r0, [r7, #4]
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	4618      	mov	r0, r3
 800423c:	370c      	adds	r7, #12
 800423e:	46bd      	mov	sp, r7
 8004240:	bc80      	pop	{r7}
 8004242:	4770      	bx	lr

08004244 <_ZNSaIiEC1ERKS_>:

      allocator(const allocator& __a) throw()
 8004244:	b580      	push	{r7, lr}
 8004246:	b082      	sub	sp, #8
 8004248:	af00      	add	r7, sp, #0
 800424a:	6078      	str	r0, [r7, #4]
 800424c:	6039      	str	r1, [r7, #0]
      : __allocator_base<_Tp>(__a) { }
 800424e:	6839      	ldr	r1, [r7, #0]
 8004250:	6878      	ldr	r0, [r7, #4]
 8004252:	f000 f82d 	bl	80042b0 <_ZN9__gnu_cxx13new_allocatorIiEC1ERKS1_>
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	4618      	mov	r0, r3
 800425a:	3708      	adds	r7, #8
 800425c:	46bd      	mov	sp, r7
 800425e:	bd80      	pop	{r7, pc}

08004260 <_ZNSt20__uninitialized_copyILb1EE13__uninit_copyISt15_Deque_iteratorIiRKiPS3_ES2_IiRiPiEEET0_T_SB_SA_>:
  template<>
    struct __uninitialized_copy<true>
    {
      template<typename _InputIterator, typename _ForwardIterator>
        static _ForwardIterator
        __uninit_copy(_InputIterator __first, _InputIterator __last,
 8004260:	b084      	sub	sp, #16
 8004262:	b5b0      	push	{r4, r5, r7, lr}
 8004264:	b08c      	sub	sp, #48	; 0x30
 8004266:	af06      	add	r7, sp, #24
 8004268:	6078      	str	r0, [r7, #4]
 800426a:	f107 002c 	add.w	r0, r7, #44	; 0x2c
 800426e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
		      _ForwardIterator __result)
        { return std::copy(__first, __last, __result); }
 8004272:	f107 0308 	add.w	r3, r7, #8
 8004276:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 8004278:	4618      	mov	r0, r3
 800427a:	f7fe fe59 	bl	8002f30 <_ZNSt15_Deque_iteratorIiRiPiEC1ERKS2_>
 800427e:	687d      	ldr	r5, [r7, #4]
 8004280:	f107 0308 	add.w	r3, r7, #8
 8004284:	9305      	str	r3, [sp, #20]
 8004286:	ac01      	add	r4, sp, #4
 8004288:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800428c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800428e:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8004292:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004294:	9300      	str	r3, [sp, #0]
 8004296:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800429a:	cb0e      	ldmia	r3, {r1, r2, r3}
 800429c:	4628      	mov	r0, r5
 800429e:	f000 f813 	bl	80042c8 <_ZSt4copyISt15_Deque_iteratorIiRKiPS1_ES0_IiRiPiEET0_T_S9_S8_>
 80042a2:	6878      	ldr	r0, [r7, #4]
 80042a4:	3718      	adds	r7, #24
 80042a6:	46bd      	mov	sp, r7
 80042a8:	e8bd 40b0 	ldmia.w	sp!, {r4, r5, r7, lr}
 80042ac:	b004      	add	sp, #16
 80042ae:	4770      	bx	lr

080042b0 <_ZN9__gnu_cxx13new_allocatorIiEC1ERKS1_>:

      new_allocator(const new_allocator&) _GLIBCXX_USE_NOEXCEPT { }
 80042b0:	b480      	push	{r7}
 80042b2:	b083      	sub	sp, #12
 80042b4:	af00      	add	r7, sp, #0
 80042b6:	6078      	str	r0, [r7, #4]
 80042b8:	6039      	str	r1, [r7, #0]
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	4618      	mov	r0, r3
 80042be:	370c      	adds	r7, #12
 80042c0:	46bd      	mov	sp, r7
 80042c2:	bc80      	pop	{r7}
 80042c4:	4770      	bx	lr
 80042c6:	bf00      	nop

080042c8 <_ZSt4copyISt15_Deque_iteratorIiRKiPS1_ES0_IiRiPiEET0_T_S9_S8_>:
   *  Note that the end of the output range is permitted to be contained
   *  within [first,last).
  */
  template<typename _II, typename _OI>
    inline _OI
    copy(_II __first, _II __last, _OI __result)
 80042c8:	b084      	sub	sp, #16
 80042ca:	b5b0      	push	{r4, r5, r7, lr}
 80042cc:	b094      	sub	sp, #80	; 0x50
 80042ce:	af06      	add	r7, sp, #24
 80042d0:	6078      	str	r0, [r7, #4]
 80042d2:	f107 004c 	add.w	r0, r7, #76	; 0x4c
 80042d6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
	    typename iterator_traits<_II>::value_type>)
      __glibcxx_requires_valid_range(__first, __last);

      return (std::__copy_move_a2<__is_move_iterator<_II>::__value>
	      (std::__miter_base(__first), std::__miter_base(__last),
	       __result));
 80042da:	f107 0008 	add.w	r0, r7, #8
 80042de:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80042e0:	9300      	str	r3, [sp, #0]
 80042e2:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80042e6:	cb0e      	ldmia	r3, {r1, r2, r3}
 80042e8:	f000 f828 	bl	800433c <_ZSt12__miter_baseISt15_Deque_iteratorIiRKiPS1_EENSt11_Miter_baseIT_E13iterator_typeES6_>
 80042ec:	f107 0018 	add.w	r0, r7, #24
 80042f0:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80042f2:	9300      	str	r3, [sp, #0]
 80042f4:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 80042f8:	cb0e      	ldmia	r3, {r1, r2, r3}
 80042fa:	f000 f81f 	bl	800433c <_ZSt12__miter_baseISt15_Deque_iteratorIiRKiPS1_EENSt11_Miter_baseIT_E13iterator_typeES6_>
 80042fe:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8004302:	6ef9      	ldr	r1, [r7, #108]	; 0x6c
 8004304:	4618      	mov	r0, r3
 8004306:	f7fe fe13 	bl	8002f30 <_ZNSt15_Deque_iteratorIiRiPiEC1ERKS2_>
 800430a:	687d      	ldr	r5, [r7, #4]
 800430c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8004310:	9305      	str	r3, [sp, #20]
 8004312:	ac01      	add	r4, sp, #4
 8004314:	f107 0318 	add.w	r3, r7, #24
 8004318:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800431a:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 800431e:	697b      	ldr	r3, [r7, #20]
 8004320:	9300      	str	r3, [sp, #0]
 8004322:	f107 0308 	add.w	r3, r7, #8
 8004326:	cb0e      	ldmia	r3, {r1, r2, r3}
 8004328:	4628      	mov	r0, r5
 800432a:	f000 f81f 	bl	800436c <_ZSt14__copy_move_a2ILb0ESt15_Deque_iteratorIiRKiPS1_ES0_IiRiPiEET1_T0_S9_S8_>
    }
 800432e:	6878      	ldr	r0, [r7, #4]
 8004330:	3738      	adds	r7, #56	; 0x38
 8004332:	46bd      	mov	sp, r7
 8004334:	e8bd 40b0 	ldmia.w	sp!, {r4, r5, r7, lr}
 8004338:	b004      	add	sp, #16
 800433a:	4770      	bx	lr

0800433c <_ZSt12__miter_baseISt15_Deque_iteratorIiRKiPS1_EENSt11_Miter_baseIT_E13iterator_typeES6_>:
    : _Iter_base<_Iterator, __is_move_iterator<_Iterator>::__value>
    { };

  template<typename _Iterator>
    inline typename _Miter_base<_Iterator>::iterator_type
    __miter_base(_Iterator __it)
 800433c:	b084      	sub	sp, #16
 800433e:	b580      	push	{r7, lr}
 8004340:	b084      	sub	sp, #16
 8004342:	af02      	add	r7, sp, #8
 8004344:	6078      	str	r0, [r7, #4]
 8004346:	f107 0014 	add.w	r0, r7, #20
 800434a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
    { return std::_Miter_base<_Iterator>::_S_base(__it); }
 800434e:	6878      	ldr	r0, [r7, #4]
 8004350:	6a3b      	ldr	r3, [r7, #32]
 8004352:	9300      	str	r3, [sp, #0]
 8004354:	f107 0314 	add.w	r3, r7, #20
 8004358:	cb0e      	ldmia	r3, {r1, r2, r3}
 800435a:	f000 f849 	bl	80043f0 <_ZNSt10_Iter_baseISt15_Deque_iteratorIiRKiPS1_ELb0EE7_S_baseES4_>
 800435e:	6878      	ldr	r0, [r7, #4]
 8004360:	3708      	adds	r7, #8
 8004362:	46bd      	mov	sp, r7
 8004364:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8004368:	b004      	add	sp, #16
 800436a:	4770      	bx	lr

0800436c <_ZSt14__copy_move_a2ILb0ESt15_Deque_iteratorIiRKiPS1_ES0_IiRiPiEET1_T0_S9_S8_>:
    __copy_move_a2(istreambuf_iterator<_CharT, char_traits<_CharT> >,
		   istreambuf_iterator<_CharT, char_traits<_CharT> >, _CharT*);

  template<bool _IsMove, typename _II, typename _OI>
    inline _OI
    __copy_move_a2(_II __first, _II __last, _OI __result)
 800436c:	b084      	sub	sp, #16
 800436e:	b5b0      	push	{r4, r5, r7, lr}
 8004370:	b098      	sub	sp, #96	; 0x60
 8004372:	af06      	add	r7, sp, #24
 8004374:	6078      	str	r0, [r7, #4]
 8004376:	f107 005c 	add.w	r0, r7, #92	; 0x5c
 800437a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
    {
      return _OI(std::__copy_move_a<_IsMove>(std::__niter_base(__first),
					     std::__niter_base(__last),
					     std::__niter_base(__result)));
 800437e:	f107 0008 	add.w	r0, r7, #8
 8004382:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8004384:	9300      	str	r3, [sp, #0]
 8004386:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 800438a:	cb0e      	ldmia	r3, {r1, r2, r3}
 800438c:	f000 f846 	bl	800441c <_ZSt12__niter_baseISt15_Deque_iteratorIiRKiPS1_EENSt11_Niter_baseIT_E13iterator_typeES6_>
 8004390:	f107 0018 	add.w	r0, r7, #24
 8004394:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004396:	9300      	str	r3, [sp, #0]
 8004398:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 800439c:	cb0e      	ldmia	r3, {r1, r2, r3}
 800439e:	f000 f83d 	bl	800441c <_ZSt12__niter_baseISt15_Deque_iteratorIiRKiPS1_EENSt11_Niter_baseIT_E13iterator_typeES6_>
 80043a2:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80043a6:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 80043a8:	4618      	mov	r0, r3
 80043aa:	f7fe fdc1 	bl	8002f30 <_ZNSt15_Deque_iteratorIiRiPiEC1ERKS2_>
 80043ae:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80043b2:	f107 0238 	add.w	r2, r7, #56	; 0x38
 80043b6:	4611      	mov	r1, r2
 80043b8:	4618      	mov	r0, r3
 80043ba:	f000 f847 	bl	800444c <_ZSt12__niter_baseISt15_Deque_iteratorIiRiPiEENSt11_Niter_baseIT_E13iterator_typeES5_>
 80043be:	687d      	ldr	r5, [r7, #4]
 80043c0:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80043c4:	9305      	str	r3, [sp, #20]
 80043c6:	ac01      	add	r4, sp, #4
 80043c8:	f107 0318 	add.w	r3, r7, #24
 80043cc:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80043ce:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 80043d2:	697b      	ldr	r3, [r7, #20]
 80043d4:	9300      	str	r3, [sp, #0]
 80043d6:	f107 0308 	add.w	r3, r7, #8
 80043da:	cb0e      	ldmia	r3, {r1, r2, r3}
 80043dc:	4628      	mov	r0, r5
 80043de:	f000 f84b 	bl	8004478 <_ZSt13__copy_move_aILb0ESt15_Deque_iteratorIiRKiPS1_ES0_IiRiPiEET1_T0_S9_S8_>
    }
 80043e2:	6878      	ldr	r0, [r7, #4]
 80043e4:	3748      	adds	r7, #72	; 0x48
 80043e6:	46bd      	mov	sp, r7
 80043e8:	e8bd 40b0 	ldmia.w	sp!, {r4, r5, r7, lr}
 80043ec:	b004      	add	sp, #16
 80043ee:	4770      	bx	lr

080043f0 <_ZNSt10_Iter_baseISt15_Deque_iteratorIiRKiPS1_ELb0EE7_S_baseES4_>:
  // untouched
  template<typename _Iterator, bool _HasBase>
    struct _Iter_base
    {
      typedef _Iterator iterator_type;
      static iterator_type _S_base(_Iterator __it)
 80043f0:	b084      	sub	sp, #16
 80043f2:	b490      	push	{r4, r7}
 80043f4:	b082      	sub	sp, #8
 80043f6:	af00      	add	r7, sp, #0
 80043f8:	6078      	str	r0, [r7, #4]
 80043fa:	f107 0014 	add.w	r0, r7, #20
 80043fe:	e880 000e 	stmia.w	r0, {r1, r2, r3}
      { return __it; }
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	461c      	mov	r4, r3
 8004406:	f107 0314 	add.w	r3, r7, #20
 800440a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800440c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8004410:	6878      	ldr	r0, [r7, #4]
 8004412:	3708      	adds	r7, #8
 8004414:	46bd      	mov	sp, r7
 8004416:	bc90      	pop	{r4, r7}
 8004418:	b004      	add	sp, #16
 800441a:	4770      	bx	lr

0800441c <_ZSt12__niter_baseISt15_Deque_iteratorIiRKiPS1_EENSt11_Niter_baseIT_E13iterator_typeES6_>:
    : _Iter_base<_Iterator, __is_normal_iterator<_Iterator>::__value>
    { };

  template<typename _Iterator>
    inline typename _Niter_base<_Iterator>::iterator_type
    __niter_base(_Iterator __it)
 800441c:	b084      	sub	sp, #16
 800441e:	b580      	push	{r7, lr}
 8004420:	b084      	sub	sp, #16
 8004422:	af02      	add	r7, sp, #8
 8004424:	6078      	str	r0, [r7, #4]
 8004426:	f107 0014 	add.w	r0, r7, #20
 800442a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
    { return std::_Niter_base<_Iterator>::_S_base(__it); }
 800442e:	6878      	ldr	r0, [r7, #4]
 8004430:	6a3b      	ldr	r3, [r7, #32]
 8004432:	9300      	str	r3, [sp, #0]
 8004434:	f107 0314 	add.w	r3, r7, #20
 8004438:	cb0e      	ldmia	r3, {r1, r2, r3}
 800443a:	f7ff ffd9 	bl	80043f0 <_ZNSt10_Iter_baseISt15_Deque_iteratorIiRKiPS1_ELb0EE7_S_baseES4_>
 800443e:	6878      	ldr	r0, [r7, #4]
 8004440:	3708      	adds	r7, #8
 8004442:	46bd      	mov	sp, r7
 8004444:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8004448:	b004      	add	sp, #16
 800444a:	4770      	bx	lr

0800444c <_ZSt12__niter_baseISt15_Deque_iteratorIiRiPiEENSt11_Niter_baseIT_E13iterator_typeES5_>:
    : _Iter_base<_Iterator, __is_normal_iterator<_Iterator>::__value>
    { };

  template<typename _Iterator>
    inline typename _Niter_base<_Iterator>::iterator_type
    __niter_base(_Iterator __it)
 800444c:	b580      	push	{r7, lr}
 800444e:	b086      	sub	sp, #24
 8004450:	af00      	add	r7, sp, #0
 8004452:	6078      	str	r0, [r7, #4]
 8004454:	6039      	str	r1, [r7, #0]
    { return std::_Niter_base<_Iterator>::_S_base(__it); }
 8004456:	f107 0308 	add.w	r3, r7, #8
 800445a:	6839      	ldr	r1, [r7, #0]
 800445c:	4618      	mov	r0, r3
 800445e:	f7fe fd67 	bl	8002f30 <_ZNSt15_Deque_iteratorIiRiPiEC1ERKS2_>
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	f107 0208 	add.w	r2, r7, #8
 8004468:	4611      	mov	r1, r2
 800446a:	4618      	mov	r0, r3
 800446c:	f000 f82e 	bl	80044cc <_ZNSt10_Iter_baseISt15_Deque_iteratorIiRiPiELb0EE7_S_baseES3_>
 8004470:	6878      	ldr	r0, [r7, #4]
 8004472:	3718      	adds	r7, #24
 8004474:	46bd      	mov	sp, r7
 8004476:	bd80      	pop	{r7, pc}

08004478 <_ZSt13__copy_move_aILb0ESt15_Deque_iteratorIiRKiPS1_ES0_IiRiPiEET1_T0_S9_S8_>:
	}
    };

  template<bool _IsMove, typename _II, typename _OI>
    inline _OI
    __copy_move_a(_II __first, _II __last, _OI __result)
 8004478:	b084      	sub	sp, #16
 800447a:	b5b0      	push	{r4, r5, r7, lr}
 800447c:	b08e      	sub	sp, #56	; 0x38
 800447e:	af06      	add	r7, sp, #24
 8004480:	6078      	str	r0, [r7, #4]
 8004482:	f107 0034 	add.w	r0, r7, #52	; 0x34
 8004486:	e880 000e 	stmia.w	r0, {r1, r2, r3}
      typedef typename iterator_traits<_OI>::value_type _ValueTypeO;
      typedef typename iterator_traits<_II>::iterator_category _Category;
      const bool __simple = (__is_trivial(_ValueTypeI)
	                     && __is_pointer<_II>::__value
	                     && __is_pointer<_OI>::__value
			     && __are_same<_ValueTypeI, _ValueTypeO>::__value);
 800448a:	2300      	movs	r3, #0
 800448c:	77fb      	strb	r3, [r7, #31]

      return std::__copy_move<_IsMove, __simple,
	                      _Category>::__copy_m(__first, __last, __result);
 800448e:	f107 030c 	add.w	r3, r7, #12
 8004492:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8004494:	4618      	mov	r0, r3
 8004496:	f7fe fd4b 	bl	8002f30 <_ZNSt15_Deque_iteratorIiRiPiEC1ERKS2_>
 800449a:	687d      	ldr	r5, [r7, #4]
 800449c:	f107 030c 	add.w	r3, r7, #12
 80044a0:	9305      	str	r3, [sp, #20]
 80044a2:	ac01      	add	r4, sp, #4
 80044a4:	f107 0344 	add.w	r3, r7, #68	; 0x44
 80044a8:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80044aa:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 80044ae:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80044b0:	9300      	str	r3, [sp, #0]
 80044b2:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80044b6:	cb0e      	ldmia	r3, {r1, r2, r3}
 80044b8:	4628      	mov	r0, r5
 80044ba:	f000 f815 	bl	80044e8 <_ZNSt11__copy_moveILb0ELb0ESt26random_access_iterator_tagE8__copy_mISt15_Deque_iteratorIiRKiPS4_ES3_IiRiPiEEET0_T_SC_SB_>
    }
 80044be:	6878      	ldr	r0, [r7, #4]
 80044c0:	3720      	adds	r7, #32
 80044c2:	46bd      	mov	sp, r7
 80044c4:	e8bd 40b0 	ldmia.w	sp!, {r4, r5, r7, lr}
 80044c8:	b004      	add	sp, #16
 80044ca:	4770      	bx	lr

080044cc <_ZNSt10_Iter_baseISt15_Deque_iteratorIiRiPiELb0EE7_S_baseES3_>:
  // untouched
  template<typename _Iterator, bool _HasBase>
    struct _Iter_base
    {
      typedef _Iterator iterator_type;
      static iterator_type _S_base(_Iterator __it)
 80044cc:	b580      	push	{r7, lr}
 80044ce:	b082      	sub	sp, #8
 80044d0:	af00      	add	r7, sp, #0
 80044d2:	6078      	str	r0, [r7, #4]
 80044d4:	6039      	str	r1, [r7, #0]
      { return __it; }
 80044d6:	6839      	ldr	r1, [r7, #0]
 80044d8:	6878      	ldr	r0, [r7, #4]
 80044da:	f7fe fd29 	bl	8002f30 <_ZNSt15_Deque_iteratorIiRiPiEC1ERKS2_>
 80044de:	6878      	ldr	r0, [r7, #4]
 80044e0:	3708      	adds	r7, #8
 80044e2:	46bd      	mov	sp, r7
 80044e4:	bd80      	pop	{r7, pc}
 80044e6:	bf00      	nop

080044e8 <_ZNSt11__copy_moveILb0ELb0ESt26random_access_iterator_tagE8__copy_mISt15_Deque_iteratorIiRKiPS4_ES3_IiRiPiEEET0_T_SC_SB_>:
  template<>
    struct __copy_move<false, false, random_access_iterator_tag>
    {
      template<typename _II, typename _OI>
        static _OI
        __copy_m(_II __first, _II __last, _OI __result)
 80044e8:	b084      	sub	sp, #16
 80044ea:	b590      	push	{r4, r7, lr}
 80044ec:	b085      	sub	sp, #20
 80044ee:	af00      	add	r7, sp, #0
 80044f0:	6078      	str	r0, [r7, #4]
 80044f2:	f107 0024 	add.w	r0, r7, #36	; 0x24
 80044f6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
        { 
	  typedef typename iterator_traits<_II>::difference_type _Distance;
	  for(_Distance __n = __last - __first; __n > 0; --__n)
 80044fa:	f107 0224 	add.w	r2, r7, #36	; 0x24
 80044fe:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8004502:	4611      	mov	r1, r2
 8004504:	4618      	mov	r0, r3
 8004506:	f000 f827 	bl	8004558 <_ZStmiIiRKiPS0_ENSt15_Deque_iteratorIT_T0_T1_E15difference_typeERKS7_SA_>
 800450a:	60f8      	str	r0, [r7, #12]
 800450c:	68fb      	ldr	r3, [r7, #12]
 800450e:	2b00      	cmp	r3, #0
 8004510:	dd17      	ble.n	8004542 <_ZNSt11__copy_moveILb0ELb0ESt26random_access_iterator_tagE8__copy_mISt15_Deque_iteratorIiRKiPS4_ES3_IiRiPiEEET0_T_SC_SB_+0x5a>
	    {
	      *__result = *__first;
 8004512:	6c78      	ldr	r0, [r7, #68]	; 0x44
 8004514:	f7fe fc86 	bl	8002e24 <_ZNKSt15_Deque_iteratorIiRiPiEdeEv>
 8004518:	4604      	mov	r4, r0
 800451a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800451e:	4618      	mov	r0, r3
 8004520:	f000 f842 	bl	80045a8 <_ZNKSt15_Deque_iteratorIiRKiPS0_EdeEv>
 8004524:	4603      	mov	r3, r0
 8004526:	681b      	ldr	r3, [r3, #0]
 8004528:	6023      	str	r3, [r4, #0]
	      ++__first;
 800452a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800452e:	4618      	mov	r0, r3
 8004530:	f000 f846 	bl	80045c0 <_ZNSt15_Deque_iteratorIiRKiPS0_EppEv>
	      ++__result;
 8004534:	6c78      	ldr	r0, [r7, #68]	; 0x44
 8004536:	f000 f863 	bl	8004600 <_ZNSt15_Deque_iteratorIiRiPiEppEv>
      template<typename _II, typename _OI>
        static _OI
        __copy_m(_II __first, _II __last, _OI __result)
        { 
	  typedef typename iterator_traits<_II>::difference_type _Distance;
	  for(_Distance __n = __last - __first; __n > 0; --__n)
 800453a:	68fb      	ldr	r3, [r7, #12]
 800453c:	3b01      	subs	r3, #1
 800453e:	60fb      	str	r3, [r7, #12]
 8004540:	e7e4      	b.n	800450c <_ZNSt11__copy_moveILb0ELb0ESt26random_access_iterator_tagE8__copy_mISt15_Deque_iteratorIiRKiPS4_ES3_IiRiPiEEET0_T_SC_SB_+0x24>
	    {
	      *__result = *__first;
	      ++__first;
	      ++__result;
	    }
	  return __result;
 8004542:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8004544:	6878      	ldr	r0, [r7, #4]
 8004546:	f7fe fcf3 	bl	8002f30 <_ZNSt15_Deque_iteratorIiRiPiEC1ERKS2_>
	}
 800454a:	6878      	ldr	r0, [r7, #4]
 800454c:	3714      	adds	r7, #20
 800454e:	46bd      	mov	sp, r7
 8004550:	e8bd 4090 	ldmia.w	sp!, {r4, r7, lr}
 8004554:	b004      	add	sp, #16
 8004556:	4770      	bx	lr

08004558 <_ZStmiIiRKiPS0_ENSt15_Deque_iteratorIT_T0_T1_E15difference_typeERKS7_SA_>:
  // According to the resolution of DR179 not only the various comparison
  // operators but also operator- must accept mixed iterator/const_iterator
  // parameters.
  template<typename _Tp, typename _Ref, typename _Ptr>
    inline typename _Deque_iterator<_Tp, _Ref, _Ptr>::difference_type
    operator-(const _Deque_iterator<_Tp, _Ref, _Ptr>& __x,
 8004558:	b580      	push	{r7, lr}
 800455a:	b082      	sub	sp, #8
 800455c:	af00      	add	r7, sp, #0
 800455e:	6078      	str	r0, [r7, #4]
 8004560:	6039      	str	r1, [r7, #0]
	      const _Deque_iterator<_Tp, _Ref, _Ptr>& __y) _GLIBCXX_NOEXCEPT
    {
      return typename _Deque_iterator<_Tp, _Ref, _Ptr>::difference_type
	(_Deque_iterator<_Tp, _Ref, _Ptr>::_S_buffer_size())
 8004562:	f000 f86d 	bl	8004640 <_ZNSt15_Deque_iteratorIiRKiPS0_E14_S_buffer_sizeEv>
 8004566:	4603      	mov	r3, r0
	* (__x._M_node - __y._M_node - 1) + (__x._M_cur - __x._M_first)
	+ (__y._M_last - __y._M_cur);
 8004568:	461a      	mov	r2, r3
    operator-(const _Deque_iterator<_Tp, _Ref, _Ptr>& __x,
	      const _Deque_iterator<_Tp, _Ref, _Ptr>& __y) _GLIBCXX_NOEXCEPT
    {
      return typename _Deque_iterator<_Tp, _Ref, _Ptr>::difference_type
	(_Deque_iterator<_Tp, _Ref, _Ptr>::_S_buffer_size())
	* (__x._M_node - __y._M_node - 1) + (__x._M_cur - __x._M_first)
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	68db      	ldr	r3, [r3, #12]
	+ (__y._M_last - __y._M_cur);
 800456e:	4619      	mov	r1, r3
    operator-(const _Deque_iterator<_Tp, _Ref, _Ptr>& __x,
	      const _Deque_iterator<_Tp, _Ref, _Ptr>& __y) _GLIBCXX_NOEXCEPT
    {
      return typename _Deque_iterator<_Tp, _Ref, _Ptr>::difference_type
	(_Deque_iterator<_Tp, _Ref, _Ptr>::_S_buffer_size())
	* (__x._M_node - __y._M_node - 1) + (__x._M_cur - __x._M_first)
 8004570:	683b      	ldr	r3, [r7, #0]
 8004572:	68db      	ldr	r3, [r3, #12]
	+ (__y._M_last - __y._M_cur);
 8004574:	1acb      	subs	r3, r1, r3
 8004576:	109b      	asrs	r3, r3, #2
 8004578:	3b01      	subs	r3, #1
 800457a:	fb03 f302 	mul.w	r3, r3, r2
    operator-(const _Deque_iterator<_Tp, _Ref, _Ptr>& __x,
	      const _Deque_iterator<_Tp, _Ref, _Ptr>& __y) _GLIBCXX_NOEXCEPT
    {
      return typename _Deque_iterator<_Tp, _Ref, _Ptr>::difference_type
	(_Deque_iterator<_Tp, _Ref, _Ptr>::_S_buffer_size())
	* (__x._M_node - __y._M_node - 1) + (__x._M_cur - __x._M_first)
 800457e:	687a      	ldr	r2, [r7, #4]
 8004580:	6812      	ldr	r2, [r2, #0]
	+ (__y._M_last - __y._M_cur);
 8004582:	4611      	mov	r1, r2
    operator-(const _Deque_iterator<_Tp, _Ref, _Ptr>& __x,
	      const _Deque_iterator<_Tp, _Ref, _Ptr>& __y) _GLIBCXX_NOEXCEPT
    {
      return typename _Deque_iterator<_Tp, _Ref, _Ptr>::difference_type
	(_Deque_iterator<_Tp, _Ref, _Ptr>::_S_buffer_size())
	* (__x._M_node - __y._M_node - 1) + (__x._M_cur - __x._M_first)
 8004584:	687a      	ldr	r2, [r7, #4]
 8004586:	6852      	ldr	r2, [r2, #4]
	+ (__y._M_last - __y._M_cur);
 8004588:	1a8a      	subs	r2, r1, r2
 800458a:	1092      	asrs	r2, r2, #2
 800458c:	4413      	add	r3, r2
 800458e:	683a      	ldr	r2, [r7, #0]
 8004590:	6892      	ldr	r2, [r2, #8]
 8004592:	4611      	mov	r1, r2
 8004594:	683a      	ldr	r2, [r7, #0]
 8004596:	6812      	ldr	r2, [r2, #0]
 8004598:	1a8a      	subs	r2, r1, r2
 800459a:	1092      	asrs	r2, r2, #2
 800459c:	4413      	add	r3, r2
    }
 800459e:	4618      	mov	r0, r3
 80045a0:	3708      	adds	r7, #8
 80045a2:	46bd      	mov	sp, r7
 80045a4:	bd80      	pop	{r7, pc}
 80045a6:	bf00      	nop

080045a8 <_ZNKSt15_Deque_iteratorIiRKiPS0_EdeEv>:
      iterator
      _M_const_cast() const _GLIBCXX_NOEXCEPT
      { return iterator(_M_cur, _M_node); }

      reference
      operator*() const _GLIBCXX_NOEXCEPT
 80045a8:	b480      	push	{r7}
 80045aa:	b083      	sub	sp, #12
 80045ac:	af00      	add	r7, sp, #0
 80045ae:	6078      	str	r0, [r7, #4]
      { return *_M_cur; }
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	681b      	ldr	r3, [r3, #0]
 80045b4:	4618      	mov	r0, r3
 80045b6:	370c      	adds	r7, #12
 80045b8:	46bd      	mov	sp, r7
 80045ba:	bc80      	pop	{r7}
 80045bc:	4770      	bx	lr
 80045be:	bf00      	nop

080045c0 <_ZNSt15_Deque_iteratorIiRKiPS0_EppEv>:
      pointer
      operator->() const _GLIBCXX_NOEXCEPT
      { return _M_cur; }

      _Self&
      operator++() _GLIBCXX_NOEXCEPT
 80045c0:	b580      	push	{r7, lr}
 80045c2:	b082      	sub	sp, #8
 80045c4:	af00      	add	r7, sp, #0
 80045c6:	6078      	str	r0, [r7, #4]
      {
	++_M_cur;
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	681b      	ldr	r3, [r3, #0]
 80045cc:	1d1a      	adds	r2, r3, #4
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	601a      	str	r2, [r3, #0]
	if (_M_cur == _M_last)
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	681a      	ldr	r2, [r3, #0]
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	689b      	ldr	r3, [r3, #8]
 80045da:	429a      	cmp	r2, r3
 80045dc:	d10a      	bne.n	80045f4 <_ZNSt15_Deque_iteratorIiRKiPS0_EppEv+0x34>
	  {
	    _M_set_node(_M_node + 1);
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	68db      	ldr	r3, [r3, #12]
 80045e2:	3304      	adds	r3, #4
 80045e4:	4619      	mov	r1, r3
 80045e6:	6878      	ldr	r0, [r7, #4]
 80045e8:	f000 f832 	bl	8004650 <_ZNSt15_Deque_iteratorIiRKiPS0_E11_M_set_nodeEPPi>
	    _M_cur = _M_first;
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	685a      	ldr	r2, [r3, #4]
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	601a      	str	r2, [r3, #0]
	  }
	return *this;
 80045f4:	687b      	ldr	r3, [r7, #4]
      }
 80045f6:	4618      	mov	r0, r3
 80045f8:	3708      	adds	r7, #8
 80045fa:	46bd      	mov	sp, r7
 80045fc:	bd80      	pop	{r7, pc}
 80045fe:	bf00      	nop

08004600 <_ZNSt15_Deque_iteratorIiRiPiEppEv>:
      pointer
      operator->() const _GLIBCXX_NOEXCEPT
      { return _M_cur; }

      _Self&
      operator++() _GLIBCXX_NOEXCEPT
 8004600:	b580      	push	{r7, lr}
 8004602:	b082      	sub	sp, #8
 8004604:	af00      	add	r7, sp, #0
 8004606:	6078      	str	r0, [r7, #4]
      {
	++_M_cur;
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	681b      	ldr	r3, [r3, #0]
 800460c:	1d1a      	adds	r2, r3, #4
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	601a      	str	r2, [r3, #0]
	if (_M_cur == _M_last)
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	681a      	ldr	r2, [r3, #0]
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	689b      	ldr	r3, [r3, #8]
 800461a:	429a      	cmp	r2, r3
 800461c:	d10a      	bne.n	8004634 <_ZNSt15_Deque_iteratorIiRiPiEppEv+0x34>
	  {
	    _M_set_node(_M_node + 1);
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	68db      	ldr	r3, [r3, #12]
 8004622:	3304      	adds	r3, #4
 8004624:	4619      	mov	r1, r3
 8004626:	6878      	ldr	r0, [r7, #4]
 8004628:	f7fe fcc6 	bl	8002fb8 <_ZNSt15_Deque_iteratorIiRiPiE11_M_set_nodeEPS1_>
	    _M_cur = _M_first;
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	685a      	ldr	r2, [r3, #4]
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	601a      	str	r2, [r3, #0]
	  }
	return *this;
 8004634:	687b      	ldr	r3, [r7, #4]
      }
 8004636:	4618      	mov	r0, r3
 8004638:	3708      	adds	r7, #8
 800463a:	46bd      	mov	sp, r7
 800463c:	bd80      	pop	{r7, pc}
 800463e:	bf00      	nop

08004640 <_ZNSt15_Deque_iteratorIiRKiPS0_E14_S_buffer_sizeEv>:
      typedef __iter<const _Tp>		const_iterator;
      typedef __ptr_to<_Tp>		_Elt_pointer;
      typedef __ptr_to<_Elt_pointer>	_Map_pointer;
#endif

      static size_t _S_buffer_size() _GLIBCXX_NOEXCEPT
 8004640:	b580      	push	{r7, lr}
 8004642:	af00      	add	r7, sp, #0
      { return __deque_buf_size(sizeof(_Tp)); }
 8004644:	2004      	movs	r0, #4
 8004646:	f7fc fd9b 	bl	8001180 <_ZSt16__deque_buf_sizej>
 800464a:	4603      	mov	r3, r0
 800464c:	4618      	mov	r0, r3
 800464e:	bd80      	pop	{r7, pc}

08004650 <_ZNSt15_Deque_iteratorIiRKiPS0_E11_M_set_nodeEPPi>:
       *  Prepares to traverse new_node.  Sets everything except
       *  _M_cur, which should therefore be set by the caller
       *  immediately afterwards, based on _M_first and _M_last.
       */
      void
      _M_set_node(_Map_pointer __new_node) _GLIBCXX_NOEXCEPT
 8004650:	b590      	push	{r4, r7, lr}
 8004652:	b083      	sub	sp, #12
 8004654:	af00      	add	r7, sp, #0
 8004656:	6078      	str	r0, [r7, #4]
 8004658:	6039      	str	r1, [r7, #0]
      {
	_M_node = __new_node;
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	683a      	ldr	r2, [r7, #0]
 800465e:	60da      	str	r2, [r3, #12]
	_M_first = *__new_node;
 8004660:	683b      	ldr	r3, [r7, #0]
 8004662:	681a      	ldr	r2, [r3, #0]
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	605a      	str	r2, [r3, #4]
	_M_last = _M_first + difference_type(_S_buffer_size());
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	685c      	ldr	r4, [r3, #4]
 800466c:	f7ff ffe8 	bl	8004640 <_ZNSt15_Deque_iteratorIiRKiPS0_E14_S_buffer_sizeEv>
 8004670:	4603      	mov	r3, r0
 8004672:	009b      	lsls	r3, r3, #2
 8004674:	18e2      	adds	r2, r4, r3
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	609a      	str	r2, [r3, #8]
      }
 800467a:	bf00      	nop
 800467c:	370c      	adds	r7, #12
 800467e:	46bd      	mov	sp, r7
 8004680:	bd90      	pop	{r4, r7, pc}
 8004682:	bf00      	nop

08004684 <_Z6pomiarv>:
}

Display ds;

void pomiar()
{
 8004684:	b598      	push	{r3, r4, r7, lr}
 8004686:	af00      	add	r7, sp, #0
	static HIH6030 humSens;
 8004688:	4b32      	ldr	r3, [pc, #200]	; (8004754 <_Z6pomiarv+0xd0>)
 800468a:	681b      	ldr	r3, [r3, #0]
 800468c:	f003 0301 	and.w	r3, r3, #1
 8004690:	2b00      	cmp	r3, #0
 8004692:	d10a      	bne.n	80046aa <_Z6pomiarv+0x26>
 8004694:	4830      	ldr	r0, [pc, #192]	; (8004758 <_Z6pomiarv+0xd4>)
 8004696:	f7ff f999 	bl	80039cc <_ZN7HIH6030C1Ev>
 800469a:	4b2e      	ldr	r3, [pc, #184]	; (8004754 <_Z6pomiarv+0xd0>)
 800469c:	2201      	movs	r2, #1
 800469e:	601a      	str	r2, [r3, #0]
 80046a0:	4a2e      	ldr	r2, [pc, #184]	; (800475c <_Z6pomiarv+0xd8>)
 80046a2:	492f      	ldr	r1, [pc, #188]	; (8004760 <_Z6pomiarv+0xdc>)
 80046a4:	482c      	ldr	r0, [pc, #176]	; (8004758 <_Z6pomiarv+0xd4>)
 80046a6:	f000 fe74 	bl	8005392 <__aeabi_atexit>
	static int i = 0;
	if(i%2)
 80046aa:	4b2e      	ldr	r3, [pc, #184]	; (8004764 <_Z6pomiarv+0xe0>)
 80046ac:	681b      	ldr	r3, [r3, #0]
 80046ae:	f003 0301 	and.w	r3, r3, #1
 80046b2:	2b00      	cmp	r3, #0
 80046b4:	d003      	beq.n	80046be <_Z6pomiarv+0x3a>
	{
		humSens.measureRequest();
 80046b6:	4828      	ldr	r0, [pc, #160]	; (8004758 <_Z6pomiarv+0xd4>)
 80046b8:	f7ff fa40 	bl	8003b3c <_ZN7HIH603014measureRequestEv>
 80046bc:	e043      	b.n	8004746 <_Z6pomiarv+0xc2>
	}
	else
	{
		humSens.getMeasurements();
 80046be:	4826      	ldr	r0, [pc, #152]	; (8004758 <_Z6pomiarv+0xd4>)
 80046c0:	f7ff fa6c 	bl	8003b9c <_ZN7HIH603015getMeasurementsEv>

		printf("temperatura[%i.%i *C]\n\r",(humSens.getTemperature()/100),abs(humSens.getTemperature()%100));
 80046c4:	4824      	ldr	r0, [pc, #144]	; (8004758 <_Z6pomiarv+0xd4>)
 80046c6:	f7ff fa0d 	bl	8003ae4 <_ZN7HIH603014getTemperatureEv>
 80046ca:	4603      	mov	r3, r0
 80046cc:	4a26      	ldr	r2, [pc, #152]	; (8004768 <_Z6pomiarv+0xe4>)
 80046ce:	fb82 1203 	smull	r1, r2, r2, r3
 80046d2:	1152      	asrs	r2, r2, #5
 80046d4:	17db      	asrs	r3, r3, #31
 80046d6:	1ad4      	subs	r4, r2, r3
 80046d8:	481f      	ldr	r0, [pc, #124]	; (8004758 <_Z6pomiarv+0xd4>)
 80046da:	f7ff fa03 	bl	8003ae4 <_ZN7HIH603014getTemperatureEv>
 80046de:	4602      	mov	r2, r0
 80046e0:	4b21      	ldr	r3, [pc, #132]	; (8004768 <_Z6pomiarv+0xe4>)
 80046e2:	fb83 1302 	smull	r1, r3, r3, r2
 80046e6:	1159      	asrs	r1, r3, #5
 80046e8:	17d3      	asrs	r3, r2, #31
 80046ea:	1acb      	subs	r3, r1, r3
 80046ec:	2164      	movs	r1, #100	; 0x64
 80046ee:	fb01 f303 	mul.w	r3, r1, r3
 80046f2:	1ad3      	subs	r3, r2, r3
 80046f4:	4618      	mov	r0, r3
 80046f6:	f000 f855 	bl	80047a4 <_Z3absIiET_S0_>
 80046fa:	4603      	mov	r3, r0
 80046fc:	461a      	mov	r2, r3
 80046fe:	4621      	mov	r1, r4
 8004700:	481a      	ldr	r0, [pc, #104]	; (800476c <_Z6pomiarv+0xe8>)
 8004702:	f000 fc19 	bl	8004f38 <iprintf>
		printf("Wilgotnosc[%i.%i %c]\n\r",(humSens.getHumidity()/100),(humSens.getHumidity()%100),'%');
 8004706:	4814      	ldr	r0, [pc, #80]	; (8004758 <_Z6pomiarv+0xd4>)
 8004708:	f7ff fa02 	bl	8003b10 <_ZN7HIH603011getHumidityEv>
 800470c:	4603      	mov	r3, r0
 800470e:	4a16      	ldr	r2, [pc, #88]	; (8004768 <_Z6pomiarv+0xe4>)
 8004710:	fb82 1203 	smull	r1, r2, r2, r3
 8004714:	1152      	asrs	r2, r2, #5
 8004716:	17db      	asrs	r3, r3, #31
 8004718:	1ad4      	subs	r4, r2, r3
 800471a:	480f      	ldr	r0, [pc, #60]	; (8004758 <_Z6pomiarv+0xd4>)
 800471c:	f7ff f9f8 	bl	8003b10 <_ZN7HIH603011getHumidityEv>
 8004720:	4603      	mov	r3, r0
 8004722:	4a11      	ldr	r2, [pc, #68]	; (8004768 <_Z6pomiarv+0xe4>)
 8004724:	fb82 1203 	smull	r1, r2, r2, r3
 8004728:	1151      	asrs	r1, r2, #5
 800472a:	17da      	asrs	r2, r3, #31
 800472c:	1a8a      	subs	r2, r1, r2
 800472e:	2164      	movs	r1, #100	; 0x64
 8004730:	fb01 f202 	mul.w	r2, r1, r2
 8004734:	1a9a      	subs	r2, r3, r2
 8004736:	2325      	movs	r3, #37	; 0x25
 8004738:	4621      	mov	r1, r4
 800473a:	480d      	ldr	r0, [pc, #52]	; (8004770 <_Z6pomiarv+0xec>)
 800473c:	f000 fbfc 	bl	8004f38 <iprintf>
		i=0;
 8004740:	4b08      	ldr	r3, [pc, #32]	; (8004764 <_Z6pomiarv+0xe0>)
 8004742:	2200      	movs	r2, #0
 8004744:	601a      	str	r2, [r3, #0]
	}
	++i;
 8004746:	4b07      	ldr	r3, [pc, #28]	; (8004764 <_Z6pomiarv+0xe0>)
 8004748:	681b      	ldr	r3, [r3, #0]
 800474a:	3301      	adds	r3, #1
 800474c:	4a05      	ldr	r2, [pc, #20]	; (8004764 <_Z6pomiarv+0xe0>)
 800474e:	6013      	str	r3, [r2, #0]
}
 8004750:	bf00      	nop
 8004752:	bd98      	pop	{r3, r4, r7, pc}
 8004754:	2000010c 	.word	0x2000010c
 8004758:	20000110 	.word	0x20000110
 800475c:	20000000 	.word	0x20000000
 8004760:	08003a89 	.word	0x08003a89
 8004764:	20000178 	.word	0x20000178
 8004768:	51eb851f 	.word	0x51eb851f
 800476c:	0800599c 	.word	0x0800599c
 8004770:	080059b4 	.word	0x080059b4

08004774 <main>:

extern void (*wsk2)();


int main(void)
{
 8004774:	b580      	push	{r7, lr}
 8004776:	af00      	add	r7, sp, #0
	wsk2 = pomiar;
 8004778:	4b06      	ldr	r3, [pc, #24]	; (8004794 <main+0x20>)
 800477a:	4a07      	ldr	r2, [pc, #28]	; (8004798 <main+0x24>)
 800477c:	601a      	str	r2, [r3, #0]
	init();
 800477e:	f000 fc89 	bl	8005094 <_Z4initv>
	printf("Witaj !\n\r");
 8004782:	4806      	ldr	r0, [pc, #24]	; (800479c <main+0x28>)
 8004784:	f000 fbd8 	bl	8004f38 <iprintf>
//	ds.setBackground(BLACK);
//	ds.drawPixel(10,10,RGB_MACRO(255,0,0));
	ds.setBackground(BLUE);
 8004788:	211f      	movs	r1, #31
 800478a:	4805      	ldr	r0, [pc, #20]	; (80047a0 <main+0x2c>)
 800478c:	f7ff f890 	bl	80038b0 <_ZN7Display13setBackgroundEt>
	while (1)
 8004790:	e7fe      	b.n	8004790 <main+0x1c>
 8004792:	bf00      	nop
 8004794:	200002b4 	.word	0x200002b4
 8004798:	08004685 	.word	0x08004685
 800479c:	080059cc 	.word	0x080059cc
 80047a0:	20000104 	.word	0x20000104

080047a4 <_Z3absIiET_S0_>:
**  Abstract: main program
**
**===========================================================================
*/
template <typename T>
T abs(T var)
 80047a4:	b480      	push	{r7}
 80047a6:	b083      	sub	sp, #12
 80047a8:	af00      	add	r7, sp, #0
 80047aa:	6078      	str	r0, [r7, #4]
{
	return ((var > 0)? var : (-1 * var));
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	2b00      	cmp	r3, #0
 80047b0:	bfb8      	it	lt
 80047b2:	425b      	neglt	r3, r3
}
 80047b4:	4618      	mov	r0, r3
 80047b6:	370c      	adds	r7, #12
 80047b8:	46bd      	mov	sp, r7
 80047ba:	bc80      	pop	{r7}
 80047bc:	4770      	bx	lr
 80047be:	bf00      	nop

080047c0 <_Z41__static_initialization_and_destruction_0ii>:
 * Minimal __assert() uses __assert__func()
 * */
extern "C" void __assert(const char *file, int line, const char *failedexpr)
{
   __assert_func (file, line, NULL, failedexpr);
}
 80047c0:	b580      	push	{r7, lr}
 80047c2:	b082      	sub	sp, #8
 80047c4:	af00      	add	r7, sp, #0
 80047c6:	6078      	str	r0, [r7, #4]
 80047c8:	6039      	str	r1, [r7, #0]
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	2b01      	cmp	r3, #1
 80047ce:	d10c      	bne.n	80047ea <_Z41__static_initialization_and_destruction_0ii+0x2a>
 80047d0:	683b      	ldr	r3, [r7, #0]
 80047d2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80047d6:	4293      	cmp	r3, r2
 80047d8:	d107      	bne.n	80047ea <_Z41__static_initialization_and_destruction_0ii+0x2a>
T abs(T var)
{
	return ((var > 0)? var : (-1 * var));
}

Display ds;
 80047da:	4806      	ldr	r0, [pc, #24]	; (80047f4 <_Z41__static_initialization_and_destruction_0ii+0x34>)
 80047dc:	f7fe ff06 	bl	80035ec <_ZN7DisplayC1Ev>
 80047e0:	4a05      	ldr	r2, [pc, #20]	; (80047f8 <_Z41__static_initialization_and_destruction_0ii+0x38>)
 80047e2:	4906      	ldr	r1, [pc, #24]	; (80047fc <_Z41__static_initialization_and_destruction_0ii+0x3c>)
 80047e4:	4803      	ldr	r0, [pc, #12]	; (80047f4 <_Z41__static_initialization_and_destruction_0ii+0x34>)
 80047e6:	f000 fdd4 	bl	8005392 <__aeabi_atexit>
 * Minimal __assert() uses __assert__func()
 * */
extern "C" void __assert(const char *file, int line, const char *failedexpr)
{
   __assert_func (file, line, NULL, failedexpr);
}
 80047ea:	bf00      	nop
 80047ec:	3708      	adds	r7, #8
 80047ee:	46bd      	mov	sp, r7
 80047f0:	bd80      	pop	{r7, pc}
 80047f2:	bf00      	nop
 80047f4:	20000104 	.word	0x20000104
 80047f8:	20000000 	.word	0x20000000
 80047fc:	08003869 	.word	0x08003869

08004800 <_GLOBAL__sub_I_ds>:
 8004800:	b580      	push	{r7, lr}
 8004802:	af00      	add	r7, sp, #0
 8004804:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8004808:	2001      	movs	r0, #1
 800480a:	f7ff ffd9 	bl	80047c0 <_Z41__static_initialization_and_destruction_0ii>
 800480e:	bd80      	pop	{r7, pc}

08004810 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8004810:	f8df d034 	ldr.w	sp, [pc, #52]	; 8004848 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8004814:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 8004816:	e003      	b.n	8004820 <LoopCopyDataInit>

08004818 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8004818:	4b0c      	ldr	r3, [pc, #48]	; (800484c <LoopFillZerobss+0x18>)
	ldr	r3, [r3, r1]
 800481a:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 800481c:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 800481e:	3104      	adds	r1, #4

08004820 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8004820:	480b      	ldr	r0, [pc, #44]	; (8004850 <LoopFillZerobss+0x1c>)
	ldr	r3, =_edata
 8004822:	4b0c      	ldr	r3, [pc, #48]	; (8004854 <LoopFillZerobss+0x20>)
	adds	r2, r0, r1
 8004824:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 8004826:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8004828:	d3f6      	bcc.n	8004818 <CopyDataInit>
	ldr	r2, =_sbss
 800482a:	4a0b      	ldr	r2, [pc, #44]	; (8004858 <LoopFillZerobss+0x24>)
	b	LoopFillZerobss
 800482c:	e002      	b.n	8004834 <LoopFillZerobss>

0800482e <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 800482e:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8004830:	f842 3b04 	str.w	r3, [r2], #4

08004834 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8004834:	4b09      	ldr	r3, [pc, #36]	; (800485c <LoopFillZerobss+0x28>)
	cmp	r2, r3
 8004836:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8004838:	d3f9      	bcc.n	800482e <FillZerobss>
	
/* Call the clock system intitialization function.*/
  bl  SystemInit 
 800483a:	f000 f955 	bl	8004ae8 <SystemInit>
/* Call static constructors */
  bl __libc_init_array  
 800483e:	f000 ff19 	bl	8005674 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8004842:	f7ff ff97 	bl	8004774 <main>
	bx	lr
 8004846:	4770      	bx	lr

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8004848:	20002000 	.word	0x20002000
/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
  b	LoopCopyDataInit

CopyDataInit:
	ldr	r3, =_sidata
 800484c:	08005ad8 	.word	0x08005ad8
	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
	adds	r1, r1, #4

LoopCopyDataInit:
	ldr	r0, =_sdata
 8004850:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8004854:	20000080 	.word	0x20000080
	adds	r2, r0, r1
	cmp	r2, r3
	bcc	CopyDataInit
	ldr	r2, =_sbss
 8004858:	20000080 	.word	0x20000080
FillZerobss:
	movs	r3, #0
	str	r3, [r2], #4

LoopFillZerobss:
	ldr	r3, = _ebss
 800485c:	200002bc 	.word	0x200002bc

08004860 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8004860:	e7fe      	b.n	8004860 <ADC1_IRQHandler>
	...

08004864 <NMI_Handler>:
  * @brief  This function handles NMI exception.
  * @param  None
  * @retval None
  */
void NMI_Handler(void)
{
 8004864:	b480      	push	{r7}
 8004866:	af00      	add	r7, sp, #0
}
 8004868:	bf00      	nop
 800486a:	46bd      	mov	sp, r7
 800486c:	bc80      	pop	{r7}
 800486e:	4770      	bx	lr

08004870 <HardFault_Handler>:
  * @brief  This function handles Hard Fault exception.
  * @param  None
  * @retval None
  */
void HardFault_Handler(void)
{
 8004870:	b480      	push	{r7}
 8004872:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Hard Fault exception occurs */
  while (1)
  {
  }
 8004874:	e7fe      	b.n	8004874 <HardFault_Handler+0x4>
 8004876:	bf00      	nop

08004878 <MemManage_Handler>:
  * @brief  This function handles Memory Manage exception.
  * @param  None
  * @retval None
  */
void MemManage_Handler(void)
{
 8004878:	b480      	push	{r7}
 800487a:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Memory Manage exception occurs */
  while (1)
  {
  }
 800487c:	e7fe      	b.n	800487c <MemManage_Handler+0x4>
 800487e:	bf00      	nop

08004880 <BusFault_Handler>:
  * @brief  This function handles Bus Fault exception.
  * @param  None
  * @retval None
  */
void BusFault_Handler(void)
{
 8004880:	b480      	push	{r7}
 8004882:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Bus Fault exception occurs */
  while (1)
  {
  }
 8004884:	e7fe      	b.n	8004884 <BusFault_Handler+0x4>
 8004886:	bf00      	nop

08004888 <UsageFault_Handler>:
  * @brief  This function handles Usage Fault exception.
  * @param  None
  * @retval None
  */
void UsageFault_Handler(void)
{
 8004888:	b480      	push	{r7}
 800488a:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Usage Fault exception occurs */
  while (1)
  {
  }
 800488c:	e7fe      	b.n	800488c <UsageFault_Handler+0x4>
 800488e:	bf00      	nop

08004890 <SVC_Handler>:
  * @brief  This function handles SVCall exception.
  * @param  None
  * @retval None
  */
void SVC_Handler(void)
{
 8004890:	b480      	push	{r7}
 8004892:	af00      	add	r7, sp, #0
}
 8004894:	bf00      	nop
 8004896:	46bd      	mov	sp, r7
 8004898:	bc80      	pop	{r7}
 800489a:	4770      	bx	lr

0800489c <DebugMon_Handler>:
  * @brief  This function handles Debug Monitor exception.
  * @param  None
  * @retval None
  */
void DebugMon_Handler(void)
{
 800489c:	b480      	push	{r7}
 800489e:	af00      	add	r7, sp, #0
}
 80048a0:	bf00      	nop
 80048a2:	46bd      	mov	sp, r7
 80048a4:	bc80      	pop	{r7}
 80048a6:	4770      	bx	lr

080048a8 <PendSV_Handler>:
  * @brief  This function handles PendSVC exception.
  * @param  None
  * @retval None
  */
void PendSV_Handler(void)
{
 80048a8:	b480      	push	{r7}
 80048aa:	af00      	add	r7, sp, #0
}
 80048ac:	bf00      	nop
 80048ae:	46bd      	mov	sp, r7
 80048b0:	bc80      	pop	{r7}
 80048b2:	4770      	bx	lr

080048b4 <getBufferCapacity>:
  * @retval None
  */


uint8_t getBufferCapacity(BufferS_t* buf)
{
 80048b4:	b480      	push	{r7}
 80048b6:	b085      	sub	sp, #20
 80048b8:	af00      	add	r7, sp, #0
 80048ba:	6078      	str	r0, [r7, #4]
    uint8_t cap = BUFFER_SIZE;
 80048bc:	2340      	movs	r3, #64	; 0x40
 80048be:	73fb      	strb	r3, [r7, #15]
    if(buf->startIndex > buf->endIntex)
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	f893 2040 	ldrb.w	r2, [r3, #64]	; 0x40
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80048cc:	429a      	cmp	r2, r3
 80048ce:	d90a      	bls.n	80048e6 <getBufferCapacity+0x32>
    {
        cap = buf->startIndex - (buf->endIntex + 1);
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	f893 2040 	ldrb.w	r2, [r3, #64]	; 0x40
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80048dc:	1ad3      	subs	r3, r2, r3
 80048de:	b2db      	uxtb	r3, r3
 80048e0:	3b01      	subs	r3, #1
 80048e2:	73fb      	strb	r3, [r7, #15]
 80048e4:	e011      	b.n	800490a <getBufferCapacity+0x56>
    }
    else if(buf->startIndex < buf->endIntex)
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	f893 2040 	ldrb.w	r2, [r3, #64]	; 0x40
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80048f2:	429a      	cmp	r2, r3
 80048f4:	d209      	bcs.n	800490a <getBufferCapacity+0x56>
    {
        cap = (buf->startIndex + BUFFER_SIZE) - (buf->endIntex + 1);
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	f893 2040 	ldrb.w	r2, [r3, #64]	; 0x40
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004902:	1ad3      	subs	r3, r2, r3
 8004904:	b2db      	uxtb	r3, r3
 8004906:	333f      	adds	r3, #63	; 0x3f
 8004908:	73fb      	strb	r3, [r7, #15]
    }
    return cap;
 800490a:	7bfb      	ldrb	r3, [r7, #15]
}
 800490c:	4618      	mov	r0, r3
 800490e:	3714      	adds	r7, #20
 8004910:	46bd      	mov	sp, r7
 8004912:	bc80      	pop	{r7}
 8004914:	4770      	bx	lr
 8004916:	bf00      	nop

08004918 <_write>:


int _write(int fd, char *str, int len)
{
 8004918:	b580      	push	{r7, lr}
 800491a:	b086      	sub	sp, #24
 800491c:	af00      	add	r7, sp, #0
 800491e:	60f8      	str	r0, [r7, #12]
 8004920:	60b9      	str	r1, [r7, #8]
 8004922:	607a      	str	r2, [r7, #4]
	while(len)
 8004924:	e03f      	b.n	80049a6 <_write+0x8e>
	{
		int capacity = getBufferCapacity(&outBuffer);
 8004926:	4824      	ldr	r0, [pc, #144]	; (80049b8 <_write+0xa0>)
 8004928:	f7ff ffc4 	bl	80048b4 <getBufferCapacity>
 800492c:	4603      	mov	r3, r0
 800492e:	613b      	str	r3, [r7, #16]
		capacity = (capacity > len) ? len : capacity;
 8004930:	693a      	ldr	r2, [r7, #16]
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	4293      	cmp	r3, r2
 8004936:	bfa8      	it	ge
 8004938:	4613      	movge	r3, r2
 800493a:	613b      	str	r3, [r7, #16]
		int i = 0;
 800493c:	2300      	movs	r3, #0
 800493e:	617b      	str	r3, [r7, #20]

		for(i = 0; i < capacity; ++i)
 8004940:	2300      	movs	r3, #0
 8004942:	617b      	str	r3, [r7, #20]
 8004944:	e025      	b.n	8004992 <_write+0x7a>
		{
			outBuffer.endIntex = (outBuffer.endIntex % BUFFER_SIZE);
 8004946:	4b1c      	ldr	r3, [pc, #112]	; (80049b8 <_write+0xa0>)
 8004948:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800494c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004950:	b2da      	uxtb	r2, r3
 8004952:	4b19      	ldr	r3, [pc, #100]	; (80049b8 <_write+0xa0>)
 8004954:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
			outBuffer.buffer[outBuffer.endIntex++] = *(str++);
 8004958:	4b17      	ldr	r3, [pc, #92]	; (80049b8 <_write+0xa0>)
 800495a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800495e:	1c5a      	adds	r2, r3, #1
 8004960:	b2d1      	uxtb	r1, r2
 8004962:	4a15      	ldr	r2, [pc, #84]	; (80049b8 <_write+0xa0>)
 8004964:	f882 1041 	strb.w	r1, [r2, #65]	; 0x41
 8004968:	4619      	mov	r1, r3
 800496a:	68bb      	ldr	r3, [r7, #8]
 800496c:	1c5a      	adds	r2, r3, #1
 800496e:	60ba      	str	r2, [r7, #8]
 8004970:	781a      	ldrb	r2, [r3, #0]
 8004972:	4b11      	ldr	r3, [pc, #68]	; (80049b8 <_write+0xa0>)
 8004974:	545a      	strb	r2, [r3, r1]
			outBuffer.wordCount++;
 8004976:	4b10      	ldr	r3, [pc, #64]	; (80049b8 <_write+0xa0>)
 8004978:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800497c:	3301      	adds	r3, #1
 800497e:	b2da      	uxtb	r2, r3
 8004980:	4b0d      	ldr	r3, [pc, #52]	; (80049b8 <_write+0xa0>)
 8004982:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
			len--;
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	3b01      	subs	r3, #1
 800498a:	607b      	str	r3, [r7, #4]
	{
		int capacity = getBufferCapacity(&outBuffer);
		capacity = (capacity > len) ? len : capacity;
		int i = 0;

		for(i = 0; i < capacity; ++i)
 800498c:	697b      	ldr	r3, [r7, #20]
 800498e:	3301      	adds	r3, #1
 8004990:	617b      	str	r3, [r7, #20]
 8004992:	697a      	ldr	r2, [r7, #20]
 8004994:	693b      	ldr	r3, [r7, #16]
 8004996:	429a      	cmp	r2, r3
 8004998:	dbd5      	blt.n	8004946 <_write+0x2e>
			outBuffer.endIntex = (outBuffer.endIntex % BUFFER_SIZE);
			outBuffer.buffer[outBuffer.endIntex++] = *(str++);
			outBuffer.wordCount++;
			len--;
		}
		USART_ITConfig(USART1, USART_IT_TXE, ENABLE);
 800499a:	2201      	movs	r2, #1
 800499c:	f240 7127 	movw	r1, #1831	; 0x727
 80049a0:	4806      	ldr	r0, [pc, #24]	; (80049bc <_write+0xa4>)
 80049a2:	f7fc fb1d 	bl	8000fe0 <USART_ITConfig>
}


int _write(int fd, char *str, int len)
{
	while(len)
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	2b00      	cmp	r3, #0
 80049aa:	d1bc      	bne.n	8004926 <_write+0xe>
			outBuffer.wordCount++;
			len--;
		}
		USART_ITConfig(USART1, USART_IT_TXE, ENABLE);
	}
	return 0;
 80049ac:	2300      	movs	r3, #0
}
 80049ae:	4618      	mov	r0, r3
 80049b0:	3718      	adds	r7, #24
 80049b2:	46bd      	mov	sp, r7
 80049b4:	bd80      	pop	{r7, pc}
 80049b6:	bf00      	nop
 80049b8:	2000017c 	.word	0x2000017c
 80049bc:	40013800 	.word	0x40013800

080049c0 <SysTick_Handler>:

void SysTick_Handler(void)
{
 80049c0:	b580      	push	{r7, lr}
 80049c2:	af00      	add	r7, sp, #0
	wsk2();
 80049c4:	4b02      	ldr	r3, [pc, #8]	; (80049d0 <SysTick_Handler+0x10>)
 80049c6:	681b      	ldr	r3, [r3, #0]
 80049c8:	4798      	blx	r3
}
 80049ca:	bf00      	nop
 80049cc:	bd80      	pop	{r7, pc}
 80049ce:	bf00      	nop
 80049d0:	200002b4 	.word	0x200002b4

080049d4 <USART1_IRQHandler>:

void USART1_IRQHandler()
{
 80049d4:	b580      	push	{r7, lr}
 80049d6:	b082      	sub	sp, #8
 80049d8:	af00      	add	r7, sp, #0
    if (USART_GetITStatus(USART1, USART_IT_RXNE) != RESET)
 80049da:	f240 5125 	movw	r1, #1317	; 0x525
 80049de:	483f      	ldr	r0, [pc, #252]	; (8004adc <USART1_IRQHandler+0x108>)
 80049e0:	f7fc fb68 	bl	80010b4 <USART_GetITStatus>
 80049e4:	4603      	mov	r3, r0
 80049e6:	2b00      	cmp	r3, #0
 80049e8:	d03f      	beq.n	8004a6a <USART1_IRQHandler+0x96>
    {
    	char tmpChar;
    	tmpChar = USART_ReceiveData(USART1);
 80049ea:	483c      	ldr	r0, [pc, #240]	; (8004adc <USART1_IRQHandler+0x108>)
 80049ec:	f7fc fb52 	bl	8001094 <USART_ReceiveData>
 80049f0:	4603      	mov	r3, r0
 80049f2:	71fb      	strb	r3, [r7, #7]

    	if((uint16_t)tmpChar == ENTER)
 80049f4:	79fb      	ldrb	r3, [r7, #7]
 80049f6:	2b0d      	cmp	r3, #13
 80049f8:	d114      	bne.n	8004a24 <USART1_IRQHandler+0x50>
    	{
    		_write(0,inBuffer.buffer,inBuffer.wordCount);
 80049fa:	4b39      	ldr	r3, [pc, #228]	; (8004ae0 <USART1_IRQHandler+0x10c>)
 80049fc:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8004a00:	461a      	mov	r2, r3
 8004a02:	4937      	ldr	r1, [pc, #220]	; (8004ae0 <USART1_IRQHandler+0x10c>)
 8004a04:	2000      	movs	r0, #0
 8004a06:	f7ff ff87 	bl	8004918 <_write>
    		inBuffer.wordCount = 0;
 8004a0a:	4b35      	ldr	r3, [pc, #212]	; (8004ae0 <USART1_IRQHandler+0x10c>)
 8004a0c:	2200      	movs	r2, #0
 8004a0e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    		inBuffer.endIntex = 0;
 8004a12:	4b33      	ldr	r3, [pc, #204]	; (8004ae0 <USART1_IRQHandler+0x10c>)
 8004a14:	2200      	movs	r2, #0
 8004a16:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    		inBuffer.startIndex = 0;
 8004a1a:	4b31      	ldr	r3, [pc, #196]	; (8004ae0 <USART1_IRQHandler+0x10c>)
 8004a1c:	2200      	movs	r2, #0
 8004a1e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004a22:	e022      	b.n	8004a6a <USART1_IRQHandler+0x96>
    	}
    	else
    	{
    		inBuffer.endIntex = (inBuffer.endIntex % BUFFER_SIZE);
 8004a24:	4b2e      	ldr	r3, [pc, #184]	; (8004ae0 <USART1_IRQHandler+0x10c>)
 8004a26:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004a2a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004a2e:	b2da      	uxtb	r2, r3
 8004a30:	4b2b      	ldr	r3, [pc, #172]	; (8004ae0 <USART1_IRQHandler+0x10c>)
 8004a32:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    		inBuffer.buffer[inBuffer.endIntex++] = tmpChar;
 8004a36:	4b2a      	ldr	r3, [pc, #168]	; (8004ae0 <USART1_IRQHandler+0x10c>)
 8004a38:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004a3c:	1c5a      	adds	r2, r3, #1
 8004a3e:	b2d1      	uxtb	r1, r2
 8004a40:	4a27      	ldr	r2, [pc, #156]	; (8004ae0 <USART1_IRQHandler+0x10c>)
 8004a42:	f882 1041 	strb.w	r1, [r2, #65]	; 0x41
 8004a46:	4619      	mov	r1, r3
 8004a48:	4a25      	ldr	r2, [pc, #148]	; (8004ae0 <USART1_IRQHandler+0x10c>)
 8004a4a:	79fb      	ldrb	r3, [r7, #7]
 8004a4c:	5453      	strb	r3, [r2, r1]
    		inBuffer.wordCount++;
 8004a4e:	4b24      	ldr	r3, [pc, #144]	; (8004ae0 <USART1_IRQHandler+0x10c>)
 8004a50:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8004a54:	3301      	adds	r3, #1
 8004a56:	b2da      	uxtb	r2, r3
 8004a58:	4b21      	ldr	r3, [pc, #132]	; (8004ae0 <USART1_IRQHandler+0x10c>)
 8004a5a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    		USART_SendData(USART1,tmpChar);
 8004a5e:	79fb      	ldrb	r3, [r7, #7]
 8004a60:	b29b      	uxth	r3, r3
 8004a62:	4619      	mov	r1, r3
 8004a64:	481d      	ldr	r0, [pc, #116]	; (8004adc <USART1_IRQHandler+0x108>)
 8004a66:	f7fc fb03 	bl	8001070 <USART_SendData>
    	}
    }
    if (USART_GetITStatus(USART1, USART_IT_TXE) != RESET)
 8004a6a:	f240 7127 	movw	r1, #1831	; 0x727
 8004a6e:	481b      	ldr	r0, [pc, #108]	; (8004adc <USART1_IRQHandler+0x108>)
 8004a70:	f7fc fb20 	bl	80010b4 <USART_GetITStatus>
 8004a74:	4603      	mov	r3, r0
 8004a76:	2b00      	cmp	r3, #0
 8004a78:	d02c      	beq.n	8004ad4 <USART1_IRQHandler+0x100>
    {
    	if(outBuffer.wordCount > 0)
 8004a7a:	4b1a      	ldr	r3, [pc, #104]	; (8004ae4 <USART1_IRQHandler+0x110>)
 8004a7c:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8004a80:	2b00      	cmp	r3, #0
 8004a82:	d021      	beq.n	8004ac8 <USART1_IRQHandler+0xf4>
    	{
    		USART_SendData(USART1,outBuffer.buffer[outBuffer.startIndex++]);
 8004a84:	4b17      	ldr	r3, [pc, #92]	; (8004ae4 <USART1_IRQHandler+0x110>)
 8004a86:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004a8a:	1c5a      	adds	r2, r3, #1
 8004a8c:	b2d1      	uxtb	r1, r2
 8004a8e:	4a15      	ldr	r2, [pc, #84]	; (8004ae4 <USART1_IRQHandler+0x110>)
 8004a90:	f882 1040 	strb.w	r1, [r2, #64]	; 0x40
 8004a94:	461a      	mov	r2, r3
 8004a96:	4b13      	ldr	r3, [pc, #76]	; (8004ae4 <USART1_IRQHandler+0x110>)
 8004a98:	5c9b      	ldrb	r3, [r3, r2]
 8004a9a:	b29b      	uxth	r3, r3
 8004a9c:	4619      	mov	r1, r3
 8004a9e:	480f      	ldr	r0, [pc, #60]	; (8004adc <USART1_IRQHandler+0x108>)
 8004aa0:	f7fc fae6 	bl	8001070 <USART_SendData>
    		outBuffer.startIndex = (outBuffer.startIndex % BUFFER_SIZE);
 8004aa4:	4b0f      	ldr	r3, [pc, #60]	; (8004ae4 <USART1_IRQHandler+0x110>)
 8004aa6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004aaa:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004aae:	b2da      	uxtb	r2, r3
 8004ab0:	4b0c      	ldr	r3, [pc, #48]	; (8004ae4 <USART1_IRQHandler+0x110>)
 8004ab2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    		outBuffer.wordCount--;
 8004ab6:	4b0b      	ldr	r3, [pc, #44]	; (8004ae4 <USART1_IRQHandler+0x110>)
 8004ab8:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8004abc:	3b01      	subs	r3, #1
 8004abe:	b2da      	uxtb	r2, r3
 8004ac0:	4b08      	ldr	r3, [pc, #32]	; (8004ae4 <USART1_IRQHandler+0x110>)
 8004ac2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    	{
    		USART_ITConfig(USART1, USART_IT_TXE, DISABLE);
    	}

    }
}
 8004ac6:	e005      	b.n	8004ad4 <USART1_IRQHandler+0x100>
    		outBuffer.startIndex = (outBuffer.startIndex % BUFFER_SIZE);
    		outBuffer.wordCount--;
    	}
    	else
    	{
    		USART_ITConfig(USART1, USART_IT_TXE, DISABLE);
 8004ac8:	2200      	movs	r2, #0
 8004aca:	f240 7127 	movw	r1, #1831	; 0x727
 8004ace:	4803      	ldr	r0, [pc, #12]	; (8004adc <USART1_IRQHandler+0x108>)
 8004ad0:	f7fc fa86 	bl	8000fe0 <USART_ITConfig>
    	}

    }
}
 8004ad4:	bf00      	nop
 8004ad6:	3708      	adds	r7, #8
 8004ad8:	46bd      	mov	sp, r7
 8004ada:	bd80      	pop	{r7, pc}
 8004adc:	40013800 	.word	0x40013800
 8004ae0:	200001c0 	.word	0x200001c0
 8004ae4:	2000017c 	.word	0x2000017c

08004ae8 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8004ae8:	b580      	push	{r7, lr}
 8004aea:	af00      	add	r7, sp, #0
  /* Reset the RCC clock configuration to the default reset state(for debug purpose) */
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 8004aec:	4a17      	ldr	r2, [pc, #92]	; (8004b4c <SystemInit+0x64>)
 8004aee:	4b17      	ldr	r3, [pc, #92]	; (8004b4c <SystemInit+0x64>)
 8004af0:	681b      	ldr	r3, [r3, #0]
 8004af2:	f043 0301 	orr.w	r3, r3, #1
 8004af6:	6013      	str	r3, [r2, #0]

  /* Reset SW, HPRE, PPRE1, PPRE2, ADCPRE and MCO bits */
#ifndef STM32F10X_CL
  RCC->CFGR &= (uint32_t)0xF8FF0000;
 8004af8:	4914      	ldr	r1, [pc, #80]	; (8004b4c <SystemInit+0x64>)
 8004afa:	4b14      	ldr	r3, [pc, #80]	; (8004b4c <SystemInit+0x64>)
 8004afc:	685a      	ldr	r2, [r3, #4]
 8004afe:	4b14      	ldr	r3, [pc, #80]	; (8004b50 <SystemInit+0x68>)
 8004b00:	4013      	ands	r3, r2
 8004b02:	604b      	str	r3, [r1, #4]
#else
  RCC->CFGR &= (uint32_t)0xF0FF0000;
#endif /* STM32F10X_CL */   
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 8004b04:	4a11      	ldr	r2, [pc, #68]	; (8004b4c <SystemInit+0x64>)
 8004b06:	4b11      	ldr	r3, [pc, #68]	; (8004b4c <SystemInit+0x64>)
 8004b08:	681b      	ldr	r3, [r3, #0]
 8004b0a:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 8004b0e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004b12:	6013      	str	r3, [r2, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8004b14:	4a0d      	ldr	r2, [pc, #52]	; (8004b4c <SystemInit+0x64>)
 8004b16:	4b0d      	ldr	r3, [pc, #52]	; (8004b4c <SystemInit+0x64>)
 8004b18:	681b      	ldr	r3, [r3, #0]
 8004b1a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004b1e:	6013      	str	r3, [r2, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE/OTGFSPRE bits */
  RCC->CFGR &= (uint32_t)0xFF80FFFF;
 8004b20:	4a0a      	ldr	r2, [pc, #40]	; (8004b4c <SystemInit+0x64>)
 8004b22:	4b0a      	ldr	r3, [pc, #40]	; (8004b4c <SystemInit+0x64>)
 8004b24:	685b      	ldr	r3, [r3, #4]
 8004b26:	f423 03fe 	bic.w	r3, r3, #8323072	; 0x7f0000
 8004b2a:	6053      	str	r3, [r2, #4]

  /* Reset CFGR2 register */
  RCC->CFGR2 = 0x00000000;
#elif defined (STM32F10X_LD_VL) || defined (STM32F10X_MD_VL) || (defined STM32F10X_HD_VL)
  /* Disable all interrupts and clear pending bits  */
  RCC->CIR = 0x009F0000;
 8004b2c:	4b07      	ldr	r3, [pc, #28]	; (8004b4c <SystemInit+0x64>)
 8004b2e:	f44f 021f 	mov.w	r2, #10420224	; 0x9f0000
 8004b32:	609a      	str	r2, [r3, #8]

  /* Reset CFGR2 register */
  RCC->CFGR2 = 0x00000000;      
 8004b34:	4b05      	ldr	r3, [pc, #20]	; (8004b4c <SystemInit+0x64>)
 8004b36:	2200      	movs	r2, #0
 8004b38:	62da      	str	r2, [r3, #44]	; 0x2c
  #endif /* DATA_IN_ExtSRAM */
#endif 

  /* Configure the System clock frequency, HCLK, PCLK2 and PCLK1 prescalers */
  /* Configure the Flash Latency cycles and enable prefetch buffer */
  SetSysClock();
 8004b3a:	f000 f80d 	bl	8004b58 <SetSysClock>

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 8004b3e:	4b05      	ldr	r3, [pc, #20]	; (8004b54 <SystemInit+0x6c>)
 8004b40:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8004b44:	609a      	str	r2, [r3, #8]
#endif 

}
 8004b46:	bf00      	nop
 8004b48:	bd80      	pop	{r7, pc}
 8004b4a:	bf00      	nop
 8004b4c:	40021000 	.word	0x40021000
 8004b50:	f8ff0000 	.word	0xf8ff0000
 8004b54:	e000ed00 	.word	0xe000ed00

08004b58 <SetSysClock>:
  * @brief  Configures the System clock frequency, HCLK, PCLK2 and PCLK1 prescalers.
  * @param  None
  * @retval None
  */
static void SetSysClock(void)
{
 8004b58:	b580      	push	{r7, lr}
 8004b5a:	af00      	add	r7, sp, #0
#ifdef SYSCLK_FREQ_HSE
  SetSysClockToHSE();
#elif defined SYSCLK_FREQ_24MHz
  SetSysClockTo24();
 8004b5c:	f000 f802 	bl	8004b64 <SetSysClockTo24>
  SetSysClockTo72();
#endif
 
 /* If none of the define above is enabled, the HSI is used as System clock
    source (default after reset) */ 
}
 8004b60:	bf00      	nop
 8004b62:	bd80      	pop	{r7, pc}

08004b64 <SetSysClockTo24>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
static void SetSysClockTo24(void)
{
 8004b64:	b480      	push	{r7}
 8004b66:	b083      	sub	sp, #12
 8004b68:	af00      	add	r7, sp, #0
  __IO uint32_t StartUpCounter = 0, HSEStatus = 0;
 8004b6a:	2300      	movs	r3, #0
 8004b6c:	607b      	str	r3, [r7, #4]
 8004b6e:	2300      	movs	r3, #0
 8004b70:	603b      	str	r3, [r7, #0]
  
  /* SYSCLK, HCLK, PCLK2 and PCLK1 configuration ---------------------------*/    
  /* Enable HSE */    
  RCC->CR |= ((uint32_t)RCC_CR_HSEON);
 8004b72:	4a30      	ldr	r2, [pc, #192]	; (8004c34 <SetSysClockTo24+0xd0>)
 8004b74:	4b2f      	ldr	r3, [pc, #188]	; (8004c34 <SetSysClockTo24+0xd0>)
 8004b76:	681b      	ldr	r3, [r3, #0]
 8004b78:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004b7c:	6013      	str	r3, [r2, #0]
 
  /* Wait till HSE is ready and if Time out is reached exit */
  do
  {
    HSEStatus = RCC->CR & RCC_CR_HSERDY;
 8004b7e:	4b2d      	ldr	r3, [pc, #180]	; (8004c34 <SetSysClockTo24+0xd0>)
 8004b80:	681b      	ldr	r3, [r3, #0]
 8004b82:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004b86:	603b      	str	r3, [r7, #0]
    StartUpCounter++;  
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	3301      	adds	r3, #1
 8004b8c:	607b      	str	r3, [r7, #4]
  } while((HSEStatus == 0) && (StartUpCounter != HSE_STARTUP_TIMEOUT));
 8004b8e:	683b      	ldr	r3, [r7, #0]
 8004b90:	2b00      	cmp	r3, #0
 8004b92:	d103      	bne.n	8004b9c <SetSysClockTo24+0x38>
 8004b94:	687b      	ldr	r3, [r7, #4]
 8004b96:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
 8004b9a:	d1f0      	bne.n	8004b7e <SetSysClockTo24+0x1a>

  if ((RCC->CR & RCC_CR_HSERDY) != RESET)
 8004b9c:	4b25      	ldr	r3, [pc, #148]	; (8004c34 <SetSysClockTo24+0xd0>)
 8004b9e:	681b      	ldr	r3, [r3, #0]
 8004ba0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004ba4:	2b00      	cmp	r3, #0
 8004ba6:	d002      	beq.n	8004bae <SetSysClockTo24+0x4a>
  {
    HSEStatus = (uint32_t)0x01;
 8004ba8:	2301      	movs	r3, #1
 8004baa:	603b      	str	r3, [r7, #0]
 8004bac:	e001      	b.n	8004bb2 <SetSysClockTo24+0x4e>
  }
  else
  {
    HSEStatus = (uint32_t)0x00;
 8004bae:	2300      	movs	r3, #0
 8004bb0:	603b      	str	r3, [r7, #0]
  }  

  if (HSEStatus == (uint32_t)0x01)
 8004bb2:	683b      	ldr	r3, [r7, #0]
 8004bb4:	2b01      	cmp	r3, #1
 8004bb6:	d137      	bne.n	8004c28 <SetSysClockTo24+0xc4>
    FLASH->ACR &= (uint32_t)((uint32_t)~FLASH_ACR_LATENCY);
    FLASH->ACR |= (uint32_t)FLASH_ACR_LATENCY_0;    
#endif
 
    /* HCLK = SYSCLK */
    RCC->CFGR |= (uint32_t)RCC_CFGR_HPRE_DIV1;
 8004bb8:	4a1e      	ldr	r2, [pc, #120]	; (8004c34 <SetSysClockTo24+0xd0>)
 8004bba:	4b1e      	ldr	r3, [pc, #120]	; (8004c34 <SetSysClockTo24+0xd0>)
 8004bbc:	685b      	ldr	r3, [r3, #4]
 8004bbe:	6053      	str	r3, [r2, #4]
      
    /* PCLK2 = HCLK */
    RCC->CFGR |= (uint32_t)RCC_CFGR_PPRE2_DIV1;
 8004bc0:	4a1c      	ldr	r2, [pc, #112]	; (8004c34 <SetSysClockTo24+0xd0>)
 8004bc2:	4b1c      	ldr	r3, [pc, #112]	; (8004c34 <SetSysClockTo24+0xd0>)
 8004bc4:	685b      	ldr	r3, [r3, #4]
 8004bc6:	6053      	str	r3, [r2, #4]
    
    /* PCLK1 = HCLK */
    RCC->CFGR |= (uint32_t)RCC_CFGR_PPRE1_DIV1;
 8004bc8:	4a1a      	ldr	r2, [pc, #104]	; (8004c34 <SetSysClockTo24+0xd0>)
 8004bca:	4b1a      	ldr	r3, [pc, #104]	; (8004c34 <SetSysClockTo24+0xd0>)
 8004bcc:	685b      	ldr	r3, [r3, #4]
 8004bce:	6053      	str	r3, [r2, #4]
    while((RCC->CR & RCC_CR_PLL2RDY) == 0)
    {
    }   
#elif defined (STM32F10X_LD_VL) || defined (STM32F10X_MD_VL) || defined (STM32F10X_HD_VL)
    /*  PLL configuration:  = (HSE / 2) * 6 = 24 MHz */
    RCC->CFGR &= (uint32_t)((uint32_t)~(RCC_CFGR_PLLSRC | RCC_CFGR_PLLXTPRE | RCC_CFGR_PLLMULL));
 8004bd0:	4a18      	ldr	r2, [pc, #96]	; (8004c34 <SetSysClockTo24+0xd0>)
 8004bd2:	4b18      	ldr	r3, [pc, #96]	; (8004c34 <SetSysClockTo24+0xd0>)
 8004bd4:	685b      	ldr	r3, [r3, #4]
 8004bd6:	f423 137c 	bic.w	r3, r3, #4128768	; 0x3f0000
 8004bda:	6053      	str	r3, [r2, #4]
    RCC->CFGR |= (uint32_t)(RCC_CFGR_PLLSRC_PREDIV1 | RCC_CFGR_PLLXTPRE_PREDIV1_Div2 | RCC_CFGR_PLLMULL6);
 8004bdc:	4a15      	ldr	r2, [pc, #84]	; (8004c34 <SetSysClockTo24+0xd0>)
 8004bde:	4b15      	ldr	r3, [pc, #84]	; (8004c34 <SetSysClockTo24+0xd0>)
 8004be0:	685b      	ldr	r3, [r3, #4]
 8004be2:	f443 1398 	orr.w	r3, r3, #1245184	; 0x130000
 8004be6:	6053      	str	r3, [r2, #4]
    RCC->CFGR &= (uint32_t)((uint32_t)~(RCC_CFGR_PLLSRC | RCC_CFGR_PLLXTPRE | RCC_CFGR_PLLMULL));
    RCC->CFGR |= (uint32_t)(RCC_CFGR_PLLSRC_HSE | RCC_CFGR_PLLXTPRE_HSE_Div2 | RCC_CFGR_PLLMULL6);
#endif /* STM32F10X_CL */

    /* Enable PLL */
    RCC->CR |= RCC_CR_PLLON;
 8004be8:	4a12      	ldr	r2, [pc, #72]	; (8004c34 <SetSysClockTo24+0xd0>)
 8004bea:	4b12      	ldr	r3, [pc, #72]	; (8004c34 <SetSysClockTo24+0xd0>)
 8004bec:	681b      	ldr	r3, [r3, #0]
 8004bee:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004bf2:	6013      	str	r3, [r2, #0]

    /* Wait till PLL is ready */
    while((RCC->CR & RCC_CR_PLLRDY) == 0)
 8004bf4:	bf00      	nop
 8004bf6:	4b0f      	ldr	r3, [pc, #60]	; (8004c34 <SetSysClockTo24+0xd0>)
 8004bf8:	681b      	ldr	r3, [r3, #0]
 8004bfa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004bfe:	2b00      	cmp	r3, #0
 8004c00:	d0f9      	beq.n	8004bf6 <SetSysClockTo24+0x92>
    {
    }

    /* Select PLL as system clock source */
    RCC->CFGR &= (uint32_t)((uint32_t)~(RCC_CFGR_SW));
 8004c02:	4a0c      	ldr	r2, [pc, #48]	; (8004c34 <SetSysClockTo24+0xd0>)
 8004c04:	4b0b      	ldr	r3, [pc, #44]	; (8004c34 <SetSysClockTo24+0xd0>)
 8004c06:	685b      	ldr	r3, [r3, #4]
 8004c08:	f023 0303 	bic.w	r3, r3, #3
 8004c0c:	6053      	str	r3, [r2, #4]
    RCC->CFGR |= (uint32_t)RCC_CFGR_SW_PLL;    
 8004c0e:	4a09      	ldr	r2, [pc, #36]	; (8004c34 <SetSysClockTo24+0xd0>)
 8004c10:	4b08      	ldr	r3, [pc, #32]	; (8004c34 <SetSysClockTo24+0xd0>)
 8004c12:	685b      	ldr	r3, [r3, #4]
 8004c14:	f043 0302 	orr.w	r3, r3, #2
 8004c18:	6053      	str	r3, [r2, #4]

    /* Wait till PLL is used as system clock source */
    while ((RCC->CFGR & (uint32_t)RCC_CFGR_SWS) != (uint32_t)0x08)
 8004c1a:	bf00      	nop
 8004c1c:	4b05      	ldr	r3, [pc, #20]	; (8004c34 <SetSysClockTo24+0xd0>)
 8004c1e:	685b      	ldr	r3, [r3, #4]
 8004c20:	f003 030c 	and.w	r3, r3, #12
 8004c24:	2b08      	cmp	r3, #8
 8004c26:	d1f9      	bne.n	8004c1c <SetSysClockTo24+0xb8>
  }
  else
  { /* If HSE fails to start-up, the application will have wrong clock 
         configuration. User can add here some code to deal with this error */
  } 
}
 8004c28:	bf00      	nop
 8004c2a:	370c      	adds	r7, #12
 8004c2c:	46bd      	mov	sp, r7
 8004c2e:	bc80      	pop	{r7}
 8004c30:	4770      	bx	lr
 8004c32:	bf00      	nop
 8004c34:	40021000 	.word	0x40021000

08004c38 <ts_itoa>:
**  Abstract: Convert integer to ascii
**  Returns:  void
**---------------------------------------------------------------------------
*/
void ts_itoa(char **buf, unsigned int d, int base)
{
 8004c38:	b480      	push	{r7}
 8004c3a:	b087      	sub	sp, #28
 8004c3c:	af00      	add	r7, sp, #0
 8004c3e:	60f8      	str	r0, [r7, #12]
 8004c40:	60b9      	str	r1, [r7, #8]
 8004c42:	607a      	str	r2, [r7, #4]
	int div = 1;
 8004c44:	2301      	movs	r3, #1
 8004c46:	617b      	str	r3, [r7, #20]
	while (d/div >= base)
 8004c48:	e004      	b.n	8004c54 <ts_itoa+0x1c>
		div *= base;
 8004c4a:	697b      	ldr	r3, [r7, #20]
 8004c4c:	687a      	ldr	r2, [r7, #4]
 8004c4e:	fb02 f303 	mul.w	r3, r2, r3
 8004c52:	617b      	str	r3, [r7, #20]
**---------------------------------------------------------------------------
*/
void ts_itoa(char **buf, unsigned int d, int base)
{
	int div = 1;
	while (d/div >= base)
 8004c54:	697b      	ldr	r3, [r7, #20]
 8004c56:	68ba      	ldr	r2, [r7, #8]
 8004c58:	fbb2 f2f3 	udiv	r2, r2, r3
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	429a      	cmp	r2, r3
 8004c60:	d2f3      	bcs.n	8004c4a <ts_itoa+0x12>
		div *= base;

	while (div != 0)
 8004c62:	e029      	b.n	8004cb8 <ts_itoa+0x80>
	{
		int num = d/div;
 8004c64:	697b      	ldr	r3, [r7, #20]
 8004c66:	68ba      	ldr	r2, [r7, #8]
 8004c68:	fbb2 f3f3 	udiv	r3, r2, r3
 8004c6c:	613b      	str	r3, [r7, #16]
		d = d%div;
 8004c6e:	697a      	ldr	r2, [r7, #20]
 8004c70:	68bb      	ldr	r3, [r7, #8]
 8004c72:	fbb3 f1f2 	udiv	r1, r3, r2
 8004c76:	fb02 f201 	mul.w	r2, r2, r1
 8004c7a:	1a9b      	subs	r3, r3, r2
 8004c7c:	60bb      	str	r3, [r7, #8]
		div /= base;
 8004c7e:	697a      	ldr	r2, [r7, #20]
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	fb92 f3f3 	sdiv	r3, r2, r3
 8004c86:	617b      	str	r3, [r7, #20]
		if (num > 9)
 8004c88:	693b      	ldr	r3, [r7, #16]
 8004c8a:	2b09      	cmp	r3, #9
 8004c8c:	dd0a      	ble.n	8004ca4 <ts_itoa+0x6c>
			*((*buf)++) = (num-10) + 'A';
 8004c8e:	68fb      	ldr	r3, [r7, #12]
 8004c90:	681b      	ldr	r3, [r3, #0]
 8004c92:	1c59      	adds	r1, r3, #1
 8004c94:	68fa      	ldr	r2, [r7, #12]
 8004c96:	6011      	str	r1, [r2, #0]
 8004c98:	693a      	ldr	r2, [r7, #16]
 8004c9a:	b2d2      	uxtb	r2, r2
 8004c9c:	3237      	adds	r2, #55	; 0x37
 8004c9e:	b2d2      	uxtb	r2, r2
 8004ca0:	701a      	strb	r2, [r3, #0]
 8004ca2:	e009      	b.n	8004cb8 <ts_itoa+0x80>
		else
			*((*buf)++) = num + '0';
 8004ca4:	68fb      	ldr	r3, [r7, #12]
 8004ca6:	681b      	ldr	r3, [r3, #0]
 8004ca8:	1c59      	adds	r1, r3, #1
 8004caa:	68fa      	ldr	r2, [r7, #12]
 8004cac:	6011      	str	r1, [r2, #0]
 8004cae:	693a      	ldr	r2, [r7, #16]
 8004cb0:	b2d2      	uxtb	r2, r2
 8004cb2:	3230      	adds	r2, #48	; 0x30
 8004cb4:	b2d2      	uxtb	r2, r2
 8004cb6:	701a      	strb	r2, [r3, #0]
{
	int div = 1;
	while (d/div >= base)
		div *= base;

	while (div != 0)
 8004cb8:	697b      	ldr	r3, [r7, #20]
 8004cba:	2b00      	cmp	r3, #0
 8004cbc:	d1d2      	bne.n	8004c64 <ts_itoa+0x2c>
		if (num > 9)
			*((*buf)++) = (num-10) + 'A';
		else
			*((*buf)++) = num + '0';
	}
}
 8004cbe:	bf00      	nop
 8004cc0:	371c      	adds	r7, #28
 8004cc2:	46bd      	mov	sp, r7
 8004cc4:	bc80      	pop	{r7}
 8004cc6:	4770      	bx	lr

08004cc8 <ts_formatstring>:
**  Abstract: Writes arguments va to buffer buf according to format fmt
**  Returns:  Length of string
**---------------------------------------------------------------------------
*/
int ts_formatstring(char *buf, const char *fmt, va_list va)
{
 8004cc8:	b580      	push	{r7, lr}
 8004cca:	b088      	sub	sp, #32
 8004ccc:	af00      	add	r7, sp, #0
 8004cce:	60f8      	str	r0, [r7, #12]
 8004cd0:	60b9      	str	r1, [r7, #8]
 8004cd2:	607a      	str	r2, [r7, #4]
	char *start_buf = buf;
 8004cd4:	68fb      	ldr	r3, [r7, #12]
 8004cd6:	617b      	str	r3, [r7, #20]
	while(*fmt)
 8004cd8:	e07d      	b.n	8004dd6 <ts_formatstring+0x10e>
	{
		/* Character needs formating? */
		if (*fmt == '%')
 8004cda:	68bb      	ldr	r3, [r7, #8]
 8004cdc:	781b      	ldrb	r3, [r3, #0]
 8004cde:	2b25      	cmp	r3, #37	; 0x25
 8004ce0:	d171      	bne.n	8004dc6 <ts_formatstring+0xfe>
		{
			switch (*(++fmt))
 8004ce2:	68bb      	ldr	r3, [r7, #8]
 8004ce4:	3301      	adds	r3, #1
 8004ce6:	60bb      	str	r3, [r7, #8]
 8004ce8:	68bb      	ldr	r3, [r7, #8]
 8004cea:	781b      	ldrb	r3, [r3, #0]
 8004cec:	2b64      	cmp	r3, #100	; 0x64
 8004cee:	d01e      	beq.n	8004d2e <ts_formatstring+0x66>
 8004cf0:	2b64      	cmp	r3, #100	; 0x64
 8004cf2:	dc06      	bgt.n	8004d02 <ts_formatstring+0x3a>
 8004cf4:	2b58      	cmp	r3, #88	; 0x58
 8004cf6:	d050      	beq.n	8004d9a <ts_formatstring+0xd2>
 8004cf8:	2b63      	cmp	r3, #99	; 0x63
 8004cfa:	d00e      	beq.n	8004d1a <ts_formatstring+0x52>
 8004cfc:	2b25      	cmp	r3, #37	; 0x25
 8004cfe:	d058      	beq.n	8004db2 <ts_formatstring+0xea>
 8004d00:	e05d      	b.n	8004dbe <ts_formatstring+0xf6>
 8004d02:	2b73      	cmp	r3, #115	; 0x73
 8004d04:	d02b      	beq.n	8004d5e <ts_formatstring+0x96>
 8004d06:	2b73      	cmp	r3, #115	; 0x73
 8004d08:	dc02      	bgt.n	8004d10 <ts_formatstring+0x48>
 8004d0a:	2b69      	cmp	r3, #105	; 0x69
 8004d0c:	d00f      	beq.n	8004d2e <ts_formatstring+0x66>
 8004d0e:	e056      	b.n	8004dbe <ts_formatstring+0xf6>
 8004d10:	2b75      	cmp	r3, #117	; 0x75
 8004d12:	d037      	beq.n	8004d84 <ts_formatstring+0xbc>
 8004d14:	2b78      	cmp	r3, #120	; 0x78
 8004d16:	d040      	beq.n	8004d9a <ts_formatstring+0xd2>
 8004d18:	e051      	b.n	8004dbe <ts_formatstring+0xf6>
			{
			  case 'c':
				*buf++ = va_arg(va, int);
 8004d1a:	68fb      	ldr	r3, [r7, #12]
 8004d1c:	1c5a      	adds	r2, r3, #1
 8004d1e:	60fa      	str	r2, [r7, #12]
 8004d20:	687a      	ldr	r2, [r7, #4]
 8004d22:	1d11      	adds	r1, r2, #4
 8004d24:	6079      	str	r1, [r7, #4]
 8004d26:	6812      	ldr	r2, [r2, #0]
 8004d28:	b2d2      	uxtb	r2, r2
 8004d2a:	701a      	strb	r2, [r3, #0]
				break;
 8004d2c:	e047      	b.n	8004dbe <ts_formatstring+0xf6>
			  case 'd':
			  case 'i':
				{
					signed int val = va_arg(va, signed int);
 8004d2e:	687b      	ldr	r3, [r7, #4]
 8004d30:	1d1a      	adds	r2, r3, #4
 8004d32:	607a      	str	r2, [r7, #4]
 8004d34:	681b      	ldr	r3, [r3, #0]
 8004d36:	61fb      	str	r3, [r7, #28]
					if (val < 0)
 8004d38:	69fb      	ldr	r3, [r7, #28]
 8004d3a:	2b00      	cmp	r3, #0
 8004d3c:	da07      	bge.n	8004d4e <ts_formatstring+0x86>
					{
						val *= -1;
 8004d3e:	69fb      	ldr	r3, [r7, #28]
 8004d40:	425b      	negs	r3, r3
 8004d42:	61fb      	str	r3, [r7, #28]
						*buf++ = '-';
 8004d44:	68fb      	ldr	r3, [r7, #12]
 8004d46:	1c5a      	adds	r2, r3, #1
 8004d48:	60fa      	str	r2, [r7, #12]
 8004d4a:	222d      	movs	r2, #45	; 0x2d
 8004d4c:	701a      	strb	r2, [r3, #0]
					}
					ts_itoa(&buf, val, 10);
 8004d4e:	69f9      	ldr	r1, [r7, #28]
 8004d50:	f107 030c 	add.w	r3, r7, #12
 8004d54:	220a      	movs	r2, #10
 8004d56:	4618      	mov	r0, r3
 8004d58:	f7ff ff6e 	bl	8004c38 <ts_itoa>
				}
				break;
 8004d5c:	e02f      	b.n	8004dbe <ts_formatstring+0xf6>
			  case 's':
				{
					char * arg = va_arg(va, char *);
 8004d5e:	687b      	ldr	r3, [r7, #4]
 8004d60:	1d1a      	adds	r2, r3, #4
 8004d62:	607a      	str	r2, [r7, #4]
 8004d64:	681b      	ldr	r3, [r3, #0]
 8004d66:	61bb      	str	r3, [r7, #24]
					while (*arg)
 8004d68:	e007      	b.n	8004d7a <ts_formatstring+0xb2>
					{
						*buf++ = *arg++;
 8004d6a:	68fb      	ldr	r3, [r7, #12]
 8004d6c:	1c5a      	adds	r2, r3, #1
 8004d6e:	60fa      	str	r2, [r7, #12]
 8004d70:	69ba      	ldr	r2, [r7, #24]
 8004d72:	1c51      	adds	r1, r2, #1
 8004d74:	61b9      	str	r1, [r7, #24]
 8004d76:	7812      	ldrb	r2, [r2, #0]
 8004d78:	701a      	strb	r2, [r3, #0]
				}
				break;
			  case 's':
				{
					char * arg = va_arg(va, char *);
					while (*arg)
 8004d7a:	69bb      	ldr	r3, [r7, #24]
 8004d7c:	781b      	ldrb	r3, [r3, #0]
 8004d7e:	2b00      	cmp	r3, #0
 8004d80:	d1f3      	bne.n	8004d6a <ts_formatstring+0xa2>
					{
						*buf++ = *arg++;
					}
				}
				break;
 8004d82:	e01c      	b.n	8004dbe <ts_formatstring+0xf6>
			  case 'u':
					ts_itoa(&buf, va_arg(va, unsigned int), 10);
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	1d1a      	adds	r2, r3, #4
 8004d88:	607a      	str	r2, [r7, #4]
 8004d8a:	6819      	ldr	r1, [r3, #0]
 8004d8c:	f107 030c 	add.w	r3, r7, #12
 8004d90:	220a      	movs	r2, #10
 8004d92:	4618      	mov	r0, r3
 8004d94:	f7ff ff50 	bl	8004c38 <ts_itoa>
				break;
 8004d98:	e011      	b.n	8004dbe <ts_formatstring+0xf6>
			  case 'x':
			  case 'X':
					ts_itoa(&buf, va_arg(va, int), 16);
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	1d1a      	adds	r2, r3, #4
 8004d9e:	607a      	str	r2, [r7, #4]
 8004da0:	681b      	ldr	r3, [r3, #0]
 8004da2:	4619      	mov	r1, r3
 8004da4:	f107 030c 	add.w	r3, r7, #12
 8004da8:	2210      	movs	r2, #16
 8004daa:	4618      	mov	r0, r3
 8004dac:	f7ff ff44 	bl	8004c38 <ts_itoa>
				break;
 8004db0:	e005      	b.n	8004dbe <ts_formatstring+0xf6>
			  case '%':
				  *buf++ = '%';
 8004db2:	68fb      	ldr	r3, [r7, #12]
 8004db4:	1c5a      	adds	r2, r3, #1
 8004db6:	60fa      	str	r2, [r7, #12]
 8004db8:	2225      	movs	r2, #37	; 0x25
 8004dba:	701a      	strb	r2, [r3, #0]
				  break;
 8004dbc:	bf00      	nop
			}
			fmt++;
 8004dbe:	68bb      	ldr	r3, [r7, #8]
 8004dc0:	3301      	adds	r3, #1
 8004dc2:	60bb      	str	r3, [r7, #8]
 8004dc4:	e007      	b.n	8004dd6 <ts_formatstring+0x10e>
		}
		/* Else just copy */
		else
		{
			*buf++ = *fmt++;
 8004dc6:	68fb      	ldr	r3, [r7, #12]
 8004dc8:	1c5a      	adds	r2, r3, #1
 8004dca:	60fa      	str	r2, [r7, #12]
 8004dcc:	68ba      	ldr	r2, [r7, #8]
 8004dce:	1c51      	adds	r1, r2, #1
 8004dd0:	60b9      	str	r1, [r7, #8]
 8004dd2:	7812      	ldrb	r2, [r2, #0]
 8004dd4:	701a      	strb	r2, [r3, #0]
**---------------------------------------------------------------------------
*/
int ts_formatstring(char *buf, const char *fmt, va_list va)
{
	char *start_buf = buf;
	while(*fmt)
 8004dd6:	68bb      	ldr	r3, [r7, #8]
 8004dd8:	781b      	ldrb	r3, [r3, #0]
 8004dda:	2b00      	cmp	r3, #0
 8004ddc:	f47f af7d 	bne.w	8004cda <ts_formatstring+0x12>
		else
		{
			*buf++ = *fmt++;
		}
	}
	*buf = 0;
 8004de0:	68fb      	ldr	r3, [r7, #12]
 8004de2:	2200      	movs	r2, #0
 8004de4:	701a      	strb	r2, [r3, #0]

	return (int)(buf - start_buf);
 8004de6:	68fb      	ldr	r3, [r7, #12]
 8004de8:	461a      	mov	r2, r3
 8004dea:	697b      	ldr	r3, [r7, #20]
 8004dec:	1ad3      	subs	r3, r2, r3
}
 8004dee:	4618      	mov	r0, r3
 8004df0:	3720      	adds	r7, #32
 8004df2:	46bd      	mov	sp, r7
 8004df4:	bd80      	pop	{r7, pc}
 8004df6:	bf00      	nop

08004df8 <ts_formatlength>:
**            format string and va_list va
**  Returns:  Maximum length
**---------------------------------------------------------------------------
*/
int ts_formatlength(const char *fmt, va_list va)
{
 8004df8:	b480      	push	{r7}
 8004dfa:	b085      	sub	sp, #20
 8004dfc:	af00      	add	r7, sp, #0
 8004dfe:	6078      	str	r0, [r7, #4]
 8004e00:	6039      	str	r1, [r7, #0]
	int length = 0;
 8004e02:	2300      	movs	r3, #0
 8004e04:	60fb      	str	r3, [r7, #12]
	while (*fmt)
 8004e06:	e08b      	b.n	8004f20 <ts_formatlength+0x128>
	{
		if (*fmt == '%')
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	781b      	ldrb	r3, [r3, #0]
 8004e0c:	2b25      	cmp	r3, #37	; 0x25
 8004e0e:	f040 8081 	bne.w	8004f14 <ts_formatlength+0x11c>
		{
			++fmt;
 8004e12:	687b      	ldr	r3, [r7, #4]
 8004e14:	3301      	adds	r3, #1
 8004e16:	607b      	str	r3, [r7, #4]
			switch (*fmt)
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	781b      	ldrb	r3, [r3, #0]
 8004e1c:	3b58      	subs	r3, #88	; 0x58
 8004e1e:	2b20      	cmp	r3, #32
 8004e20:	d873      	bhi.n	8004f0a <ts_formatlength+0x112>
 8004e22:	a201      	add	r2, pc, #4	; (adr r2, 8004e28 <ts_formatlength+0x30>)
 8004e24:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004e28:	08004efd 	.word	0x08004efd
 8004e2c:	08004f0b 	.word	0x08004f0b
 8004e30:	08004f0b 	.word	0x08004f0b
 8004e34:	08004f0b 	.word	0x08004f0b
 8004e38:	08004f0b 	.word	0x08004f0b
 8004e3c:	08004f0b 	.word	0x08004f0b
 8004e40:	08004f0b 	.word	0x08004f0b
 8004e44:	08004f0b 	.word	0x08004f0b
 8004e48:	08004f0b 	.word	0x08004f0b
 8004e4c:	08004f0b 	.word	0x08004f0b
 8004e50:	08004f0b 	.word	0x08004f0b
 8004e54:	08004ec1 	.word	0x08004ec1
 8004e58:	08004ecf 	.word	0x08004ecf
 8004e5c:	08004f0b 	.word	0x08004f0b
 8004e60:	08004ead 	.word	0x08004ead
 8004e64:	08004f0b 	.word	0x08004f0b
 8004e68:	08004f0b 	.word	0x08004f0b
 8004e6c:	08004ecf 	.word	0x08004ecf
 8004e70:	08004f0b 	.word	0x08004f0b
 8004e74:	08004f0b 	.word	0x08004f0b
 8004e78:	08004f0b 	.word	0x08004f0b
 8004e7c:	08004f0b 	.word	0x08004f0b
 8004e80:	08004f0b 	.word	0x08004f0b
 8004e84:	08004f0b 	.word	0x08004f0b
 8004e88:	08004f0b 	.word	0x08004f0b
 8004e8c:	08004f0b 	.word	0x08004f0b
 8004e90:	08004f0b 	.word	0x08004f0b
 8004e94:	08004edd 	.word	0x08004edd
 8004e98:	08004f0b 	.word	0x08004f0b
 8004e9c:	08004ecf 	.word	0x08004ecf
 8004ea0:	08004f0b 	.word	0x08004f0b
 8004ea4:	08004f0b 	.word	0x08004f0b
 8004ea8:	08004efd 	.word	0x08004efd
			{
			  case 'f':
				  va_arg(va,double);
 8004eac:	683b      	ldr	r3, [r7, #0]
 8004eae:	3307      	adds	r3, #7
 8004eb0:	f023 0307 	bic.w	r3, r3, #7
 8004eb4:	3308      	adds	r3, #8
 8004eb6:	603b      	str	r3, [r7, #0]
				  ++length;
 8004eb8:	68fb      	ldr	r3, [r7, #12]
 8004eba:	3301      	adds	r3, #1
 8004ebc:	60fb      	str	r3, [r7, #12]
				  break;
 8004ebe:	e02c      	b.n	8004f1a <ts_formatlength+0x122>
			  case 'c':
		  		  va_arg(va, int);
 8004ec0:	683b      	ldr	r3, [r7, #0]
 8004ec2:	3304      	adds	r3, #4
 8004ec4:	603b      	str	r3, [r7, #0]
				  ++length;
 8004ec6:	68fb      	ldr	r3, [r7, #12]
 8004ec8:	3301      	adds	r3, #1
 8004eca:	60fb      	str	r3, [r7, #12]
				  break;
 8004ecc:	e025      	b.n	8004f1a <ts_formatlength+0x122>
			  case 'd':
			  case 'i':
			  case 'u':
				  /* 32 bits integer is max 11 characters with minus sign */
				  length += 11;
 8004ece:	68fb      	ldr	r3, [r7, #12]
 8004ed0:	330b      	adds	r3, #11
 8004ed2:	60fb      	str	r3, [r7, #12]
				  va_arg(va, int);
 8004ed4:	683b      	ldr	r3, [r7, #0]
 8004ed6:	3304      	adds	r3, #4
 8004ed8:	603b      	str	r3, [r7, #0]
				  break;
 8004eda:	e01e      	b.n	8004f1a <ts_formatlength+0x122>
			  case 's':
			  	  {
			  		  char * str = va_arg(va, char *);
 8004edc:	683b      	ldr	r3, [r7, #0]
 8004ede:	1d1a      	adds	r2, r3, #4
 8004ee0:	603a      	str	r2, [r7, #0]
 8004ee2:	681b      	ldr	r3, [r3, #0]
 8004ee4:	60bb      	str	r3, [r7, #8]
			  		  while (*str++)
 8004ee6:	e002      	b.n	8004eee <ts_formatlength+0xf6>
			  			  ++length;
 8004ee8:	68fb      	ldr	r3, [r7, #12]
 8004eea:	3301      	adds	r3, #1
 8004eec:	60fb      	str	r3, [r7, #12]
				  va_arg(va, int);
				  break;
			  case 's':
			  	  {
			  		  char * str = va_arg(va, char *);
			  		  while (*str++)
 8004eee:	68bb      	ldr	r3, [r7, #8]
 8004ef0:	1c5a      	adds	r2, r3, #1
 8004ef2:	60ba      	str	r2, [r7, #8]
 8004ef4:	781b      	ldrb	r3, [r3, #0]
 8004ef6:	2b00      	cmp	r3, #0
 8004ef8:	d1f6      	bne.n	8004ee8 <ts_formatlength+0xf0>
			  			  ++length;
			  	  }
				  break;
 8004efa:	e00e      	b.n	8004f1a <ts_formatlength+0x122>
			  case 'x':
			  case 'X':
				  /* 32 bits integer as hex is max 8 characters */
				  length += 8;
 8004efc:	68fb      	ldr	r3, [r7, #12]
 8004efe:	3308      	adds	r3, #8
 8004f00:	60fb      	str	r3, [r7, #12]
				  va_arg(va, unsigned int);
 8004f02:	683b      	ldr	r3, [r7, #0]
 8004f04:	3304      	adds	r3, #4
 8004f06:	603b      	str	r3, [r7, #0]
				  break;
 8004f08:	e007      	b.n	8004f1a <ts_formatlength+0x122>
			  default:
				  ++length;
 8004f0a:	68fb      	ldr	r3, [r7, #12]
 8004f0c:	3301      	adds	r3, #1
 8004f0e:	60fb      	str	r3, [r7, #12]
				  break;
 8004f10:	bf00      	nop
 8004f12:	e002      	b.n	8004f1a <ts_formatlength+0x122>
			}
		}
		else
		{
			++length;
 8004f14:	68fb      	ldr	r3, [r7, #12]
 8004f16:	3301      	adds	r3, #1
 8004f18:	60fb      	str	r3, [r7, #12]
		}
		++fmt;
 8004f1a:	687b      	ldr	r3, [r7, #4]
 8004f1c:	3301      	adds	r3, #1
 8004f1e:	607b      	str	r3, [r7, #4]
**---------------------------------------------------------------------------
*/
int ts_formatlength(const char *fmt, va_list va)
{
	int length = 0;
	while (*fmt)
 8004f20:	687b      	ldr	r3, [r7, #4]
 8004f22:	781b      	ldrb	r3, [r3, #0]
 8004f24:	2b00      	cmp	r3, #0
 8004f26:	f47f af6f 	bne.w	8004e08 <ts_formatlength+0x10>
		{
			++length;
		}
		++fmt;
	}
	return length;
 8004f2a:	68fb      	ldr	r3, [r7, #12]
}
 8004f2c:	4618      	mov	r0, r3
 8004f2e:	3714      	adds	r7, #20
 8004f30:	46bd      	mov	sp, r7
 8004f32:	bc80      	pop	{r7}
 8004f34:	4770      	bx	lr
 8004f36:	bf00      	nop

08004f38 <iprintf>:
**  Returns:  Number of bytes written
**
**===========================================================================
*/
int iprintf(const char *fmt, ...)
{
 8004f38:	b40f      	push	{r0, r1, r2, r3}
 8004f3a:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8004f3e:	b085      	sub	sp, #20
 8004f40:	af00      	add	r7, sp, #0
	int length = 0;
 8004f42:	2300      	movs	r3, #0
 8004f44:	60fb      	str	r3, [r7, #12]
	va_list va;
	va_start(va, fmt);
 8004f46:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8004f4a:	603b      	str	r3, [r7, #0]
	length = ts_formatlength(fmt, va);
 8004f4c:	6839      	ldr	r1, [r7, #0]
 8004f4e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004f50:	f7ff ff52 	bl	8004df8 <ts_formatlength>
 8004f54:	60f8      	str	r0, [r7, #12]
	va_end(va);
	{
 8004f56:	466b      	mov	r3, sp
 8004f58:	461e      	mov	r6, r3
		char buf[length];
 8004f5a:	68f9      	ldr	r1, [r7, #12]
 8004f5c:	1e4b      	subs	r3, r1, #1
 8004f5e:	60bb      	str	r3, [r7, #8]
 8004f60:	460b      	mov	r3, r1
 8004f62:	461a      	mov	r2, r3
 8004f64:	f04f 0300 	mov.w	r3, #0
 8004f68:	ea4f 09c3 	mov.w	r9, r3, lsl #3
 8004f6c:	ea49 7952 	orr.w	r9, r9, r2, lsr #29
 8004f70:	ea4f 08c2 	mov.w	r8, r2, lsl #3
 8004f74:	460b      	mov	r3, r1
 8004f76:	461a      	mov	r2, r3
 8004f78:	f04f 0300 	mov.w	r3, #0
 8004f7c:	00dd      	lsls	r5, r3, #3
 8004f7e:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8004f82:	00d4      	lsls	r4, r2, #3
 8004f84:	460b      	mov	r3, r1
 8004f86:	3307      	adds	r3, #7
 8004f88:	08db      	lsrs	r3, r3, #3
 8004f8a:	00db      	lsls	r3, r3, #3
 8004f8c:	ebad 0d03 	sub.w	sp, sp, r3
 8004f90:	466b      	mov	r3, sp
 8004f92:	3300      	adds	r3, #0
 8004f94:	607b      	str	r3, [r7, #4]
		va_start(va, fmt);
 8004f96:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8004f9a:	603b      	str	r3, [r7, #0]
		length = ts_formatstring(buf, fmt, va);
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	683a      	ldr	r2, [r7, #0]
 8004fa0:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8004fa2:	4618      	mov	r0, r3
 8004fa4:	f7ff fe90 	bl	8004cc8 <ts_formatstring>
 8004fa8:	60f8      	str	r0, [r7, #12]
		length = _write(1, buf, length);
 8004faa:	687b      	ldr	r3, [r7, #4]
 8004fac:	68fa      	ldr	r2, [r7, #12]
 8004fae:	4619      	mov	r1, r3
 8004fb0:	2001      	movs	r0, #1
 8004fb2:	f7ff fcb1 	bl	8004918 <_write>
 8004fb6:	60f8      	str	r0, [r7, #12]
 8004fb8:	46b5      	mov	sp, r6
		va_end(va);
	}
	return length;
 8004fba:	68fb      	ldr	r3, [r7, #12]
}
 8004fbc:	4618      	mov	r0, r3
 8004fbe:	3714      	adds	r7, #20
 8004fc0:	46bd      	mov	sp, r7
 8004fc2:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8004fc6:	b004      	add	sp, #16
 8004fc8:	4770      	bx	lr
 8004fca:	bf00      	nop

08004fcc <NVIC_EnableIRQ>:
    The interrupt number cannot be a negative value.

    \param [in]      IRQn  Number of the external interrupt to enable
 */
static __INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004fcc:	b480      	push	{r7}
 8004fce:	b083      	sub	sp, #12
 8004fd0:	af00      	add	r7, sp, #0
 8004fd2:	4603      	mov	r3, r0
 8004fd4:	71fb      	strb	r3, [r7, #7]
  NVIC->ISER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* enable interrupt */
 8004fd6:	4908      	ldr	r1, [pc, #32]	; (8004ff8 <NVIC_EnableIRQ+0x2c>)
 8004fd8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004fdc:	095b      	lsrs	r3, r3, #5
 8004fde:	79fa      	ldrb	r2, [r7, #7]
 8004fe0:	f002 021f 	and.w	r2, r2, #31
 8004fe4:	2001      	movs	r0, #1
 8004fe6:	fa00 f202 	lsl.w	r2, r0, r2
 8004fea:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8004fee:	bf00      	nop
 8004ff0:	370c      	adds	r7, #12
 8004ff2:	46bd      	mov	sp, r7
 8004ff4:	bc80      	pop	{r7}
 8004ff6:	4770      	bx	lr
 8004ff8:	e000e100 	.word	0xe000e100

08004ffc <NVIC_SetPriority>:

    \param [in]      IRQn  Number of the interrupt for set priority
    \param [in]  priority  Priority to set
 */
static __INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8004ffc:	b480      	push	{r7}
 8004ffe:	b083      	sub	sp, #12
 8005000:	af00      	add	r7, sp, #0
 8005002:	4603      	mov	r3, r0
 8005004:	6039      	str	r1, [r7, #0]
 8005006:	71fb      	strb	r3, [r7, #7]
  if(IRQn < 0) {
 8005008:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800500c:	2b00      	cmp	r3, #0
 800500e:	da0b      	bge.n	8005028 <NVIC_SetPriority+0x2c>
    SCB->SHP[((uint32_t)(IRQn) & 0xF)-4] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set Priority for Cortex-M  System Interrupts */
 8005010:	490d      	ldr	r1, [pc, #52]	; (8005048 <NVIC_SetPriority+0x4c>)
 8005012:	79fb      	ldrb	r3, [r7, #7]
 8005014:	f003 030f 	and.w	r3, r3, #15
 8005018:	3b04      	subs	r3, #4
 800501a:	683a      	ldr	r2, [r7, #0]
 800501c:	b2d2      	uxtb	r2, r2
 800501e:	0112      	lsls	r2, r2, #4
 8005020:	b2d2      	uxtb	r2, r2
 8005022:	440b      	add	r3, r1
 8005024:	761a      	strb	r2, [r3, #24]
  else {
    NVIC->IP[(uint32_t)(IRQn)] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff);    }        /* set Priority for device specific Interrupts  */
}
 8005026:	e009      	b.n	800503c <NVIC_SetPriority+0x40>
static __INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if(IRQn < 0) {
    SCB->SHP[((uint32_t)(IRQn) & 0xF)-4] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set Priority for Cortex-M  System Interrupts */
  else {
    NVIC->IP[(uint32_t)(IRQn)] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff);    }        /* set Priority for device specific Interrupts  */
 8005028:	4908      	ldr	r1, [pc, #32]	; (800504c <NVIC_SetPriority+0x50>)
 800502a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800502e:	683a      	ldr	r2, [r7, #0]
 8005030:	b2d2      	uxtb	r2, r2
 8005032:	0112      	lsls	r2, r2, #4
 8005034:	b2d2      	uxtb	r2, r2
 8005036:	440b      	add	r3, r1
 8005038:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 800503c:	bf00      	nop
 800503e:	370c      	adds	r7, #12
 8005040:	46bd      	mov	sp, r7
 8005042:	bc80      	pop	{r7}
 8005044:	4770      	bx	lr
 8005046:	bf00      	nop
 8005048:	e000ed00 	.word	0xe000ed00
 800504c:	e000e100 	.word	0xe000e100

08005050 <SysTick_Config>:
    \param [in]  ticks  Number of ticks between two interrupts
    \return          0  Function succeeded
    \return          1  Function failed
 */
static __INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8005050:	b580      	push	{r7, lr}
 8005052:	b082      	sub	sp, #8
 8005054:	af00      	add	r7, sp, #0
 8005056:	6078      	str	r0, [r7, #4]
  if (ticks > SysTick_LOAD_RELOAD_Msk)  return (1);            /* Reload value impossible */
 8005058:	687b      	ldr	r3, [r7, #4]
 800505a:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800505e:	d301      	bcc.n	8005064 <SysTick_Config+0x14>
 8005060:	2301      	movs	r3, #1
 8005062:	e011      	b.n	8005088 <SysTick_Config+0x38>

  SysTick->LOAD  = (ticks & SysTick_LOAD_RELOAD_Msk) - 1;      /* set reload register */
 8005064:	4a0a      	ldr	r2, [pc, #40]	; (8005090 <SysTick_Config+0x40>)
 8005066:	687b      	ldr	r3, [r7, #4]
 8005068:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 800506c:	3b01      	subs	r3, #1
 800506e:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1<<__NVIC_PRIO_BITS) - 1);  /* set Priority for Cortex-M0 System Interrupts */
 8005070:	210f      	movs	r1, #15
 8005072:	f04f 30ff 	mov.w	r0, #4294967295
 8005076:	f7ff ffc1 	bl	8004ffc <NVIC_SetPriority>
  SysTick->VAL   = 0;                                          /* Load the SysTick Counter Value */
 800507a:	4b05      	ldr	r3, [pc, #20]	; (8005090 <SysTick_Config+0x40>)
 800507c:	2200      	movs	r2, #0
 800507e:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8005080:	4b03      	ldr	r3, [pc, #12]	; (8005090 <SysTick_Config+0x40>)
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                    /* Enable SysTick IRQ and SysTick Timer */
 8005082:	2207      	movs	r2, #7
 8005084:	601a      	str	r2, [r3, #0]
  return (0);                                                  /* Function successful */
 8005086:	2300      	movs	r3, #0
}
 8005088:	4618      	mov	r0, r3
 800508a:	3708      	adds	r7, #8
 800508c:	46bd      	mov	sp, r7
 800508e:	bd80      	pop	{r7, pc}
 8005090:	e000e010 	.word	0xe000e010

08005094 <_Z4initv>:
#include "stm32f10x_usart.h"
#include "stm32f10x_gpio.h"
#include "userSettings.h"
#define CLK_FREQ 24000000
void init()
{
 8005094:	b580      	push	{r7, lr}
 8005096:	af00      	add	r7, sp, #0
	NVIC_PriorityGroupConfig(NVIC_PriorityGroup_1);
 8005098:	f44f 60c0 	mov.w	r0, #1536	; 0x600
 800509c:	f7fb fb3c 	bl	8000718 <NVIC_PriorityGroupConfig>
	initUsart();
 80050a0:	f000 f80a 	bl	80050b8 <_Z9initUsartv>
	initSPI();
 80050a4:	f000 f870 	bl	8005188 <_Z7initSPIv>
	SysTick_Config(8000000);
 80050a8:	4802      	ldr	r0, [pc, #8]	; (80050b4 <_Z4initv+0x20>)
 80050aa:	f7ff ffd1 	bl	8005050 <SysTick_Config>
}
 80050ae:	bf00      	nop
 80050b0:	bd80      	pop	{r7, pc}
 80050b2:	bf00      	nop
 80050b4:	007a1200 	.word	0x007a1200

080050b8 <_Z9initUsartv>:

void initUsart()
{
 80050b8:	b580      	push	{r7, lr}
 80050ba:	b088      	sub	sp, #32
 80050bc:	af00      	add	r7, sp, #0
	RCC_APB2PeriphClockCmd (RCC_APB2Periph_USART1 | RCC_APB2Periph_GPIOA| RCC_APB2Periph_AFIO , ENABLE);
 80050be:	2101      	movs	r1, #1
 80050c0:	f244 0005 	movw	r0, #16389	; 0x4005
 80050c4:	f7fb fd3a 	bl	8000b3c <RCC_APB2PeriphClockCmd>
	GPIO_InitTypeDef usartPinTx;
	usartPinTx.GPIO_Pin = USART1_TX;
 80050c8:	f44f 7300 	mov.w	r3, #512	; 0x200
 80050cc:	83bb      	strh	r3, [r7, #28]
	usartPinTx.GPIO_Mode = GPIO_Mode_AF_PP;
 80050ce:	2318      	movs	r3, #24
 80050d0:	77fb      	strb	r3, [r7, #31]
	usartPinTx.GPIO_Speed = GPIO_Speed_10MHz;
 80050d2:	2301      	movs	r3, #1
 80050d4:	77bb      	strb	r3, [r7, #30]
	GPIO_Init(GPIOA,&usartPinTx);
 80050d6:	f107 031c 	add.w	r3, r7, #28
 80050da:	4619      	mov	r1, r3
 80050dc:	4827      	ldr	r0, [pc, #156]	; (800517c <_Z9initUsartv+0xc4>)
 80050de:	f7fb fb8f 	bl	8000800 <GPIO_Init>

	GPIO_InitTypeDef usartPinRx;
	usartPinRx.GPIO_Pin = USART1_RX;
 80050e2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80050e6:	833b      	strh	r3, [r7, #24]
	usartPinRx.GPIO_Mode = GPIO_Mode_IN_FLOATING;
 80050e8:	2304      	movs	r3, #4
 80050ea:	76fb      	strb	r3, [r7, #27]
	GPIO_Init(GPIOA,&usartPinRx);
 80050ec:	f107 0318 	add.w	r3, r7, #24
 80050f0:	4619      	mov	r1, r3
 80050f2:	4822      	ldr	r0, [pc, #136]	; (800517c <_Z9initUsartv+0xc4>)
 80050f4:	f7fb fb84 	bl	8000800 <GPIO_Init>

	RCC_APB2PeriphClockCmd(RCC_APB2Periph_GPIOC, ENABLE);
 80050f8:	2101      	movs	r1, #1
 80050fa:	2010      	movs	r0, #16
 80050fc:	f7fb fd1e 	bl	8000b3c <RCC_APB2PeriphClockCmd>
	GPIO_InitTypeDef usartCtrPin;
	usartCtrPin.GPIO_Pin = GPIO_Pin_9;
 8005100:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005104:	82bb      	strh	r3, [r7, #20]
	usartCtrPin.GPIO_Mode = GPIO_Mode_Out_PP;
 8005106:	2310      	movs	r3, #16
 8005108:	75fb      	strb	r3, [r7, #23]
	usartCtrPin.GPIO_Speed = GPIO_Speed_2MHz;
 800510a:	2302      	movs	r3, #2
 800510c:	75bb      	strb	r3, [r7, #22]
	GPIO_Init(GPIOC,&usartCtrPin);
 800510e:	f107 0314 	add.w	r3, r7, #20
 8005112:	4619      	mov	r1, r3
 8005114:	481a      	ldr	r0, [pc, #104]	; (8005180 <_Z9initUsartv+0xc8>)
 8005116:	f7fb fb73 	bl	8000800 <GPIO_Init>

	USART_InitTypeDef initStruct;
	initStruct.USART_BaudRate 				= 19200;
 800511a:	f44f 4396 	mov.w	r3, #19200	; 0x4b00
 800511e:	607b      	str	r3, [r7, #4]
//	initStruct.USART_BaudRate 				= 115200;
	initStruct.USART_HardwareFlowControl	= USART_HardwareFlowControl_None;
 8005120:	2300      	movs	r3, #0
 8005122:	823b      	strh	r3, [r7, #16]
	initStruct.USART_Mode 					= USART_Mode_Rx | USART_Mode_Tx;
 8005124:	230c      	movs	r3, #12
 8005126:	81fb      	strh	r3, [r7, #14]
	initStruct.USART_Parity 				= USART_Parity_No;
 8005128:	2300      	movs	r3, #0
 800512a:	81bb      	strh	r3, [r7, #12]
	initStruct.USART_StopBits 				= USART_StopBits_2;
 800512c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8005130:	817b      	strh	r3, [r7, #10]
	initStruct.USART_WordLength 			= USART_WordLength_8b;
 8005132:	2300      	movs	r3, #0
 8005134:	813b      	strh	r3, [r7, #8]
	USART_Init(USART1,&initStruct);
 8005136:	1d3b      	adds	r3, r7, #4
 8005138:	4619      	mov	r1, r3
 800513a:	4812      	ldr	r0, [pc, #72]	; (8005184 <_Z9initUsartv+0xcc>)
 800513c:	f7fb fe76 	bl	8000e2c <USART_Init>
	USART_Cmd(USART1, ENABLE);
 8005140:	2101      	movs	r1, #1
 8005142:	4810      	ldr	r0, [pc, #64]	; (8005184 <_Z9initUsartv+0xcc>)
 8005144:	f7fb ff2c 	bl	8000fa0 <USART_Cmd>

	USART_ITConfig(USART1, USART_IT_RXNE, ENABLE);
 8005148:	2201      	movs	r2, #1
 800514a:	f240 5125 	movw	r1, #1317	; 0x525
 800514e:	480d      	ldr	r0, [pc, #52]	; (8005184 <_Z9initUsartv+0xcc>)
 8005150:	f7fb ff46 	bl	8000fe0 <USART_ITConfig>
	NVIC_InitTypeDef NVIC_InitStructure;
	NVIC_InitStructure.NVIC_IRQChannel = USART1_IRQn;
 8005154:	2325      	movs	r3, #37	; 0x25
 8005156:	703b      	strb	r3, [r7, #0]
	NVIC_InitStructure.NVIC_IRQChannelPreemptionPriority = 1;
 8005158:	2301      	movs	r3, #1
 800515a:	707b      	strb	r3, [r7, #1]
	NVIC_InitStructure.NVIC_IRQChannelSubPriority = 6;
 800515c:	2306      	movs	r3, #6
 800515e:	70bb      	strb	r3, [r7, #2]
	NVIC_InitStructure.NVIC_IRQChannelCmd = ENABLE;
 8005160:	2301      	movs	r3, #1
 8005162:	70fb      	strb	r3, [r7, #3]
	NVIC_Init(&NVIC_InitStructure);
 8005164:	463b      	mov	r3, r7
 8005166:	4618      	mov	r0, r3
 8005168:	f7fb fae8 	bl	800073c <NVIC_Init>
	NVIC_EnableIRQ(USART1_IRQn);
 800516c:	2025      	movs	r0, #37	; 0x25
 800516e:	f7ff ff2d 	bl	8004fcc <NVIC_EnableIRQ>
}
 8005172:	bf00      	nop
 8005174:	3720      	adds	r7, #32
 8005176:	46bd      	mov	sp, r7
 8005178:	bd80      	pop	{r7, pc}
 800517a:	bf00      	nop
 800517c:	40010800 	.word	0x40010800
 8005180:	40011000 	.word	0x40011000
 8005184:	40013800 	.word	0x40013800

08005188 <_Z7initSPIv>:

void initSPI()
{
 8005188:	b580      	push	{r7, lr}
 800518a:	b088      	sub	sp, #32
 800518c:	af00      	add	r7, sp, #0

	/*------------------SPI1------------------------------------------------*/
	RCC_APB2PeriphClockCmd(RCC_APB2Periph_SPI1 | RCC_APB2Periph_AFIO,ENABLE);
 800518e:	2101      	movs	r1, #1
 8005190:	f241 0001 	movw	r0, #4097	; 0x1001
 8005194:	f7fb fcd2 	bl	8000b3c <RCC_APB2PeriphClockCmd>
	RCC_APB2PeriphClockCmd(RCC_APB2Periph_GPIOA, ENABLE);
 8005198:	2101      	movs	r1, #1
 800519a:	2004      	movs	r0, #4
 800519c:	f7fb fcce 	bl	8000b3c <RCC_APB2PeriphClockCmd>
	RCC_APB2PeriphClockCmd(RCC_APB2Periph_GPIOC, ENABLE);
 80051a0:	2101      	movs	r1, #1
 80051a2:	2010      	movs	r0, #16
 80051a4:	f7fb fcca 	bl	8000b3c <RCC_APB2PeriphClockCmd>


	GPIO_InitTypeDef spiGpio;
	spiGpio.GPIO_Mode =		GPIO_Mode_AF_PP;
 80051a8:	2318      	movs	r3, #24
 80051aa:	77fb      	strb	r3, [r7, #31]
	spiGpio.GPIO_Pin = 		SPI1_MOSI_PIN | SPI1_CLK_PIN ;
 80051ac:	23a0      	movs	r3, #160	; 0xa0
 80051ae:	83bb      	strh	r3, [r7, #28]
	spiGpio.GPIO_Speed = 	GPIO_Speed_50MHz;
 80051b0:	2303      	movs	r3, #3
 80051b2:	77bb      	strb	r3, [r7, #30]
	GPIO_Init(GPIOA,&spiGpio);
 80051b4:	f107 031c 	add.w	r3, r7, #28
 80051b8:	4619      	mov	r1, r3
 80051ba:	485e      	ldr	r0, [pc, #376]	; (8005334 <_Z7initSPIv+0x1ac>)
 80051bc:	f7fb fb20 	bl	8000800 <GPIO_Init>

	spiGpio.GPIO_Mode = 	GPIO_Mode_Out_PP;
 80051c0:	2310      	movs	r3, #16
 80051c2:	77fb      	strb	r3, [r7, #31]
	spiGpio.GPIO_Pin =		SPI1_RES_PIN;
 80051c4:	2310      	movs	r3, #16
 80051c6:	83bb      	strh	r3, [r7, #28]
	spiGpio.GPIO_Speed = 	GPIO_Speed_50MHz;
 80051c8:	2303      	movs	r3, #3
 80051ca:	77bb      	strb	r3, [r7, #30]
	GPIO_Init(GPIOC,&spiGpio);
 80051cc:	f107 031c 	add.w	r3, r7, #28
 80051d0:	4619      	mov	r1, r3
 80051d2:	4859      	ldr	r0, [pc, #356]	; (8005338 <_Z7initSPIv+0x1b0>)
 80051d4:	f7fb fb14 	bl	8000800 <GPIO_Init>

	spiGpio.GPIO_Mode = 	GPIO_Mode_Out_PP;
 80051d8:	2310      	movs	r3, #16
 80051da:	77fb      	strb	r3, [r7, #31]
	spiGpio.GPIO_Pin =		SPI1_D_C_PIN | SPI1_CS_PIN ;
 80051dc:	2350      	movs	r3, #80	; 0x50
 80051de:	83bb      	strh	r3, [r7, #28]
	spiGpio.GPIO_Speed = 	GPIO_Speed_50MHz;
 80051e0:	2303      	movs	r3, #3
 80051e2:	77bb      	strb	r3, [r7, #30]
	GPIO_Init(GPIOA,&spiGpio);
 80051e4:	f107 031c 	add.w	r3, r7, #28
 80051e8:	4619      	mov	r1, r3
 80051ea:	4852      	ldr	r0, [pc, #328]	; (8005334 <_Z7initSPIv+0x1ac>)
 80051ec:	f7fb fb08 	bl	8000800 <GPIO_Init>

	GPIO_SetBits(GPIOC, SPI1_RES_PIN);
 80051f0:	2110      	movs	r1, #16
 80051f2:	4851      	ldr	r0, [pc, #324]	; (8005338 <_Z7initSPIv+0x1b0>)
 80051f4:	f7fb fbc0 	bl	8000978 <GPIO_SetBits>
	GPIO_SetBits(GPIOA, SPI1_D_C_PIN | SPI1_CS_PIN );
 80051f8:	2150      	movs	r1, #80	; 0x50
 80051fa:	484e      	ldr	r0, [pc, #312]	; (8005334 <_Z7initSPIv+0x1ac>)
 80051fc:	f7fb fbbc 	bl	8000978 <GPIO_SetBits>

	SPI_InitTypeDef spiConfig;
	SPI_StructInit(&spiConfig);
 8005200:	f107 0308 	add.w	r3, r7, #8
 8005204:	4618      	mov	r0, r3
 8005206:	f7fb fd19 	bl	8000c3c <SPI_StructInit>
	spiConfig.SPI_BaudRatePrescaler = SPI_BaudRatePrescaler_2;
 800520a:	2300      	movs	r3, #0
 800520c:	82bb      	strh	r3, [r7, #20]
	spiConfig.SPI_Mode = SPI_Mode_Master;
 800520e:	f44f 7382 	mov.w	r3, #260	; 0x104
 8005212:	817b      	strh	r3, [r7, #10]
	spiConfig.SPI_NSS = SPI_NSS_Soft;
 8005214:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005218:	827b      	strh	r3, [r7, #18]
	spiConfig.SPI_DataSize = SPI_DataSize_8b;
 800521a:	2300      	movs	r3, #0
 800521c:	81bb      	strh	r3, [r7, #12]
	spiConfig.SPI_Direction = SPI_Direction_1Line_Tx;
 800521e:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 8005222:	813b      	strh	r3, [r7, #8]
	spiConfig.SPI_FirstBit = SPI_FirstBit_MSB;
 8005224:	2300      	movs	r3, #0
 8005226:	82fb      	strh	r3, [r7, #22]
	spiConfig.SPI_CPOL = SPI_CPOL_High;
 8005228:	2302      	movs	r3, #2
 800522a:	81fb      	strh	r3, [r7, #14]
	spiConfig.SPI_CPHA = SPI_CPHA_2Edge;
 800522c:	2301      	movs	r3, #1
 800522e:	823b      	strh	r3, [r7, #16]
	spiConfig.SPI_CRCPolynomial = 7;
 8005230:	2307      	movs	r3, #7
 8005232:	833b      	strh	r3, [r7, #24]
	SPI_Init(SPI1,&spiConfig);
 8005234:	f107 0308 	add.w	r3, r7, #8
 8005238:	4619      	mov	r1, r3
 800523a:	4840      	ldr	r0, [pc, #256]	; (800533c <_Z7initSPIv+0x1b4>)
 800523c:	f7fb fcba 	bl	8000bb4 <SPI_Init>
	SPI_SSOutputCmd(SPI1,ENABLE);
 8005240:	2101      	movs	r1, #1
 8005242:	483e      	ldr	r0, [pc, #248]	; (800533c <_Z7initSPIv+0x1b4>)
 8005244:	f7fb fd88 	bl	8000d58 <SPI_SSOutputCmd>
	SPI_Cmd(SPI1,ENABLE);
 8005248:	2101      	movs	r1, #1
 800524a:	483c      	ldr	r0, [pc, #240]	; (800533c <_Z7initSPIv+0x1b4>)
 800524c:	f7fb fd1a 	bl	8000c84 <SPI_Cmd>


	NVIC_InitTypeDef NVIC_InitStructure;
	NVIC_InitStructure.NVIC_IRQChannel = SPI1_IRQn;
 8005250:	2323      	movs	r3, #35	; 0x23
 8005252:	713b      	strb	r3, [r7, #4]
	NVIC_InitStructure.NVIC_IRQChannelPreemptionPriority = 0;
 8005254:	2300      	movs	r3, #0
 8005256:	717b      	strb	r3, [r7, #5]
	NVIC_InitStructure.NVIC_IRQChannelSubPriority = 0;
 8005258:	2300      	movs	r3, #0
 800525a:	71bb      	strb	r3, [r7, #6]
	NVIC_InitStructure.NVIC_IRQChannelCmd = ENABLE;
 800525c:	2301      	movs	r3, #1
 800525e:	71fb      	strb	r3, [r7, #7]
	NVIC_Init(&NVIC_InitStructure);
 8005260:	1d3b      	adds	r3, r7, #4
 8005262:	4618      	mov	r0, r3
 8005264:	f7fb fa6a 	bl	800073c <NVIC_Init>

	NVIC_EnableIRQ(SPI1_IRQn);
 8005268:	2023      	movs	r0, #35	; 0x23
 800526a:	f7ff feaf 	bl	8004fcc <NVIC_EnableIRQ>

	/*------------------SPI2------------------------------------------------*/
	RCC_APB1PeriphClockCmd(RCC_APB1Periph_SPI2,ENABLE);
 800526e:	2101      	movs	r1, #1
 8005270:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8005274:	f7fb fc80 	bl	8000b78 <RCC_APB1PeriphClockCmd>
	RCC_APB2PeriphClockCmd(RCC_APB2Periph_GPIOB, ENABLE);
 8005278:	2101      	movs	r1, #1
 800527a:	2008      	movs	r0, #8
 800527c:	f7fb fc5e 	bl	8000b3c <RCC_APB2PeriphClockCmd>

	spiGpio.GPIO_Mode =	GPIO_Mode_AF_PP;
 8005280:	2318      	movs	r3, #24
 8005282:	77fb      	strb	r3, [r7, #31]
	spiGpio.GPIO_Pin = 	SPI2_MOSI_PIN | SPI2_CLK_PIN | SPI2_MISO_PIN;
 8005284:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 8005288:	83bb      	strh	r3, [r7, #28]
	spiGpio.GPIO_Speed = 	GPIO_Speed_50MHz;
 800528a:	2303      	movs	r3, #3
 800528c:	77bb      	strb	r3, [r7, #30]
	GPIO_Init(GPIOB,&spiGpio);
 800528e:	f107 031c 	add.w	r3, r7, #28
 8005292:	4619      	mov	r1, r3
 8005294:	482a      	ldr	r0, [pc, #168]	; (8005340 <_Z7initSPIv+0x1b8>)
 8005296:	f7fb fab3 	bl	8000800 <GPIO_Init>

	spiGpio.GPIO_Mode = 	GPIO_Mode_Out_PP;
 800529a:	2310      	movs	r3, #16
 800529c:	77fb      	strb	r3, [r7, #31]
	spiGpio.GPIO_Pin =		SPI2_CS_PIN;
 800529e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80052a2:	83bb      	strh	r3, [r7, #28]
	spiGpio.GPIO_Speed = 	GPIO_Speed_50MHz;
 80052a4:	2303      	movs	r3, #3
 80052a6:	77bb      	strb	r3, [r7, #30]
	GPIO_Init(GPIOB,&spiGpio);
 80052a8:	f107 031c 	add.w	r3, r7, #28
 80052ac:	4619      	mov	r1, r3
 80052ae:	4824      	ldr	r0, [pc, #144]	; (8005340 <_Z7initSPIv+0x1b8>)
 80052b0:	f7fb faa6 	bl	8000800 <GPIO_Init>

	GPIO_SetBits(GPIOB, SPI2_CS_PIN);
 80052b4:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80052b8:	4821      	ldr	r0, [pc, #132]	; (8005340 <_Z7initSPIv+0x1b8>)
 80052ba:	f7fb fb5d 	bl	8000978 <GPIO_SetBits>

	SPI_StructInit(&spiConfig);
 80052be:	f107 0308 	add.w	r3, r7, #8
 80052c2:	4618      	mov	r0, r3
 80052c4:	f7fb fcba 	bl	8000c3c <SPI_StructInit>
	spiConfig.SPI_BaudRatePrescaler = SPI_BaudRatePrescaler_16;
 80052c8:	2318      	movs	r3, #24
 80052ca:	82bb      	strh	r3, [r7, #20]
	spiConfig.SPI_Mode = SPI_Mode_Master;
 80052cc:	f44f 7382 	mov.w	r3, #260	; 0x104
 80052d0:	817b      	strh	r3, [r7, #10]
	spiConfig.SPI_NSS = SPI_NSS_Soft;
 80052d2:	f44f 7300 	mov.w	r3, #512	; 0x200
 80052d6:	827b      	strh	r3, [r7, #18]
	spiConfig.SPI_DataSize = SPI_DataSize_8b;
 80052d8:	2300      	movs	r3, #0
 80052da:	81bb      	strh	r3, [r7, #12]
	spiConfig.SPI_Direction = SPI_Direction_2Lines_FullDuplex;
 80052dc:	2300      	movs	r3, #0
 80052de:	813b      	strh	r3, [r7, #8]
	spiConfig.SPI_FirstBit = SPI_FirstBit_MSB;
 80052e0:	2300      	movs	r3, #0
 80052e2:	82fb      	strh	r3, [r7, #22]
	spiConfig.SPI_CPOL = SPI_CPOL_High;
 80052e4:	2302      	movs	r3, #2
 80052e6:	81fb      	strh	r3, [r7, #14]
	spiConfig.SPI_CPHA = SPI_CPHA_2Edge;
 80052e8:	2301      	movs	r3, #1
 80052ea:	823b      	strh	r3, [r7, #16]
	spiConfig.SPI_CRCPolynomial = 7;
 80052ec:	2307      	movs	r3, #7
 80052ee:	833b      	strh	r3, [r7, #24]
	SPI_Init(SPI2,&spiConfig);
 80052f0:	f107 0308 	add.w	r3, r7, #8
 80052f4:	4619      	mov	r1, r3
 80052f6:	4813      	ldr	r0, [pc, #76]	; (8005344 <_Z7initSPIv+0x1bc>)
 80052f8:	f7fb fc5c 	bl	8000bb4 <SPI_Init>
	SPI_SSOutputCmd(SPI2,ENABLE);
 80052fc:	2101      	movs	r1, #1
 80052fe:	4811      	ldr	r0, [pc, #68]	; (8005344 <_Z7initSPIv+0x1bc>)
 8005300:	f7fb fd2a 	bl	8000d58 <SPI_SSOutputCmd>
	SPI_Cmd(SPI2,ENABLE);
 8005304:	2101      	movs	r1, #1
 8005306:	480f      	ldr	r0, [pc, #60]	; (8005344 <_Z7initSPIv+0x1bc>)
 8005308:	f7fb fcbc 	bl	8000c84 <SPI_Cmd>

	NVIC_InitStructure.NVIC_IRQChannel = SPI2_IRQn;
 800530c:	2324      	movs	r3, #36	; 0x24
 800530e:	713b      	strb	r3, [r7, #4]
	NVIC_InitStructure.NVIC_IRQChannelPreemptionPriority = 0;
 8005310:	2300      	movs	r3, #0
 8005312:	717b      	strb	r3, [r7, #5]
	NVIC_InitStructure.NVIC_IRQChannelSubPriority = 1;
 8005314:	2301      	movs	r3, #1
 8005316:	71bb      	strb	r3, [r7, #6]
	NVIC_InitStructure.NVIC_IRQChannelCmd = ENABLE;
 8005318:	2301      	movs	r3, #1
 800531a:	71fb      	strb	r3, [r7, #7]
	NVIC_Init(&NVIC_InitStructure);
 800531c:	1d3b      	adds	r3, r7, #4
 800531e:	4618      	mov	r0, r3
 8005320:	f7fb fa0c 	bl	800073c <NVIC_Init>

	NVIC_EnableIRQ(SPI2_IRQn);
 8005324:	2024      	movs	r0, #36	; 0x24
 8005326:	f7ff fe51 	bl	8004fcc <NVIC_EnableIRQ>
	/*------------------SPI3------------------------------------------------*/
}
 800532a:	bf00      	nop
 800532c:	3720      	adds	r7, #32
 800532e:	46bd      	mov	sp, r7
 8005330:	bd80      	pop	{r7, pc}
 8005332:	bf00      	nop
 8005334:	40010800 	.word	0x40010800
 8005338:	40011000 	.word	0x40011000
 800533c:	40013000 	.word	0x40013000
 8005340:	40010c00 	.word	0x40010c00
 8005344:	40003800 	.word	0x40003800

08005348 <__cxa_pure_virtual>:
 8005348:	b508      	push	{r3, lr}
 800534a:	f000 f81d 	bl	8005388 <_ZSt9terminatev>

0800534e <_Znwj>:
 800534e:	b510      	push	{r4, lr}
 8005350:	2800      	cmp	r0, #0
 8005352:	bf14      	ite	ne
 8005354:	4604      	movne	r4, r0
 8005356:	2401      	moveq	r4, #1
 8005358:	4620      	mov	r0, r4
 800535a:	f000 f9b1 	bl	80056c0 <malloc>
 800535e:	b930      	cbnz	r0, 800536e <_Znwj+0x20>
 8005360:	f000 f822 	bl	80053a8 <_ZSt15get_new_handlerv>
 8005364:	b908      	cbnz	r0, 800536a <_Znwj+0x1c>
 8005366:	f000 f96f 	bl	8005648 <abort>
 800536a:	4780      	blx	r0
 800536c:	e7f4      	b.n	8005358 <_Znwj+0xa>
 800536e:	bd10      	pop	{r4, pc}

08005370 <_ZN10__cxxabiv111__terminateEPFvvE>:
 8005370:	b508      	push	{r3, lr}
 8005372:	4780      	blx	r0
 8005374:	f000 f968 	bl	8005648 <abort>

08005378 <_ZSt13get_terminatev>:
 8005378:	4b02      	ldr	r3, [pc, #8]	; (8005384 <_ZSt13get_terminatev+0xc>)
 800537a:	6818      	ldr	r0, [r3, #0]
 800537c:	f3bf 8f5f 	dmb	sy
 8005380:	4770      	bx	lr
 8005382:	bf00      	nop
 8005384:	20000018 	.word	0x20000018

08005388 <_ZSt9terminatev>:
 8005388:	b508      	push	{r3, lr}
 800538a:	f7ff fff5 	bl	8005378 <_ZSt13get_terminatev>
 800538e:	f7ff ffef 	bl	8005370 <_ZN10__cxxabiv111__terminateEPFvvE>

08005392 <__aeabi_atexit>:
 8005392:	460b      	mov	r3, r1
 8005394:	4601      	mov	r1, r0
 8005396:	4618      	mov	r0, r3
 8005398:	f000 b95e 	b.w	8005658 <__cxa_atexit>

0800539c <_ZdlPv>:
 800539c:	f000 b998 	b.w	80056d0 <free>

080053a0 <_ZSt17__throw_bad_allocv>:
 80053a0:	b508      	push	{r3, lr}
 80053a2:	f000 f951 	bl	8005648 <abort>
	...

080053a8 <_ZSt15get_new_handlerv>:
 80053a8:	4b02      	ldr	r3, [pc, #8]	; (80053b4 <_ZSt15get_new_handlerv+0xc>)
 80053aa:	6818      	ldr	r0, [r3, #0]
 80053ac:	f3bf 8f5f 	dmb	sy
 80053b0:	4770      	bx	lr
 80053b2:	bf00      	nop
 80053b4:	20000204 	.word	0x20000204

080053b8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj>:
 80053b8:	4b24      	ldr	r3, [pc, #144]	; (800544c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0x94>)
 80053ba:	681a      	ldr	r2, [r3, #0]
 80053bc:	07d0      	lsls	r0, r2, #31
 80053be:	bf5c      	itt	pl
 80053c0:	2201      	movpl	r2, #1
 80053c2:	601a      	strpl	r2, [r3, #0]
 80053c4:	4b22      	ldr	r3, [pc, #136]	; (8005450 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0x98>)
 80053c6:	681a      	ldr	r2, [r3, #0]
 80053c8:	07d1      	lsls	r1, r2, #31
 80053ca:	bf5c      	itt	pl
 80053cc:	2201      	movpl	r2, #1
 80053ce:	601a      	strpl	r2, [r3, #0]
 80053d0:	4b20      	ldr	r3, [pc, #128]	; (8005454 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0x9c>)
 80053d2:	681a      	ldr	r2, [r3, #0]
 80053d4:	07d2      	lsls	r2, r2, #31
 80053d6:	bf5c      	itt	pl
 80053d8:	2201      	movpl	r2, #1
 80053da:	601a      	strpl	r2, [r3, #0]
 80053dc:	4b1e      	ldr	r3, [pc, #120]	; (8005458 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xa0>)
 80053de:	681a      	ldr	r2, [r3, #0]
 80053e0:	07d0      	lsls	r0, r2, #31
 80053e2:	bf5c      	itt	pl
 80053e4:	2201      	movpl	r2, #1
 80053e6:	601a      	strpl	r2, [r3, #0]
 80053e8:	4b1c      	ldr	r3, [pc, #112]	; (800545c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xa4>)
 80053ea:	681a      	ldr	r2, [r3, #0]
 80053ec:	07d1      	lsls	r1, r2, #31
 80053ee:	bf5c      	itt	pl
 80053f0:	2201      	movpl	r2, #1
 80053f2:	601a      	strpl	r2, [r3, #0]
 80053f4:	4b1a      	ldr	r3, [pc, #104]	; (8005460 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xa8>)
 80053f6:	681a      	ldr	r2, [r3, #0]
 80053f8:	07d2      	lsls	r2, r2, #31
 80053fa:	bf5c      	itt	pl
 80053fc:	2201      	movpl	r2, #1
 80053fe:	601a      	strpl	r2, [r3, #0]
 8005400:	4b18      	ldr	r3, [pc, #96]	; (8005464 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xac>)
 8005402:	681a      	ldr	r2, [r3, #0]
 8005404:	07d0      	lsls	r0, r2, #31
 8005406:	bf5c      	itt	pl
 8005408:	2201      	movpl	r2, #1
 800540a:	601a      	strpl	r2, [r3, #0]
 800540c:	4b16      	ldr	r3, [pc, #88]	; (8005468 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xb0>)
 800540e:	681a      	ldr	r2, [r3, #0]
 8005410:	07d1      	lsls	r1, r2, #31
 8005412:	bf5c      	itt	pl
 8005414:	2201      	movpl	r2, #1
 8005416:	601a      	strpl	r2, [r3, #0]
 8005418:	4b14      	ldr	r3, [pc, #80]	; (800546c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xb4>)
 800541a:	681a      	ldr	r2, [r3, #0]
 800541c:	07d2      	lsls	r2, r2, #31
 800541e:	bf5c      	itt	pl
 8005420:	2201      	movpl	r2, #1
 8005422:	601a      	strpl	r2, [r3, #0]
 8005424:	4b12      	ldr	r3, [pc, #72]	; (8005470 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xb8>)
 8005426:	681a      	ldr	r2, [r3, #0]
 8005428:	07d0      	lsls	r0, r2, #31
 800542a:	bf5c      	itt	pl
 800542c:	2201      	movpl	r2, #1
 800542e:	601a      	strpl	r2, [r3, #0]
 8005430:	4b10      	ldr	r3, [pc, #64]	; (8005474 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xbc>)
 8005432:	681a      	ldr	r2, [r3, #0]
 8005434:	07d1      	lsls	r1, r2, #31
 8005436:	bf5c      	itt	pl
 8005438:	2201      	movpl	r2, #1
 800543a:	601a      	strpl	r2, [r3, #0]
 800543c:	4b0e      	ldr	r3, [pc, #56]	; (8005478 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xc0>)
 800543e:	681a      	ldr	r2, [r3, #0]
 8005440:	07d2      	lsls	r2, r2, #31
 8005442:	bf5c      	itt	pl
 8005444:	2201      	movpl	r2, #1
 8005446:	601a      	strpl	r2, [r3, #0]
 8005448:	4770      	bx	lr
 800544a:	bf00      	nop
 800544c:	20000234 	.word	0x20000234
 8005450:	20000230 	.word	0x20000230
 8005454:	2000022c 	.word	0x2000022c
 8005458:	20000228 	.word	0x20000228
 800545c:	20000224 	.word	0x20000224
 8005460:	20000220 	.word	0x20000220
 8005464:	2000021c 	.word	0x2000021c
 8005468:	20000218 	.word	0x20000218
 800546c:	20000214 	.word	0x20000214
 8005470:	20000210 	.word	0x20000210
 8005474:	2000020c 	.word	0x2000020c
 8005478:	20000208 	.word	0x20000208

0800547c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj>:
 800547c:	4b24      	ldr	r3, [pc, #144]	; (8005510 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0x94>)
 800547e:	681a      	ldr	r2, [r3, #0]
 8005480:	07d0      	lsls	r0, r2, #31
 8005482:	bf5c      	itt	pl
 8005484:	2201      	movpl	r2, #1
 8005486:	601a      	strpl	r2, [r3, #0]
 8005488:	4b22      	ldr	r3, [pc, #136]	; (8005514 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0x98>)
 800548a:	681a      	ldr	r2, [r3, #0]
 800548c:	07d1      	lsls	r1, r2, #31
 800548e:	bf5c      	itt	pl
 8005490:	2201      	movpl	r2, #1
 8005492:	601a      	strpl	r2, [r3, #0]
 8005494:	4b20      	ldr	r3, [pc, #128]	; (8005518 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0x9c>)
 8005496:	681a      	ldr	r2, [r3, #0]
 8005498:	07d2      	lsls	r2, r2, #31
 800549a:	bf5c      	itt	pl
 800549c:	2201      	movpl	r2, #1
 800549e:	601a      	strpl	r2, [r3, #0]
 80054a0:	4b1e      	ldr	r3, [pc, #120]	; (800551c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xa0>)
 80054a2:	681a      	ldr	r2, [r3, #0]
 80054a4:	07d0      	lsls	r0, r2, #31
 80054a6:	bf5c      	itt	pl
 80054a8:	2201      	movpl	r2, #1
 80054aa:	601a      	strpl	r2, [r3, #0]
 80054ac:	4b1c      	ldr	r3, [pc, #112]	; (8005520 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xa4>)
 80054ae:	681a      	ldr	r2, [r3, #0]
 80054b0:	07d1      	lsls	r1, r2, #31
 80054b2:	bf5c      	itt	pl
 80054b4:	2201      	movpl	r2, #1
 80054b6:	601a      	strpl	r2, [r3, #0]
 80054b8:	4b1a      	ldr	r3, [pc, #104]	; (8005524 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xa8>)
 80054ba:	681a      	ldr	r2, [r3, #0]
 80054bc:	07d2      	lsls	r2, r2, #31
 80054be:	bf5c      	itt	pl
 80054c0:	2201      	movpl	r2, #1
 80054c2:	601a      	strpl	r2, [r3, #0]
 80054c4:	4b18      	ldr	r3, [pc, #96]	; (8005528 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xac>)
 80054c6:	681a      	ldr	r2, [r3, #0]
 80054c8:	07d0      	lsls	r0, r2, #31
 80054ca:	bf5c      	itt	pl
 80054cc:	2201      	movpl	r2, #1
 80054ce:	601a      	strpl	r2, [r3, #0]
 80054d0:	4b16      	ldr	r3, [pc, #88]	; (800552c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xb0>)
 80054d2:	681a      	ldr	r2, [r3, #0]
 80054d4:	07d1      	lsls	r1, r2, #31
 80054d6:	bf5c      	itt	pl
 80054d8:	2201      	movpl	r2, #1
 80054da:	601a      	strpl	r2, [r3, #0]
 80054dc:	4b14      	ldr	r3, [pc, #80]	; (8005530 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xb4>)
 80054de:	681a      	ldr	r2, [r3, #0]
 80054e0:	07d2      	lsls	r2, r2, #31
 80054e2:	bf5c      	itt	pl
 80054e4:	2201      	movpl	r2, #1
 80054e6:	601a      	strpl	r2, [r3, #0]
 80054e8:	4b12      	ldr	r3, [pc, #72]	; (8005534 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xb8>)
 80054ea:	681a      	ldr	r2, [r3, #0]
 80054ec:	07d0      	lsls	r0, r2, #31
 80054ee:	bf5c      	itt	pl
 80054f0:	2201      	movpl	r2, #1
 80054f2:	601a      	strpl	r2, [r3, #0]
 80054f4:	4b10      	ldr	r3, [pc, #64]	; (8005538 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xbc>)
 80054f6:	681a      	ldr	r2, [r3, #0]
 80054f8:	07d1      	lsls	r1, r2, #31
 80054fa:	bf5c      	itt	pl
 80054fc:	2201      	movpl	r2, #1
 80054fe:	601a      	strpl	r2, [r3, #0]
 8005500:	4b0e      	ldr	r3, [pc, #56]	; (800553c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xc0>)
 8005502:	681a      	ldr	r2, [r3, #0]
 8005504:	07d2      	lsls	r2, r2, #31
 8005506:	bf5c      	itt	pl
 8005508:	2201      	movpl	r2, #1
 800550a:	601a      	strpl	r2, [r3, #0]
 800550c:	4770      	bx	lr
 800550e:	bf00      	nop
 8005510:	20000264 	.word	0x20000264
 8005514:	20000260 	.word	0x20000260
 8005518:	2000025c 	.word	0x2000025c
 800551c:	20000258 	.word	0x20000258
 8005520:	20000254 	.word	0x20000254
 8005524:	20000250 	.word	0x20000250
 8005528:	2000024c 	.word	0x2000024c
 800552c:	20000248 	.word	0x20000248
 8005530:	20000244 	.word	0x20000244
 8005534:	20000240 	.word	0x20000240
 8005538:	2000023c 	.word	0x2000023c
 800553c:	20000238 	.word	0x20000238

08005540 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj>:
 8005540:	4b18      	ldr	r3, [pc, #96]	; (80055a4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x64>)
 8005542:	681a      	ldr	r2, [r3, #0]
 8005544:	07d1      	lsls	r1, r2, #31
 8005546:	bf5c      	itt	pl
 8005548:	2201      	movpl	r2, #1
 800554a:	601a      	strpl	r2, [r3, #0]
 800554c:	4b16      	ldr	r3, [pc, #88]	; (80055a8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x68>)
 800554e:	681a      	ldr	r2, [r3, #0]
 8005550:	07d2      	lsls	r2, r2, #31
 8005552:	bf5c      	itt	pl
 8005554:	2201      	movpl	r2, #1
 8005556:	601a      	strpl	r2, [r3, #0]
 8005558:	4b14      	ldr	r3, [pc, #80]	; (80055ac <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x6c>)
 800555a:	681a      	ldr	r2, [r3, #0]
 800555c:	07d0      	lsls	r0, r2, #31
 800555e:	bf5c      	itt	pl
 8005560:	2201      	movpl	r2, #1
 8005562:	601a      	strpl	r2, [r3, #0]
 8005564:	4b12      	ldr	r3, [pc, #72]	; (80055b0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x70>)
 8005566:	681a      	ldr	r2, [r3, #0]
 8005568:	07d1      	lsls	r1, r2, #31
 800556a:	bf5c      	itt	pl
 800556c:	2201      	movpl	r2, #1
 800556e:	601a      	strpl	r2, [r3, #0]
 8005570:	4b10      	ldr	r3, [pc, #64]	; (80055b4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x74>)
 8005572:	681a      	ldr	r2, [r3, #0]
 8005574:	07d2      	lsls	r2, r2, #31
 8005576:	bf5c      	itt	pl
 8005578:	2201      	movpl	r2, #1
 800557a:	601a      	strpl	r2, [r3, #0]
 800557c:	4b0e      	ldr	r3, [pc, #56]	; (80055b8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x78>)
 800557e:	681a      	ldr	r2, [r3, #0]
 8005580:	07d0      	lsls	r0, r2, #31
 8005582:	bf5c      	itt	pl
 8005584:	2201      	movpl	r2, #1
 8005586:	601a      	strpl	r2, [r3, #0]
 8005588:	4b0c      	ldr	r3, [pc, #48]	; (80055bc <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x7c>)
 800558a:	681a      	ldr	r2, [r3, #0]
 800558c:	07d1      	lsls	r1, r2, #31
 800558e:	bf5c      	itt	pl
 8005590:	2201      	movpl	r2, #1
 8005592:	601a      	strpl	r2, [r3, #0]
 8005594:	4b0a      	ldr	r3, [pc, #40]	; (80055c0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x80>)
 8005596:	681a      	ldr	r2, [r3, #0]
 8005598:	07d2      	lsls	r2, r2, #31
 800559a:	bf5c      	itt	pl
 800559c:	2201      	movpl	r2, #1
 800559e:	601a      	strpl	r2, [r3, #0]
 80055a0:	4770      	bx	lr
 80055a2:	bf00      	nop
 80055a4:	20000284 	.word	0x20000284
 80055a8:	20000280 	.word	0x20000280
 80055ac:	2000027c 	.word	0x2000027c
 80055b0:	20000278 	.word	0x20000278
 80055b4:	20000274 	.word	0x20000274
 80055b8:	20000270 	.word	0x20000270
 80055bc:	2000026c 	.word	0x2000026c
 80055c0:	20000268 	.word	0x20000268

080055c4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj>:
 80055c4:	4b18      	ldr	r3, [pc, #96]	; (8005628 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x64>)
 80055c6:	681a      	ldr	r2, [r3, #0]
 80055c8:	07d1      	lsls	r1, r2, #31
 80055ca:	bf5c      	itt	pl
 80055cc:	2201      	movpl	r2, #1
 80055ce:	601a      	strpl	r2, [r3, #0]
 80055d0:	4b16      	ldr	r3, [pc, #88]	; (800562c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x68>)
 80055d2:	681a      	ldr	r2, [r3, #0]
 80055d4:	07d2      	lsls	r2, r2, #31
 80055d6:	bf5c      	itt	pl
 80055d8:	2201      	movpl	r2, #1
 80055da:	601a      	strpl	r2, [r3, #0]
 80055dc:	4b14      	ldr	r3, [pc, #80]	; (8005630 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x6c>)
 80055de:	681a      	ldr	r2, [r3, #0]
 80055e0:	07d0      	lsls	r0, r2, #31
 80055e2:	bf5c      	itt	pl
 80055e4:	2201      	movpl	r2, #1
 80055e6:	601a      	strpl	r2, [r3, #0]
 80055e8:	4b12      	ldr	r3, [pc, #72]	; (8005634 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x70>)
 80055ea:	681a      	ldr	r2, [r3, #0]
 80055ec:	07d1      	lsls	r1, r2, #31
 80055ee:	bf5c      	itt	pl
 80055f0:	2201      	movpl	r2, #1
 80055f2:	601a      	strpl	r2, [r3, #0]
 80055f4:	4b10      	ldr	r3, [pc, #64]	; (8005638 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x74>)
 80055f6:	681a      	ldr	r2, [r3, #0]
 80055f8:	07d2      	lsls	r2, r2, #31
 80055fa:	bf5c      	itt	pl
 80055fc:	2201      	movpl	r2, #1
 80055fe:	601a      	strpl	r2, [r3, #0]
 8005600:	4b0e      	ldr	r3, [pc, #56]	; (800563c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x78>)
 8005602:	681a      	ldr	r2, [r3, #0]
 8005604:	07d0      	lsls	r0, r2, #31
 8005606:	bf5c      	itt	pl
 8005608:	2201      	movpl	r2, #1
 800560a:	601a      	strpl	r2, [r3, #0]
 800560c:	4b0c      	ldr	r3, [pc, #48]	; (8005640 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x7c>)
 800560e:	681a      	ldr	r2, [r3, #0]
 8005610:	07d1      	lsls	r1, r2, #31
 8005612:	bf5c      	itt	pl
 8005614:	2201      	movpl	r2, #1
 8005616:	601a      	strpl	r2, [r3, #0]
 8005618:	4b0a      	ldr	r3, [pc, #40]	; (8005644 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x80>)
 800561a:	681a      	ldr	r2, [r3, #0]
 800561c:	07d2      	lsls	r2, r2, #31
 800561e:	bf5c      	itt	pl
 8005620:	2201      	movpl	r2, #1
 8005622:	601a      	strpl	r2, [r3, #0]
 8005624:	4770      	bx	lr
 8005626:	bf00      	nop
 8005628:	200002a4 	.word	0x200002a4
 800562c:	200002a0 	.word	0x200002a0
 8005630:	2000029c 	.word	0x2000029c
 8005634:	20000298 	.word	0x20000298
 8005638:	20000294 	.word	0x20000294
 800563c:	20000290 	.word	0x20000290
 8005640:	2000028c 	.word	0x2000028c
 8005644:	20000288 	.word	0x20000288

08005648 <abort>:
 8005648:	b508      	push	{r3, lr}
 800564a:	2006      	movs	r0, #6
 800564c:	f000 f948 	bl	80058e0 <raise>
 8005650:	2001      	movs	r0, #1
 8005652:	f000 f981 	bl	8005958 <_exit>
	...

08005658 <__cxa_atexit>:
 8005658:	b510      	push	{r4, lr}
 800565a:	4c05      	ldr	r4, [pc, #20]	; (8005670 <__cxa_atexit+0x18>)
 800565c:	4613      	mov	r3, r2
 800565e:	b12c      	cbz	r4, 800566c <__cxa_atexit+0x14>
 8005660:	460a      	mov	r2, r1
 8005662:	4601      	mov	r1, r0
 8005664:	2002      	movs	r0, #2
 8005666:	f3af 8000 	nop.w
 800566a:	bd10      	pop	{r4, pc}
 800566c:	4620      	mov	r0, r4
 800566e:	bd10      	pop	{r4, pc}
 8005670:	00000000 	.word	0x00000000

08005674 <__libc_init_array>:
 8005674:	4b0e      	ldr	r3, [pc, #56]	; (80056b0 <__libc_init_array+0x3c>)
 8005676:	b570      	push	{r4, r5, r6, lr}
 8005678:	461e      	mov	r6, r3
 800567a:	4c0e      	ldr	r4, [pc, #56]	; (80056b4 <__libc_init_array+0x40>)
 800567c:	2500      	movs	r5, #0
 800567e:	1ae4      	subs	r4, r4, r3
 8005680:	10a4      	asrs	r4, r4, #2
 8005682:	42a5      	cmp	r5, r4
 8005684:	d004      	beq.n	8005690 <__libc_init_array+0x1c>
 8005686:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800568a:	4798      	blx	r3
 800568c:	3501      	adds	r5, #1
 800568e:	e7f8      	b.n	8005682 <__libc_init_array+0xe>
 8005690:	f000 f964 	bl	800595c <_init>
 8005694:	4b08      	ldr	r3, [pc, #32]	; (80056b8 <__libc_init_array+0x44>)
 8005696:	4c09      	ldr	r4, [pc, #36]	; (80056bc <__libc_init_array+0x48>)
 8005698:	461e      	mov	r6, r3
 800569a:	1ae4      	subs	r4, r4, r3
 800569c:	10a4      	asrs	r4, r4, #2
 800569e:	2500      	movs	r5, #0
 80056a0:	42a5      	cmp	r5, r4
 80056a2:	d004      	beq.n	80056ae <__libc_init_array+0x3a>
 80056a4:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80056a8:	4798      	blx	r3
 80056aa:	3501      	adds	r5, #1
 80056ac:	e7f8      	b.n	80056a0 <__libc_init_array+0x2c>
 80056ae:	bd70      	pop	{r4, r5, r6, pc}
 80056b0:	08005abc 	.word	0x08005abc
 80056b4:	08005abc 	.word	0x08005abc
 80056b8:	08005abc 	.word	0x08005abc
 80056bc:	08005ad4 	.word	0x08005ad4

080056c0 <malloc>:
 80056c0:	4b02      	ldr	r3, [pc, #8]	; (80056cc <malloc+0xc>)
 80056c2:	4601      	mov	r1, r0
 80056c4:	6818      	ldr	r0, [r3, #0]
 80056c6:	f000 b873 	b.w	80057b0 <_malloc_r>
 80056ca:	bf00      	nop
 80056cc:	2000007c 	.word	0x2000007c

080056d0 <free>:
 80056d0:	4b02      	ldr	r3, [pc, #8]	; (80056dc <free+0xc>)
 80056d2:	4601      	mov	r1, r0
 80056d4:	6818      	ldr	r0, [r3, #0]
 80056d6:	f000 b81f 	b.w	8005718 <_free_r>
 80056da:	bf00      	nop
 80056dc:	2000007c 	.word	0x2000007c

080056e0 <memmove>:
 80056e0:	4288      	cmp	r0, r1
 80056e2:	b510      	push	{r4, lr}
 80056e4:	eb01 0302 	add.w	r3, r1, r2
 80056e8:	d801      	bhi.n	80056ee <memmove+0xe>
 80056ea:	1e42      	subs	r2, r0, #1
 80056ec:	e00b      	b.n	8005706 <memmove+0x26>
 80056ee:	4298      	cmp	r0, r3
 80056f0:	d2fb      	bcs.n	80056ea <memmove+0xa>
 80056f2:	1881      	adds	r1, r0, r2
 80056f4:	1ad2      	subs	r2, r2, r3
 80056f6:	42d3      	cmn	r3, r2
 80056f8:	d004      	beq.n	8005704 <memmove+0x24>
 80056fa:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80056fe:	f801 4d01 	strb.w	r4, [r1, #-1]!
 8005702:	e7f8      	b.n	80056f6 <memmove+0x16>
 8005704:	bd10      	pop	{r4, pc}
 8005706:	4299      	cmp	r1, r3
 8005708:	d004      	beq.n	8005714 <memmove+0x34>
 800570a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800570e:	f802 4f01 	strb.w	r4, [r2, #1]!
 8005712:	e7f8      	b.n	8005706 <memmove+0x26>
 8005714:	bd10      	pop	{r4, pc}
	...

08005718 <_free_r>:
 8005718:	b538      	push	{r3, r4, r5, lr}
 800571a:	4605      	mov	r5, r0
 800571c:	2900      	cmp	r1, #0
 800571e:	d044      	beq.n	80057aa <_free_r+0x92>
 8005720:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005724:	1f0c      	subs	r4, r1, #4
 8005726:	2b00      	cmp	r3, #0
 8005728:	bfb8      	it	lt
 800572a:	18e4      	addlt	r4, r4, r3
 800572c:	f000 f8f4 	bl	8005918 <__malloc_lock>
 8005730:	4a1e      	ldr	r2, [pc, #120]	; (80057ac <_free_r+0x94>)
 8005732:	6813      	ldr	r3, [r2, #0]
 8005734:	4611      	mov	r1, r2
 8005736:	b913      	cbnz	r3, 800573e <_free_r+0x26>
 8005738:	6063      	str	r3, [r4, #4]
 800573a:	6014      	str	r4, [r2, #0]
 800573c:	e030      	b.n	80057a0 <_free_r+0x88>
 800573e:	42a3      	cmp	r3, r4
 8005740:	d90d      	bls.n	800575e <_free_r+0x46>
 8005742:	6822      	ldr	r2, [r4, #0]
 8005744:	18a0      	adds	r0, r4, r2
 8005746:	4283      	cmp	r3, r0
 8005748:	bf01      	itttt	eq
 800574a:	6818      	ldreq	r0, [r3, #0]
 800574c:	685b      	ldreq	r3, [r3, #4]
 800574e:	1812      	addeq	r2, r2, r0
 8005750:	6022      	streq	r2, [r4, #0]
 8005752:	6063      	str	r3, [r4, #4]
 8005754:	600c      	str	r4, [r1, #0]
 8005756:	e023      	b.n	80057a0 <_free_r+0x88>
 8005758:	42a2      	cmp	r2, r4
 800575a:	d803      	bhi.n	8005764 <_free_r+0x4c>
 800575c:	4613      	mov	r3, r2
 800575e:	685a      	ldr	r2, [r3, #4]
 8005760:	2a00      	cmp	r2, #0
 8005762:	d1f9      	bne.n	8005758 <_free_r+0x40>
 8005764:	6818      	ldr	r0, [r3, #0]
 8005766:	1819      	adds	r1, r3, r0
 8005768:	42a1      	cmp	r1, r4
 800576a:	d10b      	bne.n	8005784 <_free_r+0x6c>
 800576c:	6821      	ldr	r1, [r4, #0]
 800576e:	4401      	add	r1, r0
 8005770:	1858      	adds	r0, r3, r1
 8005772:	4282      	cmp	r2, r0
 8005774:	6019      	str	r1, [r3, #0]
 8005776:	d113      	bne.n	80057a0 <_free_r+0x88>
 8005778:	6810      	ldr	r0, [r2, #0]
 800577a:	6852      	ldr	r2, [r2, #4]
 800577c:	4401      	add	r1, r0
 800577e:	6019      	str	r1, [r3, #0]
 8005780:	605a      	str	r2, [r3, #4]
 8005782:	e00d      	b.n	80057a0 <_free_r+0x88>
 8005784:	d902      	bls.n	800578c <_free_r+0x74>
 8005786:	230c      	movs	r3, #12
 8005788:	602b      	str	r3, [r5, #0]
 800578a:	e009      	b.n	80057a0 <_free_r+0x88>
 800578c:	6821      	ldr	r1, [r4, #0]
 800578e:	1860      	adds	r0, r4, r1
 8005790:	4282      	cmp	r2, r0
 8005792:	bf01      	itttt	eq
 8005794:	6810      	ldreq	r0, [r2, #0]
 8005796:	6852      	ldreq	r2, [r2, #4]
 8005798:	1809      	addeq	r1, r1, r0
 800579a:	6021      	streq	r1, [r4, #0]
 800579c:	6062      	str	r2, [r4, #4]
 800579e:	605c      	str	r4, [r3, #4]
 80057a0:	4628      	mov	r0, r5
 80057a2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80057a6:	f000 b8b8 	b.w	800591a <__malloc_unlock>
 80057aa:	bd38      	pop	{r3, r4, r5, pc}
 80057ac:	200002ac 	.word	0x200002ac

080057b0 <_malloc_r>:
 80057b0:	b570      	push	{r4, r5, r6, lr}
 80057b2:	1ccd      	adds	r5, r1, #3
 80057b4:	f025 0503 	bic.w	r5, r5, #3
 80057b8:	3508      	adds	r5, #8
 80057ba:	2d0c      	cmp	r5, #12
 80057bc:	bf38      	it	cc
 80057be:	250c      	movcc	r5, #12
 80057c0:	2d00      	cmp	r5, #0
 80057c2:	4606      	mov	r6, r0
 80057c4:	db01      	blt.n	80057ca <_malloc_r+0x1a>
 80057c6:	42a9      	cmp	r1, r5
 80057c8:	d902      	bls.n	80057d0 <_malloc_r+0x20>
 80057ca:	230c      	movs	r3, #12
 80057cc:	6033      	str	r3, [r6, #0]
 80057ce:	e046      	b.n	800585e <_malloc_r+0xae>
 80057d0:	f000 f8a2 	bl	8005918 <__malloc_lock>
 80057d4:	4b23      	ldr	r3, [pc, #140]	; (8005864 <_malloc_r+0xb4>)
 80057d6:	681c      	ldr	r4, [r3, #0]
 80057d8:	461a      	mov	r2, r3
 80057da:	4621      	mov	r1, r4
 80057dc:	b1a1      	cbz	r1, 8005808 <_malloc_r+0x58>
 80057de:	680b      	ldr	r3, [r1, #0]
 80057e0:	1b5b      	subs	r3, r3, r5
 80057e2:	d40e      	bmi.n	8005802 <_malloc_r+0x52>
 80057e4:	2b0b      	cmp	r3, #11
 80057e6:	d903      	bls.n	80057f0 <_malloc_r+0x40>
 80057e8:	600b      	str	r3, [r1, #0]
 80057ea:	18cc      	adds	r4, r1, r3
 80057ec:	50cd      	str	r5, [r1, r3]
 80057ee:	e01e      	b.n	800582e <_malloc_r+0x7e>
 80057f0:	428c      	cmp	r4, r1
 80057f2:	bf0b      	itete	eq
 80057f4:	6863      	ldreq	r3, [r4, #4]
 80057f6:	684b      	ldrne	r3, [r1, #4]
 80057f8:	6013      	streq	r3, [r2, #0]
 80057fa:	6063      	strne	r3, [r4, #4]
 80057fc:	bf18      	it	ne
 80057fe:	460c      	movne	r4, r1
 8005800:	e015      	b.n	800582e <_malloc_r+0x7e>
 8005802:	460c      	mov	r4, r1
 8005804:	6849      	ldr	r1, [r1, #4]
 8005806:	e7e9      	b.n	80057dc <_malloc_r+0x2c>
 8005808:	4c17      	ldr	r4, [pc, #92]	; (8005868 <_malloc_r+0xb8>)
 800580a:	6823      	ldr	r3, [r4, #0]
 800580c:	b91b      	cbnz	r3, 8005816 <_malloc_r+0x66>
 800580e:	4630      	mov	r0, r6
 8005810:	f000 f82c 	bl	800586c <_sbrk_r>
 8005814:	6020      	str	r0, [r4, #0]
 8005816:	4629      	mov	r1, r5
 8005818:	4630      	mov	r0, r6
 800581a:	f000 f827 	bl	800586c <_sbrk_r>
 800581e:	1c43      	adds	r3, r0, #1
 8005820:	d018      	beq.n	8005854 <_malloc_r+0xa4>
 8005822:	1cc4      	adds	r4, r0, #3
 8005824:	f024 0403 	bic.w	r4, r4, #3
 8005828:	42a0      	cmp	r0, r4
 800582a:	d10d      	bne.n	8005848 <_malloc_r+0x98>
 800582c:	6025      	str	r5, [r4, #0]
 800582e:	4630      	mov	r0, r6
 8005830:	f000 f873 	bl	800591a <__malloc_unlock>
 8005834:	f104 000b 	add.w	r0, r4, #11
 8005838:	1d23      	adds	r3, r4, #4
 800583a:	f020 0007 	bic.w	r0, r0, #7
 800583e:	1ac3      	subs	r3, r0, r3
 8005840:	d00e      	beq.n	8005860 <_malloc_r+0xb0>
 8005842:	425a      	negs	r2, r3
 8005844:	50e2      	str	r2, [r4, r3]
 8005846:	bd70      	pop	{r4, r5, r6, pc}
 8005848:	1a21      	subs	r1, r4, r0
 800584a:	4630      	mov	r0, r6
 800584c:	f000 f80e 	bl	800586c <_sbrk_r>
 8005850:	3001      	adds	r0, #1
 8005852:	d1eb      	bne.n	800582c <_malloc_r+0x7c>
 8005854:	230c      	movs	r3, #12
 8005856:	6033      	str	r3, [r6, #0]
 8005858:	4630      	mov	r0, r6
 800585a:	f000 f85e 	bl	800591a <__malloc_unlock>
 800585e:	2000      	movs	r0, #0
 8005860:	bd70      	pop	{r4, r5, r6, pc}
 8005862:	bf00      	nop
 8005864:	200002ac 	.word	0x200002ac
 8005868:	200002a8 	.word	0x200002a8

0800586c <_sbrk_r>:
 800586c:	b538      	push	{r3, r4, r5, lr}
 800586e:	4c06      	ldr	r4, [pc, #24]	; (8005888 <_sbrk_r+0x1c>)
 8005870:	2300      	movs	r3, #0
 8005872:	4605      	mov	r5, r0
 8005874:	4608      	mov	r0, r1
 8005876:	6023      	str	r3, [r4, #0]
 8005878:	f000 f860 	bl	800593c <_sbrk>
 800587c:	1c43      	adds	r3, r0, #1
 800587e:	d102      	bne.n	8005886 <_sbrk_r+0x1a>
 8005880:	6823      	ldr	r3, [r4, #0]
 8005882:	b103      	cbz	r3, 8005886 <_sbrk_r+0x1a>
 8005884:	602b      	str	r3, [r5, #0]
 8005886:	bd38      	pop	{r3, r4, r5, pc}
 8005888:	200002b8 	.word	0x200002b8

0800588c <_raise_r>:
 800588c:	291f      	cmp	r1, #31
 800588e:	b538      	push	{r3, r4, r5, lr}
 8005890:	4604      	mov	r4, r0
 8005892:	460d      	mov	r5, r1
 8005894:	d904      	bls.n	80058a0 <_raise_r+0x14>
 8005896:	2316      	movs	r3, #22
 8005898:	6003      	str	r3, [r0, #0]
 800589a:	f04f 30ff 	mov.w	r0, #4294967295
 800589e:	bd38      	pop	{r3, r4, r5, pc}
 80058a0:	6c42      	ldr	r2, [r0, #68]	; 0x44
 80058a2:	b112      	cbz	r2, 80058aa <_raise_r+0x1e>
 80058a4:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80058a8:	b94b      	cbnz	r3, 80058be <_raise_r+0x32>
 80058aa:	4620      	mov	r0, r4
 80058ac:	f000 f832 	bl	8005914 <_getpid_r>
 80058b0:	462a      	mov	r2, r5
 80058b2:	4601      	mov	r1, r0
 80058b4:	4620      	mov	r0, r4
 80058b6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80058ba:	f000 b819 	b.w	80058f0 <_kill_r>
 80058be:	2b01      	cmp	r3, #1
 80058c0:	d00c      	beq.n	80058dc <_raise_r+0x50>
 80058c2:	1c59      	adds	r1, r3, #1
 80058c4:	d103      	bne.n	80058ce <_raise_r+0x42>
 80058c6:	2316      	movs	r3, #22
 80058c8:	6003      	str	r3, [r0, #0]
 80058ca:	2001      	movs	r0, #1
 80058cc:	bd38      	pop	{r3, r4, r5, pc}
 80058ce:	2400      	movs	r4, #0
 80058d0:	4628      	mov	r0, r5
 80058d2:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 80058d6:	4798      	blx	r3
 80058d8:	4620      	mov	r0, r4
 80058da:	bd38      	pop	{r3, r4, r5, pc}
 80058dc:	2000      	movs	r0, #0
 80058de:	bd38      	pop	{r3, r4, r5, pc}

080058e0 <raise>:
 80058e0:	4b02      	ldr	r3, [pc, #8]	; (80058ec <raise+0xc>)
 80058e2:	4601      	mov	r1, r0
 80058e4:	6818      	ldr	r0, [r3, #0]
 80058e6:	f7ff bfd1 	b.w	800588c <_raise_r>
 80058ea:	bf00      	nop
 80058ec:	2000007c 	.word	0x2000007c

080058f0 <_kill_r>:
 80058f0:	b538      	push	{r3, r4, r5, lr}
 80058f2:	4c07      	ldr	r4, [pc, #28]	; (8005910 <_kill_r+0x20>)
 80058f4:	2300      	movs	r3, #0
 80058f6:	4605      	mov	r5, r0
 80058f8:	4608      	mov	r0, r1
 80058fa:	4611      	mov	r1, r2
 80058fc:	6023      	str	r3, [r4, #0]
 80058fe:	f000 f815 	bl	800592c <_kill>
 8005902:	1c43      	adds	r3, r0, #1
 8005904:	d102      	bne.n	800590c <_kill_r+0x1c>
 8005906:	6823      	ldr	r3, [r4, #0]
 8005908:	b103      	cbz	r3, 800590c <_kill_r+0x1c>
 800590a:	602b      	str	r3, [r5, #0]
 800590c:	bd38      	pop	{r3, r4, r5, pc}
 800590e:	bf00      	nop
 8005910:	200002b8 	.word	0x200002b8

08005914 <_getpid_r>:
 8005914:	f000 b802 	b.w	800591c <_getpid>

08005918 <__malloc_lock>:
 8005918:	4770      	bx	lr

0800591a <__malloc_unlock>:
 800591a:	4770      	bx	lr

0800591c <_getpid>:
 800591c:	4b02      	ldr	r3, [pc, #8]	; (8005928 <_getpid+0xc>)
 800591e:	2258      	movs	r2, #88	; 0x58
 8005920:	601a      	str	r2, [r3, #0]
 8005922:	f04f 30ff 	mov.w	r0, #4294967295
 8005926:	4770      	bx	lr
 8005928:	200002b8 	.word	0x200002b8

0800592c <_kill>:
 800592c:	4b02      	ldr	r3, [pc, #8]	; (8005938 <_kill+0xc>)
 800592e:	2258      	movs	r2, #88	; 0x58
 8005930:	601a      	str	r2, [r3, #0]
 8005932:	f04f 30ff 	mov.w	r0, #4294967295
 8005936:	4770      	bx	lr
 8005938:	200002b8 	.word	0x200002b8

0800593c <_sbrk>:
 800593c:	4b04      	ldr	r3, [pc, #16]	; (8005950 <_sbrk+0x14>)
 800593e:	4602      	mov	r2, r0
 8005940:	6819      	ldr	r1, [r3, #0]
 8005942:	b909      	cbnz	r1, 8005948 <_sbrk+0xc>
 8005944:	4903      	ldr	r1, [pc, #12]	; (8005954 <_sbrk+0x18>)
 8005946:	6019      	str	r1, [r3, #0]
 8005948:	6818      	ldr	r0, [r3, #0]
 800594a:	4402      	add	r2, r0
 800594c:	601a      	str	r2, [r3, #0]
 800594e:	4770      	bx	lr
 8005950:	200002b0 	.word	0x200002b0
 8005954:	200002bc 	.word	0x200002bc

08005958 <_exit>:
 8005958:	e7fe      	b.n	8005958 <_exit>
	...

0800595c <_init>:
 800595c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800595e:	bf00      	nop
 8005960:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005962:	bc08      	pop	{r3}
 8005964:	469e      	mov	lr, r3
 8005966:	4770      	bx	lr

08005968 <_fini>:
 8005968:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800596a:	bf00      	nop
 800596c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800596e:	bc08      	pop	{r3}
 8005970:	469e      	mov	lr, r3
 8005972:	4770      	bx	lr
