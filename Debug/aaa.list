
C:\Users\cwiec\Atollic\TrueSTUDIO\ARM_workspace_7.0\aaa\Debug\aaa.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000089c  080001d0  080001d0  000101d0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000000c  08000a6c  08000a6c  00010a6c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  08000a78  08000a78  00010a78  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  08000a7c  08000a7c  00010a7c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         0000000c  20000000  08000a80  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          0000001c  2000000c  08000a8c  0002000c  2**2
                  ALLOC
  7 ._user_heap_stack 00000080  20000028  08000a8c  00020028  2**0
                  ALLOC
  8 .ARM.attributes 00000029  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
  9 .debug_info   0000289e  00000000  00000000  00020035  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 00000acf  00000000  00000000  000228d3  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_aranges 00000398  00000000  00000000  000233a8  2**3
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000310  00000000  00000000  00023740  2**3
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_line   000016f6  00000000  00000000  00023a50  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    00001524  00000000  00000000  00025146  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .comment      0000007e  00000000  00000000  0002666a  2**0
                  CONTENTS, READONLY
 16 .debug_frame  00000d44  00000000  00000000  000266e8  2**2
                  CONTENTS, READONLY, DEBUGGING
 17 .stabstr      0000003f  00000000  00000000  0002742c  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	2000000c 	.word	0x2000000c
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08000a54 	.word	0x08000a54

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000010 	.word	0x20000010
 800020c:	08000a54 	.word	0x08000a54

08000210 <NVIC_Init>:
  * @param  NVIC_InitStruct: pointer to a NVIC_InitTypeDef structure that contains
  *         the configuration information for the specified NVIC peripheral.
  * @retval None
  */
void NVIC_Init(NVIC_InitTypeDef* NVIC_InitStruct)
{
 8000210:	b480      	push	{r7}
 8000212:	b087      	sub	sp, #28
 8000214:	af00      	add	r7, sp, #0
 8000216:	6078      	str	r0, [r7, #4]
  uint32_t tmppriority = 0x00, tmppre = 0x00, tmpsub = 0x0F;
 8000218:	2300      	movs	r3, #0
 800021a:	617b      	str	r3, [r7, #20]
 800021c:	2300      	movs	r3, #0
 800021e:	613b      	str	r3, [r7, #16]
 8000220:	230f      	movs	r3, #15
 8000222:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NVIC_InitStruct->NVIC_IRQChannelCmd));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(NVIC_InitStruct->NVIC_IRQChannelPreemptionPriority));  
  assert_param(IS_NVIC_SUB_PRIORITY(NVIC_InitStruct->NVIC_IRQChannelSubPriority));
    
  if (NVIC_InitStruct->NVIC_IRQChannelCmd != DISABLE)
 8000224:	687b      	ldr	r3, [r7, #4]
 8000226:	78db      	ldrb	r3, [r3, #3]
 8000228:	2b00      	cmp	r3, #0
 800022a:	d03a      	beq.n	80002a2 <NVIC_Init+0x92>
  {
    /* Compute the Corresponding IRQ Priority --------------------------------*/    
    tmppriority = (0x700 - ((SCB->AIRCR) & (uint32_t)0x700))>> 0x08;
 800022c:	4b27      	ldr	r3, [pc, #156]	; (80002cc <NVIC_Init+0xbc>)
 800022e:	68db      	ldr	r3, [r3, #12]
 8000230:	43db      	mvns	r3, r3
 8000232:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8000236:	0a1b      	lsrs	r3, r3, #8
 8000238:	617b      	str	r3, [r7, #20]
    tmppre = (0x4 - tmppriority);
 800023a:	697b      	ldr	r3, [r7, #20]
 800023c:	f1c3 0304 	rsb	r3, r3, #4
 8000240:	613b      	str	r3, [r7, #16]
    tmpsub = tmpsub >> tmppriority;
 8000242:	68fa      	ldr	r2, [r7, #12]
 8000244:	697b      	ldr	r3, [r7, #20]
 8000246:	fa22 f303 	lsr.w	r3, r2, r3
 800024a:	60fb      	str	r3, [r7, #12]

    tmppriority = (uint32_t)NVIC_InitStruct->NVIC_IRQChannelPreemptionPriority << tmppre;
 800024c:	687b      	ldr	r3, [r7, #4]
 800024e:	785b      	ldrb	r3, [r3, #1]
 8000250:	461a      	mov	r2, r3
 8000252:	693b      	ldr	r3, [r7, #16]
 8000254:	fa02 f303 	lsl.w	r3, r2, r3
 8000258:	617b      	str	r3, [r7, #20]
    tmppriority |=  NVIC_InitStruct->NVIC_IRQChannelSubPriority & tmpsub;
 800025a:	687b      	ldr	r3, [r7, #4]
 800025c:	789b      	ldrb	r3, [r3, #2]
 800025e:	461a      	mov	r2, r3
 8000260:	68fb      	ldr	r3, [r7, #12]
 8000262:	4013      	ands	r3, r2
 8000264:	697a      	ldr	r2, [r7, #20]
 8000266:	4313      	orrs	r3, r2
 8000268:	617b      	str	r3, [r7, #20]
    tmppriority = tmppriority << 0x04;
 800026a:	697b      	ldr	r3, [r7, #20]
 800026c:	011b      	lsls	r3, r3, #4
 800026e:	617b      	str	r3, [r7, #20]
        
    NVIC->IP[NVIC_InitStruct->NVIC_IRQChannel] = tmppriority;
 8000270:	4a17      	ldr	r2, [pc, #92]	; (80002d0 <NVIC_Init+0xc0>)
 8000272:	687b      	ldr	r3, [r7, #4]
 8000274:	781b      	ldrb	r3, [r3, #0]
 8000276:	6979      	ldr	r1, [r7, #20]
 8000278:	b2c9      	uxtb	r1, r1
 800027a:	4413      	add	r3, r2
 800027c:	460a      	mov	r2, r1
 800027e:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
    
    /* Enable the Selected IRQ Channels --------------------------------------*/
    NVIC->ISER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
 8000282:	4a13      	ldr	r2, [pc, #76]	; (80002d0 <NVIC_Init+0xc0>)
 8000284:	687b      	ldr	r3, [r7, #4]
 8000286:	781b      	ldrb	r3, [r3, #0]
 8000288:	095b      	lsrs	r3, r3, #5
 800028a:	b2db      	uxtb	r3, r3
 800028c:	4618      	mov	r0, r3
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
 800028e:	687b      	ldr	r3, [r7, #4]
 8000290:	781b      	ldrb	r3, [r3, #0]
 8000292:	f003 031f 	and.w	r3, r3, #31
 8000296:	2101      	movs	r1, #1
 8000298:	fa01 f303 	lsl.w	r3, r1, r3
    tmppriority = tmppriority << 0x04;
        
    NVIC->IP[NVIC_InitStruct->NVIC_IRQChannel] = tmppriority;
    
    /* Enable the Selected IRQ Channels --------------------------------------*/
    NVIC->ISER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
 800029c:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
  {
    /* Disable the Selected IRQ Channels -------------------------------------*/
    NVIC->ICER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
  }
}
 80002a0:	e00f      	b.n	80002c2 <NVIC_Init+0xb2>
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
  }
  else
  {
    /* Disable the Selected IRQ Channels -------------------------------------*/
    NVIC->ICER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
 80002a2:	490b      	ldr	r1, [pc, #44]	; (80002d0 <NVIC_Init+0xc0>)
 80002a4:	687b      	ldr	r3, [r7, #4]
 80002a6:	781b      	ldrb	r3, [r3, #0]
 80002a8:	095b      	lsrs	r3, r3, #5
 80002aa:	b2db      	uxtb	r3, r3
 80002ac:	4618      	mov	r0, r3
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
 80002ae:	687b      	ldr	r3, [r7, #4]
 80002b0:	781b      	ldrb	r3, [r3, #0]
 80002b2:	f003 031f 	and.w	r3, r3, #31
 80002b6:	2201      	movs	r2, #1
 80002b8:	409a      	lsls	r2, r3
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
  }
  else
  {
    /* Disable the Selected IRQ Channels -------------------------------------*/
    NVIC->ICER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
 80002ba:	f100 0320 	add.w	r3, r0, #32
 80002be:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
  }
}
 80002c2:	bf00      	nop
 80002c4:	371c      	adds	r7, #28
 80002c6:	46bd      	mov	sp, r7
 80002c8:	bc80      	pop	{r7}
 80002ca:	4770      	bx	lr
 80002cc:	e000ed00 	.word	0xe000ed00
 80002d0:	e000e100 	.word	0xe000e100

080002d4 <EXTI_Init>:
  * @param  EXTI_InitStruct: pointer to a EXTI_InitTypeDef structure
  *         that contains the configuration information for the EXTI peripheral.
  * @retval None
  */
void EXTI_Init(EXTI_InitTypeDef* EXTI_InitStruct)
{
 80002d4:	b480      	push	{r7}
 80002d6:	b085      	sub	sp, #20
 80002d8:	af00      	add	r7, sp, #0
 80002da:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0;
 80002dc:	2300      	movs	r3, #0
 80002de:	60fb      	str	r3, [r7, #12]
  assert_param(IS_EXTI_MODE(EXTI_InitStruct->EXTI_Mode));
  assert_param(IS_EXTI_TRIGGER(EXTI_InitStruct->EXTI_Trigger));
  assert_param(IS_EXTI_LINE(EXTI_InitStruct->EXTI_Line));  
  assert_param(IS_FUNCTIONAL_STATE(EXTI_InitStruct->EXTI_LineCmd));

  tmp = (uint32_t)EXTI_BASE;
 80002e0:	4b34      	ldr	r3, [pc, #208]	; (80003b4 <EXTI_Init+0xe0>)
 80002e2:	60fb      	str	r3, [r7, #12]
     
  if (EXTI_InitStruct->EXTI_LineCmd != DISABLE)
 80002e4:	687b      	ldr	r3, [r7, #4]
 80002e6:	799b      	ldrb	r3, [r3, #6]
 80002e8:	2b00      	cmp	r3, #0
 80002ea:	d04f      	beq.n	800038c <EXTI_Init+0xb8>
  {
    /* Clear EXTI line configuration */
    EXTI->IMR &= ~EXTI_InitStruct->EXTI_Line;
 80002ec:	4931      	ldr	r1, [pc, #196]	; (80003b4 <EXTI_Init+0xe0>)
 80002ee:	4b31      	ldr	r3, [pc, #196]	; (80003b4 <EXTI_Init+0xe0>)
 80002f0:	681a      	ldr	r2, [r3, #0]
 80002f2:	687b      	ldr	r3, [r7, #4]
 80002f4:	681b      	ldr	r3, [r3, #0]
 80002f6:	43db      	mvns	r3, r3
 80002f8:	4013      	ands	r3, r2
 80002fa:	600b      	str	r3, [r1, #0]
    EXTI->EMR &= ~EXTI_InitStruct->EXTI_Line;
 80002fc:	492d      	ldr	r1, [pc, #180]	; (80003b4 <EXTI_Init+0xe0>)
 80002fe:	4b2d      	ldr	r3, [pc, #180]	; (80003b4 <EXTI_Init+0xe0>)
 8000300:	685a      	ldr	r2, [r3, #4]
 8000302:	687b      	ldr	r3, [r7, #4]
 8000304:	681b      	ldr	r3, [r3, #0]
 8000306:	43db      	mvns	r3, r3
 8000308:	4013      	ands	r3, r2
 800030a:	604b      	str	r3, [r1, #4]
    
    tmp += EXTI_InitStruct->EXTI_Mode;
 800030c:	687b      	ldr	r3, [r7, #4]
 800030e:	791b      	ldrb	r3, [r3, #4]
 8000310:	461a      	mov	r2, r3
 8000312:	68fb      	ldr	r3, [r7, #12]
 8000314:	4413      	add	r3, r2
 8000316:	60fb      	str	r3, [r7, #12]

    *(__IO uint32_t *) tmp |= EXTI_InitStruct->EXTI_Line;
 8000318:	68fb      	ldr	r3, [r7, #12]
 800031a:	68fa      	ldr	r2, [r7, #12]
 800031c:	6811      	ldr	r1, [r2, #0]
 800031e:	687a      	ldr	r2, [r7, #4]
 8000320:	6812      	ldr	r2, [r2, #0]
 8000322:	430a      	orrs	r2, r1
 8000324:	601a      	str	r2, [r3, #0]

    /* Clear Rising Falling edge configuration */
    EXTI->RTSR &= ~EXTI_InitStruct->EXTI_Line;
 8000326:	4923      	ldr	r1, [pc, #140]	; (80003b4 <EXTI_Init+0xe0>)
 8000328:	4b22      	ldr	r3, [pc, #136]	; (80003b4 <EXTI_Init+0xe0>)
 800032a:	689a      	ldr	r2, [r3, #8]
 800032c:	687b      	ldr	r3, [r7, #4]
 800032e:	681b      	ldr	r3, [r3, #0]
 8000330:	43db      	mvns	r3, r3
 8000332:	4013      	ands	r3, r2
 8000334:	608b      	str	r3, [r1, #8]
    EXTI->FTSR &= ~EXTI_InitStruct->EXTI_Line;
 8000336:	491f      	ldr	r1, [pc, #124]	; (80003b4 <EXTI_Init+0xe0>)
 8000338:	4b1e      	ldr	r3, [pc, #120]	; (80003b4 <EXTI_Init+0xe0>)
 800033a:	68da      	ldr	r2, [r3, #12]
 800033c:	687b      	ldr	r3, [r7, #4]
 800033e:	681b      	ldr	r3, [r3, #0]
 8000340:	43db      	mvns	r3, r3
 8000342:	4013      	ands	r3, r2
 8000344:	60cb      	str	r3, [r1, #12]
    
    /* Select the trigger for the selected external interrupts */
    if (EXTI_InitStruct->EXTI_Trigger == EXTI_Trigger_Rising_Falling)
 8000346:	687b      	ldr	r3, [r7, #4]
 8000348:	795b      	ldrb	r3, [r3, #5]
 800034a:	2b10      	cmp	r3, #16
 800034c:	d10e      	bne.n	800036c <EXTI_Init+0x98>
    {
      /* Rising Falling edge */
      EXTI->RTSR |= EXTI_InitStruct->EXTI_Line;
 800034e:	4919      	ldr	r1, [pc, #100]	; (80003b4 <EXTI_Init+0xe0>)
 8000350:	4b18      	ldr	r3, [pc, #96]	; (80003b4 <EXTI_Init+0xe0>)
 8000352:	689a      	ldr	r2, [r3, #8]
 8000354:	687b      	ldr	r3, [r7, #4]
 8000356:	681b      	ldr	r3, [r3, #0]
 8000358:	4313      	orrs	r3, r2
 800035a:	608b      	str	r3, [r1, #8]
      EXTI->FTSR |= EXTI_InitStruct->EXTI_Line;
 800035c:	4915      	ldr	r1, [pc, #84]	; (80003b4 <EXTI_Init+0xe0>)
 800035e:	4b15      	ldr	r3, [pc, #84]	; (80003b4 <EXTI_Init+0xe0>)
 8000360:	68da      	ldr	r2, [r3, #12]
 8000362:	687b      	ldr	r3, [r7, #4]
 8000364:	681b      	ldr	r3, [r3, #0]
 8000366:	4313      	orrs	r3, r2
 8000368:	60cb      	str	r3, [r1, #12]
    tmp += EXTI_InitStruct->EXTI_Mode;

    /* Disable the selected external lines */
    *(__IO uint32_t *) tmp &= ~EXTI_InitStruct->EXTI_Line;
  }
}
 800036a:	e01d      	b.n	80003a8 <EXTI_Init+0xd4>
      EXTI->RTSR |= EXTI_InitStruct->EXTI_Line;
      EXTI->FTSR |= EXTI_InitStruct->EXTI_Line;
    }
    else
    {
      tmp = (uint32_t)EXTI_BASE;
 800036c:	4b11      	ldr	r3, [pc, #68]	; (80003b4 <EXTI_Init+0xe0>)
 800036e:	60fb      	str	r3, [r7, #12]
      tmp += EXTI_InitStruct->EXTI_Trigger;
 8000370:	687b      	ldr	r3, [r7, #4]
 8000372:	795b      	ldrb	r3, [r3, #5]
 8000374:	461a      	mov	r2, r3
 8000376:	68fb      	ldr	r3, [r7, #12]
 8000378:	4413      	add	r3, r2
 800037a:	60fb      	str	r3, [r7, #12]

      *(__IO uint32_t *) tmp |= EXTI_InitStruct->EXTI_Line;
 800037c:	68fb      	ldr	r3, [r7, #12]
 800037e:	68fa      	ldr	r2, [r7, #12]
 8000380:	6811      	ldr	r1, [r2, #0]
 8000382:	687a      	ldr	r2, [r7, #4]
 8000384:	6812      	ldr	r2, [r2, #0]
 8000386:	430a      	orrs	r2, r1
 8000388:	601a      	str	r2, [r3, #0]
    tmp += EXTI_InitStruct->EXTI_Mode;

    /* Disable the selected external lines */
    *(__IO uint32_t *) tmp &= ~EXTI_InitStruct->EXTI_Line;
  }
}
 800038a:	e00d      	b.n	80003a8 <EXTI_Init+0xd4>
      *(__IO uint32_t *) tmp |= EXTI_InitStruct->EXTI_Line;
    }
  }
  else
  {
    tmp += EXTI_InitStruct->EXTI_Mode;
 800038c:	687b      	ldr	r3, [r7, #4]
 800038e:	791b      	ldrb	r3, [r3, #4]
 8000390:	461a      	mov	r2, r3
 8000392:	68fb      	ldr	r3, [r7, #12]
 8000394:	4413      	add	r3, r2
 8000396:	60fb      	str	r3, [r7, #12]

    /* Disable the selected external lines */
    *(__IO uint32_t *) tmp &= ~EXTI_InitStruct->EXTI_Line;
 8000398:	68fb      	ldr	r3, [r7, #12]
 800039a:	68fa      	ldr	r2, [r7, #12]
 800039c:	6811      	ldr	r1, [r2, #0]
 800039e:	687a      	ldr	r2, [r7, #4]
 80003a0:	6812      	ldr	r2, [r2, #0]
 80003a2:	43d2      	mvns	r2, r2
 80003a4:	400a      	ands	r2, r1
 80003a6:	601a      	str	r2, [r3, #0]
  }
}
 80003a8:	bf00      	nop
 80003aa:	3714      	adds	r7, #20
 80003ac:	46bd      	mov	sp, r7
 80003ae:	bc80      	pop	{r7}
 80003b0:	4770      	bx	lr
 80003b2:	bf00      	nop
 80003b4:	40010400 	.word	0x40010400

080003b8 <GPIO_Init>:
  * @param  GPIO_InitStruct: pointer to a GPIO_InitTypeDef structure that
  *         contains the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void GPIO_Init(GPIO_TypeDef* GPIOx, GPIO_InitTypeDef* GPIO_InitStruct)
{
 80003b8:	b480      	push	{r7}
 80003ba:	b089      	sub	sp, #36	; 0x24
 80003bc:	af00      	add	r7, sp, #0
 80003be:	6078      	str	r0, [r7, #4]
 80003c0:	6039      	str	r1, [r7, #0]
  uint32_t currentmode = 0x00, currentpin = 0x00, pinpos = 0x00, pos = 0x00;
 80003c2:	2300      	movs	r3, #0
 80003c4:	61fb      	str	r3, [r7, #28]
 80003c6:	2300      	movs	r3, #0
 80003c8:	613b      	str	r3, [r7, #16]
 80003ca:	2300      	movs	r3, #0
 80003cc:	61bb      	str	r3, [r7, #24]
 80003ce:	2300      	movs	r3, #0
 80003d0:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg = 0x00, pinmask = 0x00;
 80003d2:	2300      	movs	r3, #0
 80003d4:	617b      	str	r3, [r7, #20]
 80003d6:	2300      	movs	r3, #0
 80003d8:	60bb      	str	r3, [r7, #8]
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GPIO_MODE(GPIO_InitStruct->GPIO_Mode));
  assert_param(IS_GPIO_PIN(GPIO_InitStruct->GPIO_Pin));  
  
/*---------------------------- GPIO Mode Configuration -----------------------*/
  currentmode = ((uint32_t)GPIO_InitStruct->GPIO_Mode) & ((uint32_t)0x0F);
 80003da:	683b      	ldr	r3, [r7, #0]
 80003dc:	78db      	ldrb	r3, [r3, #3]
 80003de:	f003 030f 	and.w	r3, r3, #15
 80003e2:	61fb      	str	r3, [r7, #28]
  if ((((uint32_t)GPIO_InitStruct->GPIO_Mode) & ((uint32_t)0x10)) != 0x00)
 80003e4:	683b      	ldr	r3, [r7, #0]
 80003e6:	78db      	ldrb	r3, [r3, #3]
 80003e8:	f003 0310 	and.w	r3, r3, #16
 80003ec:	2b00      	cmp	r3, #0
 80003ee:	d005      	beq.n	80003fc <GPIO_Init+0x44>
  { 
    /* Check the parameters */
    assert_param(IS_GPIO_SPEED(GPIO_InitStruct->GPIO_Speed));
    /* Output mode */
    currentmode |= (uint32_t)GPIO_InitStruct->GPIO_Speed;
 80003f0:	683b      	ldr	r3, [r7, #0]
 80003f2:	789b      	ldrb	r3, [r3, #2]
 80003f4:	461a      	mov	r2, r3
 80003f6:	69fb      	ldr	r3, [r7, #28]
 80003f8:	4313      	orrs	r3, r2
 80003fa:	61fb      	str	r3, [r7, #28]
  }
/*---------------------------- GPIO CRL Configuration ------------------------*/
  /* Configure the eight low port pins */
  if (((uint32_t)GPIO_InitStruct->GPIO_Pin & ((uint32_t)0x00FF)) != 0x00)
 80003fc:	683b      	ldr	r3, [r7, #0]
 80003fe:	881b      	ldrh	r3, [r3, #0]
 8000400:	b2db      	uxtb	r3, r3
 8000402:	2b00      	cmp	r3, #0
 8000404:	d044      	beq.n	8000490 <GPIO_Init+0xd8>
  {
    tmpreg = GPIOx->CRL;
 8000406:	687b      	ldr	r3, [r7, #4]
 8000408:	681b      	ldr	r3, [r3, #0]
 800040a:	617b      	str	r3, [r7, #20]
    for (pinpos = 0x00; pinpos < 0x08; pinpos++)
 800040c:	2300      	movs	r3, #0
 800040e:	61bb      	str	r3, [r7, #24]
 8000410:	e038      	b.n	8000484 <GPIO_Init+0xcc>
    {
      pos = ((uint32_t)0x01) << pinpos;
 8000412:	2201      	movs	r2, #1
 8000414:	69bb      	ldr	r3, [r7, #24]
 8000416:	fa02 f303 	lsl.w	r3, r2, r3
 800041a:	60fb      	str	r3, [r7, #12]
      /* Get the port pins position */
      currentpin = (GPIO_InitStruct->GPIO_Pin) & pos;
 800041c:	683b      	ldr	r3, [r7, #0]
 800041e:	881b      	ldrh	r3, [r3, #0]
 8000420:	461a      	mov	r2, r3
 8000422:	68fb      	ldr	r3, [r7, #12]
 8000424:	4013      	ands	r3, r2
 8000426:	613b      	str	r3, [r7, #16]
      if (currentpin == pos)
 8000428:	693a      	ldr	r2, [r7, #16]
 800042a:	68fb      	ldr	r3, [r7, #12]
 800042c:	429a      	cmp	r2, r3
 800042e:	d126      	bne.n	800047e <GPIO_Init+0xc6>
      {
        pos = pinpos << 2;
 8000430:	69bb      	ldr	r3, [r7, #24]
 8000432:	009b      	lsls	r3, r3, #2
 8000434:	60fb      	str	r3, [r7, #12]
        /* Clear the corresponding low control register bits */
        pinmask = ((uint32_t)0x0F) << pos;
 8000436:	220f      	movs	r2, #15
 8000438:	68fb      	ldr	r3, [r7, #12]
 800043a:	fa02 f303 	lsl.w	r3, r2, r3
 800043e:	60bb      	str	r3, [r7, #8]
        tmpreg &= ~pinmask;
 8000440:	68bb      	ldr	r3, [r7, #8]
 8000442:	43db      	mvns	r3, r3
 8000444:	697a      	ldr	r2, [r7, #20]
 8000446:	4013      	ands	r3, r2
 8000448:	617b      	str	r3, [r7, #20]
        /* Write the mode configuration in the corresponding bits */
        tmpreg |= (currentmode << pos);
 800044a:	69fa      	ldr	r2, [r7, #28]
 800044c:	68fb      	ldr	r3, [r7, #12]
 800044e:	fa02 f303 	lsl.w	r3, r2, r3
 8000452:	697a      	ldr	r2, [r7, #20]
 8000454:	4313      	orrs	r3, r2
 8000456:	617b      	str	r3, [r7, #20]
        /* Reset the corresponding ODR bit */
        if (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_IPD)
 8000458:	683b      	ldr	r3, [r7, #0]
 800045a:	78db      	ldrb	r3, [r3, #3]
 800045c:	2b28      	cmp	r3, #40	; 0x28
 800045e:	d105      	bne.n	800046c <GPIO_Init+0xb4>
        {
          GPIOx->BRR = (((uint32_t)0x01) << pinpos);
 8000460:	2201      	movs	r2, #1
 8000462:	69bb      	ldr	r3, [r7, #24]
 8000464:	409a      	lsls	r2, r3
 8000466:	687b      	ldr	r3, [r7, #4]
 8000468:	615a      	str	r2, [r3, #20]
 800046a:	e008      	b.n	800047e <GPIO_Init+0xc6>
        }
        else
        {
          /* Set the corresponding ODR bit */
          if (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_IPU)
 800046c:	683b      	ldr	r3, [r7, #0]
 800046e:	78db      	ldrb	r3, [r3, #3]
 8000470:	2b48      	cmp	r3, #72	; 0x48
 8000472:	d104      	bne.n	800047e <GPIO_Init+0xc6>
          {
            GPIOx->BSRR = (((uint32_t)0x01) << pinpos);
 8000474:	2201      	movs	r2, #1
 8000476:	69bb      	ldr	r3, [r7, #24]
 8000478:	409a      	lsls	r2, r3
 800047a:	687b      	ldr	r3, [r7, #4]
 800047c:	611a      	str	r2, [r3, #16]
/*---------------------------- GPIO CRL Configuration ------------------------*/
  /* Configure the eight low port pins */
  if (((uint32_t)GPIO_InitStruct->GPIO_Pin & ((uint32_t)0x00FF)) != 0x00)
  {
    tmpreg = GPIOx->CRL;
    for (pinpos = 0x00; pinpos < 0x08; pinpos++)
 800047e:	69bb      	ldr	r3, [r7, #24]
 8000480:	3301      	adds	r3, #1
 8000482:	61bb      	str	r3, [r7, #24]
 8000484:	69bb      	ldr	r3, [r7, #24]
 8000486:	2b07      	cmp	r3, #7
 8000488:	d9c3      	bls.n	8000412 <GPIO_Init+0x5a>
            GPIOx->BSRR = (((uint32_t)0x01) << pinpos);
          }
        }
      }
    }
    GPIOx->CRL = tmpreg;
 800048a:	687b      	ldr	r3, [r7, #4]
 800048c:	697a      	ldr	r2, [r7, #20]
 800048e:	601a      	str	r2, [r3, #0]
  }
/*---------------------------- GPIO CRH Configuration ------------------------*/
  /* Configure the eight high port pins */
  if (GPIO_InitStruct->GPIO_Pin > 0x00FF)
 8000490:	683b      	ldr	r3, [r7, #0]
 8000492:	881b      	ldrh	r3, [r3, #0]
 8000494:	2bff      	cmp	r3, #255	; 0xff
 8000496:	d946      	bls.n	8000526 <GPIO_Init+0x16e>
  {
    tmpreg = GPIOx->CRH;
 8000498:	687b      	ldr	r3, [r7, #4]
 800049a:	685b      	ldr	r3, [r3, #4]
 800049c:	617b      	str	r3, [r7, #20]
    for (pinpos = 0x00; pinpos < 0x08; pinpos++)
 800049e:	2300      	movs	r3, #0
 80004a0:	61bb      	str	r3, [r7, #24]
 80004a2:	e03a      	b.n	800051a <GPIO_Init+0x162>
    {
      pos = (((uint32_t)0x01) << (pinpos + 0x08));
 80004a4:	69bb      	ldr	r3, [r7, #24]
 80004a6:	3308      	adds	r3, #8
 80004a8:	2201      	movs	r2, #1
 80004aa:	fa02 f303 	lsl.w	r3, r2, r3
 80004ae:	60fb      	str	r3, [r7, #12]
      /* Get the port pins position */
      currentpin = ((GPIO_InitStruct->GPIO_Pin) & pos);
 80004b0:	683b      	ldr	r3, [r7, #0]
 80004b2:	881b      	ldrh	r3, [r3, #0]
 80004b4:	461a      	mov	r2, r3
 80004b6:	68fb      	ldr	r3, [r7, #12]
 80004b8:	4013      	ands	r3, r2
 80004ba:	613b      	str	r3, [r7, #16]
      if (currentpin == pos)
 80004bc:	693a      	ldr	r2, [r7, #16]
 80004be:	68fb      	ldr	r3, [r7, #12]
 80004c0:	429a      	cmp	r2, r3
 80004c2:	d127      	bne.n	8000514 <GPIO_Init+0x15c>
      {
        pos = pinpos << 2;
 80004c4:	69bb      	ldr	r3, [r7, #24]
 80004c6:	009b      	lsls	r3, r3, #2
 80004c8:	60fb      	str	r3, [r7, #12]
        /* Clear the corresponding high control register bits */
        pinmask = ((uint32_t)0x0F) << pos;
 80004ca:	220f      	movs	r2, #15
 80004cc:	68fb      	ldr	r3, [r7, #12]
 80004ce:	fa02 f303 	lsl.w	r3, r2, r3
 80004d2:	60bb      	str	r3, [r7, #8]
        tmpreg &= ~pinmask;
 80004d4:	68bb      	ldr	r3, [r7, #8]
 80004d6:	43db      	mvns	r3, r3
 80004d8:	697a      	ldr	r2, [r7, #20]
 80004da:	4013      	ands	r3, r2
 80004dc:	617b      	str	r3, [r7, #20]
        /* Write the mode configuration in the corresponding bits */
        tmpreg |= (currentmode << pos);
 80004de:	69fa      	ldr	r2, [r7, #28]
 80004e0:	68fb      	ldr	r3, [r7, #12]
 80004e2:	fa02 f303 	lsl.w	r3, r2, r3
 80004e6:	697a      	ldr	r2, [r7, #20]
 80004e8:	4313      	orrs	r3, r2
 80004ea:	617b      	str	r3, [r7, #20]
        /* Reset the corresponding ODR bit */
        if (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_IPD)
 80004ec:	683b      	ldr	r3, [r7, #0]
 80004ee:	78db      	ldrb	r3, [r3, #3]
 80004f0:	2b28      	cmp	r3, #40	; 0x28
 80004f2:	d105      	bne.n	8000500 <GPIO_Init+0x148>
        {
          GPIOx->BRR = (((uint32_t)0x01) << (pinpos + 0x08));
 80004f4:	69bb      	ldr	r3, [r7, #24]
 80004f6:	3308      	adds	r3, #8
 80004f8:	2201      	movs	r2, #1
 80004fa:	409a      	lsls	r2, r3
 80004fc:	687b      	ldr	r3, [r7, #4]
 80004fe:	615a      	str	r2, [r3, #20]
        }
        /* Set the corresponding ODR bit */
        if (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_IPU)
 8000500:	683b      	ldr	r3, [r7, #0]
 8000502:	78db      	ldrb	r3, [r3, #3]
 8000504:	2b48      	cmp	r3, #72	; 0x48
 8000506:	d105      	bne.n	8000514 <GPIO_Init+0x15c>
        {
          GPIOx->BSRR = (((uint32_t)0x01) << (pinpos + 0x08));
 8000508:	69bb      	ldr	r3, [r7, #24]
 800050a:	3308      	adds	r3, #8
 800050c:	2201      	movs	r2, #1
 800050e:	409a      	lsls	r2, r3
 8000510:	687b      	ldr	r3, [r7, #4]
 8000512:	611a      	str	r2, [r3, #16]
/*---------------------------- GPIO CRH Configuration ------------------------*/
  /* Configure the eight high port pins */
  if (GPIO_InitStruct->GPIO_Pin > 0x00FF)
  {
    tmpreg = GPIOx->CRH;
    for (pinpos = 0x00; pinpos < 0x08; pinpos++)
 8000514:	69bb      	ldr	r3, [r7, #24]
 8000516:	3301      	adds	r3, #1
 8000518:	61bb      	str	r3, [r7, #24]
 800051a:	69bb      	ldr	r3, [r7, #24]
 800051c:	2b07      	cmp	r3, #7
 800051e:	d9c1      	bls.n	80004a4 <GPIO_Init+0xec>
        {
          GPIOx->BSRR = (((uint32_t)0x01) << (pinpos + 0x08));
        }
      }
    }
    GPIOx->CRH = tmpreg;
 8000520:	687b      	ldr	r3, [r7, #4]
 8000522:	697a      	ldr	r2, [r7, #20]
 8000524:	605a      	str	r2, [r3, #4]
  }
}
 8000526:	bf00      	nop
 8000528:	3724      	adds	r7, #36	; 0x24
 800052a:	46bd      	mov	sp, r7
 800052c:	bc80      	pop	{r7}
 800052e:	4770      	bx	lr

08000530 <GPIO_ReadInputDataBit>:
  * @param  GPIO_Pin:  specifies the port bit to read.
  *   This parameter can be GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
uint8_t GPIO_ReadInputDataBit(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8000530:	b480      	push	{r7}
 8000532:	b085      	sub	sp, #20
 8000534:	af00      	add	r7, sp, #0
 8000536:	6078      	str	r0, [r7, #4]
 8000538:	460b      	mov	r3, r1
 800053a:	807b      	strh	r3, [r7, #2]
  uint8_t bitstatus = 0x00;
 800053c:	2300      	movs	r3, #0
 800053e:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GET_GPIO_PIN(GPIO_Pin)); 
  
  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)Bit_RESET)
 8000540:	687b      	ldr	r3, [r7, #4]
 8000542:	689a      	ldr	r2, [r3, #8]
 8000544:	887b      	ldrh	r3, [r7, #2]
 8000546:	4013      	ands	r3, r2
 8000548:	2b00      	cmp	r3, #0
 800054a:	d002      	beq.n	8000552 <GPIO_ReadInputDataBit+0x22>
  {
    bitstatus = (uint8_t)Bit_SET;
 800054c:	2301      	movs	r3, #1
 800054e:	73fb      	strb	r3, [r7, #15]
 8000550:	e001      	b.n	8000556 <GPIO_ReadInputDataBit+0x26>
  }
  else
  {
    bitstatus = (uint8_t)Bit_RESET;
 8000552:	2300      	movs	r3, #0
 8000554:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8000556:	7bfb      	ldrb	r3, [r7, #15]
}
 8000558:	4618      	mov	r0, r3
 800055a:	3714      	adds	r7, #20
 800055c:	46bd      	mov	sp, r7
 800055e:	bc80      	pop	{r7}
 8000560:	4770      	bx	lr
 8000562:	bf00      	nop

08000564 <GPIO_EXTILineConfig>:
  * @param  GPIO_PinSource: specifies the EXTI line to be configured.
  *   This parameter can be GPIO_PinSourcex where x can be (0..15).
  * @retval None
  */
void GPIO_EXTILineConfig(uint8_t GPIO_PortSource, uint8_t GPIO_PinSource)
{
 8000564:	b490      	push	{r4, r7}
 8000566:	b084      	sub	sp, #16
 8000568:	af00      	add	r7, sp, #0
 800056a:	4603      	mov	r3, r0
 800056c:	460a      	mov	r2, r1
 800056e:	71fb      	strb	r3, [r7, #7]
 8000570:	4613      	mov	r3, r2
 8000572:	71bb      	strb	r3, [r7, #6]
  uint32_t tmp = 0x00;
 8000574:	2300      	movs	r3, #0
 8000576:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_GPIO_EXTI_PORT_SOURCE(GPIO_PortSource));
  assert_param(IS_GPIO_PIN_SOURCE(GPIO_PinSource));
  
  tmp = ((uint32_t)0x0F) << (0x04 * (GPIO_PinSource & (uint8_t)0x03));
 8000578:	79bb      	ldrb	r3, [r7, #6]
 800057a:	f003 0303 	and.w	r3, r3, #3
 800057e:	009b      	lsls	r3, r3, #2
 8000580:	220f      	movs	r2, #15
 8000582:	fa02 f303 	lsl.w	r3, r2, r3
 8000586:	60fb      	str	r3, [r7, #12]
  AFIO->EXTICR[GPIO_PinSource >> 0x02] &= ~tmp;
 8000588:	4916      	ldr	r1, [pc, #88]	; (80005e4 <GPIO_EXTILineConfig+0x80>)
 800058a:	79bb      	ldrb	r3, [r7, #6]
 800058c:	089b      	lsrs	r3, r3, #2
 800058e:	b2db      	uxtb	r3, r3
 8000590:	4618      	mov	r0, r3
 8000592:	4a14      	ldr	r2, [pc, #80]	; (80005e4 <GPIO_EXTILineConfig+0x80>)
 8000594:	79bb      	ldrb	r3, [r7, #6]
 8000596:	089b      	lsrs	r3, r3, #2
 8000598:	b2db      	uxtb	r3, r3
 800059a:	3302      	adds	r3, #2
 800059c:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80005a0:	68fb      	ldr	r3, [r7, #12]
 80005a2:	43db      	mvns	r3, r3
 80005a4:	401a      	ands	r2, r3
 80005a6:	1c83      	adds	r3, r0, #2
 80005a8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  AFIO->EXTICR[GPIO_PinSource >> 0x02] |= (((uint32_t)GPIO_PortSource) << (0x04 * (GPIO_PinSource & (uint8_t)0x03)));
 80005ac:	480d      	ldr	r0, [pc, #52]	; (80005e4 <GPIO_EXTILineConfig+0x80>)
 80005ae:	79bb      	ldrb	r3, [r7, #6]
 80005b0:	089b      	lsrs	r3, r3, #2
 80005b2:	b2db      	uxtb	r3, r3
 80005b4:	461c      	mov	r4, r3
 80005b6:	4a0b      	ldr	r2, [pc, #44]	; (80005e4 <GPIO_EXTILineConfig+0x80>)
 80005b8:	79bb      	ldrb	r3, [r7, #6]
 80005ba:	089b      	lsrs	r3, r3, #2
 80005bc:	b2db      	uxtb	r3, r3
 80005be:	3302      	adds	r3, #2
 80005c0:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80005c4:	79f9      	ldrb	r1, [r7, #7]
 80005c6:	79bb      	ldrb	r3, [r7, #6]
 80005c8:	f003 0303 	and.w	r3, r3, #3
 80005cc:	009b      	lsls	r3, r3, #2
 80005ce:	fa01 f303 	lsl.w	r3, r1, r3
 80005d2:	431a      	orrs	r2, r3
 80005d4:	1ca3      	adds	r3, r4, #2
 80005d6:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
}
 80005da:	bf00      	nop
 80005dc:	3710      	adds	r7, #16
 80005de:	46bd      	mov	sp, r7
 80005e0:	bc90      	pop	{r4, r7}
 80005e2:	4770      	bx	lr
 80005e4:	40010000 	.word	0x40010000

080005e8 <RCC_APB2PeriphClockCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_APB2PeriphClockCmd(uint32_t RCC_APB2Periph, FunctionalState NewState)
{
 80005e8:	b480      	push	{r7}
 80005ea:	b083      	sub	sp, #12
 80005ec:	af00      	add	r7, sp, #0
 80005ee:	6078      	str	r0, [r7, #4]
 80005f0:	460b      	mov	r3, r1
 80005f2:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_APB2_PERIPH(RCC_APB2Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 80005f4:	78fb      	ldrb	r3, [r7, #3]
 80005f6:	2b00      	cmp	r3, #0
 80005f8:	d006      	beq.n	8000608 <RCC_APB2PeriphClockCmd+0x20>
  {
    RCC->APB2ENR |= RCC_APB2Periph;
 80005fa:	4909      	ldr	r1, [pc, #36]	; (8000620 <RCC_APB2PeriphClockCmd+0x38>)
 80005fc:	4b08      	ldr	r3, [pc, #32]	; (8000620 <RCC_APB2PeriphClockCmd+0x38>)
 80005fe:	699a      	ldr	r2, [r3, #24]
 8000600:	687b      	ldr	r3, [r7, #4]
 8000602:	4313      	orrs	r3, r2
 8000604:	618b      	str	r3, [r1, #24]
  }
  else
  {
    RCC->APB2ENR &= ~RCC_APB2Periph;
  }
}
 8000606:	e006      	b.n	8000616 <RCC_APB2PeriphClockCmd+0x2e>
  {
    RCC->APB2ENR |= RCC_APB2Periph;
  }
  else
  {
    RCC->APB2ENR &= ~RCC_APB2Periph;
 8000608:	4905      	ldr	r1, [pc, #20]	; (8000620 <RCC_APB2PeriphClockCmd+0x38>)
 800060a:	4b05      	ldr	r3, [pc, #20]	; (8000620 <RCC_APB2PeriphClockCmd+0x38>)
 800060c:	699a      	ldr	r2, [r3, #24]
 800060e:	687b      	ldr	r3, [r7, #4]
 8000610:	43db      	mvns	r3, r3
 8000612:	4013      	ands	r3, r2
 8000614:	618b      	str	r3, [r1, #24]
  }
}
 8000616:	bf00      	nop
 8000618:	370c      	adds	r7, #12
 800061a:	46bd      	mov	sp, r7
 800061c:	bc80      	pop	{r7}
 800061e:	4770      	bx	lr
 8000620:	40021000 	.word	0x40021000

08000624 <STM32vldiscovery_LEDInit>:
  *     @arg LED3
  *     @arg LED4
  * @retval None
  */
void STM32vldiscovery_LEDInit(Led_TypeDef Led)
{
 8000624:	b580      	push	{r7, lr}
 8000626:	b084      	sub	sp, #16
 8000628:	af00      	add	r7, sp, #0
 800062a:	4603      	mov	r3, r0
 800062c:	71fb      	strb	r3, [r7, #7]
  GPIO_InitTypeDef  GPIO_InitStructure;
  
  /* Enable the GPIO_LED Clock */
  RCC_APB2PeriphClockCmd(GPIO_CLK[Led], ENABLE);
 800062e:	79fb      	ldrb	r3, [r7, #7]
 8000630:	4a0e      	ldr	r2, [pc, #56]	; (800066c <STM32vldiscovery_LEDInit+0x48>)
 8000632:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000636:	2101      	movs	r1, #1
 8000638:	4618      	mov	r0, r3
 800063a:	f7ff ffd5 	bl	80005e8 <RCC_APB2PeriphClockCmd>

  /* Configure the GPIO_LED pin */
  GPIO_InitStructure.GPIO_Pin = GPIO_PIN[Led];
 800063e:	79fb      	ldrb	r3, [r7, #7]
 8000640:	4a0b      	ldr	r2, [pc, #44]	; (8000670 <STM32vldiscovery_LEDInit+0x4c>)
 8000642:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000646:	81bb      	strh	r3, [r7, #12]
  
  GPIO_InitStructure.GPIO_Mode = GPIO_Mode_Out_PP;
 8000648:	2310      	movs	r3, #16
 800064a:	73fb      	strb	r3, [r7, #15]
  GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
 800064c:	2303      	movs	r3, #3
 800064e:	73bb      	strb	r3, [r7, #14]
  GPIO_Init(GPIO_PORT[Led], &GPIO_InitStructure);
 8000650:	79fb      	ldrb	r3, [r7, #7]
 8000652:	4a08      	ldr	r2, [pc, #32]	; (8000674 <STM32vldiscovery_LEDInit+0x50>)
 8000654:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000658:	f107 020c 	add.w	r2, r7, #12
 800065c:	4611      	mov	r1, r2
 800065e:	4618      	mov	r0, r3
 8000660:	f7ff feaa 	bl	80003b8 <GPIO_Init>
}
 8000664:	bf00      	nop
 8000666:	3710      	adds	r7, #16
 8000668:	46bd      	mov	sp, r7
 800066a:	bd80      	pop	{r7, pc}
 800066c:	08000a70 	.word	0x08000a70
 8000670:	08000a6c 	.word	0x08000a6c
 8000674:	20000000 	.word	0x20000000

08000678 <STM32vldiscovery_LEDOff>:
  *     @arg LED3
  *     @arg LED4 
  * @retval None
  */
void STM32vldiscovery_LEDOff(Led_TypeDef Led)
{
 8000678:	b480      	push	{r7}
 800067a:	b083      	sub	sp, #12
 800067c:	af00      	add	r7, sp, #0
 800067e:	4603      	mov	r3, r0
 8000680:	71fb      	strb	r3, [r7, #7]
  GPIO_PORT[Led]->BRR = GPIO_PIN[Led];   
 8000682:	79fb      	ldrb	r3, [r7, #7]
 8000684:	4a06      	ldr	r2, [pc, #24]	; (80006a0 <STM32vldiscovery_LEDOff+0x28>)
 8000686:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800068a:	79fa      	ldrb	r2, [r7, #7]
 800068c:	4905      	ldr	r1, [pc, #20]	; (80006a4 <STM32vldiscovery_LEDOff+0x2c>)
 800068e:	f831 2012 	ldrh.w	r2, [r1, r2, lsl #1]
 8000692:	615a      	str	r2, [r3, #20]
}
 8000694:	bf00      	nop
 8000696:	370c      	adds	r7, #12
 8000698:	46bd      	mov	sp, r7
 800069a:	bc80      	pop	{r7}
 800069c:	4770      	bx	lr
 800069e:	bf00      	nop
 80006a0:	20000000 	.word	0x20000000
 80006a4:	08000a6c 	.word	0x08000a6c

080006a8 <STM32vldiscovery_LEDToggle>:
  *     @arg LED3
  *     @arg LED4  
  * @retval None
  */
void STM32vldiscovery_LEDToggle(Led_TypeDef Led)
{
 80006a8:	b480      	push	{r7}
 80006aa:	b083      	sub	sp, #12
 80006ac:	af00      	add	r7, sp, #0
 80006ae:	4603      	mov	r3, r0
 80006b0:	71fb      	strb	r3, [r7, #7]
  GPIO_PORT[Led]->ODR ^= GPIO_PIN[Led];
 80006b2:	79fb      	ldrb	r3, [r7, #7]
 80006b4:	4a09      	ldr	r2, [pc, #36]	; (80006dc <STM32vldiscovery_LEDToggle+0x34>)
 80006b6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80006ba:	79fa      	ldrb	r2, [r7, #7]
 80006bc:	4907      	ldr	r1, [pc, #28]	; (80006dc <STM32vldiscovery_LEDToggle+0x34>)
 80006be:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 80006c2:	68d2      	ldr	r2, [r2, #12]
 80006c4:	79f9      	ldrb	r1, [r7, #7]
 80006c6:	4806      	ldr	r0, [pc, #24]	; (80006e0 <STM32vldiscovery_LEDToggle+0x38>)
 80006c8:	f830 1011 	ldrh.w	r1, [r0, r1, lsl #1]
 80006cc:	404a      	eors	r2, r1
 80006ce:	60da      	str	r2, [r3, #12]
}
 80006d0:	bf00      	nop
 80006d2:	370c      	adds	r7, #12
 80006d4:	46bd      	mov	sp, r7
 80006d6:	bc80      	pop	{r7}
 80006d8:	4770      	bx	lr
 80006da:	bf00      	nop
 80006dc:	20000000 	.word	0x20000000
 80006e0:	08000a6c 	.word	0x08000a6c

080006e4 <STM32vldiscovery_PBInit>:
  *     @arg BUTTON_MODE_EXTI: Button will be connected to EXTI line with interrupt
  *                     generation capability  
  * @retval None
  */
void STM32vldiscovery_PBInit(Button_TypeDef Button, ButtonMode_TypeDef Button_Mode)
{
 80006e4:	b580      	push	{r7, lr}
 80006e6:	b086      	sub	sp, #24
 80006e8:	af00      	add	r7, sp, #0
 80006ea:	4603      	mov	r3, r0
 80006ec:	460a      	mov	r2, r1
 80006ee:	71fb      	strb	r3, [r7, #7]
 80006f0:	4613      	mov	r3, r2
 80006f2:	71bb      	strb	r3, [r7, #6]
  GPIO_InitTypeDef GPIO_InitStructure;
  EXTI_InitTypeDef EXTI_InitStructure;
  NVIC_InitTypeDef NVIC_InitStructure;

  /* Enable the BUTTON Clock */
  RCC_APB2PeriphClockCmd(BUTTON_CLK[Button] | RCC_APB2Periph_AFIO, ENABLE);
 80006f4:	2304      	movs	r3, #4
 80006f6:	f043 0301 	orr.w	r3, r3, #1
 80006fa:	2101      	movs	r1, #1
 80006fc:	4618      	mov	r0, r3
 80006fe:	f7ff ff73 	bl	80005e8 <RCC_APB2PeriphClockCmd>

  /* Configure Button pin as input floating */
  GPIO_InitStructure.GPIO_Mode = GPIO_Mode_IN_FLOATING;
 8000702:	2304      	movs	r3, #4
 8000704:	75fb      	strb	r3, [r7, #23]
  GPIO_InitStructure.GPIO_Pin = BUTTON_PIN[Button];
 8000706:	2301      	movs	r3, #1
 8000708:	82bb      	strh	r3, [r7, #20]
  GPIO_Init(BUTTON_PORT[Button], &GPIO_InitStructure);
 800070a:	79fb      	ldrb	r3, [r7, #7]
 800070c:	4a19      	ldr	r2, [pc, #100]	; (8000774 <STM32vldiscovery_PBInit+0x90>)
 800070e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000712:	f107 0214 	add.w	r2, r7, #20
 8000716:	4611      	mov	r1, r2
 8000718:	4618      	mov	r0, r3
 800071a:	f7ff fe4d 	bl	80003b8 <GPIO_Init>

  if (Button_Mode == BUTTON_MODE_EXTI)
 800071e:	79bb      	ldrb	r3, [r7, #6]
 8000720:	2b01      	cmp	r3, #1
 8000722:	d122      	bne.n	800076a <STM32vldiscovery_PBInit+0x86>
  {
    /* Connect Button EXTI Line to Button GPIO Pin */
    GPIO_EXTILineConfig(BUTTON_PORT_SOURCE[Button], BUTTON_PIN_SOURCE[Button]);
 8000724:	2300      	movs	r3, #0
 8000726:	b2db      	uxtb	r3, r3
 8000728:	2200      	movs	r2, #0
 800072a:	b2d2      	uxtb	r2, r2
 800072c:	4611      	mov	r1, r2
 800072e:	4618      	mov	r0, r3
 8000730:	f7ff ff18 	bl	8000564 <GPIO_EXTILineConfig>

    /* Configure Button EXTI line */
    EXTI_InitStructure.EXTI_Line = BUTTON_EXTI_LINE[Button];
 8000734:	2301      	movs	r3, #1
 8000736:	60fb      	str	r3, [r7, #12]
    EXTI_InitStructure.EXTI_Mode = EXTI_Mode_Interrupt;
 8000738:	2300      	movs	r3, #0
 800073a:	743b      	strb	r3, [r7, #16]

    EXTI_InitStructure.EXTI_Trigger = EXTI_Trigger_Rising;  
 800073c:	2308      	movs	r3, #8
 800073e:	747b      	strb	r3, [r7, #17]

    EXTI_InitStructure.EXTI_LineCmd = ENABLE;
 8000740:	2301      	movs	r3, #1
 8000742:	74bb      	strb	r3, [r7, #18]
    EXTI_Init(&EXTI_InitStructure);
 8000744:	f107 030c 	add.w	r3, r7, #12
 8000748:	4618      	mov	r0, r3
 800074a:	f7ff fdc3 	bl	80002d4 <EXTI_Init>

    /* Enable and set Button EXTI Interrupt to the lowest priority */
    NVIC_InitStructure.NVIC_IRQChannel = BUTTON_IRQn[Button];
 800074e:	2306      	movs	r3, #6
 8000750:	b2db      	uxtb	r3, r3
 8000752:	723b      	strb	r3, [r7, #8]
    NVIC_InitStructure.NVIC_IRQChannelPreemptionPriority = 0x0F;
 8000754:	230f      	movs	r3, #15
 8000756:	727b      	strb	r3, [r7, #9]
    NVIC_InitStructure.NVIC_IRQChannelSubPriority = 0x0F;
 8000758:	230f      	movs	r3, #15
 800075a:	72bb      	strb	r3, [r7, #10]
    NVIC_InitStructure.NVIC_IRQChannelCmd = ENABLE;
 800075c:	2301      	movs	r3, #1
 800075e:	72fb      	strb	r3, [r7, #11]

    NVIC_Init(&NVIC_InitStructure); 
 8000760:	f107 0308 	add.w	r3, r7, #8
 8000764:	4618      	mov	r0, r3
 8000766:	f7ff fd53 	bl	8000210 <NVIC_Init>
  }
}
 800076a:	bf00      	nop
 800076c:	3718      	adds	r7, #24
 800076e:	46bd      	mov	sp, r7
 8000770:	bd80      	pop	{r7, pc}
 8000772:	bf00      	nop
 8000774:	20000008 	.word	0x20000008

08000778 <STM32vldiscovery_PBGetState>:
  *   This parameter can be one of following parameters:    
  *     @arg BUTTON_USER: USER Push Button 
  * @retval The Button GPIO pin value.
  */
uint32_t STM32vldiscovery_PBGetState(Button_TypeDef Button)
{
 8000778:	b580      	push	{r7, lr}
 800077a:	b082      	sub	sp, #8
 800077c:	af00      	add	r7, sp, #0
 800077e:	4603      	mov	r3, r0
 8000780:	71fb      	strb	r3, [r7, #7]
  return GPIO_ReadInputDataBit(BUTTON_PORT[Button], BUTTON_PIN[Button]);
 8000782:	79fb      	ldrb	r3, [r7, #7]
 8000784:	4a06      	ldr	r2, [pc, #24]	; (80007a0 <STM32vldiscovery_PBGetState+0x28>)
 8000786:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800078a:	2201      	movs	r2, #1
 800078c:	4611      	mov	r1, r2
 800078e:	4618      	mov	r0, r3
 8000790:	f7ff fece 	bl	8000530 <GPIO_ReadInputDataBit>
 8000794:	4603      	mov	r3, r0
}
 8000796:	4618      	mov	r0, r3
 8000798:	3708      	adds	r7, #8
 800079a:	46bd      	mov	sp, r7
 800079c:	bd80      	pop	{r7, pc}
 800079e:	bf00      	nop
 80007a0:	20000008 	.word	0x20000008

080007a4 <main>:
**  Abstract: main program
**
**===========================================================================
*/
int main(void)
{
 80007a4:	b580      	push	{r7, lr}
 80007a6:	b082      	sub	sp, #8
 80007a8:	af00      	add	r7, sp, #0
  int i = 0;
 80007aa:	2300      	movs	r3, #0
 80007ac:	607b      	str	r3, [r7, #4]
  STM_EVAL_LEDOn(LED2);
  STM_EVAL_LEDOn(LED3);
  STM_EVAL_LEDOn(LED4);

#elif defined USE_STM32_DISCOVERY
  STM32vldiscovery_LEDInit(LED3);
 80007ae:	2000      	movs	r0, #0
 80007b0:	f7ff ff38 	bl	8000624 <STM32vldiscovery_LEDInit>
  STM32vldiscovery_LEDInit(LED4);
 80007b4:	2001      	movs	r0, #1
 80007b6:	f7ff ff35 	bl	8000624 <STM32vldiscovery_LEDInit>
  STM32vldiscovery_PBInit(BUTTON_USER, BUTTON_MODE_GPIO);
 80007ba:	2100      	movs	r1, #0
 80007bc:	2000      	movs	r0, #0
 80007be:	f7ff ff91 	bl	80006e4 <STM32vldiscovery_PBInit>
  STM32vldiscovery_LEDOff(LED3);
 80007c2:	2000      	movs	r0, #0
 80007c4:	f7ff ff58 	bl	8000678 <STM32vldiscovery_LEDOff>
  STM32vldiscovery_LEDOff(LED4);
 80007c8:	2001      	movs	r0, #1
 80007ca:	f7ff ff55 	bl	8000678 <STM32vldiscovery_LEDOff>
  /* TODO - Add your application code here */

  /* Infinite loop */
  while (1)
  {
	i++;
 80007ce:	687b      	ldr	r3, [r7, #4]
 80007d0:	3301      	adds	r3, #1
 80007d2:	607b      	str	r3, [r7, #4]
#ifdef USE_LED
	STM_EVAL_LEDToggle(LED1);

#elif defined USE_STM32_DISCOVERY
    if(0 == STM32vldiscovery_PBGetState(BUTTON_USER))
 80007d4:	2000      	movs	r0, #0
 80007d6:	f7ff ffcf 	bl	8000778 <STM32vldiscovery_PBGetState>
 80007da:	4603      	mov	r3, r0
 80007dc:	2b00      	cmp	r3, #0
 80007de:	bf0c      	ite	eq
 80007e0:	2301      	moveq	r3, #1
 80007e2:	2300      	movne	r3, #0
 80007e4:	b2db      	uxtb	r3, r3
 80007e6:	2b00      	cmp	r3, #0
 80007e8:	d006      	beq.n	80007f8 <main+0x54>
    {
      /* Toggle LED3 */
      STM32vldiscovery_LEDToggle(LED3);
 80007ea:	2000      	movs	r0, #0
 80007ec:	f7ff ff5c 	bl	80006a8 <STM32vldiscovery_LEDToggle>
      /* Turn Off LED4 */
      STM32vldiscovery_LEDOff(LED4);
 80007f0:	2001      	movs	r0, #1
 80007f2:	f7ff ff41 	bl	8000678 <STM32vldiscovery_LEDOff>
 80007f6:	e7ea      	b.n	80007ce <main+0x2a>
    }
    else
    {
      /* Toggle LED4 */
        STM32vldiscovery_LEDToggle(LED4);
 80007f8:	2001      	movs	r0, #1
 80007fa:	f7ff ff55 	bl	80006a8 <STM32vldiscovery_LEDToggle>
      /* Turn Off LED3 */
      STM32vldiscovery_LEDOff(LED3);
 80007fe:	2000      	movs	r0, #0
 8000800:	f7ff ff3a 	bl	8000678 <STM32vldiscovery_LEDOff>
#endif

  /* TODO - Add your application code here */

  /* Infinite loop */
  while (1)
 8000804:	e7e3      	b.n	80007ce <main+0x2a>
 8000806:	bf00      	nop

08000808 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8000808:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000840 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 800080c:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 800080e:	e003      	b.n	8000818 <LoopCopyDataInit>

08000810 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8000810:	4b0c      	ldr	r3, [pc, #48]	; (8000844 <LoopFillZerobss+0x18>)
	ldr	r3, [r3, r1]
 8000812:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8000814:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 8000816:	3104      	adds	r1, #4

08000818 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8000818:	480b      	ldr	r0, [pc, #44]	; (8000848 <LoopFillZerobss+0x1c>)
	ldr	r3, =_edata
 800081a:	4b0c      	ldr	r3, [pc, #48]	; (800084c <LoopFillZerobss+0x20>)
	adds	r2, r0, r1
 800081c:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 800081e:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8000820:	d3f6      	bcc.n	8000810 <CopyDataInit>
	ldr	r2, =_sbss
 8000822:	4a0b      	ldr	r2, [pc, #44]	; (8000850 <LoopFillZerobss+0x24>)
	b	LoopFillZerobss
 8000824:	e002      	b.n	800082c <LoopFillZerobss>

08000826 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 8000826:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8000828:	f842 3b04 	str.w	r3, [r2], #4

0800082c <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 800082c:	4b09      	ldr	r3, [pc, #36]	; (8000854 <LoopFillZerobss+0x28>)
	cmp	r2, r3
 800082e:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8000830:	d3f9      	bcc.n	8000826 <FillZerobss>
	
/* Call the clock system intitialization function.*/
  bl  SystemInit 
 8000832:	f000 f841 	bl	80008b8 <SystemInit>
/* Call static constructors */
  bl __libc_init_array  
 8000836:	f000 f8e7 	bl	8000a08 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800083a:	f7ff ffb3 	bl	80007a4 <main>
	bx	lr
 800083e:	4770      	bx	lr

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8000840:	20002000 	.word	0x20002000
/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
  b	LoopCopyDataInit

CopyDataInit:
	ldr	r3, =_sidata
 8000844:	08000a80 	.word	0x08000a80
	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
	adds	r1, r1, #4

LoopCopyDataInit:
	ldr	r0, =_sdata
 8000848:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 800084c:	2000000c 	.word	0x2000000c
	adds	r2, r0, r1
	cmp	r2, r3
	bcc	CopyDataInit
	ldr	r2, =_sbss
 8000850:	2000000c 	.word	0x2000000c
FillZerobss:
	movs	r3, #0
	str	r3, [r2], #4

LoopFillZerobss:
	ldr	r3, = _ebss
 8000854:	20000028 	.word	0x20000028

08000858 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000858:	e7fe      	b.n	8000858 <ADC1_IRQHandler>
	...

0800085c <NMI_Handler>:
  * @brief  This function handles NMI exception.
  * @param  None
  * @retval None
  */
void NMI_Handler(void)
{
 800085c:	b480      	push	{r7}
 800085e:	af00      	add	r7, sp, #0
}
 8000860:	bf00      	nop
 8000862:	46bd      	mov	sp, r7
 8000864:	bc80      	pop	{r7}
 8000866:	4770      	bx	lr

08000868 <HardFault_Handler>:
  * @brief  This function handles Hard Fault exception.
  * @param  None
  * @retval None
  */
void HardFault_Handler(void)
{
 8000868:	b480      	push	{r7}
 800086a:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Hard Fault exception occurs */
  while (1)
  {
  }
 800086c:	e7fe      	b.n	800086c <HardFault_Handler+0x4>
 800086e:	bf00      	nop

08000870 <MemManage_Handler>:
  * @brief  This function handles Memory Manage exception.
  * @param  None
  * @retval None
  */
void MemManage_Handler(void)
{
 8000870:	b480      	push	{r7}
 8000872:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Memory Manage exception occurs */
  while (1)
  {
  }
 8000874:	e7fe      	b.n	8000874 <MemManage_Handler+0x4>
 8000876:	bf00      	nop

08000878 <BusFault_Handler>:
  * @brief  This function handles Bus Fault exception.
  * @param  None
  * @retval None
  */
void BusFault_Handler(void)
{
 8000878:	b480      	push	{r7}
 800087a:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Bus Fault exception occurs */
  while (1)
  {
  }
 800087c:	e7fe      	b.n	800087c <BusFault_Handler+0x4>
 800087e:	bf00      	nop

08000880 <UsageFault_Handler>:
  * @brief  This function handles Usage Fault exception.
  * @param  None
  * @retval None
  */
void UsageFault_Handler(void)
{
 8000880:	b480      	push	{r7}
 8000882:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Usage Fault exception occurs */
  while (1)
  {
  }
 8000884:	e7fe      	b.n	8000884 <UsageFault_Handler+0x4>
 8000886:	bf00      	nop

08000888 <SVC_Handler>:
  * @brief  This function handles SVCall exception.
  * @param  None
  * @retval None
  */
void SVC_Handler(void)
{
 8000888:	b480      	push	{r7}
 800088a:	af00      	add	r7, sp, #0
}
 800088c:	bf00      	nop
 800088e:	46bd      	mov	sp, r7
 8000890:	bc80      	pop	{r7}
 8000892:	4770      	bx	lr

08000894 <DebugMon_Handler>:
  * @brief  This function handles Debug Monitor exception.
  * @param  None
  * @retval None
  */
void DebugMon_Handler(void)
{
 8000894:	b480      	push	{r7}
 8000896:	af00      	add	r7, sp, #0
}
 8000898:	bf00      	nop
 800089a:	46bd      	mov	sp, r7
 800089c:	bc80      	pop	{r7}
 800089e:	4770      	bx	lr

080008a0 <PendSV_Handler>:
  * @brief  This function handles PendSVC exception.
  * @param  None
  * @retval None
  */
void PendSV_Handler(void)
{
 80008a0:	b480      	push	{r7}
 80008a2:	af00      	add	r7, sp, #0
}
 80008a4:	bf00      	nop
 80008a6:	46bd      	mov	sp, r7
 80008a8:	bc80      	pop	{r7}
 80008aa:	4770      	bx	lr

080008ac <SysTick_Handler>:
  * @brief  This function handles SysTick Handler.
  * @param  None
  * @retval None
  */
void SysTick_Handler(void)
{
 80008ac:	b480      	push	{r7}
 80008ae:	af00      	add	r7, sp, #0
}
 80008b0:	bf00      	nop
 80008b2:	46bd      	mov	sp, r7
 80008b4:	bc80      	pop	{r7}
 80008b6:	4770      	bx	lr

080008b8 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80008b8:	b580      	push	{r7, lr}
 80008ba:	af00      	add	r7, sp, #0
  /* Reset the RCC clock configuration to the default reset state(for debug purpose) */
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 80008bc:	4a17      	ldr	r2, [pc, #92]	; (800091c <SystemInit+0x64>)
 80008be:	4b17      	ldr	r3, [pc, #92]	; (800091c <SystemInit+0x64>)
 80008c0:	681b      	ldr	r3, [r3, #0]
 80008c2:	f043 0301 	orr.w	r3, r3, #1
 80008c6:	6013      	str	r3, [r2, #0]

  /* Reset SW, HPRE, PPRE1, PPRE2, ADCPRE and MCO bits */
#ifndef STM32F10X_CL
  RCC->CFGR &= (uint32_t)0xF8FF0000;
 80008c8:	4914      	ldr	r1, [pc, #80]	; (800091c <SystemInit+0x64>)
 80008ca:	4b14      	ldr	r3, [pc, #80]	; (800091c <SystemInit+0x64>)
 80008cc:	685a      	ldr	r2, [r3, #4]
 80008ce:	4b14      	ldr	r3, [pc, #80]	; (8000920 <SystemInit+0x68>)
 80008d0:	4013      	ands	r3, r2
 80008d2:	604b      	str	r3, [r1, #4]
#else
  RCC->CFGR &= (uint32_t)0xF0FF0000;
#endif /* STM32F10X_CL */   
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 80008d4:	4a11      	ldr	r2, [pc, #68]	; (800091c <SystemInit+0x64>)
 80008d6:	4b11      	ldr	r3, [pc, #68]	; (800091c <SystemInit+0x64>)
 80008d8:	681b      	ldr	r3, [r3, #0]
 80008da:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 80008de:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80008e2:	6013      	str	r3, [r2, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 80008e4:	4a0d      	ldr	r2, [pc, #52]	; (800091c <SystemInit+0x64>)
 80008e6:	4b0d      	ldr	r3, [pc, #52]	; (800091c <SystemInit+0x64>)
 80008e8:	681b      	ldr	r3, [r3, #0]
 80008ea:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80008ee:	6013      	str	r3, [r2, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE/OTGFSPRE bits */
  RCC->CFGR &= (uint32_t)0xFF80FFFF;
 80008f0:	4a0a      	ldr	r2, [pc, #40]	; (800091c <SystemInit+0x64>)
 80008f2:	4b0a      	ldr	r3, [pc, #40]	; (800091c <SystemInit+0x64>)
 80008f4:	685b      	ldr	r3, [r3, #4]
 80008f6:	f423 03fe 	bic.w	r3, r3, #8323072	; 0x7f0000
 80008fa:	6053      	str	r3, [r2, #4]

  /* Reset CFGR2 register */
  RCC->CFGR2 = 0x00000000;
#elif defined (STM32F10X_LD_VL) || defined (STM32F10X_MD_VL) || (defined STM32F10X_HD_VL)
  /* Disable all interrupts and clear pending bits  */
  RCC->CIR = 0x009F0000;
 80008fc:	4b07      	ldr	r3, [pc, #28]	; (800091c <SystemInit+0x64>)
 80008fe:	f44f 021f 	mov.w	r2, #10420224	; 0x9f0000
 8000902:	609a      	str	r2, [r3, #8]

  /* Reset CFGR2 register */
  RCC->CFGR2 = 0x00000000;      
 8000904:	4b05      	ldr	r3, [pc, #20]	; (800091c <SystemInit+0x64>)
 8000906:	2200      	movs	r2, #0
 8000908:	62da      	str	r2, [r3, #44]	; 0x2c
  #endif /* DATA_IN_ExtSRAM */
#endif 

  /* Configure the System clock frequency, HCLK, PCLK2 and PCLK1 prescalers */
  /* Configure the Flash Latency cycles and enable prefetch buffer */
  SetSysClock();
 800090a:	f000 f80d 	bl	8000928 <SetSysClock>

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 800090e:	4b05      	ldr	r3, [pc, #20]	; (8000924 <SystemInit+0x6c>)
 8000910:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000914:	609a      	str	r2, [r3, #8]
#endif 
}
 8000916:	bf00      	nop
 8000918:	bd80      	pop	{r7, pc}
 800091a:	bf00      	nop
 800091c:	40021000 	.word	0x40021000
 8000920:	f8ff0000 	.word	0xf8ff0000
 8000924:	e000ed00 	.word	0xe000ed00

08000928 <SetSysClock>:
  * @brief  Configures the System clock frequency, HCLK, PCLK2 and PCLK1 prescalers.
  * @param  None
  * @retval None
  */
static void SetSysClock(void)
{
 8000928:	b580      	push	{r7, lr}
 800092a:	af00      	add	r7, sp, #0
#ifdef SYSCLK_FREQ_HSE
  SetSysClockToHSE();
#elif defined SYSCLK_FREQ_24MHz
  SetSysClockTo24();
 800092c:	f000 f802 	bl	8000934 <SetSysClockTo24>
  SetSysClockTo72();
#endif
 
 /* If none of the define above is enabled, the HSI is used as System clock
    source (default after reset) */ 
}
 8000930:	bf00      	nop
 8000932:	bd80      	pop	{r7, pc}

08000934 <SetSysClockTo24>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
static void SetSysClockTo24(void)
{
 8000934:	b480      	push	{r7}
 8000936:	b083      	sub	sp, #12
 8000938:	af00      	add	r7, sp, #0
  __IO uint32_t StartUpCounter = 0, HSEStatus = 0;
 800093a:	2300      	movs	r3, #0
 800093c:	607b      	str	r3, [r7, #4]
 800093e:	2300      	movs	r3, #0
 8000940:	603b      	str	r3, [r7, #0]
  
  /* SYSCLK, HCLK, PCLK2 and PCLK1 configuration ---------------------------*/    
  /* Enable HSE */    
  RCC->CR |= ((uint32_t)RCC_CR_HSEON);
 8000942:	4a30      	ldr	r2, [pc, #192]	; (8000a04 <SetSysClockTo24+0xd0>)
 8000944:	4b2f      	ldr	r3, [pc, #188]	; (8000a04 <SetSysClockTo24+0xd0>)
 8000946:	681b      	ldr	r3, [r3, #0]
 8000948:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800094c:	6013      	str	r3, [r2, #0]
 
  /* Wait till HSE is ready and if Time out is reached exit */
  do
  {
    HSEStatus = RCC->CR & RCC_CR_HSERDY;
 800094e:	4b2d      	ldr	r3, [pc, #180]	; (8000a04 <SetSysClockTo24+0xd0>)
 8000950:	681b      	ldr	r3, [r3, #0]
 8000952:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000956:	603b      	str	r3, [r7, #0]
    StartUpCounter++;  
 8000958:	687b      	ldr	r3, [r7, #4]
 800095a:	3301      	adds	r3, #1
 800095c:	607b      	str	r3, [r7, #4]
  } while((HSEStatus == 0) && (StartUpCounter != HSE_STARTUP_TIMEOUT));
 800095e:	683b      	ldr	r3, [r7, #0]
 8000960:	2b00      	cmp	r3, #0
 8000962:	d103      	bne.n	800096c <SetSysClockTo24+0x38>
 8000964:	687b      	ldr	r3, [r7, #4]
 8000966:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
 800096a:	d1f0      	bne.n	800094e <SetSysClockTo24+0x1a>

  if ((RCC->CR & RCC_CR_HSERDY) != RESET)
 800096c:	4b25      	ldr	r3, [pc, #148]	; (8000a04 <SetSysClockTo24+0xd0>)
 800096e:	681b      	ldr	r3, [r3, #0]
 8000970:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000974:	2b00      	cmp	r3, #0
 8000976:	d002      	beq.n	800097e <SetSysClockTo24+0x4a>
  {
    HSEStatus = (uint32_t)0x01;
 8000978:	2301      	movs	r3, #1
 800097a:	603b      	str	r3, [r7, #0]
 800097c:	e001      	b.n	8000982 <SetSysClockTo24+0x4e>
  }
  else
  {
    HSEStatus = (uint32_t)0x00;
 800097e:	2300      	movs	r3, #0
 8000980:	603b      	str	r3, [r7, #0]
  }  

  if (HSEStatus == (uint32_t)0x01)
 8000982:	683b      	ldr	r3, [r7, #0]
 8000984:	2b01      	cmp	r3, #1
 8000986:	d137      	bne.n	80009f8 <SetSysClockTo24+0xc4>
    FLASH->ACR &= (uint32_t)((uint32_t)~FLASH_ACR_LATENCY);
    FLASH->ACR |= (uint32_t)FLASH_ACR_LATENCY_0;    
#endif
 
    /* HCLK = SYSCLK */
    RCC->CFGR |= (uint32_t)RCC_CFGR_HPRE_DIV1;
 8000988:	4a1e      	ldr	r2, [pc, #120]	; (8000a04 <SetSysClockTo24+0xd0>)
 800098a:	4b1e      	ldr	r3, [pc, #120]	; (8000a04 <SetSysClockTo24+0xd0>)
 800098c:	685b      	ldr	r3, [r3, #4]
 800098e:	6053      	str	r3, [r2, #4]
      
    /* PCLK2 = HCLK */
    RCC->CFGR |= (uint32_t)RCC_CFGR_PPRE2_DIV1;
 8000990:	4a1c      	ldr	r2, [pc, #112]	; (8000a04 <SetSysClockTo24+0xd0>)
 8000992:	4b1c      	ldr	r3, [pc, #112]	; (8000a04 <SetSysClockTo24+0xd0>)
 8000994:	685b      	ldr	r3, [r3, #4]
 8000996:	6053      	str	r3, [r2, #4]
    
    /* PCLK1 = HCLK */
    RCC->CFGR |= (uint32_t)RCC_CFGR_PPRE1_DIV1;
 8000998:	4a1a      	ldr	r2, [pc, #104]	; (8000a04 <SetSysClockTo24+0xd0>)
 800099a:	4b1a      	ldr	r3, [pc, #104]	; (8000a04 <SetSysClockTo24+0xd0>)
 800099c:	685b      	ldr	r3, [r3, #4]
 800099e:	6053      	str	r3, [r2, #4]
    while((RCC->CR & RCC_CR_PLL2RDY) == 0)
    {
    }   
#elif defined (STM32F10X_LD_VL) || defined (STM32F10X_MD_VL) || defined (STM32F10X_HD_VL)
    /*  PLL configuration:  = (HSE / 2) * 6 = 24 MHz */
    RCC->CFGR &= (uint32_t)((uint32_t)~(RCC_CFGR_PLLSRC | RCC_CFGR_PLLXTPRE | RCC_CFGR_PLLMULL));
 80009a0:	4a18      	ldr	r2, [pc, #96]	; (8000a04 <SetSysClockTo24+0xd0>)
 80009a2:	4b18      	ldr	r3, [pc, #96]	; (8000a04 <SetSysClockTo24+0xd0>)
 80009a4:	685b      	ldr	r3, [r3, #4]
 80009a6:	f423 137c 	bic.w	r3, r3, #4128768	; 0x3f0000
 80009aa:	6053      	str	r3, [r2, #4]
    RCC->CFGR |= (uint32_t)(RCC_CFGR_PLLSRC_PREDIV1 | RCC_CFGR_PLLXTPRE_PREDIV1_Div2 | RCC_CFGR_PLLMULL6);
 80009ac:	4a15      	ldr	r2, [pc, #84]	; (8000a04 <SetSysClockTo24+0xd0>)
 80009ae:	4b15      	ldr	r3, [pc, #84]	; (8000a04 <SetSysClockTo24+0xd0>)
 80009b0:	685b      	ldr	r3, [r3, #4]
 80009b2:	f443 1398 	orr.w	r3, r3, #1245184	; 0x130000
 80009b6:	6053      	str	r3, [r2, #4]
    RCC->CFGR &= (uint32_t)((uint32_t)~(RCC_CFGR_PLLSRC | RCC_CFGR_PLLXTPRE | RCC_CFGR_PLLMULL));
    RCC->CFGR |= (uint32_t)(RCC_CFGR_PLLSRC_HSE | RCC_CFGR_PLLXTPRE_HSE_Div2 | RCC_CFGR_PLLMULL6);
#endif /* STM32F10X_CL */

    /* Enable PLL */
    RCC->CR |= RCC_CR_PLLON;
 80009b8:	4a12      	ldr	r2, [pc, #72]	; (8000a04 <SetSysClockTo24+0xd0>)
 80009ba:	4b12      	ldr	r3, [pc, #72]	; (8000a04 <SetSysClockTo24+0xd0>)
 80009bc:	681b      	ldr	r3, [r3, #0]
 80009be:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80009c2:	6013      	str	r3, [r2, #0]

    /* Wait till PLL is ready */
    while((RCC->CR & RCC_CR_PLLRDY) == 0)
 80009c4:	bf00      	nop
 80009c6:	4b0f      	ldr	r3, [pc, #60]	; (8000a04 <SetSysClockTo24+0xd0>)
 80009c8:	681b      	ldr	r3, [r3, #0]
 80009ca:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80009ce:	2b00      	cmp	r3, #0
 80009d0:	d0f9      	beq.n	80009c6 <SetSysClockTo24+0x92>
    {
    }

    /* Select PLL as system clock source */
    RCC->CFGR &= (uint32_t)((uint32_t)~(RCC_CFGR_SW));
 80009d2:	4a0c      	ldr	r2, [pc, #48]	; (8000a04 <SetSysClockTo24+0xd0>)
 80009d4:	4b0b      	ldr	r3, [pc, #44]	; (8000a04 <SetSysClockTo24+0xd0>)
 80009d6:	685b      	ldr	r3, [r3, #4]
 80009d8:	f023 0303 	bic.w	r3, r3, #3
 80009dc:	6053      	str	r3, [r2, #4]
    RCC->CFGR |= (uint32_t)RCC_CFGR_SW_PLL;    
 80009de:	4a09      	ldr	r2, [pc, #36]	; (8000a04 <SetSysClockTo24+0xd0>)
 80009e0:	4b08      	ldr	r3, [pc, #32]	; (8000a04 <SetSysClockTo24+0xd0>)
 80009e2:	685b      	ldr	r3, [r3, #4]
 80009e4:	f043 0302 	orr.w	r3, r3, #2
 80009e8:	6053      	str	r3, [r2, #4]

    /* Wait till PLL is used as system clock source */
    while ((RCC->CFGR & (uint32_t)RCC_CFGR_SWS) != (uint32_t)0x08)
 80009ea:	bf00      	nop
 80009ec:	4b05      	ldr	r3, [pc, #20]	; (8000a04 <SetSysClockTo24+0xd0>)
 80009ee:	685b      	ldr	r3, [r3, #4]
 80009f0:	f003 030c 	and.w	r3, r3, #12
 80009f4:	2b08      	cmp	r3, #8
 80009f6:	d1f9      	bne.n	80009ec <SetSysClockTo24+0xb8>
  }
  else
  { /* If HSE fails to start-up, the application will have wrong clock 
         configuration. User can add here some code to deal with this error */
  } 
}
 80009f8:	bf00      	nop
 80009fa:	370c      	adds	r7, #12
 80009fc:	46bd      	mov	sp, r7
 80009fe:	bc80      	pop	{r7}
 8000a00:	4770      	bx	lr
 8000a02:	bf00      	nop
 8000a04:	40021000 	.word	0x40021000

08000a08 <__libc_init_array>:
 8000a08:	4b0e      	ldr	r3, [pc, #56]	; (8000a44 <__libc_init_array+0x3c>)
 8000a0a:	b570      	push	{r4, r5, r6, lr}
 8000a0c:	461e      	mov	r6, r3
 8000a0e:	4c0e      	ldr	r4, [pc, #56]	; (8000a48 <__libc_init_array+0x40>)
 8000a10:	2500      	movs	r5, #0
 8000a12:	1ae4      	subs	r4, r4, r3
 8000a14:	10a4      	asrs	r4, r4, #2
 8000a16:	42a5      	cmp	r5, r4
 8000a18:	d004      	beq.n	8000a24 <__libc_init_array+0x1c>
 8000a1a:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8000a1e:	4798      	blx	r3
 8000a20:	3501      	adds	r5, #1
 8000a22:	e7f8      	b.n	8000a16 <__libc_init_array+0xe>
 8000a24:	f000 f816 	bl	8000a54 <_init>
 8000a28:	4b08      	ldr	r3, [pc, #32]	; (8000a4c <__libc_init_array+0x44>)
 8000a2a:	4c09      	ldr	r4, [pc, #36]	; (8000a50 <__libc_init_array+0x48>)
 8000a2c:	461e      	mov	r6, r3
 8000a2e:	1ae4      	subs	r4, r4, r3
 8000a30:	10a4      	asrs	r4, r4, #2
 8000a32:	2500      	movs	r5, #0
 8000a34:	42a5      	cmp	r5, r4
 8000a36:	d004      	beq.n	8000a42 <__libc_init_array+0x3a>
 8000a38:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8000a3c:	4798      	blx	r3
 8000a3e:	3501      	adds	r5, #1
 8000a40:	e7f8      	b.n	8000a34 <__libc_init_array+0x2c>
 8000a42:	bd70      	pop	{r4, r5, r6, pc}
 8000a44:	08000a78 	.word	0x08000a78
 8000a48:	08000a78 	.word	0x08000a78
 8000a4c:	08000a78 	.word	0x08000a78
 8000a50:	08000a7c 	.word	0x08000a7c

08000a54 <_init>:
 8000a54:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000a56:	bf00      	nop
 8000a58:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000a5a:	bc08      	pop	{r3}
 8000a5c:	469e      	mov	lr, r3
 8000a5e:	4770      	bx	lr

08000a60 <_fini>:
 8000a60:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000a62:	bf00      	nop
 8000a64:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000a66:	bc08      	pop	{r3}
 8000a68:	469e      	mov	lr, r3
 8000a6a:	4770      	bx	lr
