
C:\Users\cwiec\Atollic\TrueSTUDIO\ARM_workspace_7.0\WeatherStation\Debug\WeatherStation.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002d9c  080001d0  080001d0  000101d0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000128  08002f6c  08002f6c  00012f6c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000018  08003094  08003094  00013094  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  080030ac  080030ac  000130ac  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         0000007c  20000000  080030b0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          00000238  2000007c  0800312c  0002007c  2**2
                  ALLOC
  7 ._user_heap_stack 00000080  200002b4  0800312c  000202b4  2**0
                  ALLOC
  8 .ARM.attributes 00000029  00000000  00000000  0002007c  2**0
                  CONTENTS, READONLY
  9 .debug_info   00016796  00000000  00000000  000200a5  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 000033ad  00000000  00000000  0003683b  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00006db8  00000000  00000000  00039be8  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_aranges 00000738  00000000  00000000  000409a0  2**3
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 000014a8  00000000  00000000  000410d8  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   00004729  00000000  00000000  00042580  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    00008b14  00000000  00000000  00046ca9  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .comment      0000007e  00000000  00000000  0004f7bd  2**0
                  CONTENTS, READONLY
 17 .debug_frame  00008168  00000000  00000000  0004f83c  2**2
                  CONTENTS, READONLY, DEBUGGING
 18 .stab         00000030  00000000  00000000  00057b5c  2**2
                  CONTENTS, READONLY, DEBUGGING
 19 .stabstr      000001b7  00000000  00000000  000579a4  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	2000007c 	.word	0x2000007c
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08002f54 	.word	0x08002f54

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000080 	.word	0x20000080
 800020c:	08002f54 	.word	0x08002f54

08000210 <__aeabi_frsub>:
 8000210:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000214:	e002      	b.n	800021c <__addsf3>
 8000216:	bf00      	nop

08000218 <__aeabi_fsub>:
 8000218:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

0800021c <__addsf3>:
 800021c:	0042      	lsls	r2, r0, #1
 800021e:	bf1f      	itttt	ne
 8000220:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000224:	ea92 0f03 	teqne	r2, r3
 8000228:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 800022c:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000230:	d06a      	beq.n	8000308 <__addsf3+0xec>
 8000232:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000236:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 800023a:	bfc1      	itttt	gt
 800023c:	18d2      	addgt	r2, r2, r3
 800023e:	4041      	eorgt	r1, r0
 8000240:	4048      	eorgt	r0, r1
 8000242:	4041      	eorgt	r1, r0
 8000244:	bfb8      	it	lt
 8000246:	425b      	neglt	r3, r3
 8000248:	2b19      	cmp	r3, #25
 800024a:	bf88      	it	hi
 800024c:	4770      	bxhi	lr
 800024e:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000252:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000256:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 800025a:	bf18      	it	ne
 800025c:	4240      	negne	r0, r0
 800025e:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000262:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000266:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 800026a:	bf18      	it	ne
 800026c:	4249      	negne	r1, r1
 800026e:	ea92 0f03 	teq	r2, r3
 8000272:	d03f      	beq.n	80002f4 <__addsf3+0xd8>
 8000274:	f1a2 0201 	sub.w	r2, r2, #1
 8000278:	fa41 fc03 	asr.w	ip, r1, r3
 800027c:	eb10 000c 	adds.w	r0, r0, ip
 8000280:	f1c3 0320 	rsb	r3, r3, #32
 8000284:	fa01 f103 	lsl.w	r1, r1, r3
 8000288:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 800028c:	d502      	bpl.n	8000294 <__addsf3+0x78>
 800028e:	4249      	negs	r1, r1
 8000290:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000294:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000298:	d313      	bcc.n	80002c2 <__addsf3+0xa6>
 800029a:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 800029e:	d306      	bcc.n	80002ae <__addsf3+0x92>
 80002a0:	0840      	lsrs	r0, r0, #1
 80002a2:	ea4f 0131 	mov.w	r1, r1, rrx
 80002a6:	f102 0201 	add.w	r2, r2, #1
 80002aa:	2afe      	cmp	r2, #254	; 0xfe
 80002ac:	d251      	bcs.n	8000352 <__addsf3+0x136>
 80002ae:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 80002b2:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80002b6:	bf08      	it	eq
 80002b8:	f020 0001 	biceq.w	r0, r0, #1
 80002bc:	ea40 0003 	orr.w	r0, r0, r3
 80002c0:	4770      	bx	lr
 80002c2:	0049      	lsls	r1, r1, #1
 80002c4:	eb40 0000 	adc.w	r0, r0, r0
 80002c8:	f410 0f00 	tst.w	r0, #8388608	; 0x800000
 80002cc:	f1a2 0201 	sub.w	r2, r2, #1
 80002d0:	d1ed      	bne.n	80002ae <__addsf3+0x92>
 80002d2:	fab0 fc80 	clz	ip, r0
 80002d6:	f1ac 0c08 	sub.w	ip, ip, #8
 80002da:	ebb2 020c 	subs.w	r2, r2, ip
 80002de:	fa00 f00c 	lsl.w	r0, r0, ip
 80002e2:	bfaa      	itet	ge
 80002e4:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 80002e8:	4252      	neglt	r2, r2
 80002ea:	4318      	orrge	r0, r3
 80002ec:	bfbc      	itt	lt
 80002ee:	40d0      	lsrlt	r0, r2
 80002f0:	4318      	orrlt	r0, r3
 80002f2:	4770      	bx	lr
 80002f4:	f092 0f00 	teq	r2, #0
 80002f8:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 80002fc:	bf06      	itte	eq
 80002fe:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000302:	3201      	addeq	r2, #1
 8000304:	3b01      	subne	r3, #1
 8000306:	e7b5      	b.n	8000274 <__addsf3+0x58>
 8000308:	ea4f 0341 	mov.w	r3, r1, lsl #1
 800030c:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000310:	bf18      	it	ne
 8000312:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000316:	d021      	beq.n	800035c <__addsf3+0x140>
 8000318:	ea92 0f03 	teq	r2, r3
 800031c:	d004      	beq.n	8000328 <__addsf3+0x10c>
 800031e:	f092 0f00 	teq	r2, #0
 8000322:	bf08      	it	eq
 8000324:	4608      	moveq	r0, r1
 8000326:	4770      	bx	lr
 8000328:	ea90 0f01 	teq	r0, r1
 800032c:	bf1c      	itt	ne
 800032e:	2000      	movne	r0, #0
 8000330:	4770      	bxne	lr
 8000332:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000336:	d104      	bne.n	8000342 <__addsf3+0x126>
 8000338:	0040      	lsls	r0, r0, #1
 800033a:	bf28      	it	cs
 800033c:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000340:	4770      	bx	lr
 8000342:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000346:	bf3c      	itt	cc
 8000348:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 800034c:	4770      	bxcc	lr
 800034e:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000352:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000356:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 800035a:	4770      	bx	lr
 800035c:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000360:	bf16      	itet	ne
 8000362:	4608      	movne	r0, r1
 8000364:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000368:	4601      	movne	r1, r0
 800036a:	0242      	lsls	r2, r0, #9
 800036c:	bf06      	itte	eq
 800036e:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000372:	ea90 0f01 	teqeq	r0, r1
 8000376:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 800037a:	4770      	bx	lr

0800037c <__aeabi_ui2f>:
 800037c:	f04f 0300 	mov.w	r3, #0
 8000380:	e004      	b.n	800038c <__aeabi_i2f+0x8>
 8000382:	bf00      	nop

08000384 <__aeabi_i2f>:
 8000384:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000388:	bf48      	it	mi
 800038a:	4240      	negmi	r0, r0
 800038c:	ea5f 0c00 	movs.w	ip, r0
 8000390:	bf08      	it	eq
 8000392:	4770      	bxeq	lr
 8000394:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000398:	4601      	mov	r1, r0
 800039a:	f04f 0000 	mov.w	r0, #0
 800039e:	e01c      	b.n	80003da <__aeabi_l2f+0x2a>

080003a0 <__aeabi_ul2f>:
 80003a0:	ea50 0201 	orrs.w	r2, r0, r1
 80003a4:	bf08      	it	eq
 80003a6:	4770      	bxeq	lr
 80003a8:	f04f 0300 	mov.w	r3, #0
 80003ac:	e00a      	b.n	80003c4 <__aeabi_l2f+0x14>
 80003ae:	bf00      	nop

080003b0 <__aeabi_l2f>:
 80003b0:	ea50 0201 	orrs.w	r2, r0, r1
 80003b4:	bf08      	it	eq
 80003b6:	4770      	bxeq	lr
 80003b8:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 80003bc:	d502      	bpl.n	80003c4 <__aeabi_l2f+0x14>
 80003be:	4240      	negs	r0, r0
 80003c0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80003c4:	ea5f 0c01 	movs.w	ip, r1
 80003c8:	bf02      	ittt	eq
 80003ca:	4684      	moveq	ip, r0
 80003cc:	4601      	moveq	r1, r0
 80003ce:	2000      	moveq	r0, #0
 80003d0:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 80003d4:	bf08      	it	eq
 80003d6:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 80003da:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 80003de:	fabc f28c 	clz	r2, ip
 80003e2:	3a08      	subs	r2, #8
 80003e4:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 80003e8:	db10      	blt.n	800040c <__aeabi_l2f+0x5c>
 80003ea:	fa01 fc02 	lsl.w	ip, r1, r2
 80003ee:	4463      	add	r3, ip
 80003f0:	fa00 fc02 	lsl.w	ip, r0, r2
 80003f4:	f1c2 0220 	rsb	r2, r2, #32
 80003f8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003fc:	fa20 f202 	lsr.w	r2, r0, r2
 8000400:	eb43 0002 	adc.w	r0, r3, r2
 8000404:	bf08      	it	eq
 8000406:	f020 0001 	biceq.w	r0, r0, #1
 800040a:	4770      	bx	lr
 800040c:	f102 0220 	add.w	r2, r2, #32
 8000410:	fa01 fc02 	lsl.w	ip, r1, r2
 8000414:	f1c2 0220 	rsb	r2, r2, #32
 8000418:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 800041c:	fa21 f202 	lsr.w	r2, r1, r2
 8000420:	eb43 0002 	adc.w	r0, r3, r2
 8000424:	bf08      	it	eq
 8000426:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 800042a:	4770      	bx	lr

0800042c <__aeabi_fmul>:
 800042c:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000430:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000434:	bf1e      	ittt	ne
 8000436:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 800043a:	ea92 0f0c 	teqne	r2, ip
 800043e:	ea93 0f0c 	teqne	r3, ip
 8000442:	d06f      	beq.n	8000524 <__aeabi_fmul+0xf8>
 8000444:	441a      	add	r2, r3
 8000446:	ea80 0c01 	eor.w	ip, r0, r1
 800044a:	0240      	lsls	r0, r0, #9
 800044c:	bf18      	it	ne
 800044e:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000452:	d01e      	beq.n	8000492 <__aeabi_fmul+0x66>
 8000454:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000458:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 800045c:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000460:	fba0 3101 	umull	r3, r1, r0, r1
 8000464:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000468:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 800046c:	bf3e      	ittt	cc
 800046e:	0049      	lslcc	r1, r1, #1
 8000470:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000474:	005b      	lslcc	r3, r3, #1
 8000476:	ea40 0001 	orr.w	r0, r0, r1
 800047a:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 800047e:	2afd      	cmp	r2, #253	; 0xfd
 8000480:	d81d      	bhi.n	80004be <__aeabi_fmul+0x92>
 8000482:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8000486:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 800048a:	bf08      	it	eq
 800048c:	f020 0001 	biceq.w	r0, r0, #1
 8000490:	4770      	bx	lr
 8000492:	f090 0f00 	teq	r0, #0
 8000496:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 800049a:	bf08      	it	eq
 800049c:	0249      	lsleq	r1, r1, #9
 800049e:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 80004a2:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 80004a6:	3a7f      	subs	r2, #127	; 0x7f
 80004a8:	bfc2      	ittt	gt
 80004aa:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 80004ae:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 80004b2:	4770      	bxgt	lr
 80004b4:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80004b8:	f04f 0300 	mov.w	r3, #0
 80004bc:	3a01      	subs	r2, #1
 80004be:	dc5d      	bgt.n	800057c <__aeabi_fmul+0x150>
 80004c0:	f112 0f19 	cmn.w	r2, #25
 80004c4:	bfdc      	itt	le
 80004c6:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 80004ca:	4770      	bxle	lr
 80004cc:	f1c2 0200 	rsb	r2, r2, #0
 80004d0:	0041      	lsls	r1, r0, #1
 80004d2:	fa21 f102 	lsr.w	r1, r1, r2
 80004d6:	f1c2 0220 	rsb	r2, r2, #32
 80004da:	fa00 fc02 	lsl.w	ip, r0, r2
 80004de:	ea5f 0031 	movs.w	r0, r1, rrx
 80004e2:	f140 0000 	adc.w	r0, r0, #0
 80004e6:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 80004ea:	bf08      	it	eq
 80004ec:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 80004f0:	4770      	bx	lr
 80004f2:	f092 0f00 	teq	r2, #0
 80004f6:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 80004fa:	bf02      	ittt	eq
 80004fc:	0040      	lsleq	r0, r0, #1
 80004fe:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000502:	3a01      	subeq	r2, #1
 8000504:	d0f9      	beq.n	80004fa <__aeabi_fmul+0xce>
 8000506:	ea40 000c 	orr.w	r0, r0, ip
 800050a:	f093 0f00 	teq	r3, #0
 800050e:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000512:	bf02      	ittt	eq
 8000514:	0049      	lsleq	r1, r1, #1
 8000516:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 800051a:	3b01      	subeq	r3, #1
 800051c:	d0f9      	beq.n	8000512 <__aeabi_fmul+0xe6>
 800051e:	ea41 010c 	orr.w	r1, r1, ip
 8000522:	e78f      	b.n	8000444 <__aeabi_fmul+0x18>
 8000524:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000528:	ea92 0f0c 	teq	r2, ip
 800052c:	bf18      	it	ne
 800052e:	ea93 0f0c 	teqne	r3, ip
 8000532:	d00a      	beq.n	800054a <__aeabi_fmul+0x11e>
 8000534:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000538:	bf18      	it	ne
 800053a:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 800053e:	d1d8      	bne.n	80004f2 <__aeabi_fmul+0xc6>
 8000540:	ea80 0001 	eor.w	r0, r0, r1
 8000544:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000548:	4770      	bx	lr
 800054a:	f090 0f00 	teq	r0, #0
 800054e:	bf17      	itett	ne
 8000550:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000554:	4608      	moveq	r0, r1
 8000556:	f091 0f00 	teqne	r1, #0
 800055a:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 800055e:	d014      	beq.n	800058a <__aeabi_fmul+0x15e>
 8000560:	ea92 0f0c 	teq	r2, ip
 8000564:	d101      	bne.n	800056a <__aeabi_fmul+0x13e>
 8000566:	0242      	lsls	r2, r0, #9
 8000568:	d10f      	bne.n	800058a <__aeabi_fmul+0x15e>
 800056a:	ea93 0f0c 	teq	r3, ip
 800056e:	d103      	bne.n	8000578 <__aeabi_fmul+0x14c>
 8000570:	024b      	lsls	r3, r1, #9
 8000572:	bf18      	it	ne
 8000574:	4608      	movne	r0, r1
 8000576:	d108      	bne.n	800058a <__aeabi_fmul+0x15e>
 8000578:	ea80 0001 	eor.w	r0, r0, r1
 800057c:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000580:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000584:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000588:	4770      	bx	lr
 800058a:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 800058e:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 8000592:	4770      	bx	lr

08000594 <__aeabi_fdiv>:
 8000594:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000598:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 800059c:	bf1e      	ittt	ne
 800059e:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 80005a2:	ea92 0f0c 	teqne	r2, ip
 80005a6:	ea93 0f0c 	teqne	r3, ip
 80005aa:	d069      	beq.n	8000680 <__aeabi_fdiv+0xec>
 80005ac:	eba2 0203 	sub.w	r2, r2, r3
 80005b0:	ea80 0c01 	eor.w	ip, r0, r1
 80005b4:	0249      	lsls	r1, r1, #9
 80005b6:	ea4f 2040 	mov.w	r0, r0, lsl #9
 80005ba:	d037      	beq.n	800062c <__aeabi_fdiv+0x98>
 80005bc:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 80005c0:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 80005c4:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 80005c8:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 80005cc:	428b      	cmp	r3, r1
 80005ce:	bf38      	it	cc
 80005d0:	005b      	lslcc	r3, r3, #1
 80005d2:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 80005d6:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 80005da:	428b      	cmp	r3, r1
 80005dc:	bf24      	itt	cs
 80005de:	1a5b      	subcs	r3, r3, r1
 80005e0:	ea40 000c 	orrcs.w	r0, r0, ip
 80005e4:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 80005e8:	bf24      	itt	cs
 80005ea:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 80005ee:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80005f2:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 80005f6:	bf24      	itt	cs
 80005f8:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 80005fc:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000600:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000604:	bf24      	itt	cs
 8000606:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 800060a:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 800060e:	011b      	lsls	r3, r3, #4
 8000610:	bf18      	it	ne
 8000612:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000616:	d1e0      	bne.n	80005da <__aeabi_fdiv+0x46>
 8000618:	2afd      	cmp	r2, #253	; 0xfd
 800061a:	f63f af50 	bhi.w	80004be <__aeabi_fmul+0x92>
 800061e:	428b      	cmp	r3, r1
 8000620:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000624:	bf08      	it	eq
 8000626:	f020 0001 	biceq.w	r0, r0, #1
 800062a:	4770      	bx	lr
 800062c:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000630:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000634:	327f      	adds	r2, #127	; 0x7f
 8000636:	bfc2      	ittt	gt
 8000638:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 800063c:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000640:	4770      	bxgt	lr
 8000642:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000646:	f04f 0300 	mov.w	r3, #0
 800064a:	3a01      	subs	r2, #1
 800064c:	e737      	b.n	80004be <__aeabi_fmul+0x92>
 800064e:	f092 0f00 	teq	r2, #0
 8000652:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000656:	bf02      	ittt	eq
 8000658:	0040      	lsleq	r0, r0, #1
 800065a:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 800065e:	3a01      	subeq	r2, #1
 8000660:	d0f9      	beq.n	8000656 <__aeabi_fdiv+0xc2>
 8000662:	ea40 000c 	orr.w	r0, r0, ip
 8000666:	f093 0f00 	teq	r3, #0
 800066a:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 800066e:	bf02      	ittt	eq
 8000670:	0049      	lsleq	r1, r1, #1
 8000672:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000676:	3b01      	subeq	r3, #1
 8000678:	d0f9      	beq.n	800066e <__aeabi_fdiv+0xda>
 800067a:	ea41 010c 	orr.w	r1, r1, ip
 800067e:	e795      	b.n	80005ac <__aeabi_fdiv+0x18>
 8000680:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000684:	ea92 0f0c 	teq	r2, ip
 8000688:	d108      	bne.n	800069c <__aeabi_fdiv+0x108>
 800068a:	0242      	lsls	r2, r0, #9
 800068c:	f47f af7d 	bne.w	800058a <__aeabi_fmul+0x15e>
 8000690:	ea93 0f0c 	teq	r3, ip
 8000694:	f47f af70 	bne.w	8000578 <__aeabi_fmul+0x14c>
 8000698:	4608      	mov	r0, r1
 800069a:	e776      	b.n	800058a <__aeabi_fmul+0x15e>
 800069c:	ea93 0f0c 	teq	r3, ip
 80006a0:	d104      	bne.n	80006ac <__aeabi_fdiv+0x118>
 80006a2:	024b      	lsls	r3, r1, #9
 80006a4:	f43f af4c 	beq.w	8000540 <__aeabi_fmul+0x114>
 80006a8:	4608      	mov	r0, r1
 80006aa:	e76e      	b.n	800058a <__aeabi_fmul+0x15e>
 80006ac:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 80006b0:	bf18      	it	ne
 80006b2:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 80006b6:	d1ca      	bne.n	800064e <__aeabi_fdiv+0xba>
 80006b8:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 80006bc:	f47f af5c 	bne.w	8000578 <__aeabi_fmul+0x14c>
 80006c0:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 80006c4:	f47f af3c 	bne.w	8000540 <__aeabi_fmul+0x114>
 80006c8:	e75f      	b.n	800058a <__aeabi_fmul+0x15e>
 80006ca:	bf00      	nop

080006cc <__aeabi_f2iz>:
 80006cc:	ea4f 0240 	mov.w	r2, r0, lsl #1
 80006d0:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 80006d4:	d30f      	bcc.n	80006f6 <__aeabi_f2iz+0x2a>
 80006d6:	f04f 039e 	mov.w	r3, #158	; 0x9e
 80006da:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 80006de:	d90d      	bls.n	80006fc <__aeabi_f2iz+0x30>
 80006e0:	ea4f 2300 	mov.w	r3, r0, lsl #8
 80006e4:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80006e8:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 80006ec:	fa23 f002 	lsr.w	r0, r3, r2
 80006f0:	bf18      	it	ne
 80006f2:	4240      	negne	r0, r0
 80006f4:	4770      	bx	lr
 80006f6:	f04f 0000 	mov.w	r0, #0
 80006fa:	4770      	bx	lr
 80006fc:	f112 0f61 	cmn.w	r2, #97	; 0x61
 8000700:	d101      	bne.n	8000706 <__aeabi_f2iz+0x3a>
 8000702:	0242      	lsls	r2, r0, #9
 8000704:	d105      	bne.n	8000712 <__aeabi_f2iz+0x46>
 8000706:	f010 4000 	ands.w	r0, r0, #2147483648	; 0x80000000
 800070a:	bf08      	it	eq
 800070c:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000710:	4770      	bx	lr
 8000712:	f04f 0000 	mov.w	r0, #0
 8000716:	4770      	bx	lr

08000718 <NVIC_PriorityGroupConfig>:
{
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(NVIC_PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to NVIC_PriorityGroup value */
  SCB->AIRCR = AIRCR_VECTKEY_MASK | NVIC_PriorityGroup;
 8000718:	f040 60bf 	orr.w	r0, r0, #100139008	; 0x5f80000
 800071c:	4b02      	ldr	r3, [pc, #8]	; (8000728 <NVIC_PriorityGroupConfig+0x10>)
 800071e:	f440 3000 	orr.w	r0, r0, #131072	; 0x20000
 8000722:	60d8      	str	r0, [r3, #12]
 8000724:	4770      	bx	lr
 8000726:	bf00      	nop
 8000728:	e000ed00 	.word	0xe000ed00

0800072c <NVIC_Init>:
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NVIC_InitStruct->NVIC_IRQChannelCmd));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(NVIC_InitStruct->NVIC_IRQChannelPreemptionPriority));  
  assert_param(IS_NVIC_SUB_PRIORITY(NVIC_InitStruct->NVIC_IRQChannelSubPriority));
    
  if (NVIC_InitStruct->NVIC_IRQChannelCmd != DISABLE)
 800072c:	78c3      	ldrb	r3, [r0, #3]
 800072e:	b95b      	cbnz	r3, 8000748 <NVIC_Init+0x1c>
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
  }
  else
  {
    /* Disable the Selected IRQ Channels -------------------------------------*/
    NVIC->ICER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
 8000730:	7803      	ldrb	r3, [r0, #0]
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
 8000732:	2101      	movs	r1, #1
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
  }
  else
  {
    /* Disable the Selected IRQ Channels -------------------------------------*/
    NVIC->ICER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
 8000734:	095a      	lsrs	r2, r3, #5
 8000736:	4816      	ldr	r0, [pc, #88]	; (8000790 <NVIC_Init+0x64>)
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
 8000738:	f003 031f 	and.w	r3, r3, #31
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
  }
  else
  {
    /* Disable the Selected IRQ Channels -------------------------------------*/
    NVIC->ICER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
 800073c:	3220      	adds	r2, #32
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
 800073e:	fa01 f303 	lsl.w	r3, r1, r3
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
  }
  else
  {
    /* Disable the Selected IRQ Channels -------------------------------------*/
    NVIC->ICER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
 8000742:	f840 3022 	str.w	r3, [r0, r2, lsl #2]
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
  }
}
 8000746:	4770      	bx	lr
  assert_param(IS_NVIC_SUB_PRIORITY(NVIC_InitStruct->NVIC_IRQChannelSubPriority));
    
  if (NVIC_InitStruct->NVIC_IRQChannelCmd != DISABLE)
  {
    /* Compute the Corresponding IRQ Priority --------------------------------*/    
    tmppriority = (0x700 - ((SCB->AIRCR) & (uint32_t)0x700))>> 0x08;
 8000748:	4b12      	ldr	r3, [pc, #72]	; (8000794 <NVIC_Init+0x68>)
  * @param  NVIC_InitStruct: pointer to a NVIC_InitTypeDef structure that contains
  *         the configuration information for the specified NVIC peripheral.
  * @retval None
  */
void NVIC_Init(NVIC_InitTypeDef* NVIC_InitStruct)
{
 800074a:	b430      	push	{r4, r5}
  assert_param(IS_NVIC_SUB_PRIORITY(NVIC_InitStruct->NVIC_IRQChannelSubPriority));
    
  if (NVIC_InitStruct->NVIC_IRQChannelCmd != DISABLE)
  {
    /* Compute the Corresponding IRQ Priority --------------------------------*/    
    tmppriority = (0x700 - ((SCB->AIRCR) & (uint32_t)0x700))>> 0x08;
 800074c:	68d9      	ldr	r1, [r3, #12]
    tmppre = (0x4 - tmppriority);
    tmpsub = tmpsub >> tmppriority;

    tmppriority = (uint32_t)NVIC_InitStruct->NVIC_IRQChannelPreemptionPriority << tmppre;
    tmppriority |=  NVIC_InitStruct->NVIC_IRQChannelSubPriority & tmpsub;
 800074e:	7882      	ldrb	r2, [r0, #2]
  assert_param(IS_NVIC_SUB_PRIORITY(NVIC_InitStruct->NVIC_IRQChannelSubPriority));
    
  if (NVIC_InitStruct->NVIC_IRQChannelCmd != DISABLE)
  {
    /* Compute the Corresponding IRQ Priority --------------------------------*/    
    tmppriority = (0x700 - ((SCB->AIRCR) & (uint32_t)0x700))>> 0x08;
 8000750:	43c9      	mvns	r1, r1
    tmppre = (0x4 - tmppriority);
    tmpsub = tmpsub >> tmppriority;

    tmppriority = (uint32_t)NVIC_InitStruct->NVIC_IRQChannelPreemptionPriority << tmppre;
 8000752:	7844      	ldrb	r4, [r0, #1]
  assert_param(IS_NVIC_SUB_PRIORITY(NVIC_InitStruct->NVIC_IRQChannelSubPriority));
    
  if (NVIC_InitStruct->NVIC_IRQChannelCmd != DISABLE)
  {
    /* Compute the Corresponding IRQ Priority --------------------------------*/    
    tmppriority = (0x700 - ((SCB->AIRCR) & (uint32_t)0x700))>> 0x08;
 8000754:	f3c1 2102 	ubfx	r1, r1, #8, #3
    tmppre = (0x4 - tmppriority);
    tmpsub = tmpsub >> tmppriority;

    tmppriority = (uint32_t)NVIC_InitStruct->NVIC_IRQChannelPreemptionPriority << tmppre;
    tmppriority |=  NVIC_InitStruct->NVIC_IRQChannelSubPriority & tmpsub;
 8000758:	230f      	movs	r3, #15
    
  if (NVIC_InitStruct->NVIC_IRQChannelCmd != DISABLE)
  {
    /* Compute the Corresponding IRQ Priority --------------------------------*/    
    tmppriority = (0x700 - ((SCB->AIRCR) & (uint32_t)0x700))>> 0x08;
    tmppre = (0x4 - tmppriority);
 800075a:	f1c1 0504 	rsb	r5, r1, #4
    tmpsub = tmpsub >> tmppriority;

    tmppriority = (uint32_t)NVIC_InitStruct->NVIC_IRQChannelPreemptionPriority << tmppre;
    tmppriority |=  NVIC_InitStruct->NVIC_IRQChannelSubPriority & tmpsub;
 800075e:	40cb      	lsrs	r3, r1
    /* Compute the Corresponding IRQ Priority --------------------------------*/    
    tmppriority = (0x700 - ((SCB->AIRCR) & (uint32_t)0x700))>> 0x08;
    tmppre = (0x4 - tmppriority);
    tmpsub = tmpsub >> tmppriority;

    tmppriority = (uint32_t)NVIC_InitStruct->NVIC_IRQChannelPreemptionPriority << tmppre;
 8000760:	40ac      	lsls	r4, r5
    tmppriority |=  NVIC_InitStruct->NVIC_IRQChannelSubPriority & tmpsub;
 8000762:	4013      	ands	r3, r2
    tmppriority = tmppriority << 0x04;
        
    NVIC->IP[NVIC_InitStruct->NVIC_IRQChannel] = tmppriority;
 8000764:	7802      	ldrb	r2, [r0, #0]
    tmppriority = (0x700 - ((SCB->AIRCR) & (uint32_t)0x700))>> 0x08;
    tmppre = (0x4 - tmppriority);
    tmpsub = tmpsub >> tmppriority;

    tmppriority = (uint32_t)NVIC_InitStruct->NVIC_IRQChannelPreemptionPriority << tmppre;
    tmppriority |=  NVIC_InitStruct->NVIC_IRQChannelSubPriority & tmpsub;
 8000766:	4323      	orrs	r3, r4
    tmppriority = tmppriority << 0x04;
        
    NVIC->IP[NVIC_InitStruct->NVIC_IRQChannel] = tmppriority;
 8000768:	011b      	lsls	r3, r3, #4
 800076a:	f102 4260 	add.w	r2, r2, #3758096384	; 0xe0000000
 800076e:	b2db      	uxtb	r3, r3
 8000770:	f502 4261 	add.w	r2, r2, #57600	; 0xe100
 8000774:	f882 3300 	strb.w	r3, [r2, #768]	; 0x300
    
    /* Enable the Selected IRQ Channels --------------------------------------*/
    NVIC->ISER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
 8000778:	7803      	ldrb	r3, [r0, #0]
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
 800077a:	2201      	movs	r2, #1
 800077c:	f003 001f 	and.w	r0, r3, #31

    tmppriority = (uint32_t)NVIC_InitStruct->NVIC_IRQChannelPreemptionPriority << tmppre;
    tmppriority |=  NVIC_InitStruct->NVIC_IRQChannelSubPriority & tmpsub;
    tmppriority = tmppriority << 0x04;
        
    NVIC->IP[NVIC_InitStruct->NVIC_IRQChannel] = tmppriority;
 8000780:	4903      	ldr	r1, [pc, #12]	; (8000790 <NVIC_Init+0x64>)
    
    /* Enable the Selected IRQ Channels --------------------------------------*/
    NVIC->ISER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
 8000782:	095b      	lsrs	r3, r3, #5
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
 8000784:	4082      	lsls	r2, r0
    tmppriority = tmppriority << 0x04;
        
    NVIC->IP[NVIC_InitStruct->NVIC_IRQChannel] = tmppriority;
    
    /* Enable the Selected IRQ Channels --------------------------------------*/
    NVIC->ISER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
 8000786:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  {
    /* Disable the Selected IRQ Channels -------------------------------------*/
    NVIC->ICER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
  }
}
 800078a:	bc30      	pop	{r4, r5}
 800078c:	4770      	bx	lr
 800078e:	bf00      	nop
 8000790:	e000e100 	.word	0xe000e100
 8000794:	e000ed00 	.word	0xe000ed00

08000798 <GPIO_Init>:
  * @param  GPIO_InitStruct: pointer to a GPIO_InitTypeDef structure that
  *         contains the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void GPIO_Init(GPIO_TypeDef* GPIOx, GPIO_InitTypeDef* GPIO_InitStruct)
{
 8000798:	b430      	push	{r4, r5}
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GPIO_MODE(GPIO_InitStruct->GPIO_Mode));
  assert_param(IS_GPIO_PIN(GPIO_InitStruct->GPIO_Pin));  
  
/*---------------------------- GPIO Mode Configuration -----------------------*/
  currentmode = ((uint32_t)GPIO_InitStruct->GPIO_Mode) & ((uint32_t)0x0F);
 800079a:	78cd      	ldrb	r5, [r1, #3]
  if ((((uint32_t)GPIO_InitStruct->GPIO_Mode) & ((uint32_t)0x10)) != 0x00)
 800079c:	06eb      	lsls	r3, r5, #27
  { 
    /* Check the parameters */
    assert_param(IS_GPIO_SPEED(GPIO_InitStruct->GPIO_Speed));
    /* Output mode */
    currentmode |= (uint32_t)GPIO_InitStruct->GPIO_Speed;
 800079e:	bf48      	it	mi
 80007a0:	788b      	ldrbmi	r3, [r1, #2]
 80007a2:	f005 040f 	and.w	r4, r5, #15
 80007a6:	bf48      	it	mi
 80007a8:	431c      	orrmi	r4, r3
  }
/*---------------------------- GPIO CRL Configuration ------------------------*/
  /* Configure the eight low port pins */
  if (((uint32_t)GPIO_InitStruct->GPIO_Pin & ((uint32_t)0x00FF)) != 0x00)
 80007aa:	880b      	ldrh	r3, [r1, #0]
 80007ac:	f013 0fff 	tst.w	r3, #255	; 0xff
 80007b0:	d033      	beq.n	800081a <GPIO_Init+0x82>
 80007b2:	2d48      	cmp	r5, #72	; 0x48
  {
    tmpreg = GPIOx->CRL;
 80007b4:	6802      	ldr	r2, [r0, #0]
 80007b6:	f000 8099 	beq.w	80008ec <GPIO_Init+0x154>
 80007ba:	2d28      	cmp	r5, #40	; 0x28
 80007bc:	f000 80fb 	beq.w	80009b6 <GPIO_Init+0x21e>
    for (pinpos = 0x00; pinpos < 0x08; pinpos++)
    {
      pos = ((uint32_t)0x01) << pinpos;
      /* Get the port pins position */
      currentpin = (GPIO_InitStruct->GPIO_Pin) & pos;
      if (currentpin == pos)
 80007c0:	07d9      	lsls	r1, r3, #31
      {
        pos = pinpos << 2;
        /* Clear the corresponding low control register bits */
        pinmask = ((uint32_t)0x0F) << pos;
        tmpreg &= ~pinmask;
 80007c2:	bf44      	itt	mi
 80007c4:	f022 020f 	bicmi.w	r2, r2, #15
        /* Write the mode configuration in the corresponding bits */
        tmpreg |= (currentmode << pos);
 80007c8:	4322      	orrmi	r2, r4
    for (pinpos = 0x00; pinpos < 0x08; pinpos++)
    {
      pos = ((uint32_t)0x01) << pinpos;
      /* Get the port pins position */
      currentpin = (GPIO_InitStruct->GPIO_Pin) & pos;
      if (currentpin == pos)
 80007ca:	0799      	lsls	r1, r3, #30
      {
        pos = pinpos << 2;
        /* Clear the corresponding low control register bits */
        pinmask = ((uint32_t)0x0F) << pos;
        tmpreg &= ~pinmask;
 80007cc:	bf44      	itt	mi
 80007ce:	f022 02f0 	bicmi.w	r2, r2, #240	; 0xf0
        /* Write the mode configuration in the corresponding bits */
        tmpreg |= (currentmode << pos);
 80007d2:	ea42 1204 	orrmi.w	r2, r2, r4, lsl #4
    for (pinpos = 0x00; pinpos < 0x08; pinpos++)
    {
      pos = ((uint32_t)0x01) << pinpos;
      /* Get the port pins position */
      currentpin = (GPIO_InitStruct->GPIO_Pin) & pos;
      if (currentpin == pos)
 80007d6:	0759      	lsls	r1, r3, #29
      {
        pos = pinpos << 2;
        /* Clear the corresponding low control register bits */
        pinmask = ((uint32_t)0x0F) << pos;
        tmpreg &= ~pinmask;
 80007d8:	bf44      	itt	mi
 80007da:	f422 6270 	bicmi.w	r2, r2, #3840	; 0xf00
        /* Write the mode configuration in the corresponding bits */
        tmpreg |= (currentmode << pos);
 80007de:	ea42 2204 	orrmi.w	r2, r2, r4, lsl #8
    for (pinpos = 0x00; pinpos < 0x08; pinpos++)
    {
      pos = ((uint32_t)0x01) << pinpos;
      /* Get the port pins position */
      currentpin = (GPIO_InitStruct->GPIO_Pin) & pos;
      if (currentpin == pos)
 80007e2:	0719      	lsls	r1, r3, #28
      {
        pos = pinpos << 2;
        /* Clear the corresponding low control register bits */
        pinmask = ((uint32_t)0x0F) << pos;
        tmpreg &= ~pinmask;
 80007e4:	bf44      	itt	mi
 80007e6:	f422 4270 	bicmi.w	r2, r2, #61440	; 0xf000
        /* Write the mode configuration in the corresponding bits */
        tmpreg |= (currentmode << pos);
 80007ea:	ea42 3204 	orrmi.w	r2, r2, r4, lsl #12
    for (pinpos = 0x00; pinpos < 0x08; pinpos++)
    {
      pos = ((uint32_t)0x01) << pinpos;
      /* Get the port pins position */
      currentpin = (GPIO_InitStruct->GPIO_Pin) & pos;
      if (currentpin == pos)
 80007ee:	06d9      	lsls	r1, r3, #27
      {
        pos = pinpos << 2;
        /* Clear the corresponding low control register bits */
        pinmask = ((uint32_t)0x0F) << pos;
        tmpreg &= ~pinmask;
 80007f0:	bf44      	itt	mi
 80007f2:	f422 2270 	bicmi.w	r2, r2, #983040	; 0xf0000
        /* Write the mode configuration in the corresponding bits */
        tmpreg |= (currentmode << pos);
 80007f6:	ea42 4204 	orrmi.w	r2, r2, r4, lsl #16
    for (pinpos = 0x00; pinpos < 0x08; pinpos++)
    {
      pos = ((uint32_t)0x01) << pinpos;
      /* Get the port pins position */
      currentpin = (GPIO_InitStruct->GPIO_Pin) & pos;
      if (currentpin == pos)
 80007fa:	0699      	lsls	r1, r3, #26
      {
        pos = pinpos << 2;
        /* Clear the corresponding low control register bits */
        pinmask = ((uint32_t)0x0F) << pos;
        tmpreg &= ~pinmask;
 80007fc:	bf44      	itt	mi
 80007fe:	f422 0270 	bicmi.w	r2, r2, #15728640	; 0xf00000
        /* Write the mode configuration in the corresponding bits */
        tmpreg |= (currentmode << pos);
 8000802:	ea42 5204 	orrmi.w	r2, r2, r4, lsl #20
    for (pinpos = 0x00; pinpos < 0x08; pinpos++)
    {
      pos = ((uint32_t)0x01) << pinpos;
      /* Get the port pins position */
      currentpin = (GPIO_InitStruct->GPIO_Pin) & pos;
      if (currentpin == pos)
 8000806:	0659      	lsls	r1, r3, #25
      {
        pos = pinpos << 2;
        /* Clear the corresponding low control register bits */
        pinmask = ((uint32_t)0x0F) << pos;
        tmpreg &= ~pinmask;
 8000808:	bf44      	itt	mi
 800080a:	f022 6270 	bicmi.w	r2, r2, #251658240	; 0xf000000
        /* Write the mode configuration in the corresponding bits */
        tmpreg |= (currentmode << pos);
 800080e:	ea42 6204 	orrmi.w	r2, r2, r4, lsl #24
    for (pinpos = 0x00; pinpos < 0x08; pinpos++)
    {
      pos = ((uint32_t)0x01) << pinpos;
      /* Get the port pins position */
      currentpin = (GPIO_InitStruct->GPIO_Pin) & pos;
      if (currentpin == pos)
 8000812:	0619      	lsls	r1, r3, #24
 8000814:	f100 809f 	bmi.w	8000956 <GPIO_Init+0x1be>
            GPIOx->BSRR = (((uint32_t)0x01) << pinpos);
          }
        }
      }
    }
    GPIOx->CRL = tmpreg;
 8000818:	6002      	str	r2, [r0, #0]
  }
/*---------------------------- GPIO CRH Configuration ------------------------*/
  /* Configure the eight high port pins */
  if (GPIO_InitStruct->GPIO_Pin > 0x00FF)
 800081a:	2bff      	cmp	r3, #255	; 0xff
 800081c:	d931      	bls.n	8000882 <GPIO_Init+0xea>
 800081e:	2d28      	cmp	r5, #40	; 0x28
  {
    tmpreg = GPIOx->CRH;
 8000820:	6842      	ldr	r2, [r0, #4]
 8000822:	d030      	beq.n	8000886 <GPIO_Init+0xee>
 8000824:	2d48      	cmp	r5, #72	; 0x48
 8000826:	f000 8099 	beq.w	800095c <GPIO_Init+0x1c4>
    for (pinpos = 0x00; pinpos < 0x08; pinpos++)
    {
      pos = (((uint32_t)0x01) << (pinpos + 0x08));
      /* Get the port pins position */
      currentpin = ((GPIO_InitStruct->GPIO_Pin) & pos);
      if (currentpin == pos)
 800082a:	05d9      	lsls	r1, r3, #23
      {
        pos = pinpos << 2;
        /* Clear the corresponding high control register bits */
        pinmask = ((uint32_t)0x0F) << pos;
        tmpreg &= ~pinmask;
 800082c:	bf44      	itt	mi
 800082e:	f022 020f 	bicmi.w	r2, r2, #15
        /* Write the mode configuration in the corresponding bits */
        tmpreg |= (currentmode << pos);
 8000832:	4322      	orrmi	r2, r4
    for (pinpos = 0x00; pinpos < 0x08; pinpos++)
    {
      pos = (((uint32_t)0x01) << (pinpos + 0x08));
      /* Get the port pins position */
      currentpin = ((GPIO_InitStruct->GPIO_Pin) & pos);
      if (currentpin == pos)
 8000834:	059d      	lsls	r5, r3, #22
      {
        pos = pinpos << 2;
        /* Clear the corresponding high control register bits */
        pinmask = ((uint32_t)0x0F) << pos;
        tmpreg &= ~pinmask;
 8000836:	bf44      	itt	mi
 8000838:	f022 02f0 	bicmi.w	r2, r2, #240	; 0xf0
        /* Write the mode configuration in the corresponding bits */
        tmpreg |= (currentmode << pos);
 800083c:	ea42 1204 	orrmi.w	r2, r2, r4, lsl #4
    for (pinpos = 0x00; pinpos < 0x08; pinpos++)
    {
      pos = (((uint32_t)0x01) << (pinpos + 0x08));
      /* Get the port pins position */
      currentpin = ((GPIO_InitStruct->GPIO_Pin) & pos);
      if (currentpin == pos)
 8000840:	0559      	lsls	r1, r3, #21
      {
        pos = pinpos << 2;
        /* Clear the corresponding high control register bits */
        pinmask = ((uint32_t)0x0F) << pos;
        tmpreg &= ~pinmask;
 8000842:	bf44      	itt	mi
 8000844:	f422 6270 	bicmi.w	r2, r2, #3840	; 0xf00
        /* Write the mode configuration in the corresponding bits */
        tmpreg |= (currentmode << pos);
 8000848:	ea42 2204 	orrmi.w	r2, r2, r4, lsl #8
    for (pinpos = 0x00; pinpos < 0x08; pinpos++)
    {
      pos = (((uint32_t)0x01) << (pinpos + 0x08));
      /* Get the port pins position */
      currentpin = ((GPIO_InitStruct->GPIO_Pin) & pos);
      if (currentpin == pos)
 800084c:	051d      	lsls	r5, r3, #20
      {
        pos = pinpos << 2;
        /* Clear the corresponding high control register bits */
        pinmask = ((uint32_t)0x0F) << pos;
        tmpreg &= ~pinmask;
 800084e:	bf44      	itt	mi
 8000850:	f422 4270 	bicmi.w	r2, r2, #61440	; 0xf000
        /* Write the mode configuration in the corresponding bits */
        tmpreg |= (currentmode << pos);
 8000854:	ea42 3204 	orrmi.w	r2, r2, r4, lsl #12
    for (pinpos = 0x00; pinpos < 0x08; pinpos++)
    {
      pos = (((uint32_t)0x01) << (pinpos + 0x08));
      /* Get the port pins position */
      currentpin = ((GPIO_InitStruct->GPIO_Pin) & pos);
      if (currentpin == pos)
 8000858:	04d9      	lsls	r1, r3, #19
      {
        pos = pinpos << 2;
        /* Clear the corresponding high control register bits */
        pinmask = ((uint32_t)0x0F) << pos;
        tmpreg &= ~pinmask;
 800085a:	bf44      	itt	mi
 800085c:	f422 2270 	bicmi.w	r2, r2, #983040	; 0xf0000
        /* Write the mode configuration in the corresponding bits */
        tmpreg |= (currentmode << pos);
 8000860:	ea42 4204 	orrmi.w	r2, r2, r4, lsl #16
    for (pinpos = 0x00; pinpos < 0x08; pinpos++)
    {
      pos = (((uint32_t)0x01) << (pinpos + 0x08));
      /* Get the port pins position */
      currentpin = ((GPIO_InitStruct->GPIO_Pin) & pos);
      if (currentpin == pos)
 8000864:	049d      	lsls	r5, r3, #18
      {
        pos = pinpos << 2;
        /* Clear the corresponding high control register bits */
        pinmask = ((uint32_t)0x0F) << pos;
        tmpreg &= ~pinmask;
 8000866:	bf44      	itt	mi
 8000868:	f422 0270 	bicmi.w	r2, r2, #15728640	; 0xf00000
        /* Write the mode configuration in the corresponding bits */
        tmpreg |= (currentmode << pos);
 800086c:	ea42 5204 	orrmi.w	r2, r2, r4, lsl #20
    for (pinpos = 0x00; pinpos < 0x08; pinpos++)
    {
      pos = (((uint32_t)0x01) << (pinpos + 0x08));
      /* Get the port pins position */
      currentpin = ((GPIO_InitStruct->GPIO_Pin) & pos);
      if (currentpin == pos)
 8000870:	0459      	lsls	r1, r3, #17
      {
        pos = pinpos << 2;
        /* Clear the corresponding high control register bits */
        pinmask = ((uint32_t)0x0F) << pos;
        tmpreg &= ~pinmask;
 8000872:	bf44      	itt	mi
 8000874:	f022 6270 	bicmi.w	r2, r2, #251658240	; 0xf000000
        /* Write the mode configuration in the corresponding bits */
        tmpreg |= (currentmode << pos);
 8000878:	ea42 6204 	orrmi.w	r2, r2, r4, lsl #24
    for (pinpos = 0x00; pinpos < 0x08; pinpos++)
    {
      pos = (((uint32_t)0x01) << (pinpos + 0x08));
      /* Get the port pins position */
      currentpin = ((GPIO_InitStruct->GPIO_Pin) & pos);
      if (currentpin == pos)
 800087c:	041b      	lsls	r3, r3, #16
 800087e:	d467      	bmi.n	8000950 <GPIO_Init+0x1b8>
        {
          GPIOx->BSRR = (((uint32_t)0x01) << (pinpos + 0x08));
        }
      }
    }
    GPIOx->CRH = tmpreg;
 8000880:	6042      	str	r2, [r0, #4]
  }
}
 8000882:	bc30      	pop	{r4, r5}
 8000884:	4770      	bx	lr
    for (pinpos = 0x00; pinpos < 0x08; pinpos++)
    {
      pos = (((uint32_t)0x01) << (pinpos + 0x08));
      /* Get the port pins position */
      currentpin = ((GPIO_InitStruct->GPIO_Pin) & pos);
      if (currentpin == pos)
 8000886:	f403 7180 	and.w	r1, r3, #256	; 0x100
 800088a:	b289      	uxth	r1, r1
 800088c:	2900      	cmp	r1, #0
 800088e:	f040 8111 	bne.w	8000ab4 <GPIO_Init+0x31c>
 8000892:	f403 7100 	and.w	r1, r3, #512	; 0x200
 8000896:	b289      	uxth	r1, r1
 8000898:	2900      	cmp	r1, #0
 800089a:	f040 8105 	bne.w	8000aa8 <GPIO_Init+0x310>
 800089e:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 80008a2:	b289      	uxth	r1, r1
 80008a4:	2900      	cmp	r1, #0
 80008a6:	f040 80f9 	bne.w	8000a9c <GPIO_Init+0x304>
 80008aa:	f403 6100 	and.w	r1, r3, #2048	; 0x800
 80008ae:	b289      	uxth	r1, r1
 80008b0:	2900      	cmp	r1, #0
 80008b2:	f040 80ed 	bne.w	8000a90 <GPIO_Init+0x2f8>
 80008b6:	f403 5180 	and.w	r1, r3, #4096	; 0x1000
 80008ba:	b289      	uxth	r1, r1
 80008bc:	2900      	cmp	r1, #0
 80008be:	f040 80e1 	bne.w	8000a84 <GPIO_Init+0x2ec>
 80008c2:	f403 5100 	and.w	r1, r3, #8192	; 0x2000
 80008c6:	b289      	uxth	r1, r1
 80008c8:	2900      	cmp	r1, #0
 80008ca:	f040 80d5 	bne.w	8000a78 <GPIO_Init+0x2e0>
 80008ce:	f403 4180 	and.w	r1, r3, #16384	; 0x4000
 80008d2:	b289      	uxth	r1, r1
 80008d4:	2900      	cmp	r1, #0
 80008d6:	f040 80c9 	bne.w	8000a6c <GPIO_Init+0x2d4>
 80008da:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80008de:	b29b      	uxth	r3, r3
 80008e0:	2b00      	cmp	r3, #0
 80008e2:	d0cd      	beq.n	8000880 <GPIO_Init+0xe8>
        pos = pinpos << 2;
        /* Clear the corresponding high control register bits */
        pinmask = ((uint32_t)0x0F) << pos;
        tmpreg &= ~pinmask;
        /* Write the mode configuration in the corresponding bits */
        tmpreg |= (currentmode << pos);
 80008e4:	f364 721f 	bfi	r2, r4, #28, #4
        /* Reset the corresponding ODR bit */
        if (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_IPD)
        {
          GPIOx->BRR = (((uint32_t)0x01) << (pinpos + 0x08));
 80008e8:	6143      	str	r3, [r0, #20]
 80008ea:	e7c9      	b.n	8000880 <GPIO_Init+0xe8>
    for (pinpos = 0x00; pinpos < 0x08; pinpos++)
    {
      pos = ((uint32_t)0x01) << pinpos;
      /* Get the port pins position */
      currentpin = (GPIO_InitStruct->GPIO_Pin) & pos;
      if (currentpin == pos)
 80008ec:	f013 0101 	ands.w	r1, r3, #1
 80008f0:	f040 8103 	bne.w	8000afa <GPIO_Init+0x362>
 80008f4:	f003 0102 	and.w	r1, r3, #2
 80008f8:	b289      	uxth	r1, r1
 80008fa:	2900      	cmp	r1, #0
 80008fc:	f040 80f7 	bne.w	8000aee <GPIO_Init+0x356>
 8000900:	f003 0104 	and.w	r1, r3, #4
 8000904:	b289      	uxth	r1, r1
 8000906:	2900      	cmp	r1, #0
 8000908:	f040 80eb 	bne.w	8000ae2 <GPIO_Init+0x34a>
 800090c:	f003 0108 	and.w	r1, r3, #8
 8000910:	b289      	uxth	r1, r1
 8000912:	2900      	cmp	r1, #0
 8000914:	f040 80df 	bne.w	8000ad6 <GPIO_Init+0x33e>
 8000918:	f003 0110 	and.w	r1, r3, #16
 800091c:	b289      	uxth	r1, r1
 800091e:	2900      	cmp	r1, #0
 8000920:	f040 80d3 	bne.w	8000aca <GPIO_Init+0x332>
 8000924:	f003 0120 	and.w	r1, r3, #32
 8000928:	b289      	uxth	r1, r1
 800092a:	2900      	cmp	r1, #0
 800092c:	f040 80c7 	bne.w	8000abe <GPIO_Init+0x326>
 8000930:	f003 0140 	and.w	r1, r3, #64	; 0x40
 8000934:	b289      	uxth	r1, r1
 8000936:	2900      	cmp	r1, #0
 8000938:	f040 80e4 	bne.w	8000b04 <GPIO_Init+0x36c>
 800093c:	f003 0180 	and.w	r1, r3, #128	; 0x80
 8000940:	b289      	uxth	r1, r1
 8000942:	2900      	cmp	r1, #0
 8000944:	f43f af68 	beq.w	8000818 <GPIO_Init+0x80>
        pos = pinpos << 2;
        /* Clear the corresponding low control register bits */
        pinmask = ((uint32_t)0x0F) << pos;
        tmpreg &= ~pinmask;
        /* Write the mode configuration in the corresponding bits */
        tmpreg |= (currentmode << pos);
 8000948:	f364 721f 	bfi	r2, r4, #28, #4
        else
        {
          /* Set the corresponding ODR bit */
          if (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_IPU)
          {
            GPIOx->BSRR = (((uint32_t)0x01) << pinpos);
 800094c:	6101      	str	r1, [r0, #16]
 800094e:	e763      	b.n	8000818 <GPIO_Init+0x80>
        pos = pinpos << 2;
        /* Clear the corresponding high control register bits */
        pinmask = ((uint32_t)0x0F) << pos;
        tmpreg &= ~pinmask;
        /* Write the mode configuration in the corresponding bits */
        tmpreg |= (currentmode << pos);
 8000950:	f364 721f 	bfi	r2, r4, #28, #4
 8000954:	e794      	b.n	8000880 <GPIO_Init+0xe8>
        pos = pinpos << 2;
        /* Clear the corresponding low control register bits */
        pinmask = ((uint32_t)0x0F) << pos;
        tmpreg &= ~pinmask;
        /* Write the mode configuration in the corresponding bits */
        tmpreg |= (currentmode << pos);
 8000956:	f364 721f 	bfi	r2, r4, #28, #4
 800095a:	e75d      	b.n	8000818 <GPIO_Init+0x80>
    for (pinpos = 0x00; pinpos < 0x08; pinpos++)
    {
      pos = (((uint32_t)0x01) << (pinpos + 0x08));
      /* Get the port pins position */
      currentpin = ((GPIO_InitStruct->GPIO_Pin) & pos);
      if (currentpin == pos)
 800095c:	f403 7180 	and.w	r1, r3, #256	; 0x100
 8000960:	b289      	uxth	r1, r1
 8000962:	2900      	cmp	r1, #0
 8000964:	d16b      	bne.n	8000a3e <GPIO_Init+0x2a6>
 8000966:	f403 7100 	and.w	r1, r3, #512	; 0x200
 800096a:	b289      	uxth	r1, r1
 800096c:	2900      	cmp	r1, #0
 800096e:	d160      	bne.n	8000a32 <GPIO_Init+0x29a>
 8000970:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 8000974:	b289      	uxth	r1, r1
 8000976:	2900      	cmp	r1, #0
 8000978:	d155      	bne.n	8000a26 <GPIO_Init+0x28e>
 800097a:	f403 6100 	and.w	r1, r3, #2048	; 0x800
 800097e:	b289      	uxth	r1, r1
 8000980:	2900      	cmp	r1, #0
 8000982:	d14a      	bne.n	8000a1a <GPIO_Init+0x282>
 8000984:	f403 5180 	and.w	r1, r3, #4096	; 0x1000
 8000988:	b289      	uxth	r1, r1
 800098a:	2900      	cmp	r1, #0
 800098c:	d162      	bne.n	8000a54 <GPIO_Init+0x2bc>
 800098e:	f403 5100 	and.w	r1, r3, #8192	; 0x2000
 8000992:	b289      	uxth	r1, r1
 8000994:	2900      	cmp	r1, #0
 8000996:	d157      	bne.n	8000a48 <GPIO_Init+0x2b0>
 8000998:	f403 4180 	and.w	r1, r3, #16384	; 0x4000
 800099c:	b289      	uxth	r1, r1
 800099e:	2900      	cmp	r1, #0
 80009a0:	d15e      	bne.n	8000a60 <GPIO_Init+0x2c8>
 80009a2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80009a6:	b29b      	uxth	r3, r3
 80009a8:	2b00      	cmp	r3, #0
 80009aa:	f43f af69 	beq.w	8000880 <GPIO_Init+0xe8>
        pos = pinpos << 2;
        /* Clear the corresponding high control register bits */
        pinmask = ((uint32_t)0x0F) << pos;
        tmpreg &= ~pinmask;
        /* Write the mode configuration in the corresponding bits */
        tmpreg |= (currentmode << pos);
 80009ae:	f364 721f 	bfi	r2, r4, #28, #4
          GPIOx->BRR = (((uint32_t)0x01) << (pinpos + 0x08));
        }
        /* Set the corresponding ODR bit */
        if (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_IPU)
        {
          GPIOx->BSRR = (((uint32_t)0x01) << (pinpos + 0x08));
 80009b2:	6103      	str	r3, [r0, #16]
 80009b4:	e764      	b.n	8000880 <GPIO_Init+0xe8>
    for (pinpos = 0x00; pinpos < 0x08; pinpos++)
    {
      pos = ((uint32_t)0x01) << pinpos;
      /* Get the port pins position */
      currentpin = (GPIO_InitStruct->GPIO_Pin) & pos;
      if (currentpin == pos)
 80009b6:	f013 0101 	ands.w	r1, r3, #1
 80009ba:	f040 80cd 	bne.w	8000b58 <GPIO_Init+0x3c0>
 80009be:	f003 0102 	and.w	r1, r3, #2
 80009c2:	b289      	uxth	r1, r1
 80009c4:	2900      	cmp	r1, #0
 80009c6:	f040 80c1 	bne.w	8000b4c <GPIO_Init+0x3b4>
 80009ca:	f003 0104 	and.w	r1, r3, #4
 80009ce:	b289      	uxth	r1, r1
 80009d0:	2900      	cmp	r1, #0
 80009d2:	f040 80b5 	bne.w	8000b40 <GPIO_Init+0x3a8>
 80009d6:	f003 0108 	and.w	r1, r3, #8
 80009da:	b289      	uxth	r1, r1
 80009dc:	2900      	cmp	r1, #0
 80009de:	f040 80a9 	bne.w	8000b34 <GPIO_Init+0x39c>
 80009e2:	f003 0110 	and.w	r1, r3, #16
 80009e6:	b289      	uxth	r1, r1
 80009e8:	2900      	cmp	r1, #0
 80009ea:	f040 809d 	bne.w	8000b28 <GPIO_Init+0x390>
 80009ee:	f003 0120 	and.w	r1, r3, #32
 80009f2:	b289      	uxth	r1, r1
 80009f4:	2900      	cmp	r1, #0
 80009f6:	f040 8091 	bne.w	8000b1c <GPIO_Init+0x384>
 80009fa:	f003 0140 	and.w	r1, r3, #64	; 0x40
 80009fe:	b289      	uxth	r1, r1
 8000a00:	2900      	cmp	r1, #0
 8000a02:	f040 8085 	bne.w	8000b10 <GPIO_Init+0x378>
 8000a06:	f003 0180 	and.w	r1, r3, #128	; 0x80
 8000a0a:	b289      	uxth	r1, r1
 8000a0c:	2900      	cmp	r1, #0
 8000a0e:	f43f af03 	beq.w	8000818 <GPIO_Init+0x80>
        pos = pinpos << 2;
        /* Clear the corresponding low control register bits */
        pinmask = ((uint32_t)0x0F) << pos;
        tmpreg &= ~pinmask;
        /* Write the mode configuration in the corresponding bits */
        tmpreg |= (currentmode << pos);
 8000a12:	f364 721f 	bfi	r2, r4, #28, #4
        /* Reset the corresponding ODR bit */
        if (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_IPD)
        {
          GPIOx->BRR = (((uint32_t)0x01) << pinpos);
 8000a16:	6141      	str	r1, [r0, #20]
 8000a18:	e6fe      	b.n	8000818 <GPIO_Init+0x80>
      if (currentpin == pos)
      {
        pos = pinpos << 2;
        /* Clear the corresponding high control register bits */
        pinmask = ((uint32_t)0x0F) << pos;
        tmpreg &= ~pinmask;
 8000a1a:	f422 4270 	bic.w	r2, r2, #61440	; 0xf000
        /* Write the mode configuration in the corresponding bits */
        tmpreg |= (currentmode << pos);
 8000a1e:	ea42 3204 	orr.w	r2, r2, r4, lsl #12
          GPIOx->BRR = (((uint32_t)0x01) << (pinpos + 0x08));
        }
        /* Set the corresponding ODR bit */
        if (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_IPU)
        {
          GPIOx->BSRR = (((uint32_t)0x01) << (pinpos + 0x08));
 8000a22:	6101      	str	r1, [r0, #16]
 8000a24:	e7ae      	b.n	8000984 <GPIO_Init+0x1ec>
      if (currentpin == pos)
      {
        pos = pinpos << 2;
        /* Clear the corresponding high control register bits */
        pinmask = ((uint32_t)0x0F) << pos;
        tmpreg &= ~pinmask;
 8000a26:	f422 6270 	bic.w	r2, r2, #3840	; 0xf00
        /* Write the mode configuration in the corresponding bits */
        tmpreg |= (currentmode << pos);
 8000a2a:	ea42 2204 	orr.w	r2, r2, r4, lsl #8
          GPIOx->BRR = (((uint32_t)0x01) << (pinpos + 0x08));
        }
        /* Set the corresponding ODR bit */
        if (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_IPU)
        {
          GPIOx->BSRR = (((uint32_t)0x01) << (pinpos + 0x08));
 8000a2e:	6101      	str	r1, [r0, #16]
 8000a30:	e7a3      	b.n	800097a <GPIO_Init+0x1e2>
      if (currentpin == pos)
      {
        pos = pinpos << 2;
        /* Clear the corresponding high control register bits */
        pinmask = ((uint32_t)0x0F) << pos;
        tmpreg &= ~pinmask;
 8000a32:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
        /* Write the mode configuration in the corresponding bits */
        tmpreg |= (currentmode << pos);
 8000a36:	ea42 1204 	orr.w	r2, r2, r4, lsl #4
          GPIOx->BRR = (((uint32_t)0x01) << (pinpos + 0x08));
        }
        /* Set the corresponding ODR bit */
        if (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_IPU)
        {
          GPIOx->BSRR = (((uint32_t)0x01) << (pinpos + 0x08));
 8000a3a:	6101      	str	r1, [r0, #16]
 8000a3c:	e798      	b.n	8000970 <GPIO_Init+0x1d8>
      if (currentpin == pos)
      {
        pos = pinpos << 2;
        /* Clear the corresponding high control register bits */
        pinmask = ((uint32_t)0x0F) << pos;
        tmpreg &= ~pinmask;
 8000a3e:	f022 020f 	bic.w	r2, r2, #15
        /* Write the mode configuration in the corresponding bits */
        tmpreg |= (currentmode << pos);
 8000a42:	4322      	orrs	r2, r4
          GPIOx->BRR = (((uint32_t)0x01) << (pinpos + 0x08));
        }
        /* Set the corresponding ODR bit */
        if (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_IPU)
        {
          GPIOx->BSRR = (((uint32_t)0x01) << (pinpos + 0x08));
 8000a44:	6101      	str	r1, [r0, #16]
 8000a46:	e78e      	b.n	8000966 <GPIO_Init+0x1ce>
      if (currentpin == pos)
      {
        pos = pinpos << 2;
        /* Clear the corresponding high control register bits */
        pinmask = ((uint32_t)0x0F) << pos;
        tmpreg &= ~pinmask;
 8000a48:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
        /* Write the mode configuration in the corresponding bits */
        tmpreg |= (currentmode << pos);
 8000a4c:	ea42 5204 	orr.w	r2, r2, r4, lsl #20
          GPIOx->BRR = (((uint32_t)0x01) << (pinpos + 0x08));
        }
        /* Set the corresponding ODR bit */
        if (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_IPU)
        {
          GPIOx->BSRR = (((uint32_t)0x01) << (pinpos + 0x08));
 8000a50:	6101      	str	r1, [r0, #16]
 8000a52:	e7a1      	b.n	8000998 <GPIO_Init+0x200>
      if (currentpin == pos)
      {
        pos = pinpos << 2;
        /* Clear the corresponding high control register bits */
        pinmask = ((uint32_t)0x0F) << pos;
        tmpreg &= ~pinmask;
 8000a54:	f422 2270 	bic.w	r2, r2, #983040	; 0xf0000
        /* Write the mode configuration in the corresponding bits */
        tmpreg |= (currentmode << pos);
 8000a58:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
          GPIOx->BRR = (((uint32_t)0x01) << (pinpos + 0x08));
        }
        /* Set the corresponding ODR bit */
        if (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_IPU)
        {
          GPIOx->BSRR = (((uint32_t)0x01) << (pinpos + 0x08));
 8000a5c:	6101      	str	r1, [r0, #16]
 8000a5e:	e796      	b.n	800098e <GPIO_Init+0x1f6>
      if (currentpin == pos)
      {
        pos = pinpos << 2;
        /* Clear the corresponding high control register bits */
        pinmask = ((uint32_t)0x0F) << pos;
        tmpreg &= ~pinmask;
 8000a60:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
        /* Write the mode configuration in the corresponding bits */
        tmpreg |= (currentmode << pos);
 8000a64:	ea42 6204 	orr.w	r2, r2, r4, lsl #24
          GPIOx->BRR = (((uint32_t)0x01) << (pinpos + 0x08));
        }
        /* Set the corresponding ODR bit */
        if (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_IPU)
        {
          GPIOx->BSRR = (((uint32_t)0x01) << (pinpos + 0x08));
 8000a68:	6101      	str	r1, [r0, #16]
 8000a6a:	e79a      	b.n	80009a2 <GPIO_Init+0x20a>
      if (currentpin == pos)
      {
        pos = pinpos << 2;
        /* Clear the corresponding high control register bits */
        pinmask = ((uint32_t)0x0F) << pos;
        tmpreg &= ~pinmask;
 8000a6c:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
        /* Write the mode configuration in the corresponding bits */
        tmpreg |= (currentmode << pos);
 8000a70:	ea42 6204 	orr.w	r2, r2, r4, lsl #24
        /* Reset the corresponding ODR bit */
        if (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_IPD)
        {
          GPIOx->BRR = (((uint32_t)0x01) << (pinpos + 0x08));
 8000a74:	6141      	str	r1, [r0, #20]
 8000a76:	e730      	b.n	80008da <GPIO_Init+0x142>
      if (currentpin == pos)
      {
        pos = pinpos << 2;
        /* Clear the corresponding high control register bits */
        pinmask = ((uint32_t)0x0F) << pos;
        tmpreg &= ~pinmask;
 8000a78:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
        /* Write the mode configuration in the corresponding bits */
        tmpreg |= (currentmode << pos);
 8000a7c:	ea42 5204 	orr.w	r2, r2, r4, lsl #20
        /* Reset the corresponding ODR bit */
        if (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_IPD)
        {
          GPIOx->BRR = (((uint32_t)0x01) << (pinpos + 0x08));
 8000a80:	6141      	str	r1, [r0, #20]
 8000a82:	e724      	b.n	80008ce <GPIO_Init+0x136>
      if (currentpin == pos)
      {
        pos = pinpos << 2;
        /* Clear the corresponding high control register bits */
        pinmask = ((uint32_t)0x0F) << pos;
        tmpreg &= ~pinmask;
 8000a84:	f422 2270 	bic.w	r2, r2, #983040	; 0xf0000
        /* Write the mode configuration in the corresponding bits */
        tmpreg |= (currentmode << pos);
 8000a88:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
        /* Reset the corresponding ODR bit */
        if (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_IPD)
        {
          GPIOx->BRR = (((uint32_t)0x01) << (pinpos + 0x08));
 8000a8c:	6141      	str	r1, [r0, #20]
 8000a8e:	e718      	b.n	80008c2 <GPIO_Init+0x12a>
      if (currentpin == pos)
      {
        pos = pinpos << 2;
        /* Clear the corresponding high control register bits */
        pinmask = ((uint32_t)0x0F) << pos;
        tmpreg &= ~pinmask;
 8000a90:	f422 4270 	bic.w	r2, r2, #61440	; 0xf000
        /* Write the mode configuration in the corresponding bits */
        tmpreg |= (currentmode << pos);
 8000a94:	ea42 3204 	orr.w	r2, r2, r4, lsl #12
        /* Reset the corresponding ODR bit */
        if (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_IPD)
        {
          GPIOx->BRR = (((uint32_t)0x01) << (pinpos + 0x08));
 8000a98:	6141      	str	r1, [r0, #20]
 8000a9a:	e70c      	b.n	80008b6 <GPIO_Init+0x11e>
      if (currentpin == pos)
      {
        pos = pinpos << 2;
        /* Clear the corresponding high control register bits */
        pinmask = ((uint32_t)0x0F) << pos;
        tmpreg &= ~pinmask;
 8000a9c:	f422 6270 	bic.w	r2, r2, #3840	; 0xf00
        /* Write the mode configuration in the corresponding bits */
        tmpreg |= (currentmode << pos);
 8000aa0:	ea42 2204 	orr.w	r2, r2, r4, lsl #8
        /* Reset the corresponding ODR bit */
        if (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_IPD)
        {
          GPIOx->BRR = (((uint32_t)0x01) << (pinpos + 0x08));
 8000aa4:	6141      	str	r1, [r0, #20]
 8000aa6:	e700      	b.n	80008aa <GPIO_Init+0x112>
      if (currentpin == pos)
      {
        pos = pinpos << 2;
        /* Clear the corresponding high control register bits */
        pinmask = ((uint32_t)0x0F) << pos;
        tmpreg &= ~pinmask;
 8000aa8:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
        /* Write the mode configuration in the corresponding bits */
        tmpreg |= (currentmode << pos);
 8000aac:	ea42 1204 	orr.w	r2, r2, r4, lsl #4
        /* Reset the corresponding ODR bit */
        if (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_IPD)
        {
          GPIOx->BRR = (((uint32_t)0x01) << (pinpos + 0x08));
 8000ab0:	6141      	str	r1, [r0, #20]
 8000ab2:	e6f4      	b.n	800089e <GPIO_Init+0x106>
      if (currentpin == pos)
      {
        pos = pinpos << 2;
        /* Clear the corresponding high control register bits */
        pinmask = ((uint32_t)0x0F) << pos;
        tmpreg &= ~pinmask;
 8000ab4:	f022 020f 	bic.w	r2, r2, #15
        /* Write the mode configuration in the corresponding bits */
        tmpreg |= (currentmode << pos);
 8000ab8:	4322      	orrs	r2, r4
        /* Reset the corresponding ODR bit */
        if (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_IPD)
        {
          GPIOx->BRR = (((uint32_t)0x01) << (pinpos + 0x08));
 8000aba:	6141      	str	r1, [r0, #20]
 8000abc:	e6e9      	b.n	8000892 <GPIO_Init+0xfa>
      if (currentpin == pos)
      {
        pos = pinpos << 2;
        /* Clear the corresponding low control register bits */
        pinmask = ((uint32_t)0x0F) << pos;
        tmpreg &= ~pinmask;
 8000abe:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
        /* Write the mode configuration in the corresponding bits */
        tmpreg |= (currentmode << pos);
 8000ac2:	ea42 5204 	orr.w	r2, r2, r4, lsl #20
        else
        {
          /* Set the corresponding ODR bit */
          if (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_IPU)
          {
            GPIOx->BSRR = (((uint32_t)0x01) << pinpos);
 8000ac6:	6101      	str	r1, [r0, #16]
 8000ac8:	e732      	b.n	8000930 <GPIO_Init+0x198>
      if (currentpin == pos)
      {
        pos = pinpos << 2;
        /* Clear the corresponding low control register bits */
        pinmask = ((uint32_t)0x0F) << pos;
        tmpreg &= ~pinmask;
 8000aca:	f422 2270 	bic.w	r2, r2, #983040	; 0xf0000
        /* Write the mode configuration in the corresponding bits */
        tmpreg |= (currentmode << pos);
 8000ace:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
        else
        {
          /* Set the corresponding ODR bit */
          if (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_IPU)
          {
            GPIOx->BSRR = (((uint32_t)0x01) << pinpos);
 8000ad2:	6101      	str	r1, [r0, #16]
 8000ad4:	e726      	b.n	8000924 <GPIO_Init+0x18c>
      if (currentpin == pos)
      {
        pos = pinpos << 2;
        /* Clear the corresponding low control register bits */
        pinmask = ((uint32_t)0x0F) << pos;
        tmpreg &= ~pinmask;
 8000ad6:	f422 4270 	bic.w	r2, r2, #61440	; 0xf000
        /* Write the mode configuration in the corresponding bits */
        tmpreg |= (currentmode << pos);
 8000ada:	ea42 3204 	orr.w	r2, r2, r4, lsl #12
        else
        {
          /* Set the corresponding ODR bit */
          if (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_IPU)
          {
            GPIOx->BSRR = (((uint32_t)0x01) << pinpos);
 8000ade:	6101      	str	r1, [r0, #16]
 8000ae0:	e71a      	b.n	8000918 <GPIO_Init+0x180>
      if (currentpin == pos)
      {
        pos = pinpos << 2;
        /* Clear the corresponding low control register bits */
        pinmask = ((uint32_t)0x0F) << pos;
        tmpreg &= ~pinmask;
 8000ae2:	f422 6270 	bic.w	r2, r2, #3840	; 0xf00
        /* Write the mode configuration in the corresponding bits */
        tmpreg |= (currentmode << pos);
 8000ae6:	ea42 2204 	orr.w	r2, r2, r4, lsl #8
        else
        {
          /* Set the corresponding ODR bit */
          if (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_IPU)
          {
            GPIOx->BSRR = (((uint32_t)0x01) << pinpos);
 8000aea:	6101      	str	r1, [r0, #16]
 8000aec:	e70e      	b.n	800090c <GPIO_Init+0x174>
      if (currentpin == pos)
      {
        pos = pinpos << 2;
        /* Clear the corresponding low control register bits */
        pinmask = ((uint32_t)0x0F) << pos;
        tmpreg &= ~pinmask;
 8000aee:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
        /* Write the mode configuration in the corresponding bits */
        tmpreg |= (currentmode << pos);
 8000af2:	ea42 1204 	orr.w	r2, r2, r4, lsl #4
        else
        {
          /* Set the corresponding ODR bit */
          if (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_IPU)
          {
            GPIOx->BSRR = (((uint32_t)0x01) << pinpos);
 8000af6:	6101      	str	r1, [r0, #16]
 8000af8:	e702      	b.n	8000900 <GPIO_Init+0x168>
      if (currentpin == pos)
      {
        pos = pinpos << 2;
        /* Clear the corresponding low control register bits */
        pinmask = ((uint32_t)0x0F) << pos;
        tmpreg &= ~pinmask;
 8000afa:	f022 020f 	bic.w	r2, r2, #15
        /* Write the mode configuration in the corresponding bits */
        tmpreg |= (currentmode << pos);
 8000afe:	4322      	orrs	r2, r4
        else
        {
          /* Set the corresponding ODR bit */
          if (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_IPU)
          {
            GPIOx->BSRR = (((uint32_t)0x01) << pinpos);
 8000b00:	6101      	str	r1, [r0, #16]
 8000b02:	e6f7      	b.n	80008f4 <GPIO_Init+0x15c>
      if (currentpin == pos)
      {
        pos = pinpos << 2;
        /* Clear the corresponding low control register bits */
        pinmask = ((uint32_t)0x0F) << pos;
        tmpreg &= ~pinmask;
 8000b04:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
        /* Write the mode configuration in the corresponding bits */
        tmpreg |= (currentmode << pos);
 8000b08:	ea42 6204 	orr.w	r2, r2, r4, lsl #24
        else
        {
          /* Set the corresponding ODR bit */
          if (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_IPU)
          {
            GPIOx->BSRR = (((uint32_t)0x01) << pinpos);
 8000b0c:	6101      	str	r1, [r0, #16]
 8000b0e:	e715      	b.n	800093c <GPIO_Init+0x1a4>
      if (currentpin == pos)
      {
        pos = pinpos << 2;
        /* Clear the corresponding low control register bits */
        pinmask = ((uint32_t)0x0F) << pos;
        tmpreg &= ~pinmask;
 8000b10:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
        /* Write the mode configuration in the corresponding bits */
        tmpreg |= (currentmode << pos);
 8000b14:	ea42 6204 	orr.w	r2, r2, r4, lsl #24
        /* Reset the corresponding ODR bit */
        if (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_IPD)
        {
          GPIOx->BRR = (((uint32_t)0x01) << pinpos);
 8000b18:	6141      	str	r1, [r0, #20]
 8000b1a:	e774      	b.n	8000a06 <GPIO_Init+0x26e>
      if (currentpin == pos)
      {
        pos = pinpos << 2;
        /* Clear the corresponding low control register bits */
        pinmask = ((uint32_t)0x0F) << pos;
        tmpreg &= ~pinmask;
 8000b1c:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
        /* Write the mode configuration in the corresponding bits */
        tmpreg |= (currentmode << pos);
 8000b20:	ea42 5204 	orr.w	r2, r2, r4, lsl #20
        /* Reset the corresponding ODR bit */
        if (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_IPD)
        {
          GPIOx->BRR = (((uint32_t)0x01) << pinpos);
 8000b24:	6141      	str	r1, [r0, #20]
 8000b26:	e768      	b.n	80009fa <GPIO_Init+0x262>
      if (currentpin == pos)
      {
        pos = pinpos << 2;
        /* Clear the corresponding low control register bits */
        pinmask = ((uint32_t)0x0F) << pos;
        tmpreg &= ~pinmask;
 8000b28:	f422 2270 	bic.w	r2, r2, #983040	; 0xf0000
        /* Write the mode configuration in the corresponding bits */
        tmpreg |= (currentmode << pos);
 8000b2c:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
        /* Reset the corresponding ODR bit */
        if (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_IPD)
        {
          GPIOx->BRR = (((uint32_t)0x01) << pinpos);
 8000b30:	6141      	str	r1, [r0, #20]
 8000b32:	e75c      	b.n	80009ee <GPIO_Init+0x256>
      if (currentpin == pos)
      {
        pos = pinpos << 2;
        /* Clear the corresponding low control register bits */
        pinmask = ((uint32_t)0x0F) << pos;
        tmpreg &= ~pinmask;
 8000b34:	f422 4270 	bic.w	r2, r2, #61440	; 0xf000
        /* Write the mode configuration in the corresponding bits */
        tmpreg |= (currentmode << pos);
 8000b38:	ea42 3204 	orr.w	r2, r2, r4, lsl #12
        /* Reset the corresponding ODR bit */
        if (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_IPD)
        {
          GPIOx->BRR = (((uint32_t)0x01) << pinpos);
 8000b3c:	6141      	str	r1, [r0, #20]
 8000b3e:	e750      	b.n	80009e2 <GPIO_Init+0x24a>
      if (currentpin == pos)
      {
        pos = pinpos << 2;
        /* Clear the corresponding low control register bits */
        pinmask = ((uint32_t)0x0F) << pos;
        tmpreg &= ~pinmask;
 8000b40:	f422 6270 	bic.w	r2, r2, #3840	; 0xf00
        /* Write the mode configuration in the corresponding bits */
        tmpreg |= (currentmode << pos);
 8000b44:	ea42 2204 	orr.w	r2, r2, r4, lsl #8
        /* Reset the corresponding ODR bit */
        if (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_IPD)
        {
          GPIOx->BRR = (((uint32_t)0x01) << pinpos);
 8000b48:	6141      	str	r1, [r0, #20]
 8000b4a:	e744      	b.n	80009d6 <GPIO_Init+0x23e>
      if (currentpin == pos)
      {
        pos = pinpos << 2;
        /* Clear the corresponding low control register bits */
        pinmask = ((uint32_t)0x0F) << pos;
        tmpreg &= ~pinmask;
 8000b4c:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
        /* Write the mode configuration in the corresponding bits */
        tmpreg |= (currentmode << pos);
 8000b50:	ea42 1204 	orr.w	r2, r2, r4, lsl #4
        /* Reset the corresponding ODR bit */
        if (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_IPD)
        {
          GPIOx->BRR = (((uint32_t)0x01) << pinpos);
 8000b54:	6141      	str	r1, [r0, #20]
 8000b56:	e738      	b.n	80009ca <GPIO_Init+0x232>
      if (currentpin == pos)
      {
        pos = pinpos << 2;
        /* Clear the corresponding low control register bits */
        pinmask = ((uint32_t)0x0F) << pos;
        tmpreg &= ~pinmask;
 8000b58:	f022 020f 	bic.w	r2, r2, #15
        /* Write the mode configuration in the corresponding bits */
        tmpreg |= (currentmode << pos);
 8000b5c:	4322      	orrs	r2, r4
        /* Reset the corresponding ODR bit */
        if (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_IPD)
        {
          GPIOx->BRR = (((uint32_t)0x01) << pinpos);
 8000b5e:	6141      	str	r1, [r0, #20]
 8000b60:	e72d      	b.n	80009be <GPIO_Init+0x226>
 8000b62:	bf00      	nop

08000b64 <GPIO_SetBits>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  
  GPIOx->BSRR = GPIO_Pin;
 8000b64:	6101      	str	r1, [r0, #16]
 8000b66:	4770      	bx	lr

08000b68 <GPIO_ResetBits>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  
  GPIOx->BRR = GPIO_Pin;
 8000b68:	6141      	str	r1, [r0, #20]
 8000b6a:	4770      	bx	lr

08000b6c <GPIO_WriteBit>:
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GET_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_BIT_ACTION(BitVal)); 
  
  if (BitVal != Bit_RESET)
 8000b6c:	b90a      	cbnz	r2, 8000b72 <GPIO_WriteBit+0x6>
  {
    GPIOx->BSRR = GPIO_Pin;
  }
  else
  {
    GPIOx->BRR = GPIO_Pin;
 8000b6e:	6141      	str	r1, [r0, #20]
 8000b70:	4770      	bx	lr
  assert_param(IS_GET_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_BIT_ACTION(BitVal)); 
  
  if (BitVal != Bit_RESET)
  {
    GPIOx->BSRR = GPIO_Pin;
 8000b72:	6101      	str	r1, [r0, #16]
 8000b74:	4770      	bx	lr
 8000b76:	bf00      	nop

08000b78 <RCC_GetClocksFreq>:
#if defined (STM32F10X_LD_VL) || defined (STM32F10X_MD_VL) || defined (STM32F10X_HD_VL)
  uint32_t prediv1factor = 0;
#endif
    
  /* Get SYSCLK source -------------------------------------------------------*/
  tmp = RCC->CFGR & CFGR_SWS_Mask;
 8000b78:	4922      	ldr	r1, [pc, #136]	; (8000c04 <RCC_GetClocksFreq+0x8c>)
  * @note   The result of this function could be not correct when using 
  *         fractional value for HSE crystal.  
  * @retval None
  */
void RCC_GetClocksFreq(RCC_ClocksTypeDef* RCC_Clocks)
{
 8000b7a:	b430      	push	{r4, r5}
#if defined (STM32F10X_LD_VL) || defined (STM32F10X_MD_VL) || defined (STM32F10X_HD_VL)
  uint32_t prediv1factor = 0;
#endif
    
  /* Get SYSCLK source -------------------------------------------------------*/
  tmp = RCC->CFGR & CFGR_SWS_Mask;
 8000b7c:	684b      	ldr	r3, [r1, #4]
  
  switch (tmp)
 8000b7e:	f003 030c 	and.w	r3, r3, #12
 8000b82:	2b04      	cmp	r3, #4
 8000b84:	d006      	beq.n	8000b94 <RCC_GetClocksFreq+0x1c>
 8000b86:	2b08      	cmp	r3, #8
 8000b88:	d025      	beq.n	8000bd6 <RCC_GetClocksFreq+0x5e>
 8000b8a:	b11b      	cbz	r3, 8000b94 <RCC_GetClocksFreq+0x1c>
      }
#endif /* STM32F10X_CL */ 
      break;

    default:
      RCC_Clocks->SYSCLK_Frequency = HSI_VALUE;
 8000b8c:	4a1e      	ldr	r2, [pc, #120]	; (8000c08 <RCC_GetClocksFreq+0x90>)
      break;
 8000b8e:	4613      	mov	r3, r2
      }
#endif /* STM32F10X_CL */ 
      break;

    default:
      RCC_Clocks->SYSCLK_Frequency = HSI_VALUE;
 8000b90:	6002      	str	r2, [r0, #0]
      break;
 8000b92:	e001      	b.n	8000b98 <RCC_GetClocksFreq+0x20>
  {
    case 0x00:  /* HSI used as system clock */
      RCC_Clocks->SYSCLK_Frequency = HSI_VALUE;
      break;
    case 0x04:  /* HSE used as system clock */
      RCC_Clocks->SYSCLK_Frequency = HSE_VALUE;
 8000b94:	4b1c      	ldr	r3, [pc, #112]	; (8000c08 <RCC_GetClocksFreq+0x90>)
 8000b96:	6003      	str	r3, [r0, #0]
      break;
  }

  /* Compute HCLK, PCLK1, PCLK2 and ADCCLK clocks frequencies ----------------*/
  /* Get HCLK prescaler */
  tmp = RCC->CFGR & CFGR_HPRE_Set_Mask;
 8000b98:	4a1a      	ldr	r2, [pc, #104]	; (8000c04 <RCC_GetClocksFreq+0x8c>)
  tmp = tmp >> 4;
  presc = APBAHBPrescTable[tmp];
 8000b9a:	4c1c      	ldr	r4, [pc, #112]	; (8000c0c <RCC_GetClocksFreq+0x94>)
      break;
  }

  /* Compute HCLK, PCLK1, PCLK2 and ADCCLK clocks frequencies ----------------*/
  /* Get HCLK prescaler */
  tmp = RCC->CFGR & CFGR_HPRE_Set_Mask;
 8000b9c:	6851      	ldr	r1, [r2, #4]
  /* PCLK2 clock frequency */
  RCC_Clocks->PCLK2_Frequency = RCC_Clocks->HCLK_Frequency >> presc;
  /* Get ADCCLK prescaler */
  tmp = RCC->CFGR & CFGR_ADCPRE_Set_Mask;
  tmp = tmp >> 14;
  presc = ADCPrescTable[tmp];
 8000b9e:	4d1c      	ldr	r5, [pc, #112]	; (8000c10 <RCC_GetClocksFreq+0x98>)
  }

  /* Compute HCLK, PCLK1, PCLK2 and ADCCLK clocks frequencies ----------------*/
  /* Get HCLK prescaler */
  tmp = RCC->CFGR & CFGR_HPRE_Set_Mask;
  tmp = tmp >> 4;
 8000ba0:	f3c1 1103 	ubfx	r1, r1, #4, #4
  presc = APBAHBPrescTable[tmp];
 8000ba4:	5c61      	ldrb	r1, [r4, r1]
  /* HCLK clock frequency */
  RCC_Clocks->HCLK_Frequency = RCC_Clocks->SYSCLK_Frequency >> presc;
 8000ba6:	40cb      	lsrs	r3, r1
 8000ba8:	6043      	str	r3, [r0, #4]
  /* Get PCLK1 prescaler */
  tmp = RCC->CFGR & CFGR_PPRE1_Set_Mask;
 8000baa:	6851      	ldr	r1, [r2, #4]
  tmp = tmp >> 8;
 8000bac:	f3c1 2102 	ubfx	r1, r1, #8, #3
  presc = APBAHBPrescTable[tmp];
 8000bb0:	5c61      	ldrb	r1, [r4, r1]
  /* PCLK1 clock frequency */
  RCC_Clocks->PCLK1_Frequency = RCC_Clocks->HCLK_Frequency >> presc;
 8000bb2:	fa23 f101 	lsr.w	r1, r3, r1
 8000bb6:	6081      	str	r1, [r0, #8]
  /* Get PCLK2 prescaler */
  tmp = RCC->CFGR & CFGR_PPRE2_Set_Mask;
 8000bb8:	6851      	ldr	r1, [r2, #4]
  tmp = tmp >> 11;
 8000bba:	f3c1 21c2 	ubfx	r1, r1, #11, #3
  presc = APBAHBPrescTable[tmp];
 8000bbe:	5c61      	ldrb	r1, [r4, r1]
  /* PCLK2 clock frequency */
  RCC_Clocks->PCLK2_Frequency = RCC_Clocks->HCLK_Frequency >> presc;
 8000bc0:	40cb      	lsrs	r3, r1
 8000bc2:	60c3      	str	r3, [r0, #12]
  /* Get ADCCLK prescaler */
  tmp = RCC->CFGR & CFGR_ADCPRE_Set_Mask;
 8000bc4:	6852      	ldr	r2, [r2, #4]
  tmp = tmp >> 14;
 8000bc6:	f3c2 3281 	ubfx	r2, r2, #14, #2
  presc = ADCPrescTable[tmp];
 8000bca:	5caa      	ldrb	r2, [r5, r2]
  /* ADCCLK clock frequency */
  RCC_Clocks->ADCCLK_Frequency = RCC_Clocks->PCLK2_Frequency / presc;
}
 8000bcc:	bc30      	pop	{r4, r5}
  /* Get ADCCLK prescaler */
  tmp = RCC->CFGR & CFGR_ADCPRE_Set_Mask;
  tmp = tmp >> 14;
  presc = ADCPrescTable[tmp];
  /* ADCCLK clock frequency */
  RCC_Clocks->ADCCLK_Frequency = RCC_Clocks->PCLK2_Frequency / presc;
 8000bce:	fbb3 f3f2 	udiv	r3, r3, r2
 8000bd2:	6103      	str	r3, [r0, #16]
}
 8000bd4:	4770      	bx	lr
      RCC_Clocks->SYSCLK_Frequency = HSE_VALUE;
      break;
    case 0x08:  /* PLL used as system clock */

      /* Get PLL clock source and multiplication factor ----------------------*/
      pllmull = RCC->CFGR & CFGR_PLLMull_Mask;
 8000bd6:	684b      	ldr	r3, [r1, #4]
      pllsource = RCC->CFGR & CFGR_PLLSRC_Mask;
 8000bd8:	684c      	ldr	r4, [r1, #4]
      
#ifndef STM32F10X_CL      
      pllmull = ( pllmull >> 18) + 2;
 8000bda:	f3c3 4383 	ubfx	r3, r3, #18, #4
 8000bde:	1c9a      	adds	r2, r3, #2
      
      if (pllsource == 0x00)
 8000be0:	03e3      	lsls	r3, r4, #15
 8000be2:	d404      	bmi.n	8000bee <RCC_GetClocksFreq+0x76>
      {/* HSI oscillator clock divided by 2 selected as PLL clock entry */
        RCC_Clocks->SYSCLK_Frequency = (HSI_VALUE >> 1) * pllmull;
 8000be4:	4b0b      	ldr	r3, [pc, #44]	; (8000c14 <RCC_GetClocksFreq+0x9c>)
 8000be6:	fb03 f302 	mul.w	r3, r3, r2
 8000bea:	6003      	str	r3, [r0, #0]
 8000bec:	e7d4      	b.n	8000b98 <RCC_GetClocksFreq+0x20>
      }
      else
      {
 #if defined (STM32F10X_LD_VL) || defined (STM32F10X_MD_VL) || defined (STM32F10X_HD_VL)
       prediv1factor = (RCC->CFGR2 & CFGR2_PREDIV1) + 1;
 8000bee:	6acb      	ldr	r3, [r1, #44]	; 0x2c
       /* HSE oscillator clock selected as PREDIV1 clock entry */
       RCC_Clocks->SYSCLK_Frequency = (HSE_VALUE / prediv1factor) * pllmull; 
 8000bf0:	4905      	ldr	r1, [pc, #20]	; (8000c08 <RCC_GetClocksFreq+0x90>)
 8000bf2:	f003 030f 	and.w	r3, r3, #15
 8000bf6:	3301      	adds	r3, #1
 8000bf8:	fbb1 f3f3 	udiv	r3, r1, r3
 8000bfc:	fb02 f303 	mul.w	r3, r2, r3
 8000c00:	6003      	str	r3, [r0, #0]
 8000c02:	e7c9      	b.n	8000b98 <RCC_GetClocksFreq+0x20>
 8000c04:	40021000 	.word	0x40021000
 8000c08:	007a1200 	.word	0x007a1200
 8000c0c:	20000008 	.word	0x20000008
 8000c10:	20000004 	.word	0x20000004
 8000c14:	003d0900 	.word	0x003d0900

08000c18 <RCC_APB2PeriphClockCmd>:
void RCC_APB2PeriphClockCmd(uint32_t RCC_APB2Periph, FunctionalState NewState)
{
  /* Check the parameters */
  assert_param(IS_RCC_APB2_PERIPH(RCC_APB2Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8000c18:	b929      	cbnz	r1, 8000c26 <RCC_APB2PeriphClockCmd+0xe>
  {
    RCC->APB2ENR |= RCC_APB2Periph;
  }
  else
  {
    RCC->APB2ENR &= ~RCC_APB2Periph;
 8000c1a:	4a05      	ldr	r2, [pc, #20]	; (8000c30 <RCC_APB2PeriphClockCmd+0x18>)
 8000c1c:	6993      	ldr	r3, [r2, #24]
 8000c1e:	ea23 0000 	bic.w	r0, r3, r0
 8000c22:	6190      	str	r0, [r2, #24]
 8000c24:	4770      	bx	lr
  /* Check the parameters */
  assert_param(IS_RCC_APB2_PERIPH(RCC_APB2Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
  {
    RCC->APB2ENR |= RCC_APB2Periph;
 8000c26:	4b02      	ldr	r3, [pc, #8]	; (8000c30 <RCC_APB2PeriphClockCmd+0x18>)
 8000c28:	699a      	ldr	r2, [r3, #24]
 8000c2a:	4310      	orrs	r0, r2
 8000c2c:	6198      	str	r0, [r3, #24]
 8000c2e:	4770      	bx	lr
 8000c30:	40021000 	.word	0x40021000

08000c34 <RCC_APB1PeriphClockCmd>:
void RCC_APB1PeriphClockCmd(uint32_t RCC_APB1Periph, FunctionalState NewState)
{
  /* Check the parameters */
  assert_param(IS_RCC_APB1_PERIPH(RCC_APB1Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8000c34:	b929      	cbnz	r1, 8000c42 <RCC_APB1PeriphClockCmd+0xe>
  {
    RCC->APB1ENR |= RCC_APB1Periph;
  }
  else
  {
    RCC->APB1ENR &= ~RCC_APB1Periph;
 8000c36:	4a05      	ldr	r2, [pc, #20]	; (8000c4c <RCC_APB1PeriphClockCmd+0x18>)
 8000c38:	69d3      	ldr	r3, [r2, #28]
 8000c3a:	ea23 0000 	bic.w	r0, r3, r0
 8000c3e:	61d0      	str	r0, [r2, #28]
 8000c40:	4770      	bx	lr
  /* Check the parameters */
  assert_param(IS_RCC_APB1_PERIPH(RCC_APB1Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
  {
    RCC->APB1ENR |= RCC_APB1Periph;
 8000c42:	4b02      	ldr	r3, [pc, #8]	; (8000c4c <RCC_APB1PeriphClockCmd+0x18>)
 8000c44:	69da      	ldr	r2, [r3, #28]
 8000c46:	4310      	orrs	r0, r2
 8000c48:	61d8      	str	r0, [r3, #28]
 8000c4a:	4770      	bx	lr
 8000c4c:	40021000 	.word	0x40021000

08000c50 <SPI_Init>:
  /* Set SSM, SSI and MSTR bits according to SPI_Mode and SPI_NSS values */
  /* Set LSBFirst bit according to SPI_FirstBit value */
  /* Set BR bits according to SPI_BaudRatePrescaler value */
  /* Set CPOL bit according to SPI_CPOL value */
  /* Set CPHA bit according to SPI_CPHA value */
  tmpreg |= (uint16_t)((uint32_t)SPI_InitStruct->SPI_Direction | SPI_InitStruct->SPI_Mode |
 8000c50:	884a      	ldrh	r2, [r1, #2]
  * @param  SPI_InitStruct: pointer to a SPI_InitTypeDef structure that
  *         contains the configuration information for the specified SPI peripheral.
  * @retval None
  */
void SPI_Init(SPI_TypeDef* SPIx, SPI_InitTypeDef* SPI_InitStruct)
{
 8000c52:	b430      	push	{r4, r5}
  /* Set SSM, SSI and MSTR bits according to SPI_Mode and SPI_NSS values */
  /* Set LSBFirst bit according to SPI_FirstBit value */
  /* Set BR bits according to SPI_BaudRatePrescaler value */
  /* Set CPOL bit according to SPI_CPOL value */
  /* Set CPHA bit according to SPI_CPHA value */
  tmpreg |= (uint16_t)((uint32_t)SPI_InitStruct->SPI_Direction | SPI_InitStruct->SPI_Mode |
 8000c54:	880c      	ldrh	r4, [r1, #0]
 8000c56:	888b      	ldrh	r3, [r1, #4]
 8000c58:	4322      	orrs	r2, r4
 8000c5a:	88cc      	ldrh	r4, [r1, #6]
 8000c5c:	431a      	orrs	r2, r3
 8000c5e:	890b      	ldrh	r3, [r1, #8]
 8000c60:	4322      	orrs	r2, r4
 8000c62:	894c      	ldrh	r4, [r1, #10]
 8000c64:	898d      	ldrh	r5, [r1, #12]
 8000c66:	431a      	orrs	r2, r3
 8000c68:	4322      	orrs	r2, r4
  assert_param(IS_SPI_FIRST_BIT(SPI_InitStruct->SPI_FirstBit));
  assert_param(IS_SPI_CRC_POLYNOMIAL(SPI_InitStruct->SPI_CRCPolynomial));

/*---------------------------- SPIx CR1 Configuration ------------------------*/
  /* Get the SPIx CR1 value */
  tmpreg = SPIx->CR1;
 8000c6a:	8803      	ldrh	r3, [r0, #0]
  /* Set SSM, SSI and MSTR bits according to SPI_Mode and SPI_NSS values */
  /* Set LSBFirst bit according to SPI_FirstBit value */
  /* Set BR bits according to SPI_BaudRatePrescaler value */
  /* Set CPOL bit according to SPI_CPOL value */
  /* Set CPHA bit according to SPI_CPHA value */
  tmpreg |= (uint16_t)((uint32_t)SPI_InitStruct->SPI_Direction | SPI_InitStruct->SPI_Mode |
 8000c6c:	89cc      	ldrh	r4, [r1, #14]
 8000c6e:	432a      	orrs	r2, r5
 8000c70:	4322      	orrs	r2, r4

/*---------------------------- SPIx CR1 Configuration ------------------------*/
  /* Get the SPIx CR1 value */
  tmpreg = SPIx->CR1;
  /* Clear BIDIMode, BIDIOE, RxONLY, SSM, SSI, LSBFirst, BR, MSTR, CPOL and CPHA bits */
  tmpreg &= CR1_CLEAR_Mask;
 8000c72:	f403 5341 	and.w	r3, r3, #12352	; 0x3040
  /* Set SSM, SSI and MSTR bits according to SPI_Mode and SPI_NSS values */
  /* Set LSBFirst bit according to SPI_FirstBit value */
  /* Set BR bits according to SPI_BaudRatePrescaler value */
  /* Set CPOL bit according to SPI_CPOL value */
  /* Set CPHA bit according to SPI_CPHA value */
  tmpreg |= (uint16_t)((uint32_t)SPI_InitStruct->SPI_Direction | SPI_InitStruct->SPI_Mode |
 8000c76:	4313      	orrs	r3, r2
 8000c78:	b29b      	uxth	r3, r3
                  SPI_InitStruct->SPI_DataSize | SPI_InitStruct->SPI_CPOL |  
                  SPI_InitStruct->SPI_CPHA | SPI_InitStruct->SPI_NSS |  
                  SPI_InitStruct->SPI_BaudRatePrescaler | SPI_InitStruct->SPI_FirstBit);
  /* Write to SPIx CR1 */
  SPIx->CR1 = tmpreg;
 8000c7a:	8003      	strh	r3, [r0, #0]
  
  /* Activate the SPI mode (Reset I2SMOD bit in I2SCFGR register) */
  SPIx->I2SCFGR &= SPI_Mode_Select;		
 8000c7c:	8b83      	ldrh	r3, [r0, #28]

/*---------------------------- SPIx CRCPOLY Configuration --------------------*/
  /* Write to SPIx CRCPOLY */
  SPIx->CRCPR = SPI_InitStruct->SPI_CRCPolynomial;
 8000c7e:	8a0a      	ldrh	r2, [r1, #16]
                  SPI_InitStruct->SPI_BaudRatePrescaler | SPI_InitStruct->SPI_FirstBit);
  /* Write to SPIx CR1 */
  SPIx->CR1 = tmpreg;
  
  /* Activate the SPI mode (Reset I2SMOD bit in I2SCFGR register) */
  SPIx->I2SCFGR &= SPI_Mode_Select;		
 8000c80:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8000c84:	041b      	lsls	r3, r3, #16
 8000c86:	0c1b      	lsrs	r3, r3, #16
 8000c88:	8383      	strh	r3, [r0, #28]

/*---------------------------- SPIx CRCPOLY Configuration --------------------*/
  /* Write to SPIx CRCPOLY */
  SPIx->CRCPR = SPI_InitStruct->SPI_CRCPolynomial;
}
 8000c8a:	bc30      	pop	{r4, r5}
  /* Activate the SPI mode (Reset I2SMOD bit in I2SCFGR register) */
  SPIx->I2SCFGR &= SPI_Mode_Select;		

/*---------------------------- SPIx CRCPOLY Configuration --------------------*/
  /* Write to SPIx CRCPOLY */
  SPIx->CRCPR = SPI_InitStruct->SPI_CRCPolynomial;
 8000c8c:	8202      	strh	r2, [r0, #16]
}
 8000c8e:	4770      	bx	lr

08000c90 <SPI_StructInit>:
  */
void SPI_StructInit(SPI_InitTypeDef* SPI_InitStruct)
{
/*--------------- Reset SPI init structure parameters values -----------------*/
  /* Initialize the SPI_Direction member */
  SPI_InitStruct->SPI_Direction = SPI_Direction_2Lines_FullDuplex;
 8000c90:	2300      	movs	r3, #0
  /* Initialize the SPI_BaudRatePrescaler member */
  SPI_InitStruct->SPI_BaudRatePrescaler = SPI_BaudRatePrescaler_2;
  /* Initialize the SPI_FirstBit member */
  SPI_InitStruct->SPI_FirstBit = SPI_FirstBit_MSB;
  /* Initialize the SPI_CRCPolynomial member */
  SPI_InitStruct->SPI_CRCPolynomial = 7;
 8000c92:	2207      	movs	r2, #7
 8000c94:	8202      	strh	r2, [r0, #16]
  */
void SPI_StructInit(SPI_InitTypeDef* SPI_InitStruct)
{
/*--------------- Reset SPI init structure parameters values -----------------*/
  /* Initialize the SPI_Direction member */
  SPI_InitStruct->SPI_Direction = SPI_Direction_2Lines_FullDuplex;
 8000c96:	8003      	strh	r3, [r0, #0]
  /* initialize the SPI_Mode member */
  SPI_InitStruct->SPI_Mode = SPI_Mode_Slave;
 8000c98:	8043      	strh	r3, [r0, #2]
  /* initialize the SPI_DataSize member */
  SPI_InitStruct->SPI_DataSize = SPI_DataSize_8b;
 8000c9a:	8083      	strh	r3, [r0, #4]
  /* Initialize the SPI_CPOL member */
  SPI_InitStruct->SPI_CPOL = SPI_CPOL_Low;
 8000c9c:	80c3      	strh	r3, [r0, #6]
  /* Initialize the SPI_CPHA member */
  SPI_InitStruct->SPI_CPHA = SPI_CPHA_1Edge;
 8000c9e:	8103      	strh	r3, [r0, #8]
  /* Initialize the SPI_NSS member */
  SPI_InitStruct->SPI_NSS = SPI_NSS_Hard;
 8000ca0:	8143      	strh	r3, [r0, #10]
  /* Initialize the SPI_BaudRatePrescaler member */
  SPI_InitStruct->SPI_BaudRatePrescaler = SPI_BaudRatePrescaler_2;
 8000ca2:	8183      	strh	r3, [r0, #12]
  /* Initialize the SPI_FirstBit member */
  SPI_InitStruct->SPI_FirstBit = SPI_FirstBit_MSB;
 8000ca4:	81c3      	strh	r3, [r0, #14]
 8000ca6:	4770      	bx	lr

08000ca8 <SPI_Cmd>:
  assert_param(IS_SPI_ALL_PERIPH(SPIx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
  {
    /* Enable the selected SPI peripheral */
    SPIx->CR1 |= CR1_SPE_Set;
 8000ca8:	8803      	ldrh	r3, [r0, #0]
void SPI_Cmd(SPI_TypeDef* SPIx, FunctionalState NewState)
{
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH(SPIx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8000caa:	b929      	cbnz	r1, 8000cb8 <SPI_Cmd+0x10>
    SPIx->CR1 |= CR1_SPE_Set;
  }
  else
  {
    /* Disable the selected SPI peripheral */
    SPIx->CR1 &= CR1_SPE_Reset;
 8000cac:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8000cb0:	041b      	lsls	r3, r3, #16
 8000cb2:	0c1b      	lsrs	r3, r3, #16
 8000cb4:	8003      	strh	r3, [r0, #0]
 8000cb6:	4770      	bx	lr
  assert_param(IS_SPI_ALL_PERIPH(SPIx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
  {
    /* Enable the selected SPI peripheral */
    SPIx->CR1 |= CR1_SPE_Set;
 8000cb8:	b29b      	uxth	r3, r3
 8000cba:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000cbe:	8003      	strh	r3, [r0, #0]
 8000cc0:	4770      	bx	lr
 8000cc2:	bf00      	nop

08000cc4 <SPI_I2S_ITConfig>:

  /* Get the SPI/I2S IT index */
  itpos = SPI_I2S_IT >> 4;

  /* Set the IT mask */
  itmask = (uint16_t)1 << (uint16_t)itpos;
 8000cc4:	2301      	movs	r3, #1
 8000cc6:	0909      	lsrs	r1, r1, #4
 8000cc8:	fa03 f101 	lsl.w	r1, r3, r1

  if (NewState != DISABLE)
  {
    /* Enable the selected SPI/I2S interrupt */
    SPIx->CR2 |= itmask;
 8000ccc:	8883      	ldrh	r3, [r0, #4]

  /* Get the SPI/I2S IT index */
  itpos = SPI_I2S_IT >> 4;

  /* Set the IT mask */
  itmask = (uint16_t)1 << (uint16_t)itpos;
 8000cce:	b289      	uxth	r1, r1

  if (NewState != DISABLE)
  {
    /* Enable the selected SPI/I2S interrupt */
    SPIx->CR2 |= itmask;
 8000cd0:	b29b      	uxth	r3, r3
  itpos = SPI_I2S_IT >> 4;

  /* Set the IT mask */
  itmask = (uint16_t)1 << (uint16_t)itpos;

  if (NewState != DISABLE)
 8000cd2:	b91a      	cbnz	r2, 8000cdc <SPI_I2S_ITConfig+0x18>
    SPIx->CR2 |= itmask;
  }
  else
  {
    /* Disable the selected SPI/I2S interrupt */
    SPIx->CR2 &= (uint16_t)~itmask;
 8000cd4:	ea23 0101 	bic.w	r1, r3, r1
 8000cd8:	8081      	strh	r1, [r0, #4]
 8000cda:	4770      	bx	lr
  itmask = (uint16_t)1 << (uint16_t)itpos;

  if (NewState != DISABLE)
  {
    /* Enable the selected SPI/I2S interrupt */
    SPIx->CR2 |= itmask;
 8000cdc:	4319      	orrs	r1, r3
 8000cde:	8081      	strh	r1, [r0, #4]
 8000ce0:	4770      	bx	lr
 8000ce2:	bf00      	nop

08000ce4 <SPI_I2S_SendData>:
{
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH(SPIx));
  
  /* Write in the DR register the data to be sent */
  SPIx->DR = Data;
 8000ce4:	8181      	strh	r1, [r0, #12]
 8000ce6:	4770      	bx	lr

08000ce8 <SPI_I2S_ReceiveData>:
{
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH(SPIx));
  
  /* Return the data in the DR register */
  return SPIx->DR;
 8000ce8:	8980      	ldrh	r0, [r0, #12]
}
 8000cea:	b280      	uxth	r0, r0
 8000cec:	4770      	bx	lr
 8000cee:	bf00      	nop

08000cf0 <SPI_SSOutputCmd>:
  assert_param(IS_SPI_ALL_PERIPH(SPIx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
  {
    /* Enable the selected SPI SS output */
    SPIx->CR2 |= CR2_SSOE_Set;
 8000cf0:	8883      	ldrh	r3, [r0, #4]
void SPI_SSOutputCmd(SPI_TypeDef* SPIx, FunctionalState NewState)
{
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH(SPIx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8000cf2:	b929      	cbnz	r1, 8000d00 <SPI_SSOutputCmd+0x10>
    SPIx->CR2 |= CR2_SSOE_Set;
  }
  else
  {
    /* Disable the selected SPI SS output */
    SPIx->CR2 &= CR2_SSOE_Reset;
 8000cf4:	f023 0304 	bic.w	r3, r3, #4
 8000cf8:	041b      	lsls	r3, r3, #16
 8000cfa:	0c1b      	lsrs	r3, r3, #16
 8000cfc:	8083      	strh	r3, [r0, #4]
 8000cfe:	4770      	bx	lr
  assert_param(IS_SPI_ALL_PERIPH(SPIx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
  {
    /* Enable the selected SPI SS output */
    SPIx->CR2 |= CR2_SSOE_Set;
 8000d00:	b29b      	uxth	r3, r3
 8000d02:	f043 0304 	orr.w	r3, r3, #4
 8000d06:	8083      	strh	r3, [r0, #4]
 8000d08:	4770      	bx	lr
 8000d0a:	bf00      	nop

08000d0c <SPI_I2S_ClearFlag>:
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH(SPIx));
  assert_param(IS_SPI_I2S_CLEAR_FLAG(SPI_I2S_FLAG));
    
    /* Clear the selected SPI CRC Error (CRCERR) flag */
    SPIx->SR = (uint16_t)~SPI_I2S_FLAG;
 8000d0c:	43c9      	mvns	r1, r1
 8000d0e:	b289      	uxth	r1, r1
 8000d10:	8101      	strh	r1, [r0, #8]
 8000d12:	4770      	bx	lr

08000d14 <SPI_I2S_GetITStatus>:
  *     @arg SPI_IT_CRCERR: CRC Error interrupt.
  *     @arg I2S_IT_UDR: Underrun Error interrupt.
  * @retval The new state of SPI_I2S_IT (SET or RESET).
  */
ITStatus SPI_I2S_GetITStatus(SPI_TypeDef* SPIx, uint8_t SPI_I2S_IT)
{
 8000d14:	b410      	push	{r4}

  /* Set the IT mask */
  itmask = 0x01 << itmask;

  /* Get the SPI_I2S_IT enable bit status */
  enablestatus = (SPIx->CR2 & itmask) ;
 8000d16:	8884      	ldrh	r4, [r0, #4]

  /* Check the status of the specified SPI/I2S interrupt */
  if (((SPIx->SR & itpos) != (uint16_t)RESET) && enablestatus)
 8000d18:	8903      	ldrh	r3, [r0, #8]
 8000d1a:	2201      	movs	r2, #1
 8000d1c:	f001 000f 	and.w	r0, r1, #15
 8000d20:	b29b      	uxth	r3, r3
 8000d22:	fa02 f000 	lsl.w	r0, r2, r0
 8000d26:	4018      	ands	r0, r3
 8000d28:	d006      	beq.n	8000d38 <SPI_I2S_GetITStatus+0x24>
  {
    /* SPI_I2S_IT is set */
    bitstatus = SET;
 8000d2a:	0909      	lsrs	r1, r1, #4
 8000d2c:	b2a4      	uxth	r4, r4
 8000d2e:	408a      	lsls	r2, r1
 8000d30:	4214      	tst	r4, r2
 8000d32:	bf14      	ite	ne
 8000d34:	2001      	movne	r0, #1
 8000d36:	2000      	moveq	r0, #0
    /* SPI_I2S_IT is reset */
    bitstatus = RESET;
  }
  /* Return the SPI_I2S_IT status */
  return bitstatus;
}
 8000d38:	bc10      	pop	{r4}
 8000d3a:	4770      	bx	lr

08000d3c <USART_Init>:
  *         that contains the configuration information for the specified USART 
  *         peripheral.
  * @retval None
  */
void USART_Init(USART_TypeDef* USARTx, USART_InitTypeDef* USART_InitStruct)
{
 8000d3c:	b530      	push	{r4, r5, lr}
 8000d3e:	4604      	mov	r4, r0
 8000d40:	460d      	mov	r5, r1
  }

  usartxbase = (uint32_t)USARTx;

/*---------------------------- USART CR2 Configuration -----------------------*/
  tmpreg = USARTx->CR2;
 8000d42:	8a03      	ldrh	r3, [r0, #16]
 8000d44:	88ca      	ldrh	r2, [r1, #6]
 8000d46:	b29b      	uxth	r3, r3
 8000d48:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8000d4c:	4313      	orrs	r3, r2
  /* Configure the USART Stop Bits, Clock, CPOL, CPHA and LastBit ------------*/
  /* Set STOP[13:12] bits according to USART_StopBits value */
  tmpreg |= (uint32_t)USART_InitStruct->USART_StopBits;
  
  /* Write to USART CR2 */
  USARTx->CR2 = (uint16_t)tmpreg;
 8000d4e:	8203      	strh	r3, [r0, #16]

/*---------------------------- USART CR1 Configuration -----------------------*/
  tmpreg = USARTx->CR1;
 8000d50:	8982      	ldrh	r2, [r0, #12]
 8000d52:	890b      	ldrh	r3, [r1, #8]
 8000d54:	8888      	ldrh	r0, [r1, #4]
 8000d56:	b292      	uxth	r2, r2
 8000d58:	8949      	ldrh	r1, [r1, #10]
 8000d5a:	4303      	orrs	r3, r0
 8000d5c:	f422 52b0 	bic.w	r2, r2, #5632	; 0x1600
 8000d60:	430b      	orrs	r3, r1
 8000d62:	f022 020c 	bic.w	r2, r2, #12
 8000d66:	4313      	orrs	r3, r2
 8000d68:	b29b      	uxth	r3, r3
  /* Set PCE and PS bits according to USART_Parity value */
  /* Set TE and RE bits according to USART_Mode value */
  tmpreg |= (uint32_t)USART_InitStruct->USART_WordLength | USART_InitStruct->USART_Parity |
            USART_InitStruct->USART_Mode;
  /* Write to USART CR1 */
  USARTx->CR1 = (uint16_t)tmpreg;
 8000d6a:	81a3      	strh	r3, [r4, #12]

/*---------------------------- USART CR3 Configuration -----------------------*/  
  tmpreg = USARTx->CR3;
 8000d6c:	8aa3      	ldrh	r3, [r4, #20]
 8000d6e:	89aa      	ldrh	r2, [r5, #12]
 8000d70:	b29b      	uxth	r3, r3
 8000d72:	f423 7340 	bic.w	r3, r3, #768	; 0x300
  *         that contains the configuration information for the specified USART 
  *         peripheral.
  * @retval None
  */
void USART_Init(USART_TypeDef* USARTx, USART_InitTypeDef* USART_InitStruct)
{
 8000d76:	b087      	sub	sp, #28
 8000d78:	4313      	orrs	r3, r2
  tmpreg &= CR3_CLEAR_Mask;
  /* Configure the USART HFC -------------------------------------------------*/
  /* Set CTSE and RTSE bits according to USART_HardwareFlowControl value */
  tmpreg |= USART_InitStruct->USART_HardwareFlowControl;
  /* Write to USART CR3 */
  USARTx->CR3 = (uint16_t)tmpreg;
 8000d7a:	82a3      	strh	r3, [r4, #20]

/*---------------------------- USART BRR Configuration -----------------------*/
  /* Configure the USART Baud Rate -------------------------------------------*/
  RCC_GetClocksFreq(&RCC_ClocksStatus);
 8000d7c:	a801      	add	r0, sp, #4
 8000d7e:	f7ff fefb 	bl	8000b78 <RCC_GetClocksFreq>
  if (usartxbase == USART1_BASE)
  {
    apbclock = RCC_ClocksStatus.PCLK2_Frequency;
 8000d82:	9904      	ldr	r1, [sp, #16]
  USARTx->CR3 = (uint16_t)tmpreg;

/*---------------------------- USART BRR Configuration -----------------------*/
  /* Configure the USART Baud Rate -------------------------------------------*/
  RCC_GetClocksFreq(&RCC_ClocksStatus);
  if (usartxbase == USART1_BASE)
 8000d84:	481a      	ldr	r0, [pc, #104]	; (8000df0 <USART_Init+0xb4>)
  {
    apbclock = RCC_ClocksStatus.PCLK2_Frequency;
  }
  else
  {
    apbclock = RCC_ClocksStatus.PCLK1_Frequency;
 8000d86:	9b03      	ldr	r3, [sp, #12]
  }
  
  /* Determine the integer part */
  if ((USARTx->CR1 & CR1_OVER8_Set) != 0)
 8000d88:	89a2      	ldrh	r2, [r4, #12]
/*---------------------------- USART BRR Configuration -----------------------*/
  /* Configure the USART Baud Rate -------------------------------------------*/
  RCC_GetClocksFreq(&RCC_ClocksStatus);
  if (usartxbase == USART1_BASE)
  {
    apbclock = RCC_ClocksStatus.PCLK2_Frequency;
 8000d8a:	4284      	cmp	r4, r0
 8000d8c:	bf08      	it	eq
 8000d8e:	460b      	moveq	r3, r1
  {
    apbclock = RCC_ClocksStatus.PCLK1_Frequency;
  }
  
  /* Determine the integer part */
  if ((USARTx->CR1 & CR1_OVER8_Set) != 0)
 8000d90:	f412 4f00 	tst.w	r2, #32768	; 0x8000
  {
    /* Integer part computing in case Oversampling mode is 8 Samples */
    integerdivider = ((25 * apbclock) / (2 * (USART_InitStruct->USART_BaudRate)));    
 8000d94:	682a      	ldr	r2, [r5, #0]
 8000d96:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8000d9a:	bf14      	ite	ne
 8000d9c:	0052      	lslne	r2, r2, #1
  }
  else /* if ((USARTx->CR1 & CR1_OVER8_Set) == 0) */
  {
    /* Integer part computing in case Oversampling mode is 16 Samples */
    integerdivider = ((25 * apbclock) / (4 * (USART_InitStruct->USART_BaudRate)));    
 8000d9e:	0092      	lsleq	r2, r2, #2
 8000da0:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8000da4:	fbb3 f3f2 	udiv	r3, r3, r2
  }
  tmpreg = (integerdivider / 100) << 4;
 8000da8:	4d12      	ldr	r5, [pc, #72]	; (8000df4 <USART_Init+0xb8>)

  /* Determine the fractional part */
  fractionaldivider = integerdivider - (100 * (tmpreg >> 4));

  /* Implement the fractional part in the register */
  if ((USARTx->CR1 & CR1_OVER8_Set) != 0)
 8000daa:	89a1      	ldrh	r1, [r4, #12]
  else /* if ((USARTx->CR1 & CR1_OVER8_Set) == 0) */
  {
    /* Integer part computing in case Oversampling mode is 16 Samples */
    integerdivider = ((25 * apbclock) / (4 * (USART_InitStruct->USART_BaudRate)));    
  }
  tmpreg = (integerdivider / 100) << 4;
 8000dac:	fba5 2003 	umull	r2, r0, r5, r3

  /* Determine the fractional part */
  fractionaldivider = integerdivider - (100 * (tmpreg >> 4));
 8000db0:	2264      	movs	r2, #100	; 0x64
  else /* if ((USARTx->CR1 & CR1_OVER8_Set) == 0) */
  {
    /* Integer part computing in case Oversampling mode is 16 Samples */
    integerdivider = ((25 * apbclock) / (4 * (USART_InitStruct->USART_BaudRate)));    
  }
  tmpreg = (integerdivider / 100) << 4;
 8000db2:	0940      	lsrs	r0, r0, #5

  /* Determine the fractional part */
  fractionaldivider = integerdivider - (100 * (tmpreg >> 4));
 8000db4:	fb00 3312 	mls	r3, r0, r2, r3

  /* Implement the fractional part in the register */
  if ((USARTx->CR1 & CR1_OVER8_Set) != 0)
 8000db8:	040a      	lsls	r2, r1, #16
    integerdivider = ((25 * apbclock) / (4 * (USART_InitStruct->USART_BaudRate)));    
  }
  tmpreg = (integerdivider / 100) << 4;

  /* Determine the fractional part */
  fractionaldivider = integerdivider - (100 * (tmpreg >> 4));
 8000dba:	ea4f 1000 	mov.w	r0, r0, lsl #4

  /* Implement the fractional part in the register */
  if ((USARTx->CR1 & CR1_OVER8_Set) != 0)
 8000dbe:	d40a      	bmi.n	8000dd6 <USART_Init+0x9a>
  {
    tmpreg |= ((((fractionaldivider * 8) + 50) / 100)) & ((uint8_t)0x07);
  }
  else /* if ((USARTx->CR1 & CR1_OVER8_Set) == 0) */
  {
    tmpreg |= ((((fractionaldivider * 16) + 50) / 100)) & ((uint8_t)0x0F);
 8000dc0:	011a      	lsls	r2, r3, #4
 8000dc2:	3232      	adds	r2, #50	; 0x32
 8000dc4:	fba5 2302 	umull	r2, r3, r5, r2
 8000dc8:	f3c3 1343 	ubfx	r3, r3, #5, #4
 8000dcc:	4303      	orrs	r3, r0
  }
  
  /* Write to USART BRR */
  USARTx->BRR = (uint16_t)tmpreg;
 8000dce:	b29b      	uxth	r3, r3
 8000dd0:	8123      	strh	r3, [r4, #8]
}
 8000dd2:	b007      	add	sp, #28
 8000dd4:	bd30      	pop	{r4, r5, pc}
  fractionaldivider = integerdivider - (100 * (tmpreg >> 4));

  /* Implement the fractional part in the register */
  if ((USARTx->CR1 & CR1_OVER8_Set) != 0)
  {
    tmpreg |= ((((fractionaldivider * 8) + 50) / 100)) & ((uint8_t)0x07);
 8000dd6:	00d9      	lsls	r1, r3, #3
 8000dd8:	3132      	adds	r1, #50	; 0x32
 8000dda:	fba5 3101 	umull	r3, r1, r5, r1
 8000dde:	f3c1 1242 	ubfx	r2, r1, #5, #3
 8000de2:	ea42 0300 	orr.w	r3, r2, r0
  {
    tmpreg |= ((((fractionaldivider * 16) + 50) / 100)) & ((uint8_t)0x0F);
  }
  
  /* Write to USART BRR */
  USARTx->BRR = (uint16_t)tmpreg;
 8000de6:	b29b      	uxth	r3, r3
 8000de8:	8123      	strh	r3, [r4, #8]
}
 8000dea:	b007      	add	sp, #28
 8000dec:	bd30      	pop	{r4, r5, pc}
 8000dee:	bf00      	nop
 8000df0:	40013800 	.word	0x40013800
 8000df4:	51eb851f 	.word	0x51eb851f

08000df8 <USART_Cmd>:
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
  {
    /* Enable the selected USART by setting the UE bit in the CR1 register */
    USARTx->CR1 |= CR1_UE_Set;
 8000df8:	8983      	ldrh	r3, [r0, #12]
{
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 8000dfa:	b929      	cbnz	r1, 8000e08 <USART_Cmd+0x10>
    USARTx->CR1 |= CR1_UE_Set;
  }
  else
  {
    /* Disable the selected USART by clearing the UE bit in the CR1 register */
    USARTx->CR1 &= CR1_UE_Reset;
 8000dfc:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8000e00:	041b      	lsls	r3, r3, #16
 8000e02:	0c1b      	lsrs	r3, r3, #16
 8000e04:	8183      	strh	r3, [r0, #12]
 8000e06:	4770      	bx	lr
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
  {
    /* Enable the selected USART by setting the UE bit in the CR1 register */
    USARTx->CR1 |= CR1_UE_Set;
 8000e08:	b29b      	uxth	r3, r3
 8000e0a:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8000e0e:	8183      	strh	r3, [r0, #12]
 8000e10:	4770      	bx	lr
 8000e12:	bf00      	nop

08000e14 <USART_ITConfig>:
  * @param  NewState: new state of the specified USARTx interrupts.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void USART_ITConfig(USART_TypeDef* USARTx, uint16_t USART_IT, FunctionalState NewState)
{
 8000e14:	b410      	push	{r4}
  /* Get the USART register index */
  usartreg = (((uint8_t)USART_IT) >> 0x05);

  /* Get the interrupt position */
  itpos = USART_IT & IT_Mask;
  itmask = (((uint32_t)0x01) << itpos);
 8000e16:	f001 041f 	and.w	r4, r1, #31
  }   
  
  usartxbase = (uint32_t)USARTx;

  /* Get the USART register index */
  usartreg = (((uint8_t)USART_IT) >> 0x05);
 8000e1a:	f3c1 1142 	ubfx	r1, r1, #5, #3

  /* Get the interrupt position */
  itpos = USART_IT & IT_Mask;
  itmask = (((uint32_t)0x01) << itpos);
 8000e1e:	2301      	movs	r3, #1
    
  if (usartreg == 0x01) /* The IT is in CR1 register */
 8000e20:	2901      	cmp	r1, #1
  /* Get the USART register index */
  usartreg = (((uint8_t)USART_IT) >> 0x05);

  /* Get the interrupt position */
  itpos = USART_IT & IT_Mask;
  itmask = (((uint32_t)0x01) << itpos);
 8000e22:	fa03 f304 	lsl.w	r3, r3, r4
    
  if (usartreg == 0x01) /* The IT is in CR1 register */
 8000e26:	d00f      	beq.n	8000e48 <USART_ITConfig+0x34>
  {
    usartxbase += 0x0C;
  }
  else if (usartreg == 0x02) /* The IT is in CR2 register */
 8000e28:	2902      	cmp	r1, #2
  {
    usartxbase += 0x10;
 8000e2a:	bf0c      	ite	eq
 8000e2c:	3010      	addeq	r0, #16
  }
  else /* The IT is in CR3 register */
  {
    usartxbase += 0x14; 
 8000e2e:	3014      	addne	r0, #20
  }
  if (NewState != DISABLE)
 8000e30:	b92a      	cbnz	r2, 8000e3e <USART_ITConfig+0x2a>
  {
    *(__IO uint32_t*)usartxbase  |= itmask;
  }
  else
  {
    *(__IO uint32_t*)usartxbase &= ~itmask;
 8000e32:	6802      	ldr	r2, [r0, #0]
  }
}
 8000e34:	bc10      	pop	{r4}
  {
    *(__IO uint32_t*)usartxbase  |= itmask;
  }
  else
  {
    *(__IO uint32_t*)usartxbase &= ~itmask;
 8000e36:	ea22 0303 	bic.w	r3, r2, r3
 8000e3a:	6003      	str	r3, [r0, #0]
  }
}
 8000e3c:	4770      	bx	lr
  {
    usartxbase += 0x14; 
  }
  if (NewState != DISABLE)
  {
    *(__IO uint32_t*)usartxbase  |= itmask;
 8000e3e:	6802      	ldr	r2, [r0, #0]
  }
  else
  {
    *(__IO uint32_t*)usartxbase &= ~itmask;
  }
}
 8000e40:	bc10      	pop	{r4}
  {
    usartxbase += 0x14; 
  }
  if (NewState != DISABLE)
  {
    *(__IO uint32_t*)usartxbase  |= itmask;
 8000e42:	4313      	orrs	r3, r2
 8000e44:	6003      	str	r3, [r0, #0]
  }
  else
  {
    *(__IO uint32_t*)usartxbase &= ~itmask;
  }
}
 8000e46:	4770      	bx	lr
  itpos = USART_IT & IT_Mask;
  itmask = (((uint32_t)0x01) << itpos);
    
  if (usartreg == 0x01) /* The IT is in CR1 register */
  {
    usartxbase += 0x0C;
 8000e48:	300c      	adds	r0, #12
 8000e4a:	e7f1      	b.n	8000e30 <USART_ITConfig+0x1c>

08000e4c <USART_SendData>:
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_USART_DATA(Data)); 
    
  /* Transmit Data */
  USARTx->DR = (Data & (uint16_t)0x01FF);
 8000e4c:	f3c1 0108 	ubfx	r1, r1, #0, #9
 8000e50:	8081      	strh	r1, [r0, #4]
 8000e52:	4770      	bx	lr

08000e54 <USART_ReceiveData>:
{
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  
  /* Receive Data */
  return (uint16_t)(USARTx->DR & (uint16_t)0x01FF);
 8000e54:	8880      	ldrh	r0, [r0, #4]
}
 8000e56:	f3c0 0008 	ubfx	r0, r0, #0, #9
 8000e5a:	4770      	bx	lr

08000e5c <USART_GetITStatus>:
  {
    assert_param(IS_USART_123_PERIPH(USARTx));
  }   
  
  /* Get the USART register index */
  usartreg = (((uint8_t)USART_IT) >> 0x05);
 8000e5c:	f3c1 1242 	ubfx	r2, r1, #5, #3
  *     @arg USART_IT_FE:   Framing Error interrupt
  *     @arg USART_IT_PE:   Parity Error interrupt
  * @retval The new state of USART_IT (SET or RESET).
  */
ITStatus USART_GetITStatus(USART_TypeDef* USARTx, uint16_t USART_IT)
{
 8000e60:	b410      	push	{r4}
  
  /* Get the USART register index */
  usartreg = (((uint8_t)USART_IT) >> 0x05);
  /* Get the interrupt position */
  itmask = USART_IT & IT_Mask;
  itmask = (uint32_t)0x01 << itmask;
 8000e62:	2301      	movs	r3, #1
  }   
  
  /* Get the USART register index */
  usartreg = (((uint8_t)USART_IT) >> 0x05);
  /* Get the interrupt position */
  itmask = USART_IT & IT_Mask;
 8000e64:	f001 041f 	and.w	r4, r1, #31
  itmask = (uint32_t)0x01 << itmask;
  
  if (usartreg == 0x01) /* The IT  is in CR1 register */
 8000e68:	2a01      	cmp	r2, #1
  
  /* Get the USART register index */
  usartreg = (((uint8_t)USART_IT) >> 0x05);
  /* Get the interrupt position */
  itmask = USART_IT & IT_Mask;
  itmask = (uint32_t)0x01 << itmask;
 8000e6a:	fa03 f304 	lsl.w	r3, r3, r4
  
  if (usartreg == 0x01) /* The IT  is in CR1 register */
 8000e6e:	d015      	beq.n	8000e9c <USART_GetITStatus+0x40>
  {
    itmask &= USARTx->CR1;
  }
  else if (usartreg == 0x02) /* The IT  is in CR2 register */
 8000e70:	2a02      	cmp	r2, #2
  {
    itmask &= USARTx->CR2;
 8000e72:	bf0c      	ite	eq
 8000e74:	8a02      	ldrheq	r2, [r0, #16]
  }
  else /* The IT  is in CR3 register */
  {
    itmask &= USARTx->CR3;
 8000e76:	8a82      	ldrhne	r2, [r0, #20]
 8000e78:	b292      	uxth	r2, r2
 8000e7a:	4013      	ands	r3, r2
  }
  
  bitpos = USART_IT >> 0x08;
  bitpos = (uint32_t)0x01 << bitpos;
  bitpos &= USARTx->SR;
 8000e7c:	8802      	ldrh	r2, [r0, #0]
 8000e7e:	b292      	uxth	r2, r2
  if ((itmask != (uint16_t)RESET)&&(bitpos != (uint16_t)RESET))
 8000e80:	b14b      	cbz	r3, 8000e96 <USART_GetITStatus+0x3a>
  {
    itmask &= USARTx->CR3;
  }
  
  bitpos = USART_IT >> 0x08;
  bitpos = (uint32_t)0x01 << bitpos;
 8000e82:	2301      	movs	r3, #1
  else /* The IT  is in CR3 register */
  {
    itmask &= USARTx->CR3;
  }
  
  bitpos = USART_IT >> 0x08;
 8000e84:	0a09      	lsrs	r1, r1, #8
  bitpos = (uint32_t)0x01 << bitpos;
 8000e86:	fa03 f101 	lsl.w	r1, r3, r1
  bitpos &= USARTx->SR;
  if ((itmask != (uint16_t)RESET)&&(bitpos != (uint16_t)RESET))
  {
    bitstatus = SET;
 8000e8a:	420a      	tst	r2, r1
 8000e8c:	bf14      	ite	ne
 8000e8e:	4618      	movne	r0, r3
 8000e90:	2000      	moveq	r0, #0
  {
    bitstatus = RESET;
  }
  
  return bitstatus;  
}
 8000e92:	bc10      	pop	{r4}
 8000e94:	4770      	bx	lr
  {
    bitstatus = SET;
  }
  else
  {
    bitstatus = RESET;
 8000e96:	4618      	mov	r0, r3
  }
  
  return bitstatus;  
}
 8000e98:	bc10      	pop	{r4}
 8000e9a:	4770      	bx	lr
  itmask = USART_IT & IT_Mask;
  itmask = (uint32_t)0x01 << itmask;
  
  if (usartreg == 0x01) /* The IT  is in CR1 register */
  {
    itmask &= USARTx->CR1;
 8000e9c:	8982      	ldrh	r2, [r0, #12]
 8000e9e:	b292      	uxth	r2, r2
 8000ea0:	4013      	ands	r3, r2
 8000ea2:	e7eb      	b.n	8000e7c <USART_GetITStatus+0x20>

08000ea4 <_ZN10SPI1_class9storeByteEi>:
	}
	return msg;
}

void SPI1_class::storeByte(int byte)
{
 8000ea4:	4770      	bx	lr
 8000ea6:	bf00      	nop

08000ea8 <_ZN10SPI1_class6isBusyEv>:
{
	GPIO_SetBits(m_csSet.gpioType,m_csSet.csPin);
}

bool SPI1_class::isBusy()
{
 8000ea8:	b508      	push	{r3, lr}
	bool state = SPI_I2S_GetITStatus(SPI1,SPI_I2S_IT_TXE);
 8000eaa:	2171      	movs	r1, #113	; 0x71
 8000eac:	4803      	ldr	r0, [pc, #12]	; (8000ebc <_ZN10SPI1_class6isBusyEv+0x14>)
 8000eae:	f7ff ff31 	bl	8000d14 <SPI_I2S_GetITStatus>
	return state;
}
 8000eb2:	3000      	adds	r0, #0
 8000eb4:	bf18      	it	ne
 8000eb6:	2001      	movne	r0, #1
 8000eb8:	bd08      	pop	{r3, pc}
 8000eba:	bf00      	nop
 8000ebc:	40013000 	.word	0x40013000

08000ec0 <_ZN10SPI1_class4sendEv>:
	m_outBuffer.push(commands);
}

void SPI1_class::send()
{
	SPI_I2S_ITConfig(SPI1,SPI_I2S_IT_TXE,ENABLE);
 8000ec0:	2201      	movs	r2, #1
 8000ec2:	2171      	movs	r1, #113	; 0x71
 8000ec4:	4801      	ldr	r0, [pc, #4]	; (8000ecc <_ZN10SPI1_class4sendEv+0xc>)
 8000ec6:	f7ff befd 	b.w	8000cc4 <SPI_I2S_ITConfig>
 8000eca:	bf00      	nop
 8000ecc:	40013000 	.word	0x40013000

08000ed0 <_ZN10SPI1_class7getByteEv>:
	bool state = SPI_I2S_GetITStatus(SPI1,SPI_I2S_IT_TXE);
	return state;
}

int SPI1_class::getByte()
{
 8000ed0:	b570      	push	{r4, r5, r6, lr}
	int msg = BUFFER_EMPTY;

	if(m_outBuffer.size() != 0)
 8000ed2:	6b01      	ldr	r1, [r0, #48]	; 0x30
 8000ed4:	6a04      	ldr	r4, [r0, #32]
 8000ed6:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8000ed8:	6a82      	ldr	r2, [r0, #40]	; 0x28
 8000eda:	1b09      	subs	r1, r1, r4
 8000edc:	1a9a      	subs	r2, r3, r2
 8000ede:	1089      	asrs	r1, r1, #2
	      const _Deque_iterator<_Tp, _Ref, _Ptr>& __y) _GLIBCXX_NOEXCEPT
    {
      return typename _Deque_iterator<_Tp, _Ref, _Ptr>::difference_type
	(_Deque_iterator<_Tp, _Ref, _Ptr>::_S_buffer_size())
	* (__x._M_node - __y._M_node - 1) + (__x._M_cur - __x._M_first)
	+ (__y._M_last - __y._M_cur);
 8000ee0:	6945      	ldr	r5, [r0, #20]
 8000ee2:	69c4      	ldr	r4, [r0, #28]
 8000ee4:	1e4b      	subs	r3, r1, #1
 8000ee6:	10d2      	asrs	r2, r2, #3
 8000ee8:	eb02 1283 	add.w	r2, r2, r3, lsl #6
 8000eec:	1b63      	subs	r3, r4, r5
 8000eee:	eb02 03e3 	add.w	r3, r2, r3, asr #3
 8000ef2:	b91b      	cbnz	r3, 8000efc <_ZN10SPI1_class7getByteEv+0x2c>
	return state;
}

int SPI1_class::getByte()
{
	int msg = BUFFER_EMPTY;
 8000ef4:	f44f 7480 	mov.w	r4, #256	; 0x100
		GPIO_ResetBits(m_csSet.gpioType,m_csSet.csPin);
		//remove job from queue
		m_outBuffer.pop();
	}
	return msg;
}
 8000ef8:	4620      	mov	r0, r4
 8000efa:	bd70      	pop	{r4, r5, r6, pc}
 8000efc:	4606      	mov	r6, r0
	{
		CommandS command = m_outBuffer.front();
		msg = command.msg;

		//update D/C# line
		GPIO_WriteBit(GPIOA,SPI1_D_C_PIN, (BitAction)command.d_c);
 8000efe:	792a      	ldrb	r2, [r5, #4]
 8000f00:	2140      	movs	r1, #64	; 0x40
 8000f02:	480f      	ldr	r0, [pc, #60]	; (8000f40 <_ZN10SPI1_class7getByteEv+0x70>)
{
	int msg = BUFFER_EMPTY;

	if(m_outBuffer.size() != 0)
	{
		CommandS command = m_outBuffer.front();
 8000f04:	682c      	ldr	r4, [r5, #0]
		msg = command.msg;

		//update D/C# line
		GPIO_WriteBit(GPIOA,SPI1_D_C_PIN, (BitAction)command.d_c);
 8000f06:	f7ff fe31 	bl	8000b6c <GPIO_WriteBit>
		GPIO_ResetBits(m_csSet.gpioType,m_csSet.csPin);
 8000f0a:	6870      	ldr	r0, [r6, #4]
 8000f0c:	8931      	ldrh	r1, [r6, #8]
 8000f0e:	b289      	uxth	r1, r1
 8000f10:	f7ff fe2a 	bl	8000b68 <GPIO_ResetBits>
       *  needed, it should be retrieved before pop_front() is called.
       */
      void
      pop_front() _GLIBCXX_NOEXCEPT
      {
	if (this->_M_impl._M_start._M_cur
 8000f14:	69f2      	ldr	r2, [r6, #28]
	    != this->_M_impl._M_start._M_last - 1)
 8000f16:	6973      	ldr	r3, [r6, #20]
       *  needed, it should be retrieved before pop_front() is called.
       */
      void
      pop_front() _GLIBCXX_NOEXCEPT
      {
	if (this->_M_impl._M_start._M_cur
 8000f18:	3a08      	subs	r2, #8
 8000f1a:	4293      	cmp	r3, r2
 8000f1c:	d003      	beq.n	8000f26 <_ZN10SPI1_class7getByteEv+0x56>
	    != this->_M_impl._M_start._M_last - 1)
	  {
	    _Alloc_traits::destroy(this->_M_impl,
	                           this->_M_impl._M_start._M_cur);
	    ++this->_M_impl._M_start._M_cur;
 8000f1e:	3308      	adds	r3, #8
 8000f20:	6173      	str	r3, [r6, #20]
		//remove job from queue
		m_outBuffer.pop();
	}
	return msg;
}
 8000f22:	4620      	mov	r0, r4
 8000f24:	bd70      	pop	{r4, r5, r6, pc}
      }

      // __p is not permitted to be a null pointer.
      void
      deallocate(pointer __p, size_type)
      { ::operator delete(__p); }
 8000f26:	69b0      	ldr	r0, [r6, #24]
 8000f28:	f001 fd34 	bl	8002994 <_ZdlPv>
    _M_pop_front_aux()
    {
      _Alloc_traits::destroy(_M_get_Tp_allocator(),
			     this->_M_impl._M_start._M_cur);
      _M_deallocate_node(this->_M_impl._M_start._M_first);
      this->_M_impl._M_start._M_set_node(this->_M_impl._M_start._M_node + 1);
 8000f2c:	6a33      	ldr	r3, [r6, #32]
       *  immediately afterwards, based on _M_first and _M_last.
       */
      void
      _M_set_node(_Map_pointer __new_node) _GLIBCXX_NOEXCEPT
      {
	_M_node = __new_node;
 8000f2e:	1d1a      	adds	r2, r3, #4
 8000f30:	6232      	str	r2, [r6, #32]
	_M_first = *__new_node;
 8000f32:	685b      	ldr	r3, [r3, #4]
	_M_last = _M_first + difference_type(_S_buffer_size());
 8000f34:	f503 7200 	add.w	r2, r3, #512	; 0x200
       */
      void
      _M_set_node(_Map_pointer __new_node) _GLIBCXX_NOEXCEPT
      {
	_M_node = __new_node;
	_M_first = *__new_node;
 8000f38:	61b3      	str	r3, [r6, #24]
      this->_M_impl._M_start._M_cur = this->_M_impl._M_start._M_first;
 8000f3a:	6173      	str	r3, [r6, #20]
	_M_last = _M_first + difference_type(_S_buffer_size());
 8000f3c:	61f2      	str	r2, [r6, #28]
 8000f3e:	e7db      	b.n	8000ef8 <_ZN10SPI1_class7getByteEv+0x28>
 8000f40:	40010800 	.word	0x40010800

08000f44 <_ZN10SPI1_classD1Ev>:
		retVal =  true;
	}
	return retVal;
}

SPI1_class::~SPI1_class()
 8000f44:	b570      	push	{r4, r5, r6, lr}
 8000f46:	4606      	mov	r6, r0
 8000f48:	4b09      	ldr	r3, [pc, #36]	; (8000f70 <_ZN10SPI1_classD1Ev+0x2c>)

  template<typename _Tp, typename _Alloc>
    _Deque_base<_Tp, _Alloc>::
    ~_Deque_base() _GLIBCXX_NOEXCEPT
    {
      if (this->_M_impl._M_map)
 8000f4a:	68c0      	ldr	r0, [r0, #12]
 8000f4c:	6033      	str	r3, [r6, #0]
 8000f4e:	b168      	cbz	r0, 8000f6c <_ZN10SPI1_classD1Ev+0x28>
	{
	  _M_destroy_nodes(this->_M_impl._M_start._M_node,
 8000f50:	6b35      	ldr	r5, [r6, #48]	; 0x30
 8000f52:	6a34      	ldr	r4, [r6, #32]
 8000f54:	3504      	adds	r5, #4
    void
    _Deque_base<_Tp, _Alloc>::
    _M_destroy_nodes(_Map_pointer __nstart,
		     _Map_pointer __nfinish) _GLIBCXX_NOEXCEPT
    {
      for (_Map_pointer __n = __nstart; __n < __nfinish; ++__n)
 8000f56:	42ac      	cmp	r4, r5
 8000f58:	d206      	bcs.n	8000f68 <_ZN10SPI1_classD1Ev+0x24>
 8000f5a:	f854 0b04 	ldr.w	r0, [r4], #4
 8000f5e:	f001 fd19 	bl	8002994 <_ZdlPv>
 8000f62:	42a5      	cmp	r5, r4
 8000f64:	d8f9      	bhi.n	8000f5a <_ZN10SPI1_classD1Ev+0x16>
 8000f66:	68f0      	ldr	r0, [r6, #12]
 8000f68:	f001 fd14 	bl	8002994 <_ZdlPv>
{

}
 8000f6c:	4630      	mov	r0, r6
 8000f6e:	bd70      	pop	{r4, r5, r6, pc}
 8000f70:	08002f74 	.word	0x08002f74

08000f74 <_ZN10SPI1_classD0Ev>:
		retVal =  true;
	}
	return retVal;
}

SPI1_class::~SPI1_class()
 8000f74:	b570      	push	{r4, r5, r6, lr}
 8000f76:	4606      	mov	r6, r0
 8000f78:	4b0b      	ldr	r3, [pc, #44]	; (8000fa8 <_ZN10SPI1_classD0Ev+0x34>)

  template<typename _Tp, typename _Alloc>
    _Deque_base<_Tp, _Alloc>::
    ~_Deque_base() _GLIBCXX_NOEXCEPT
    {
      if (this->_M_impl._M_map)
 8000f7a:	68c0      	ldr	r0, [r0, #12]
 8000f7c:	6033      	str	r3, [r6, #0]
 8000f7e:	b168      	cbz	r0, 8000f9c <_ZN10SPI1_classD0Ev+0x28>
	{
	  _M_destroy_nodes(this->_M_impl._M_start._M_node,
 8000f80:	6b35      	ldr	r5, [r6, #48]	; 0x30
 8000f82:	6a34      	ldr	r4, [r6, #32]
 8000f84:	3504      	adds	r5, #4
    void
    _Deque_base<_Tp, _Alloc>::
    _M_destroy_nodes(_Map_pointer __nstart,
		     _Map_pointer __nfinish) _GLIBCXX_NOEXCEPT
    {
      for (_Map_pointer __n = __nstart; __n < __nfinish; ++__n)
 8000f86:	42ac      	cmp	r4, r5
 8000f88:	d206      	bcs.n	8000f98 <_ZN10SPI1_classD0Ev+0x24>
 8000f8a:	f854 0b04 	ldr.w	r0, [r4], #4
 8000f8e:	f001 fd01 	bl	8002994 <_ZdlPv>
 8000f92:	42a5      	cmp	r5, r4
 8000f94:	d8f9      	bhi.n	8000f8a <_ZN10SPI1_classD0Ev+0x16>
 8000f96:	68f0      	ldr	r0, [r6, #12]
 8000f98:	f001 fcfc 	bl	8002994 <_ZdlPv>
{

}
 8000f9c:	4630      	mov	r0, r6
 8000f9e:	f001 fcf9 	bl	8002994 <_ZdlPv>
 8000fa2:	4630      	mov	r0, r6
 8000fa4:	bd70      	pop	{r4, r5, r6, pc}
 8000fa6:	bf00      	nop
 8000fa8:	08002f74 	.word	0x08002f74

08000fac <_ZN10SPI1_classC1Ev>:
{
	static SPI1_class sp;
	return sp;
}

SPI1_class::SPI1_class()
 8000fac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000fae:	4604      	mov	r4, r0
 8000fb0:	4b22      	ldr	r3, [pc, #136]	; (800103c <_ZN10SPI1_classC1Ev+0x90>)
      allocate(size_type __n, const void* = 0)
      { 
	if (__n > this->max_size())
	  std::__throw_bad_alloc();

	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
 8000fb2:	2020      	movs	r0, #32
 8000fb4:	6023      	str	r3, [r4, #0]
 8000fb6:	f001 fcd7 	bl	8002968 <_Znwj>
 8000fba:	4605      	mov	r5, r0
 8000fbc:	f44f 7000 	mov.w	r0, #512	; 0x200
 8000fc0:	f001 fcd2 	bl	8002968 <_Znwj>
	  _M_start(), _M_finish()
	{ }

	_Deque_impl(const _Tp_alloc_type& __a) _GLIBCXX_NOEXCEPT
	: _Tp_alloc_type(__a), _M_map(), _M_map_size(0),
	  _M_start(), _M_finish()
 8000fc4:	2300      	movs	r3, #0
    _M_initialize_map(size_t __num_elements)
    {
      const size_t __num_nodes = (__num_elements/ __deque_buf_size(sizeof(_Tp))
				  + 1);

      this->_M_impl._M_map_size = std::max((size_t) _S_initial_map_size,
 8000fc6:	2208      	movs	r2, #8
 8000fc8:	6122      	str	r2, [r4, #16]
	  _M_start(), _M_finish()
	{ }

	_Deque_impl(const _Tp_alloc_type& __a) _GLIBCXX_NOEXCEPT
	: _Tp_alloc_type(__a), _M_map(), _M_map_size(0),
	  _M_start(), _M_finish()
 8000fca:	60e3      	str	r3, [r4, #12]
      _Deque_iterator(_Elt_pointer __x, _Map_pointer __y) _GLIBCXX_NOEXCEPT
      : _M_cur(__x), _M_first(*__y),
        _M_last(*__y + _S_buffer_size()), _M_node(__y) { }

      _Deque_iterator() _GLIBCXX_NOEXCEPT
      : _M_cur(), _M_first(), _M_last(), _M_node() { }
 8000fcc:	6163      	str	r3, [r4, #20]
 8000fce:	61a3      	str	r3, [r4, #24]
 8000fd0:	61e3      	str	r3, [r4, #28]
 8000fd2:	6223      	str	r3, [r4, #32]
 8000fd4:	6263      	str	r3, [r4, #36]	; 0x24
 8000fd6:	62a3      	str	r3, [r4, #40]	; 0x28
 8000fd8:	62e3      	str	r3, [r4, #44]	; 0x2c
 8000fda:	6323      	str	r3, [r4, #48]	; 0x30
    {
      _Map_pointer __cur;
      __try
	{
	  for (__cur = __nstart; __cur < __nfinish; ++__cur)
	    *__cur = this->_M_allocate_node();
 8000fdc:	60e8      	str	r0, [r5, #12]
 8000fde:	2020      	movs	r0, #32
 8000fe0:	f001 fcc2 	bl	8002968 <_Znwj>
 8000fe4:	4607      	mov	r7, r0
      const size_t __num_nodes = (__num_elements/ __deque_buf_size(sizeof(_Tp))
				  + 1);

      this->_M_impl._M_map_size = std::max((size_t) _S_initial_map_size,
					   size_t(__num_nodes + 2));
      this->_M_impl._M_map = _M_allocate_map(this->_M_impl._M_map_size);
 8000fe6:	60e0      	str	r0, [r4, #12]
 8000fe8:	f44f 7000 	mov.w	r0, #512	; 0x200
      // starts in the middle elements and grows outwards.  So nstart may be
      // the beginning of _M_map, but for small maps it may be as far in as
      // _M_map+3.

      _Map_pointer __nstart = (this->_M_impl._M_map
			       + (this->_M_impl._M_map_size - __num_nodes) / 2);
 8000fec:	6926      	ldr	r6, [r4, #16]
 8000fee:	f001 fcbb 	bl	8002968 <_Znwj>
 8000ff2:	3e01      	subs	r6, #1
 8000ff4:	0876      	lsrs	r6, r6, #1
    _Deque_base<_Tp, _Alloc>::
    ~_Deque_base() _GLIBCXX_NOEXCEPT
    {
      if (this->_M_impl._M_map)
	{
	  _M_destroy_nodes(this->_M_impl._M_start._M_node,
 8000ff6:	f105 0e10 	add.w	lr, r5, #16
    void
    _Deque_base<_Tp, _Alloc>::
    _M_destroy_nodes(_Map_pointer __nstart,
		     _Map_pointer __nfinish) _GLIBCXX_NOEXCEPT
    {
      for (_Map_pointer __n = __nstart; __n < __nfinish; ++__n)
 8000ffa:	f105 010c 	add.w	r1, r5, #12
      // starts in the middle elements and grows outwards.  So nstart may be
      // the beginning of _M_map, but for small maps it may be as far in as
      // _M_map+3.

      _Map_pointer __nstart = (this->_M_impl._M_map
			       + (this->_M_impl._M_map_size - __num_nodes) / 2);
 8000ffe:	eb07 0286 	add.w	r2, r7, r6, lsl #2
      void
      _M_set_node(_Map_pointer __new_node) _GLIBCXX_NOEXCEPT
      {
	_M_node = __new_node;
	_M_first = *__new_node;
	_M_last = _M_first + difference_type(_S_buffer_size());
 8001002:	f500 7300 	add.w	r3, r0, #512	; 0x200
    void
    _Deque_base<_Tp, _Alloc>::
    _M_destroy_nodes(_Map_pointer __nstart,
		     _Map_pointer __nfinish) _GLIBCXX_NOEXCEPT
    {
      for (_Map_pointer __n = __nstart; __n < __nfinish; ++__n)
 8001006:	458e      	cmp	lr, r1
    {
      _Map_pointer __cur;
      __try
	{
	  for (__cur = __nstart; __cur < __nfinish; ++__cur)
	    *__cur = this->_M_allocate_node();
 8001008:	f847 0026 	str.w	r0, [r7, r6, lsl #2]
       *  immediately afterwards, based on _M_first and _M_last.
       */
      void
      _M_set_node(_Map_pointer __new_node) _GLIBCXX_NOEXCEPT
      {
	_M_node = __new_node;
 800100c:	6222      	str	r2, [r4, #32]
 800100e:	6322      	str	r2, [r4, #48]	; 0x30
	_M_first = *__new_node;
 8001010:	61a0      	str	r0, [r4, #24]
 8001012:	62a0      	str	r0, [r4, #40]	; 0x28
	  __throw_exception_again;
	}

      this->_M_impl._M_start._M_set_node(__nstart);
      this->_M_impl._M_finish._M_set_node(__nfinish - 1);
      this->_M_impl._M_start._M_cur = _M_impl._M_start._M_first;
 8001014:	6160      	str	r0, [r4, #20]
      this->_M_impl._M_finish._M_cur = (this->_M_impl._M_finish._M_first
 8001016:	6260      	str	r0, [r4, #36]	; 0x24
      void
      _M_set_node(_Map_pointer __new_node) _GLIBCXX_NOEXCEPT
      {
	_M_node = __new_node;
	_M_first = *__new_node;
	_M_last = _M_first + difference_type(_S_buffer_size());
 8001018:	61e3      	str	r3, [r4, #28]
 800101a:	62e3      	str	r3, [r4, #44]	; 0x2c
    void
    _Deque_base<_Tp, _Alloc>::
    _M_destroy_nodes(_Map_pointer __nstart,
		     _Map_pointer __nfinish) _GLIBCXX_NOEXCEPT
    {
      for (_Map_pointer __n = __nstart; __n < __nfinish; ++__n)
 800101c:	d902      	bls.n	8001024 <_ZN10SPI1_classC1Ev+0x78>
      }

      // __p is not permitted to be a null pointer.
      void
      deallocate(pointer __p, size_type)
      { ::operator delete(__p); }
 800101e:	68e8      	ldr	r0, [r5, #12]
 8001020:	f001 fcb8 	bl	8002994 <_ZdlPv>
 8001024:	4628      	mov	r0, r5
 8001026:	f001 fcb5 	bl	8002994 <_ZdlPv>
{
	pStoreByteSpi = storeBytev;
	pGetByteSpi = getBytev;
 800102a:	4905      	ldr	r1, [pc, #20]	; (8001040 <_ZN10SPI1_classC1Ev+0x94>)
 800102c:	4805      	ldr	r0, [pc, #20]	; (8001044 <_ZN10SPI1_classC1Ev+0x98>)
	pDisableCSSpi = disableCSv;
 800102e:	4b06      	ldr	r3, [pc, #24]	; (8001048 <_ZN10SPI1_classC1Ev+0x9c>)
 8001030:	4a06      	ldr	r2, [pc, #24]	; (800104c <_ZN10SPI1_classC1Ev+0xa0>)
}

SPI1_class::SPI1_class()
{
	pStoreByteSpi = storeBytev;
	pGetByteSpi = getBytev;
 8001032:	6008      	str	r0, [r1, #0]
	pDisableCSSpi = disableCSv;
 8001034:	601a      	str	r2, [r3, #0]
}
 8001036:	4620      	mov	r0, r4
 8001038:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800103a:	bf00      	nop
 800103c:	08002f74 	.word	0x08002f74
 8001040:	2000009c 	.word	0x2000009c
 8001044:	080010e9 	.word	0x080010e9
 8001048:	20000098 	.word	0x20000098
 800104c:	08001051 	.word	0x08001051

08001050 <_ZL10disableCSvv>:
	int retVal = sp.getByte();
	return retVal;
}

static void disableCSv()
{
 8001050:	b538      	push	{r3, r4, r5, lr}
	}
}

SPI1_class& SPI1_class::getInstance()
{
	static SPI1_class sp;
 8001052:	4c14      	ldr	r4, [pc, #80]	; (80010a4 <_ZL10disableCSvv+0x54>)
 8001054:	6823      	ldr	r3, [r4, #0]
 8001056:	07db      	lsls	r3, r3, #31
 8001058:	d519      	bpl.n	800108e <_ZL10disableCSvv+0x3e>
    operator-(const _Deque_iterator<_Tp, _Ref, _Ptr>& __x,
	      const _Deque_iterator<_Tp, _Ref, _Ptr>& __y) _GLIBCXX_NOEXCEPT
    {
      return typename _Deque_iterator<_Tp, _Ref, _Ptr>::difference_type
	(_Deque_iterator<_Tp, _Ref, _Ptr>::_S_buffer_size())
	* (__x._M_node - __y._M_node - 1) + (__x._M_cur - __x._M_first)
 800105a:	4913      	ldr	r1, [pc, #76]	; (80010a8 <_ZL10disableCSvv+0x58>)
}

bool SPI1_class::isLastByte()
{
	bool retVal = false;
	if(m_outBuffer.size() < 1)
 800105c:	6a0c      	ldr	r4, [r1, #32]
 800105e:	6b08      	ldr	r0, [r1, #48]	; 0x30
 8001060:	6a4b      	ldr	r3, [r1, #36]	; 0x24
 8001062:	6a8a      	ldr	r2, [r1, #40]	; 0x28
 8001064:	1b00      	subs	r0, r0, r4
 8001066:	1a9a      	subs	r2, r3, r2
 8001068:	1080      	asrs	r0, r0, #2
 800106a:	69cc      	ldr	r4, [r1, #28]
 800106c:	694d      	ldr	r5, [r1, #20]
 800106e:	1e43      	subs	r3, r0, #1
 8001070:	10d2      	asrs	r2, r2, #3
 8001072:	eb02 1283 	add.w	r2, r2, r3, lsl #6
 8001076:	1b63      	subs	r3, r4, r5
 8001078:	eb02 03e3 	add.w	r3, r2, r3, asr #3
 800107c:	b933      	cbnz	r3, 800108c <_ZL10disableCSvv+0x3c>
	SPI1_class & sp = SPI1_class::getInstance();
	if(sp.isLastByte())
	{
		sp.disableCS();
	}
}
 800107e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	m_csSet.csPin = settings.csPin;
}

void SPI1_class::disableCS()
{
	GPIO_SetBits(m_csSet.gpioType,m_csSet.csPin);
 8001082:	6848      	ldr	r0, [r1, #4]
 8001084:	8909      	ldrh	r1, [r1, #8]
 8001086:	b289      	uxth	r1, r1
 8001088:	f7ff bd6c 	b.w	8000b64 <GPIO_SetBits>
 800108c:	bd38      	pop	{r3, r4, r5, pc}
	}
}

SPI1_class& SPI1_class::getInstance()
{
	static SPI1_class sp;
 800108e:	4806      	ldr	r0, [pc, #24]	; (80010a8 <_ZL10disableCSvv+0x58>)
 8001090:	f7ff ff8c 	bl	8000fac <_ZN10SPI1_classC1Ev>
 8001094:	2301      	movs	r3, #1
 8001096:	4a05      	ldr	r2, [pc, #20]	; (80010ac <_ZL10disableCSvv+0x5c>)
 8001098:	4905      	ldr	r1, [pc, #20]	; (80010b0 <_ZL10disableCSvv+0x60>)
 800109a:	4803      	ldr	r0, [pc, #12]	; (80010a8 <_ZL10disableCSvv+0x58>)
 800109c:	6023      	str	r3, [r4, #0]
 800109e:	f001 fc74 	bl	800298a <__aeabi_atexit>
 80010a2:	e7da      	b.n	800105a <_ZL10disableCSvv+0xa>
 80010a4:	200000a0 	.word	0x200000a0
 80010a8:	200000a4 	.word	0x200000a4
 80010ac:	20000000 	.word	0x20000000
 80010b0:	08000f45 	.word	0x08000f45

080010b4 <_ZN10SPI1_class11getInstanceEv>:
		sp.disableCS();
	}
}

SPI1_class& SPI1_class::getInstance()
{
 80010b4:	b510      	push	{r4, lr}
	static SPI1_class sp;
 80010b6:	4c08      	ldr	r4, [pc, #32]	; (80010d8 <_ZN10SPI1_class11getInstanceEv+0x24>)
 80010b8:	6823      	ldr	r3, [r4, #0]
 80010ba:	07db      	lsls	r3, r3, #31
 80010bc:	d409      	bmi.n	80010d2 <_ZN10SPI1_class11getInstanceEv+0x1e>
 80010be:	4807      	ldr	r0, [pc, #28]	; (80010dc <_ZN10SPI1_class11getInstanceEv+0x28>)
 80010c0:	f7ff ff74 	bl	8000fac <_ZN10SPI1_classC1Ev>
 80010c4:	2301      	movs	r3, #1
 80010c6:	4a06      	ldr	r2, [pc, #24]	; (80010e0 <_ZN10SPI1_class11getInstanceEv+0x2c>)
 80010c8:	4906      	ldr	r1, [pc, #24]	; (80010e4 <_ZN10SPI1_class11getInstanceEv+0x30>)
 80010ca:	4804      	ldr	r0, [pc, #16]	; (80010dc <_ZN10SPI1_class11getInstanceEv+0x28>)
 80010cc:	6023      	str	r3, [r4, #0]
 80010ce:	f001 fc5c 	bl	800298a <__aeabi_atexit>
	return sp;
}
 80010d2:	4802      	ldr	r0, [pc, #8]	; (80010dc <_ZN10SPI1_class11getInstanceEv+0x28>)
 80010d4:	bd10      	pop	{r4, pc}
 80010d6:	bf00      	nop
 80010d8:	200000a0 	.word	0x200000a0
 80010dc:	200000a4 	.word	0x200000a4
 80010e0:	20000000 	.word	0x20000000
 80010e4:	08000f45 	.word	0x08000f45

080010e8 <_ZL8getBytevv>:
	SPI1_class & sp = SPI1_class::getInstance();
	sp.storeByte(byte);
}

static int getBytev()
{
 80010e8:	b538      	push	{r3, r4, r5, lr}
	}
}

SPI1_class& SPI1_class::getInstance()
{
	static SPI1_class sp;
 80010ea:	4c22      	ldr	r4, [pc, #136]	; (8001174 <_ZL8getBytevv+0x8c>)
 80010ec:	6823      	ldr	r3, [r4, #0]
 80010ee:	07db      	lsls	r3, r3, #31
 80010f0:	d409      	bmi.n	8001106 <_ZL8getBytevv+0x1e>
 80010f2:	4821      	ldr	r0, [pc, #132]	; (8001178 <_ZL8getBytevv+0x90>)
 80010f4:	f7ff ff5a 	bl	8000fac <_ZN10SPI1_classC1Ev>
 80010f8:	2301      	movs	r3, #1
 80010fa:	4a20      	ldr	r2, [pc, #128]	; (800117c <_ZL8getBytevv+0x94>)
 80010fc:	4920      	ldr	r1, [pc, #128]	; (8001180 <_ZL8getBytevv+0x98>)
 80010fe:	481e      	ldr	r0, [pc, #120]	; (8001178 <_ZL8getBytevv+0x90>)
 8001100:	6023      	str	r3, [r4, #0]
 8001102:	f001 fc42 	bl	800298a <__aeabi_atexit>
	+ (__y._M_last - __y._M_cur);
 8001106:	4c1c      	ldr	r4, [pc, #112]	; (8001178 <_ZL8getBytevv+0x90>)

int SPI1_class::getByte()
{
	int msg = BUFFER_EMPTY;

	if(m_outBuffer.size() != 0)
 8001108:	6a20      	ldr	r0, [r4, #32]
 800110a:	6b21      	ldr	r1, [r4, #48]	; 0x30
 800110c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800110e:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 8001110:	1a09      	subs	r1, r1, r0
 8001112:	1a9a      	subs	r2, r3, r2
 8001114:	1089      	asrs	r1, r1, #2
 8001116:	6965      	ldr	r5, [r4, #20]
 8001118:	69e0      	ldr	r0, [r4, #28]
 800111a:	1e4b      	subs	r3, r1, #1
 800111c:	10d2      	asrs	r2, r2, #3
 800111e:	eb02 1283 	add.w	r2, r2, r3, lsl #6
 8001122:	1b43      	subs	r3, r0, r5
 8001124:	eb02 03e3 	add.w	r3, r2, r3, asr #3
 8001128:	b91b      	cbnz	r3, 8001132 <_ZL8getBytevv+0x4a>
	return state;
}

int SPI1_class::getByte()
{
	int msg = BUFFER_EMPTY;
 800112a:	f44f 7580 	mov.w	r5, #256	; 0x100
static int getBytev()
{
	SPI1_class & sp = SPI1_class::getInstance();
	int retVal = sp.getByte();
	return retVal;
}
 800112e:	4628      	mov	r0, r5
 8001130:	bd38      	pop	{r3, r4, r5, pc}
	{
		CommandS command = m_outBuffer.front();
		msg = command.msg;

		//update D/C# line
		GPIO_WriteBit(GPIOA,SPI1_D_C_PIN, (BitAction)command.d_c);
 8001132:	792a      	ldrb	r2, [r5, #4]
 8001134:	2140      	movs	r1, #64	; 0x40
 8001136:	4813      	ldr	r0, [pc, #76]	; (8001184 <_ZL8getBytevv+0x9c>)
{
	int msg = BUFFER_EMPTY;

	if(m_outBuffer.size() != 0)
	{
		CommandS command = m_outBuffer.front();
 8001138:	682d      	ldr	r5, [r5, #0]
		msg = command.msg;

		//update D/C# line
		GPIO_WriteBit(GPIOA,SPI1_D_C_PIN, (BitAction)command.d_c);
 800113a:	f7ff fd17 	bl	8000b6c <GPIO_WriteBit>
		GPIO_ResetBits(m_csSet.gpioType,m_csSet.csPin);
 800113e:	6860      	ldr	r0, [r4, #4]
 8001140:	8921      	ldrh	r1, [r4, #8]
 8001142:	b289      	uxth	r1, r1
 8001144:	f7ff fd10 	bl	8000b68 <GPIO_ResetBits>
       *  needed, it should be retrieved before pop_front() is called.
       */
      void
      pop_front() _GLIBCXX_NOEXCEPT
      {
	if (this->_M_impl._M_start._M_cur
 8001148:	69e2      	ldr	r2, [r4, #28]
	    != this->_M_impl._M_start._M_last - 1)
 800114a:	6963      	ldr	r3, [r4, #20]
       *  needed, it should be retrieved before pop_front() is called.
       */
      void
      pop_front() _GLIBCXX_NOEXCEPT
      {
	if (this->_M_impl._M_start._M_cur
 800114c:	3a08      	subs	r2, #8
 800114e:	4293      	cmp	r3, r2
 8001150:	d003      	beq.n	800115a <_ZL8getBytevv+0x72>
	    != this->_M_impl._M_start._M_last - 1)
	  {
	    _Alloc_traits::destroy(this->_M_impl,
	                           this->_M_impl._M_start._M_cur);
	    ++this->_M_impl._M_start._M_cur;
 8001152:	3308      	adds	r3, #8
 8001154:	6163      	str	r3, [r4, #20]
static int getBytev()
{
	SPI1_class & sp = SPI1_class::getInstance();
	int retVal = sp.getByte();
	return retVal;
}
 8001156:	4628      	mov	r0, r5
 8001158:	bd38      	pop	{r3, r4, r5, pc}
 800115a:	69a0      	ldr	r0, [r4, #24]
 800115c:	f001 fc1a 	bl	8002994 <_ZdlPv>
    _M_pop_front_aux()
    {
      _Alloc_traits::destroy(_M_get_Tp_allocator(),
			     this->_M_impl._M_start._M_cur);
      _M_deallocate_node(this->_M_impl._M_start._M_first);
      this->_M_impl._M_start._M_set_node(this->_M_impl._M_start._M_node + 1);
 8001160:	6a23      	ldr	r3, [r4, #32]
       *  immediately afterwards, based on _M_first and _M_last.
       */
      void
      _M_set_node(_Map_pointer __new_node) _GLIBCXX_NOEXCEPT
      {
	_M_node = __new_node;
 8001162:	1d1a      	adds	r2, r3, #4
 8001164:	6222      	str	r2, [r4, #32]
	_M_first = *__new_node;
 8001166:	685b      	ldr	r3, [r3, #4]
	_M_last = _M_first + difference_type(_S_buffer_size());
 8001168:	f503 7200 	add.w	r2, r3, #512	; 0x200
       */
      void
      _M_set_node(_Map_pointer __new_node) _GLIBCXX_NOEXCEPT
      {
	_M_node = __new_node;
	_M_first = *__new_node;
 800116c:	61a3      	str	r3, [r4, #24]
      this->_M_impl._M_start._M_cur = this->_M_impl._M_start._M_first;
 800116e:	6163      	str	r3, [r4, #20]
	_M_last = _M_first + difference_type(_S_buffer_size());
 8001170:	61e2      	str	r2, [r4, #28]
 8001172:	e7dc      	b.n	800112e <_ZL8getBytevv+0x46>
 8001174:	200000a0 	.word	0x200000a0
 8001178:	200000a4 	.word	0x200000a4
 800117c:	20000000 	.word	0x20000000
 8001180:	08000f45 	.word	0x08000f45
 8001184:	40010800 	.word	0x40010800

08001188 <_ZN10SPI1_class5setCSE6CSsetS>:
	pGetByteSpi = getBytev;
	pDisableCSSpi = disableCSv;
}

void SPI1_class::setCS(CSsetS settings)
{
 8001188:	b082      	sub	sp, #8
 800118a:	ab02      	add	r3, sp, #8
 800118c:	e903 0006 	stmdb	r3, {r1, r2}
	m_csSet.gpioType = settings.gpioType;
 8001190:	9a00      	ldr	r2, [sp, #0]
	m_csSet.csPin = settings.csPin;
 8001192:	f8bd 3004 	ldrh.w	r3, [sp, #4]
	pDisableCSSpi = disableCSv;
}

void SPI1_class::setCS(CSsetS settings)
{
	m_csSet.gpioType = settings.gpioType;
 8001196:	6042      	str	r2, [r0, #4]
	m_csSet.csPin = settings.csPin;
 8001198:	8103      	strh	r3, [r0, #8]
}
 800119a:	b002      	add	sp, #8
 800119c:	4770      	bx	lr
 800119e:	bf00      	nop

080011a0 <_ZN10SPI1_class12storeCommandEi8CommandE>:
void SPI1_class::storeByte(int byte)
{
}

void SPI1_class::storeCommand(int msg, CommandE cmd)
{
 80011a0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
       *  done in constant time.
       */
      void
      push_back(const value_type& __x)
      {
	if (this->_M_impl._M_finish._M_cur
 80011a4:	6ac4      	ldr	r4, [r0, #44]	; 0x2c
	    != this->_M_impl._M_finish._M_last - 1)
 80011a6:	6a43      	ldr	r3, [r0, #36]	; 0x24
       *  done in constant time.
       */
      void
      push_back(const value_type& __x)
      {
	if (this->_M_impl._M_finish._M_cur
 80011a8:	3c08      	subs	r4, #8
 80011aa:	42a3      	cmp	r3, r4
 80011ac:	d006      	beq.n	80011bc <_ZN10SPI1_class12storeCommandEi8CommandE+0x1c>
#else
      // _GLIBCXX_RESOLVE_LIB_DEFECTS
      // 402. wrong new expression in [some_] allocator::construct
      void 
      construct(pointer __p, const _Tp& __val) 
      { ::new((void *)__p) _Tp(__val); }
 80011ae:	b10b      	cbz	r3, 80011b4 <_ZN10SPI1_class12storeCommandEi8CommandE+0x14>
 80011b0:	6019      	str	r1, [r3, #0]
 80011b2:	711a      	strb	r2, [r3, #4]
	    != this->_M_impl._M_finish._M_last - 1)
	  {
	    _Alloc_traits::construct(this->_M_impl,
	                             this->_M_impl._M_finish._M_cur, __x);
	    ++this->_M_impl._M_finish._M_cur;
 80011b4:	3308      	adds	r3, #8
 80011b6:	6243      	str	r3, [r0, #36]	; 0x24
 80011b8:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80011bc:	4604      	mov	r4, r0
       */
      void
      _M_reserve_map_at_back(size_type __nodes_to_add = 1)
      {
	if (__nodes_to_add + 1 > this->_M_impl._M_map_size
	    - (this->_M_impl._M_finish._M_node - this->_M_impl._M_map))
 80011be:	6b07      	ldr	r7, [r0, #48]	; 0x30
 80011c0:	68c0      	ldr	r0, [r0, #12]
 80011c2:	4616      	mov	r6, r2
 80011c4:	6922      	ldr	r2, [r4, #16]
       *  (And consequently, %deque iterators.)
       */
      void
      _M_reserve_map_at_back(size_type __nodes_to_add = 1)
      {
	if (__nodes_to_add + 1 > this->_M_impl._M_map_size
 80011c6:	1a3b      	subs	r3, r7, r0
 80011c8:	eba2 03a3 	sub.w	r3, r2, r3, asr #2
 80011cc:	2b01      	cmp	r3, #1
 80011ce:	460d      	mov	r5, r1
 80011d0:	d913      	bls.n	80011fa <_ZN10SPI1_class12storeCommandEi8CommandE+0x5a>
      allocate(size_type __n, const void* = 0)
      { 
	if (__n > this->max_size())
	  std::__throw_bad_alloc();

	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
 80011d2:	f44f 7000 	mov.w	r0, #512	; 0x200
 80011d6:	f001 fbc7 	bl	8002968 <_Znwj>
      deque<_Tp, _Alloc>::
      _M_push_back_aux(const value_type& __t)
#endif
      {
	_M_reserve_map_at_back();
	*(this->_M_impl._M_finish._M_node + 1) = this->_M_allocate_node();
 80011da:	6078      	str	r0, [r7, #4]
#if __cplusplus >= 201103L
	    _Alloc_traits::construct(this->_M_impl,
	                             this->_M_impl._M_finish._M_cur,
			             std::forward<_Args>(__args)...);
#else
	    this->_M_impl.construct(this->_M_impl._M_finish._M_cur, __t);
 80011dc:	6a63      	ldr	r3, [r4, #36]	; 0x24
#else
      // _GLIBCXX_RESOLVE_LIB_DEFECTS
      // 402. wrong new expression in [some_] allocator::construct
      void 
      construct(pointer __p, const _Tp& __val) 
      { ::new((void *)__p) _Tp(__val); }
 80011de:	b10b      	cbz	r3, 80011e4 <_ZN10SPI1_class12storeCommandEi8CommandE+0x44>
 80011e0:	601d      	str	r5, [r3, #0]
 80011e2:	711e      	strb	r6, [r3, #4]
#endif
	    this->_M_impl._M_finish._M_set_node(this->_M_impl._M_finish._M_node
						+ 1);
 80011e4:	6b23      	ldr	r3, [r4, #48]	; 0x30
       *  immediately afterwards, based on _M_first and _M_last.
       */
      void
      _M_set_node(_Map_pointer __new_node) _GLIBCXX_NOEXCEPT
      {
	_M_node = __new_node;
 80011e6:	1d1a      	adds	r2, r3, #4
 80011e8:	6322      	str	r2, [r4, #48]	; 0x30
	_M_first = *__new_node;
 80011ea:	685b      	ldr	r3, [r3, #4]
	_M_last = _M_first + difference_type(_S_buffer_size());
 80011ec:	f503 7200 	add.w	r2, r3, #512	; 0x200
       */
      void
      _M_set_node(_Map_pointer __new_node) _GLIBCXX_NOEXCEPT
      {
	_M_node = __new_node;
	_M_first = *__new_node;
 80011f0:	62a3      	str	r3, [r4, #40]	; 0x28
	    this->_M_impl._M_finish._M_cur = this->_M_impl._M_finish._M_first;
 80011f2:	6263      	str	r3, [r4, #36]	; 0x24
	_M_last = _M_first + difference_type(_S_buffer_size());
 80011f4:	62e2      	str	r2, [r4, #44]	; 0x2c
 80011f6:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    void
    deque<_Tp, _Alloc>::
    _M_reallocate_map(size_type __nodes_to_add, bool __add_at_front)
    {
      const size_type __old_num_nodes
	= this->_M_impl._M_finish._M_node - this->_M_impl._M_start._M_node + 1;
 80011fa:	6a21      	ldr	r1, [r4, #32]
 80011fc:	ebc1 0807 	rsb	r8, r1, r7
 8001200:	ea4f 08a8 	mov.w	r8, r8, asr #2
 8001204:	f108 0801 	add.w	r8, r8, #1
      const size_type __new_num_nodes = __old_num_nodes + __nodes_to_add;
 8001208:	f108 0a01 	add.w	sl, r8, #1

      _Map_pointer __new_nstart;
      if (this->_M_impl._M_map_size > 2 * __new_num_nodes)
 800120c:	ebb2 0f4a 	cmp.w	r2, sl, lsl #1
 8001210:	d924      	bls.n	800125c <_ZN10SPI1_class12storeCommandEi8CommandE+0xbc>
	{
	  __new_nstart = this->_M_impl._M_map + (this->_M_impl._M_map_size
 8001212:	ebca 0302 	rsb	r3, sl, r2
 8001216:	085b      	lsrs	r3, r3, #1
 8001218:	eb00 0983 	add.w	r9, r0, r3, lsl #2
#if __cplusplus >= 201103L
	  // trivial types can have deleted assignment
	  static_assert( is_copy_assignable<_Tp>::value,
	                 "type is not assignable" );
#endif
	  const ptrdiff_t _Num = __last - __first;
 800121c:	1d3a      	adds	r2, r7, #4
					 - __new_num_nodes) / 2
	                 + (__add_at_front ? __nodes_to_add : 0);
	  if (__new_nstart < this->_M_impl._M_start._M_node)
 800121e:	4549      	cmp	r1, r9
 8001220:	eba2 0201 	sub.w	r2, r2, r1
 8001224:	d93d      	bls.n	80012a2 <_ZN10SPI1_class12storeCommandEi8CommandE+0x102>
	  if (_Num)
 8001226:	0893      	lsrs	r3, r2, #2
 8001228:	d002      	beq.n	8001230 <_ZN10SPI1_class12storeCommandEi8CommandE+0x90>
	    __builtin_memmove(__result, __first, sizeof(_Tp) * _Num);
 800122a:	4648      	mov	r0, r9
 800122c:	f001 fd54 	bl	8002cd8 <memmove>
       *  immediately afterwards, based on _M_first and _M_last.
       */
      void
      _M_set_node(_Map_pointer __new_node) _GLIBCXX_NOEXCEPT
      {
	_M_node = __new_node;
 8001230:	f8c4 9020 	str.w	r9, [r4, #32]
	_M_first = *__new_node;
 8001234:	f8d9 3000 	ldr.w	r3, [r9]
	  this->_M_impl._M_map = __new_map;
	  this->_M_impl._M_map_size = __new_map_size;
	}

      this->_M_impl._M_start._M_set_node(__new_nstart);
      this->_M_impl._M_finish._M_set_node(__new_nstart + __old_num_nodes - 1);
 8001238:	f108 4880 	add.w	r8, r8, #1073741824	; 0x40000000
 800123c:	f108 38ff 	add.w	r8, r8, #4294967295
	_M_last = _M_first + difference_type(_S_buffer_size());
 8001240:	f503 7200 	add.w	r2, r3, #512	; 0x200
 8001244:	eb09 0788 	add.w	r7, r9, r8, lsl #2
 8001248:	61e2      	str	r2, [r4, #28]
       *  immediately afterwards, based on _M_first and _M_last.
       */
      void
      _M_set_node(_Map_pointer __new_node) _GLIBCXX_NOEXCEPT
      {
	_M_node = __new_node;
 800124a:	6327      	str	r7, [r4, #48]	; 0x30
	_M_first = *__new_node;
 800124c:	61a3      	str	r3, [r4, #24]
 800124e:	f859 3028 	ldr.w	r3, [r9, r8, lsl #2]
	_M_last = _M_first + difference_type(_S_buffer_size());
 8001252:	f503 7200 	add.w	r2, r3, #512	; 0x200
       */
      void
      _M_set_node(_Map_pointer __new_node) _GLIBCXX_NOEXCEPT
      {
	_M_node = __new_node;
	_M_first = *__new_node;
 8001256:	62a3      	str	r3, [r4, #40]	; 0x28
	_M_last = _M_first + difference_type(_S_buffer_size());
 8001258:	62e2      	str	r2, [r4, #44]	; 0x2c
 800125a:	e7ba      	b.n	80011d2 <_ZN10SPI1_class12storeCommandEi8CommandE+0x32>
    max(const _Tp& __a, const _Tp& __b)
    {
      // concept requirements
      __glibcxx_function_requires(_LessThanComparableConcept<_Tp>)
      //return  __a < __b ? __b : __a;
      if (__a < __b)
 800125c:	b1da      	cbz	r2, 8001296 <_ZN10SPI1_class12storeCommandEi8CommandE+0xf6>
	}
      else
	{
	  size_type __new_map_size = this->_M_impl._M_map_size
	                             + std::max(this->_M_impl._M_map_size,
						__nodes_to_add) + 2;
 800125e:	0052      	lsls	r2, r2, #1
 8001260:	1c97      	adds	r7, r2, #2
      // NB: __n is permitted to be 0.  The C++ standard says nothing
      // about what the return value is when __n == 0.
      pointer
      allocate(size_type __n, const void* = 0)
      { 
	if (__n > this->max_size())
 8001262:	f1b7 4f80 	cmp.w	r7, #1073741824	; 0x40000000
 8001266:	d225      	bcs.n	80012b4 <_ZN10SPI1_class12storeCommandEi8CommandE+0x114>
	  std::__throw_bad_alloc();

	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
 8001268:	00b8      	lsls	r0, r7, #2
 800126a:	f001 fb7d 	bl	8002968 <_Znwj>
#if __cplusplus >= 201103L
	  // trivial types can have deleted assignment
	  static_assert( is_copy_assignable<_Tp>::value,
	                 "type is not assignable" );
#endif
	  const ptrdiff_t _Num = __last - __first;
 800126e:	6b23      	ldr	r3, [r4, #48]	; 0x30

	  _Map_pointer __new_map = this->_M_allocate_map(__new_map_size);
	  __new_nstart = __new_map + (__new_map_size - __new_num_nodes) / 2
	                 + (__add_at_front ? __nodes_to_add : 0);
	  std::copy(this->_M_impl._M_start._M_node,
 8001270:	6a21      	ldr	r1, [r4, #32]
 8001272:	3304      	adds	r3, #4
	  size_type __new_map_size = this->_M_impl._M_map_size
	                             + std::max(this->_M_impl._M_map_size,
						__nodes_to_add) + 2;

	  _Map_pointer __new_map = this->_M_allocate_map(__new_map_size);
	  __new_nstart = __new_map + (__new_map_size - __new_num_nodes) / 2
 8001274:	ebca 0907 	rsb	r9, sl, r7
 8001278:	1a5a      	subs	r2, r3, r1
 800127a:	ea4f 0959 	mov.w	r9, r9, lsr #1
	  if (_Num)
 800127e:	0893      	lsrs	r3, r2, #2
 8001280:	4683      	mov	fp, r0
 8001282:	eb00 0989 	add.w	r9, r0, r9, lsl #2
 8001286:	d108      	bne.n	800129a <_ZN10SPI1_class12storeCommandEi8CommandE+0xfa>
      }

      // __p is not permitted to be a null pointer.
      void
      deallocate(pointer __p, size_type)
      { ::operator delete(__p); }
 8001288:	68e0      	ldr	r0, [r4, #12]
 800128a:	f001 fb83 	bl	8002994 <_ZdlPv>
	  std::copy(this->_M_impl._M_start._M_node,
		    this->_M_impl._M_finish._M_node + 1,
		    __new_nstart);
	  _M_deallocate_map(this->_M_impl._M_map, this->_M_impl._M_map_size);

	  this->_M_impl._M_map = __new_map;
 800128e:	f8c4 b00c 	str.w	fp, [r4, #12]
	  this->_M_impl._M_map_size = __new_map_size;
 8001292:	6127      	str	r7, [r4, #16]
 8001294:	e7cc      	b.n	8001230 <_ZN10SPI1_class12storeCommandEi8CommandE+0x90>
	}
      else
	{
	  size_type __new_map_size = this->_M_impl._M_map_size
	                             + std::max(this->_M_impl._M_map_size,
						__nodes_to_add) + 2;
 8001296:	2703      	movs	r7, #3
 8001298:	e7e6      	b.n	8001268 <_ZN10SPI1_class12storeCommandEi8CommandE+0xc8>
	    __builtin_memmove(__result, __first, sizeof(_Tp) * _Num);
 800129a:	4648      	mov	r0, r9
 800129c:	f001 fd1c 	bl	8002cd8 <memmove>
 80012a0:	e7f2      	b.n	8001288 <_ZN10SPI1_class12storeCommandEi8CommandE+0xe8>
	  // trivial types can have deleted assignment
	  static_assert( is_copy_assignable<_Tp>::value,
	                 "type is not assignable" );
#endif
	  const ptrdiff_t _Num = __last - __first;
	  if (_Num)
 80012a2:	0890      	lsrs	r0, r2, #2
	  if (__new_nstart < this->_M_impl._M_start._M_node)
	    std::copy(this->_M_impl._M_start._M_node,
		      this->_M_impl._M_finish._M_node + 1,
		      __new_nstart);
	  else
	    std::copy_backward(this->_M_impl._M_start._M_node,
 80012a4:	ea4f 0388 	mov.w	r3, r8, lsl #2
 80012a8:	d0c2      	beq.n	8001230 <_ZN10SPI1_class12storeCommandEi8CommandE+0x90>
	    __builtin_memmove(__result - _Num, __first, sizeof(_Tp) * _Num);
 80012aa:	1a98      	subs	r0, r3, r2
 80012ac:	4448      	add	r0, r9
 80012ae:	f001 fd13 	bl	8002cd8 <memmove>
 80012b2:	e7bd      	b.n	8001230 <_ZN10SPI1_class12storeCommandEi8CommandE+0x90>
      // about what the return value is when __n == 0.
      pointer
      allocate(size_type __n, const void* = 0)
      { 
	if (__n > this->max_size())
	  std::__throw_bad_alloc();
 80012b4:	f001 fb70 	bl	8002998 <_ZSt17__throw_bad_allocv>

080012b8 <SPI1_IRQHandler>:
{

}

extern "C" void SPI1_IRQHandler()
{
 80012b8:	b508      	push	{r3, lr}
	pDisableCSSpi();
 80012ba:	4b12      	ldr	r3, [pc, #72]	; (8001304 <SPI1_IRQHandler+0x4c>)
 80012bc:	681b      	ldr	r3, [r3, #0]
 80012be:	4798      	blx	r3

	if(SPI_I2S_GetITStatus(SPI1,SPI_I2S_IT_TXE) != RESET)
 80012c0:	2171      	movs	r1, #113	; 0x71
 80012c2:	4811      	ldr	r0, [pc, #68]	; (8001308 <SPI1_IRQHandler+0x50>)
 80012c4:	f7ff fd26 	bl	8000d14 <SPI_I2S_GetITStatus>
 80012c8:	b958      	cbnz	r0, 80012e2 <SPI1_IRQHandler+0x2a>
		{
			 SPI_I2S_ITConfig(SPI1, SPI_I2S_IT_TXE, DISABLE);
		}
	}

	if (SPI_I2S_GetITStatus(SPI1, SPI_I2S_IT_RXNE) != RESET)
 80012ca:	2160      	movs	r1, #96	; 0x60
 80012cc:	480e      	ldr	r0, [pc, #56]	; (8001308 <SPI1_IRQHandler+0x50>)
 80012ce:	f7ff fd21 	bl	8000d14 <SPI_I2S_GetITStatus>
 80012d2:	b900      	cbnz	r0, 80012d6 <SPI1_IRQHandler+0x1e>
 80012d4:	bd08      	pop	{r3, pc}
	{
		SPI_I2S_ClearFlag(SPI1,SPI_I2S_FLAG_RXNE);
 80012d6:	2101      	movs	r1, #1
 80012d8:	480b      	ldr	r0, [pc, #44]	; (8001308 <SPI1_IRQHandler+0x50>)
	}
}
 80012da:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		}
	}

	if (SPI_I2S_GetITStatus(SPI1, SPI_I2S_IT_RXNE) != RESET)
	{
		SPI_I2S_ClearFlag(SPI1,SPI_I2S_FLAG_RXNE);
 80012de:	f7ff bd15 	b.w	8000d0c <SPI_I2S_ClearFlag>
{
	pDisableCSSpi();

	if(SPI_I2S_GetITStatus(SPI1,SPI_I2S_IT_TXE) != RESET)
	{
		int c = pGetByteSpi();
 80012e2:	4b0a      	ldr	r3, [pc, #40]	; (800130c <SPI1_IRQHandler+0x54>)
 80012e4:	681b      	ldr	r3, [r3, #0]
 80012e6:	4798      	blx	r3
		if(c <= 0xFF)
 80012e8:	28ff      	cmp	r0, #255	; 0xff
 80012ea:	dc04      	bgt.n	80012f6 <SPI1_IRQHandler+0x3e>
		{
			SPI_I2S_SendData(SPI1,(uint8_t)c);
 80012ec:	b2c1      	uxtb	r1, r0
 80012ee:	4806      	ldr	r0, [pc, #24]	; (8001308 <SPI1_IRQHandler+0x50>)
 80012f0:	f7ff fcf8 	bl	8000ce4 <SPI_I2S_SendData>
 80012f4:	e7e9      	b.n	80012ca <SPI1_IRQHandler+0x12>
		}
		else
		{
			 SPI_I2S_ITConfig(SPI1, SPI_I2S_IT_TXE, DISABLE);
 80012f6:	2200      	movs	r2, #0
 80012f8:	2171      	movs	r1, #113	; 0x71
 80012fa:	4803      	ldr	r0, [pc, #12]	; (8001308 <SPI1_IRQHandler+0x50>)
 80012fc:	f7ff fce2 	bl	8000cc4 <SPI_I2S_ITConfig>
 8001300:	e7e3      	b.n	80012ca <SPI1_IRQHandler+0x12>
 8001302:	bf00      	nop
 8001304:	20000098 	.word	0x20000098
 8001308:	40013000 	.word	0x40013000
 800130c:	2000009c 	.word	0x2000009c

08001310 <_ZN10SPI2_classD1Ev>:
}

SPI2_class::~SPI2_class()
{

}
 8001310:	4770      	bx	lr
 8001312:	bf00      	nop

08001314 <_ZN10SPI2_class6isBusyEv>:
{
	GPIO_SetBits(m_csSet.gpioType,m_csSet.csPin);
}

bool SPI2_class::isBusy()
{
 8001314:	b508      	push	{r3, lr}
	bool state = SPI_I2S_GetITStatus(SPI2,SPI_I2S_IT_TXE);
 8001316:	2171      	movs	r1, #113	; 0x71
 8001318:	4803      	ldr	r0, [pc, #12]	; (8001328 <_ZN10SPI2_class6isBusyEv+0x14>)
 800131a:	f7ff fcfb 	bl	8000d14 <SPI_I2S_GetITStatus>
	return state;
}
 800131e:	3000      	adds	r0, #0
 8001320:	bf18      	it	ne
 8001322:	2001      	movne	r0, #1
 8001324:	bd08      	pop	{r3, pc}
 8001326:	bf00      	nop
 8001328:	40003800 	.word	0x40003800

0800132c <_ZN10SPI2_classD0Ev>:
		retVal =  true;
	}
	return retVal;
}

SPI2_class::~SPI2_class()
 800132c:	b510      	push	{r4, lr}
 800132e:	4604      	mov	r4, r0
{

}
 8001330:	f001 fb30 	bl	8002994 <_ZdlPv>
 8001334:	4620      	mov	r0, r4
 8001336:	bd10      	pop	{r4, pc}

08001338 <_ZN10SPI2_class4sendEv>:
		printf("m_inBuffer NULL\n\r");
	}
}

void SPI2_class::send()
{
 8001338:	b510      	push	{r4, lr}
	SPI_I2S_ITConfig(SPI2,SPI_I2S_IT_TXE,ENABLE);
 800133a:	4c06      	ldr	r4, [pc, #24]	; (8001354 <_ZN10SPI2_class4sendEv+0x1c>)
 800133c:	2201      	movs	r2, #1
 800133e:	4620      	mov	r0, r4
 8001340:	2171      	movs	r1, #113	; 0x71
 8001342:	f7ff fcbf 	bl	8000cc4 <SPI_I2S_ITConfig>
	SPI_I2S_ITConfig(SPI2,SPI_I2S_IT_RXNE,ENABLE);
 8001346:	4620      	mov	r0, r4
}
 8001348:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
}

void SPI2_class::send()
{
	SPI_I2S_ITConfig(SPI2,SPI_I2S_IT_TXE,ENABLE);
	SPI_I2S_ITConfig(SPI2,SPI_I2S_IT_RXNE,ENABLE);
 800134c:	2201      	movs	r2, #1
 800134e:	2160      	movs	r1, #96	; 0x60
 8001350:	f7ff bcb8 	b.w	8000cc4 <SPI_I2S_ITConfig>
 8001354:	40003800 	.word	0x40003800

08001358 <_ZN10SPI2_class7getByteEv>:
}

int SPI2_class::getByte()
{
	int byteToSend = BUFFER_EMPTY;
	if(m_outBuffer != 0)
 8001358:	6841      	ldr	r1, [r0, #4]
	bool state = SPI_I2S_GetITStatus(SPI2,SPI_I2S_IT_TXE);
	return state;
}

int SPI2_class::getByte()
{
 800135a:	b538      	push	{r3, r4, r5, lr}
	int byteToSend = BUFFER_EMPTY;
	if(m_outBuffer != 0)
 800135c:	b329      	cbz	r1, 80013aa <_ZN10SPI2_class7getByteEv+0x52>
	{
		if(m_outBuffer->size() != 0 )
 800135e:	694d      	ldr	r5, [r1, #20]
 8001360:	4604      	mov	r4, r0
 8001362:	6a48      	ldr	r0, [r1, #36]	; 0x24
 8001364:	698b      	ldr	r3, [r1, #24]
 8001366:	69ca      	ldr	r2, [r1, #28]
 8001368:	1b40      	subs	r0, r0, r5
 800136a:	1a9a      	subs	r2, r3, r2
	      const _Deque_iterator<_Tp, _Ref, _Ptr>& __y) _GLIBCXX_NOEXCEPT
    {
      return typename _Deque_iterator<_Tp, _Ref, _Ptr>::difference_type
	(_Deque_iterator<_Tp, _Ref, _Ptr>::_S_buffer_size())
	* (__x._M_node - __y._M_node - 1) + (__x._M_cur - __x._M_first)
	+ (__y._M_last - __y._M_cur);
 800136c:	688d      	ldr	r5, [r1, #8]
 800136e:	1080      	asrs	r0, r0, #2
 8001370:	6909      	ldr	r1, [r1, #16]
 8001372:	1e43      	subs	r3, r0, #1
 8001374:	1092      	asrs	r2, r2, #2
 8001376:	eb02 12c3 	add.w	r2, r2, r3, lsl #7
 800137a:	1b4b      	subs	r3, r1, r5
 800137c:	eb02 03a3 	add.w	r3, r2, r3, asr #2
 8001380:	b91b      	cbnz	r3, 800138a <_ZN10SPI2_class7getByteEv+0x32>
	return state;
}

int SPI2_class::getByte()
{
	int byteToSend = BUFFER_EMPTY;
 8001382:	f44f 7580 	mov.w	r5, #256	; 0x100
	else
	{
		printf("m_outBuffer NULL\n\r");
	}
	return byteToSend;
}
 8001386:	4628      	mov	r0, r5
 8001388:	bd38      	pop	{r3, r4, r5, pc}
	if(m_outBuffer != 0)
	{
		if(m_outBuffer->size() != 0 )
		{
			byteToSend = m_outBuffer->front();
			GPIO_ResetBits(m_csSet.gpioType,m_csSet.csPin);
 800138a:	68e0      	ldr	r0, [r4, #12]
 800138c:	8a21      	ldrh	r1, [r4, #16]
	int byteToSend = BUFFER_EMPTY;
	if(m_outBuffer != 0)
	{
		if(m_outBuffer->size() != 0 )
		{
			byteToSend = m_outBuffer->front();
 800138e:	682d      	ldr	r5, [r5, #0]
			GPIO_ResetBits(m_csSet.gpioType,m_csSet.csPin);
 8001390:	b289      	uxth	r1, r1
 8001392:	f7ff fbe9 	bl	8000b68 <GPIO_ResetBits>
			m_outBuffer->pop();
 8001396:	6864      	ldr	r4, [r4, #4]
       *  needed, it should be retrieved before pop_front() is called.
       */
      void
      pop_front() _GLIBCXX_NOEXCEPT
      {
	if (this->_M_impl._M_start._M_cur
 8001398:	6922      	ldr	r2, [r4, #16]
	    != this->_M_impl._M_start._M_last - 1)
 800139a:	68a3      	ldr	r3, [r4, #8]
       *  needed, it should be retrieved before pop_front() is called.
       */
      void
      pop_front() _GLIBCXX_NOEXCEPT
      {
	if (this->_M_impl._M_start._M_cur
 800139c:	3a04      	subs	r2, #4
 800139e:	4293      	cmp	r3, r2
 80013a0:	d00a      	beq.n	80013b8 <_ZN10SPI2_class7getByteEv+0x60>
	    != this->_M_impl._M_start._M_last - 1)
	  {
	    _Alloc_traits::destroy(this->_M_impl,
	                           this->_M_impl._M_start._M_cur);
	    ++this->_M_impl._M_start._M_cur;
 80013a2:	3304      	adds	r3, #4
 80013a4:	60a3      	str	r3, [r4, #8]
	else
	{
		printf("m_outBuffer NULL\n\r");
	}
	return byteToSend;
}
 80013a6:	4628      	mov	r0, r5
 80013a8:	bd38      	pop	{r3, r4, r5, pc}
	return state;
}

int SPI2_class::getByte()
{
	int byteToSend = BUFFER_EMPTY;
 80013aa:	f44f 7580 	mov.w	r5, #256	; 0x100
			m_outBuffer->pop();
		}
	}
	else
	{
		printf("m_outBuffer NULL\n\r");
 80013ae:	4809      	ldr	r0, [pc, #36]	; (80013d4 <_ZN10SPI2_class7getByteEv+0x7c>)
 80013b0:	f001 f946 	bl	8002640 <iprintf>
	}
	return byteToSend;
}
 80013b4:	4628      	mov	r0, r5
 80013b6:	bd38      	pop	{r3, r4, r5, pc}
      }

      // __p is not permitted to be a null pointer.
      void
      deallocate(pointer __p, size_type)
      { ::operator delete(__p); }
 80013b8:	68e0      	ldr	r0, [r4, #12]
 80013ba:	f001 faeb 	bl	8002994 <_ZdlPv>
    _M_pop_front_aux()
    {
      _Alloc_traits::destroy(_M_get_Tp_allocator(),
			     this->_M_impl._M_start._M_cur);
      _M_deallocate_node(this->_M_impl._M_start._M_first);
      this->_M_impl._M_start._M_set_node(this->_M_impl._M_start._M_node + 1);
 80013be:	6963      	ldr	r3, [r4, #20]
       *  immediately afterwards, based on _M_first and _M_last.
       */
      void
      _M_set_node(_Map_pointer __new_node) _GLIBCXX_NOEXCEPT
      {
	_M_node = __new_node;
 80013c0:	1d1a      	adds	r2, r3, #4
 80013c2:	6162      	str	r2, [r4, #20]
	_M_first = *__new_node;
 80013c4:	685b      	ldr	r3, [r3, #4]
	_M_last = _M_first + difference_type(_S_buffer_size());
 80013c6:	f503 7200 	add.w	r2, r3, #512	; 0x200
       */
      void
      _M_set_node(_Map_pointer __new_node) _GLIBCXX_NOEXCEPT
      {
	_M_node = __new_node;
	_M_first = *__new_node;
 80013ca:	60e3      	str	r3, [r4, #12]
      this->_M_impl._M_start._M_cur = this->_M_impl._M_start._M_first;
 80013cc:	60a3      	str	r3, [r4, #8]
	_M_last = _M_first + difference_type(_S_buffer_size());
 80013ce:	6122      	str	r2, [r4, #16]
 80013d0:	e7d9      	b.n	8001386 <_ZN10SPI2_class7getByteEv+0x2e>
 80013d2:	bf00      	nop
 80013d4:	08002fac 	.word	0x08002fac

080013d8 <_ZL9disableCSv>:
	int retVal = sp.getByte();
	return retVal;
}

static void disableCS()
{
 80013d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	}
}

SPI2_class& SPI2_class::getInstance()
{
	static SPI2_class sp;
 80013da:	4d1c      	ldr	r5, [pc, #112]	; (800144c <_ZL9disableCSv+0x74>)
	return sp;
}

SPI2_class::SPI2_class()
 80013dc:	4c1c      	ldr	r4, [pc, #112]	; (8001450 <_ZL9disableCSv+0x78>)
	}
}

SPI2_class& SPI2_class::getInstance()
{
	static SPI2_class sp;
 80013de:	682b      	ldr	r3, [r5, #0]
 80013e0:	f013 0301 	ands.w	r3, r3, #1
 80013e4:	d01a      	beq.n	800141c <_ZL9disableCSv+0x44>
}

bool SPI2_class::isLastByte()
{
	bool retVal = false;
	if(m_outBuffer->size() < 1)
 80013e6:	6860      	ldr	r0, [r4, #4]
 80013e8:	4d19      	ldr	r5, [pc, #100]	; (8001450 <_ZL9disableCSv+0x78>)
 80013ea:	6944      	ldr	r4, [r0, #20]
 80013ec:	6a41      	ldr	r1, [r0, #36]	; 0x24
 80013ee:	6983      	ldr	r3, [r0, #24]
 80013f0:	69c2      	ldr	r2, [r0, #28]
 80013f2:	1b09      	subs	r1, r1, r4
 80013f4:	1a9a      	subs	r2, r3, r2
 80013f6:	6904      	ldr	r4, [r0, #16]
 80013f8:	1089      	asrs	r1, r1, #2
 80013fa:	6880      	ldr	r0, [r0, #8]
 80013fc:	1e4b      	subs	r3, r1, #1
 80013fe:	1092      	asrs	r2, r2, #2
 8001400:	eb02 12c3 	add.w	r2, r2, r3, lsl #7
 8001404:	1a23      	subs	r3, r4, r0
 8001406:	eb02 03a3 	add.w	r3, r2, r3, asr #2
 800140a:	b933      	cbnz	r3, 800141a <_ZL9disableCSv+0x42>
	m_csSet.csPin = settings.csPin;
}

void SPI2_class::disableCS()
{
	GPIO_SetBits(m_csSet.gpioType,m_csSet.csPin);
 800140c:	68e8      	ldr	r0, [r5, #12]
 800140e:	8a29      	ldrh	r1, [r5, #16]
	SPI2_class & sp = SPI2_class::getInstance();
	if(sp.isLastByte())
	{
		sp.disableCS();
	}
}
 8001410:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	m_csSet.csPin = settings.csPin;
}

void SPI2_class::disableCS()
{
	GPIO_SetBits(m_csSet.gpioType,m_csSet.csPin);
 8001414:	b289      	uxth	r1, r1
 8001416:	f7ff bba5 	b.w	8000b64 <GPIO_SetBits>
 800141a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

SPI2_class::SPI2_class()
{
	m_inBuffer = 0;
	m_outBuffer = 0;
	pStoreByte = ::storeByte;
 800141c:	4f0d      	ldr	r7, [pc, #52]	; (8001454 <_ZL9disableCSv+0x7c>)
 800141e:	f8df e054 	ldr.w	lr, [pc, #84]	; 8001474 <_ZL9disableCSv+0x9c>
{
	static SPI2_class sp;
	return sp;
}

SPI2_class::SPI2_class()
 8001422:	480d      	ldr	r0, [pc, #52]	; (8001458 <_ZL9disableCSv+0x80>)
{
	m_inBuffer = 0;
	m_outBuffer = 0;
	pStoreByte = ::storeByte;
	pGetByte = ::getByte;
 8001424:	4a0d      	ldr	r2, [pc, #52]	; (800145c <_ZL9disableCSv+0x84>)
 8001426:	490e      	ldr	r1, [pc, #56]	; (8001460 <_ZL9disableCSv+0x88>)
	pDisableCS = ::disableCS;
 8001428:	4e0e      	ldr	r6, [pc, #56]	; (8001464 <_ZL9disableCSv+0x8c>)

SPI2_class::SPI2_class()
{
	m_inBuffer = 0;
	m_outBuffer = 0;
	pStoreByte = ::storeByte;
 800142a:	f8c7 e000 	str.w	lr, [r7]
	pGetByte = ::getByte;
	pDisableCS = ::disableCS;
 800142e:	4f0e      	ldr	r7, [pc, #56]	; (8001468 <_ZL9disableCSv+0x90>)
	return sp;
}

SPI2_class::SPI2_class()
{
	m_inBuffer = 0;
 8001430:	60a3      	str	r3, [r4, #8]
	m_outBuffer = 0;
 8001432:	6063      	str	r3, [r4, #4]
{
	static SPI2_class sp;
	return sp;
}

SPI2_class::SPI2_class()
 8001434:	6020      	str	r0, [r4, #0]
	}
}

SPI2_class& SPI2_class::getInstance()
{
	static SPI2_class sp;
 8001436:	2301      	movs	r3, #1
SPI2_class::SPI2_class()
{
	m_inBuffer = 0;
	m_outBuffer = 0;
	pStoreByte = ::storeByte;
	pGetByte = ::getByte;
 8001438:	6011      	str	r1, [r2, #0]
	}
}

SPI2_class& SPI2_class::getInstance()
{
	static SPI2_class sp;
 800143a:	4620      	mov	r0, r4
 800143c:	4a0b      	ldr	r2, [pc, #44]	; (800146c <_ZL9disableCSv+0x94>)
 800143e:	490c      	ldr	r1, [pc, #48]	; (8001470 <_ZL9disableCSv+0x98>)
{
	m_inBuffer = 0;
	m_outBuffer = 0;
	pStoreByte = ::storeByte;
	pGetByte = ::getByte;
	pDisableCS = ::disableCS;
 8001440:	6037      	str	r7, [r6, #0]
	}
}

SPI2_class& SPI2_class::getInstance()
{
	static SPI2_class sp;
 8001442:	602b      	str	r3, [r5, #0]
 8001444:	f001 faa1 	bl	800298a <__aeabi_atexit>
 8001448:	e7cd      	b.n	80013e6 <_ZL9disableCSv+0xe>
 800144a:	bf00      	nop
 800144c:	200000e4 	.word	0x200000e4
 8001450:	200000e8 	.word	0x200000e8
 8001454:	200000d8 	.word	0x200000d8
 8001458:	08002f94 	.word	0x08002f94
 800145c:	200000dc 	.word	0x200000dc
 8001460:	08001479 	.word	0x08001479
 8001464:	200000e0 	.word	0x200000e0
 8001468:	080013d9 	.word	0x080013d9
 800146c:	20000000 	.word	0x20000000
 8001470:	08001311 	.word	0x08001311
 8001474:	08001791 	.word	0x08001791

08001478 <_ZL7getBytev>:
	SPI2_class & sp = SPI2_class::getInstance();
	sp.storeByte(byte);
}

static int getByte()
{
 8001478:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	}
}

SPI2_class& SPI2_class::getInstance()
{
	static SPI2_class sp;
 800147a:	4d2c      	ldr	r5, [pc, #176]	; (800152c <_ZL7getBytev+0xb4>)
	return sp;
}

SPI2_class::SPI2_class()
 800147c:	4c2c      	ldr	r4, [pc, #176]	; (8001530 <_ZL7getBytev+0xb8>)
	}
}

SPI2_class& SPI2_class::getInstance()
{
	static SPI2_class sp;
 800147e:	682b      	ldr	r3, [r5, #0]
 8001480:	f013 0301 	ands.w	r3, r3, #1
 8001484:	d115      	bne.n	80014b2 <_ZL7getBytev+0x3a>

SPI2_class::SPI2_class()
{
	m_inBuffer = 0;
	m_outBuffer = 0;
	pStoreByte = ::storeByte;
 8001486:	4f2b      	ldr	r7, [pc, #172]	; (8001534 <_ZL7getBytev+0xbc>)
 8001488:	f8df e0cc 	ldr.w	lr, [pc, #204]	; 8001558 <_ZL7getBytev+0xe0>
{
	static SPI2_class sp;
	return sp;
}

SPI2_class::SPI2_class()
 800148c:	482a      	ldr	r0, [pc, #168]	; (8001538 <_ZL7getBytev+0xc0>)
{
	m_inBuffer = 0;
	m_outBuffer = 0;
	pStoreByte = ::storeByte;
	pGetByte = ::getByte;
 800148e:	4a2b      	ldr	r2, [pc, #172]	; (800153c <_ZL7getBytev+0xc4>)
 8001490:	492b      	ldr	r1, [pc, #172]	; (8001540 <_ZL7getBytev+0xc8>)
	pDisableCS = ::disableCS;
 8001492:	4e2c      	ldr	r6, [pc, #176]	; (8001544 <_ZL7getBytev+0xcc>)

SPI2_class::SPI2_class()
{
	m_inBuffer = 0;
	m_outBuffer = 0;
	pStoreByte = ::storeByte;
 8001494:	f8c7 e000 	str.w	lr, [r7]
	pGetByte = ::getByte;
	pDisableCS = ::disableCS;
 8001498:	4f2b      	ldr	r7, [pc, #172]	; (8001548 <_ZL7getBytev+0xd0>)
SPI2_class::SPI2_class()
{
	m_inBuffer = 0;
	m_outBuffer = 0;
	pStoreByte = ::storeByte;
	pGetByte = ::getByte;
 800149a:	6011      	str	r1, [r2, #0]
	return sp;
}

SPI2_class::SPI2_class()
{
	m_inBuffer = 0;
 800149c:	60a3      	str	r3, [r4, #8]
	m_outBuffer = 0;
 800149e:	6063      	str	r3, [r4, #4]
{
	static SPI2_class sp;
	return sp;
}

SPI2_class::SPI2_class()
 80014a0:	6020      	str	r0, [r4, #0]
	}
}

SPI2_class& SPI2_class::getInstance()
{
	static SPI2_class sp;
 80014a2:	2301      	movs	r3, #1
 80014a4:	4620      	mov	r0, r4
 80014a6:	4a29      	ldr	r2, [pc, #164]	; (800154c <_ZL7getBytev+0xd4>)
 80014a8:	4929      	ldr	r1, [pc, #164]	; (8001550 <_ZL7getBytev+0xd8>)
{
	m_inBuffer = 0;
	m_outBuffer = 0;
	pStoreByte = ::storeByte;
	pGetByte = ::getByte;
	pDisableCS = ::disableCS;
 80014aa:	6037      	str	r7, [r6, #0]
	}
}

SPI2_class& SPI2_class::getInstance()
{
	static SPI2_class sp;
 80014ac:	602b      	str	r3, [r5, #0]
 80014ae:	f001 fa6c 	bl	800298a <__aeabi_atexit>
}

int SPI2_class::getByte()
{
	int byteToSend = BUFFER_EMPTY;
	if(m_outBuffer != 0)
 80014b2:	6861      	ldr	r1, [r4, #4]
 80014b4:	4c1e      	ldr	r4, [pc, #120]	; (8001530 <_ZL7getBytev+0xb8>)
 80014b6:	b321      	cbz	r1, 8001502 <_ZL7getBytev+0x8a>
	{
		if(m_outBuffer->size() != 0 )
 80014b8:	694d      	ldr	r5, [r1, #20]
 80014ba:	6a48      	ldr	r0, [r1, #36]	; 0x24
 80014bc:	698b      	ldr	r3, [r1, #24]
 80014be:	69ca      	ldr	r2, [r1, #28]
 80014c0:	1b40      	subs	r0, r0, r5
 80014c2:	1a9a      	subs	r2, r3, r2
	      const _Deque_iterator<_Tp, _Ref, _Ptr>& __y) _GLIBCXX_NOEXCEPT
    {
      return typename _Deque_iterator<_Tp, _Ref, _Ptr>::difference_type
	(_Deque_iterator<_Tp, _Ref, _Ptr>::_S_buffer_size())
	* (__x._M_node - __y._M_node - 1) + (__x._M_cur - __x._M_first)
	+ (__y._M_last - __y._M_cur);
 80014c4:	688d      	ldr	r5, [r1, #8]
 80014c6:	1080      	asrs	r0, r0, #2
 80014c8:	6909      	ldr	r1, [r1, #16]
 80014ca:	1e43      	subs	r3, r0, #1
 80014cc:	1092      	asrs	r2, r2, #2
 80014ce:	eb02 12c3 	add.w	r2, r2, r3, lsl #7
 80014d2:	1b4b      	subs	r3, r1, r5
 80014d4:	eb02 03a3 	add.w	r3, r2, r3, asr #2
 80014d8:	b91b      	cbnz	r3, 80014e2 <_ZL7getBytev+0x6a>
	return state;
}

int SPI2_class::getByte()
{
	int byteToSend = BUFFER_EMPTY;
 80014da:	f44f 7580 	mov.w	r5, #256	; 0x100
static int getByte()
{
	SPI2_class & sp = SPI2_class::getInstance();
	int retVal = sp.getByte();
	return retVal;
}
 80014de:	4628      	mov	r0, r5
 80014e0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	if(m_outBuffer != 0)
	{
		if(m_outBuffer->size() != 0 )
		{
			byteToSend = m_outBuffer->front();
			GPIO_ResetBits(m_csSet.gpioType,m_csSet.csPin);
 80014e2:	68e0      	ldr	r0, [r4, #12]
 80014e4:	8a21      	ldrh	r1, [r4, #16]
	int byteToSend = BUFFER_EMPTY;
	if(m_outBuffer != 0)
	{
		if(m_outBuffer->size() != 0 )
		{
			byteToSend = m_outBuffer->front();
 80014e6:	682d      	ldr	r5, [r5, #0]
			GPIO_ResetBits(m_csSet.gpioType,m_csSet.csPin);
 80014e8:	b289      	uxth	r1, r1
 80014ea:	f7ff fb3d 	bl	8000b68 <GPIO_ResetBits>
			m_outBuffer->pop();
 80014ee:	6864      	ldr	r4, [r4, #4]
       *  needed, it should be retrieved before pop_front() is called.
       */
      void
      pop_front() _GLIBCXX_NOEXCEPT
      {
	if (this->_M_impl._M_start._M_cur
 80014f0:	6922      	ldr	r2, [r4, #16]
	    != this->_M_impl._M_start._M_last - 1)
 80014f2:	68a3      	ldr	r3, [r4, #8]
       *  needed, it should be retrieved before pop_front() is called.
       */
      void
      pop_front() _GLIBCXX_NOEXCEPT
      {
	if (this->_M_impl._M_start._M_cur
 80014f4:	3a04      	subs	r2, #4
 80014f6:	4293      	cmp	r3, r2
 80014f8:	d00a      	beq.n	8001510 <_ZL7getBytev+0x98>
	    != this->_M_impl._M_start._M_last - 1)
	  {
	    _Alloc_traits::destroy(this->_M_impl,
	                           this->_M_impl._M_start._M_cur);
	    ++this->_M_impl._M_start._M_cur;
 80014fa:	3304      	adds	r3, #4
 80014fc:	60a3      	str	r3, [r4, #8]
static int getByte()
{
	SPI2_class & sp = SPI2_class::getInstance();
	int retVal = sp.getByte();
	return retVal;
}
 80014fe:	4628      	mov	r0, r5
 8001500:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	return state;
}

int SPI2_class::getByte()
{
	int byteToSend = BUFFER_EMPTY;
 8001502:	f44f 7580 	mov.w	r5, #256	; 0x100
			m_outBuffer->pop();
		}
	}
	else
	{
		printf("m_outBuffer NULL\n\r");
 8001506:	4813      	ldr	r0, [pc, #76]	; (8001554 <_ZL7getBytev+0xdc>)
 8001508:	f001 f89a 	bl	8002640 <iprintf>
static int getByte()
{
	SPI2_class & sp = SPI2_class::getInstance();
	int retVal = sp.getByte();
	return retVal;
}
 800150c:	4628      	mov	r0, r5
 800150e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001510:	68e0      	ldr	r0, [r4, #12]
 8001512:	f001 fa3f 	bl	8002994 <_ZdlPv>
    _M_pop_front_aux()
    {
      _Alloc_traits::destroy(_M_get_Tp_allocator(),
			     this->_M_impl._M_start._M_cur);
      _M_deallocate_node(this->_M_impl._M_start._M_first);
      this->_M_impl._M_start._M_set_node(this->_M_impl._M_start._M_node + 1);
 8001516:	6963      	ldr	r3, [r4, #20]
       *  immediately afterwards, based on _M_first and _M_last.
       */
      void
      _M_set_node(_Map_pointer __new_node) _GLIBCXX_NOEXCEPT
      {
	_M_node = __new_node;
 8001518:	1d1a      	adds	r2, r3, #4
 800151a:	6162      	str	r2, [r4, #20]
	_M_first = *__new_node;
 800151c:	685b      	ldr	r3, [r3, #4]
	_M_last = _M_first + difference_type(_S_buffer_size());
 800151e:	f503 7200 	add.w	r2, r3, #512	; 0x200
       */
      void
      _M_set_node(_Map_pointer __new_node) _GLIBCXX_NOEXCEPT
      {
	_M_node = __new_node;
	_M_first = *__new_node;
 8001522:	60e3      	str	r3, [r4, #12]
      this->_M_impl._M_start._M_cur = this->_M_impl._M_start._M_first;
 8001524:	60a3      	str	r3, [r4, #8]
	_M_last = _M_first + difference_type(_S_buffer_size());
 8001526:	6122      	str	r2, [r4, #16]
 8001528:	e7d9      	b.n	80014de <_ZL7getBytev+0x66>
 800152a:	bf00      	nop
 800152c:	200000e4 	.word	0x200000e4
 8001530:	200000e8 	.word	0x200000e8
 8001534:	200000d8 	.word	0x200000d8
 8001538:	08002f94 	.word	0x08002f94
 800153c:	200000dc 	.word	0x200000dc
 8001540:	08001479 	.word	0x08001479
 8001544:	200000e0 	.word	0x200000e0
 8001548:	080013d9 	.word	0x080013d9
 800154c:	20000000 	.word	0x20000000
 8001550:	08001311 	.word	0x08001311
 8001554:	08002fac 	.word	0x08002fac
 8001558:	08001791 	.word	0x08001791

0800155c <_ZN10SPI2_class11getInstanceEv>:
		sp.disableCS();
	}
}

SPI2_class& SPI2_class::getInstance()
{
 800155c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	static SPI2_class sp;
 800155e:	4c0e      	ldr	r4, [pc, #56]	; (8001598 <_ZN10SPI2_class11getInstanceEv+0x3c>)
 8001560:	6823      	ldr	r3, [r4, #0]
 8001562:	f013 0301 	ands.w	r3, r3, #1
 8001566:	d115      	bne.n	8001594 <_ZN10SPI2_class11getInstanceEv+0x38>
	return sp;
}

SPI2_class::SPI2_class()
 8001568:	480c      	ldr	r0, [pc, #48]	; (800159c <_ZN10SPI2_class11getInstanceEv+0x40>)
 800156a:	4e0d      	ldr	r6, [pc, #52]	; (80015a0 <_ZN10SPI2_class11getInstanceEv+0x44>)
{
	m_inBuffer = 0;
	m_outBuffer = 0;
	pStoreByte = ::storeByte;
 800156c:	4a0d      	ldr	r2, [pc, #52]	; (80015a4 <_ZN10SPI2_class11getInstanceEv+0x48>)
	pGetByte = ::getByte;
 800156e:	490e      	ldr	r1, [pc, #56]	; (80015a8 <_ZN10SPI2_class11getInstanceEv+0x4c>)

SPI2_class::SPI2_class()
{
	m_inBuffer = 0;
	m_outBuffer = 0;
	pStoreByte = ::storeByte;
 8001570:	f8df e04c 	ldr.w	lr, [pc, #76]	; 80015c0 <_ZN10SPI2_class11getInstanceEv+0x64>
	pGetByte = ::getByte;
 8001574:	4f0d      	ldr	r7, [pc, #52]	; (80015ac <_ZN10SPI2_class11getInstanceEv+0x50>)
	pDisableCS = ::disableCS;
 8001576:	4d0e      	ldr	r5, [pc, #56]	; (80015b0 <_ZN10SPI2_class11getInstanceEv+0x54>)
{
	static SPI2_class sp;
	return sp;
}

SPI2_class::SPI2_class()
 8001578:	6006      	str	r6, [r0, #0]
{
	m_inBuffer = 0;
	m_outBuffer = 0;
	pStoreByte = ::storeByte;
	pGetByte = ::getByte;
	pDisableCS = ::disableCS;
 800157a:	4e0e      	ldr	r6, [pc, #56]	; (80015b4 <_ZN10SPI2_class11getInstanceEv+0x58>)
	return sp;
}

SPI2_class::SPI2_class()
{
	m_inBuffer = 0;
 800157c:	6083      	str	r3, [r0, #8]
	m_outBuffer = 0;
 800157e:	6043      	str	r3, [r0, #4]
	pStoreByte = ::storeByte;
 8001580:	f8c2 e000 	str.w	lr, [r2]
	}
}

SPI2_class& SPI2_class::getInstance()
{
	static SPI2_class sp;
 8001584:	2301      	movs	r3, #1
SPI2_class::SPI2_class()
{
	m_inBuffer = 0;
	m_outBuffer = 0;
	pStoreByte = ::storeByte;
	pGetByte = ::getByte;
 8001586:	600f      	str	r7, [r1, #0]
	}
}

SPI2_class& SPI2_class::getInstance()
{
	static SPI2_class sp;
 8001588:	4a0b      	ldr	r2, [pc, #44]	; (80015b8 <_ZN10SPI2_class11getInstanceEv+0x5c>)
 800158a:	490c      	ldr	r1, [pc, #48]	; (80015bc <_ZN10SPI2_class11getInstanceEv+0x60>)
{
	m_inBuffer = 0;
	m_outBuffer = 0;
	pStoreByte = ::storeByte;
	pGetByte = ::getByte;
	pDisableCS = ::disableCS;
 800158c:	602e      	str	r6, [r5, #0]
	}
}

SPI2_class& SPI2_class::getInstance()
{
	static SPI2_class sp;
 800158e:	6023      	str	r3, [r4, #0]
 8001590:	f001 f9fb 	bl	800298a <__aeabi_atexit>
	return sp;
}
 8001594:	4801      	ldr	r0, [pc, #4]	; (800159c <_ZN10SPI2_class11getInstanceEv+0x40>)
 8001596:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001598:	200000e4 	.word	0x200000e4
 800159c:	200000e8 	.word	0x200000e8
 80015a0:	08002f94 	.word	0x08002f94
 80015a4:	200000d8 	.word	0x200000d8
 80015a8:	200000dc 	.word	0x200000dc
 80015ac:	08001479 	.word	0x08001479
 80015b0:	200000e0 	.word	0x200000e0
 80015b4:	080013d9 	.word	0x080013d9
 80015b8:	20000000 	.word	0x20000000
 80015bc:	08001311 	.word	0x08001311
 80015c0:	08001791 	.word	0x08001791

080015c4 <_ZN10SPI2_class10setBuffersEPSt5queueIiSt5dequeIiSaIiEEES5_>:
	pDisableCS = ::disableCS;
}

void SPI2_class::setBuffers(BufferQueue* inBuf, BufferQueue* outBuf)
{
	m_inBuffer = inBuf;
 80015c4:	6081      	str	r1, [r0, #8]
	m_outBuffer = outBuf;
 80015c6:	6042      	str	r2, [r0, #4]
 80015c8:	4770      	bx	lr
 80015ca:	bf00      	nop

080015cc <_ZN10SPI2_class5setCSE6CSsetS>:
}

void SPI2_class::setCS(CSsetS settings)
{
 80015cc:	b082      	sub	sp, #8
 80015ce:	ab02      	add	r3, sp, #8
 80015d0:	e903 0006 	stmdb	r3, {r1, r2}
	m_csSet.gpioType = settings.gpioType;
 80015d4:	9a00      	ldr	r2, [sp, #0]
	m_csSet.csPin = settings.csPin;
 80015d6:	f8bd 3004 	ldrh.w	r3, [sp, #4]
	m_outBuffer = outBuf;
}

void SPI2_class::setCS(CSsetS settings)
{
	m_csSet.gpioType = settings.gpioType;
 80015da:	60c2      	str	r2, [r0, #12]
	m_csSet.csPin = settings.csPin;
 80015dc:	8203      	strh	r3, [r0, #16]
}
 80015de:	b002      	add	sp, #8
 80015e0:	4770      	bx	lr
 80015e2:	bf00      	nop

080015e4 <SPI2_IRQHandler>:
{

}

extern "C" void SPI2_IRQHandler()
{
 80015e4:	b508      	push	{r3, lr}
	pDisableCS();
 80015e6:	4b15      	ldr	r3, [pc, #84]	; (800163c <SPI2_IRQHandler+0x58>)
 80015e8:	681b      	ldr	r3, [r3, #0]
 80015ea:	4798      	blx	r3

	if(SPI_I2S_GetITStatus(SPI2,SPI_I2S_IT_TXE) != RESET)
 80015ec:	2171      	movs	r1, #113	; 0x71
 80015ee:	4814      	ldr	r0, [pc, #80]	; (8001640 <SPI2_IRQHandler+0x5c>)
 80015f0:	f7ff fb90 	bl	8000d14 <SPI_I2S_GetITStatus>
 80015f4:	b988      	cbnz	r0, 800161a <SPI2_IRQHandler+0x36>
		{
			 SPI_I2S_ITConfig(SPI2, SPI_I2S_IT_TXE, DISABLE);
		}
	}

	if (SPI_I2S_GetITStatus(SPI2, SPI_I2S_IT_RXNE) != RESET)
 80015f6:	2160      	movs	r1, #96	; 0x60
 80015f8:	4811      	ldr	r0, [pc, #68]	; (8001640 <SPI2_IRQHandler+0x5c>)
 80015fa:	f7ff fb8b 	bl	8000d14 <SPI_I2S_GetITStatus>
 80015fe:	b900      	cbnz	r0, 8001602 <SPI2_IRQHandler+0x1e>
 8001600:	bd08      	pop	{r3, pc}
	{
		int tmp = SPI_I2S_ReceiveData(SPI2);
 8001602:	480f      	ldr	r0, [pc, #60]	; (8001640 <SPI2_IRQHandler+0x5c>)
 8001604:	f7ff fb70 	bl	8000ce8 <SPI_I2S_ReceiveData>
		pStoreByte(tmp);
 8001608:	4b0e      	ldr	r3, [pc, #56]	; (8001644 <SPI2_IRQHandler+0x60>)
 800160a:	681b      	ldr	r3, [r3, #0]
 800160c:	4798      	blx	r3
		SPI_I2S_ClearFlag(SPI2,SPI_I2S_FLAG_RXNE);
	}
}
 800160e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}

	if (SPI_I2S_GetITStatus(SPI2, SPI_I2S_IT_RXNE) != RESET)
	{
		int tmp = SPI_I2S_ReceiveData(SPI2);
		pStoreByte(tmp);
		SPI_I2S_ClearFlag(SPI2,SPI_I2S_FLAG_RXNE);
 8001612:	2101      	movs	r1, #1
 8001614:	480a      	ldr	r0, [pc, #40]	; (8001640 <SPI2_IRQHandler+0x5c>)
 8001616:	f7ff bb79 	b.w	8000d0c <SPI_I2S_ClearFlag>
{
	pDisableCS();

	if(SPI_I2S_GetITStatus(SPI2,SPI_I2S_IT_TXE) != RESET)
	{
		int c = pGetByte();
 800161a:	4b0b      	ldr	r3, [pc, #44]	; (8001648 <SPI2_IRQHandler+0x64>)
 800161c:	681b      	ldr	r3, [r3, #0]
 800161e:	4798      	blx	r3
		if(c <= 0xFF)
 8001620:	28ff      	cmp	r0, #255	; 0xff
 8001622:	dc04      	bgt.n	800162e <SPI2_IRQHandler+0x4a>
		{
			SPI_I2S_SendData(SPI2,(uint8_t)c);
 8001624:	b2c1      	uxtb	r1, r0
 8001626:	4806      	ldr	r0, [pc, #24]	; (8001640 <SPI2_IRQHandler+0x5c>)
 8001628:	f7ff fb5c 	bl	8000ce4 <SPI_I2S_SendData>
 800162c:	e7e3      	b.n	80015f6 <SPI2_IRQHandler+0x12>
		}
		else
		{
			 SPI_I2S_ITConfig(SPI2, SPI_I2S_IT_TXE, DISABLE);
 800162e:	2200      	movs	r2, #0
 8001630:	2171      	movs	r1, #113	; 0x71
 8001632:	4803      	ldr	r0, [pc, #12]	; (8001640 <SPI2_IRQHandler+0x5c>)
 8001634:	f7ff fb46 	bl	8000cc4 <SPI_I2S_ITConfig>
 8001638:	e7dd      	b.n	80015f6 <SPI2_IRQHandler+0x12>
 800163a:	bf00      	nop
 800163c:	200000e0 	.word	0x200000e0
 8001640:	40003800 	.word	0x40003800
 8001644:	200000d8 	.word	0x200000d8
 8001648:	200000dc 	.word	0x200000dc

0800164c <_ZNSt5dequeIiSaIiEE17_M_reallocate_mapEjb>:
        }
    }

  template <typename _Tp, typename _Alloc>
    void
    deque<_Tp, _Alloc>::
 800164c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8001650:	4689      	mov	r9, r1
    _M_reallocate_map(size_type __nodes_to_add, bool __add_at_front)
    {
      const size_type __old_num_nodes
	= this->_M_impl._M_finish._M_node - this->_M_impl._M_start._M_node + 1;
 8001652:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8001654:	6941      	ldr	r1, [r0, #20]
        }
    }

  template <typename _Tp, typename _Alloc>
    void
    deque<_Tp, _Alloc>::
 8001656:	4606      	mov	r6, r0
    _M_reallocate_map(size_type __nodes_to_add, bool __add_at_front)
    {
      const size_type __old_num_nodes
	= this->_M_impl._M_finish._M_node - this->_M_impl._M_start._M_node + 1;
 8001658:	1a5f      	subs	r7, r3, r1
 800165a:	10bf      	asrs	r7, r7, #2
      const size_type __new_num_nodes = __old_num_nodes + __nodes_to_add;

      _Map_pointer __new_nstart;
      if (this->_M_impl._M_map_size > 2 * __new_num_nodes)
 800165c:	6840      	ldr	r0, [r0, #4]
    void
    deque<_Tp, _Alloc>::
    _M_reallocate_map(size_type __nodes_to_add, bool __add_at_front)
    {
      const size_type __old_num_nodes
	= this->_M_impl._M_finish._M_node - this->_M_impl._M_start._M_node + 1;
 800165e:	3701      	adds	r7, #1
      const size_type __new_num_nodes = __old_num_nodes + __nodes_to_add;
 8001660:	eb07 0509 	add.w	r5, r7, r9

      _Map_pointer __new_nstart;
      if (this->_M_impl._M_map_size > 2 * __new_num_nodes)
 8001664:	ebb0 0f45 	cmp.w	r0, r5, lsl #1
        }
    }

  template <typename _Tp, typename _Alloc>
    void
    deque<_Tp, _Alloc>::
 8001668:	4614      	mov	r4, r2
      const size_type __old_num_nodes
	= this->_M_impl._M_finish._M_node - this->_M_impl._M_start._M_node + 1;
      const size_type __new_num_nodes = __old_num_nodes + __nodes_to_add;

      _Map_pointer __new_nstart;
      if (this->_M_impl._M_map_size > 2 * __new_num_nodes)
 800166a:	d914      	bls.n	8001696 <_ZNSt5dequeIiSaIiEE17_M_reallocate_mapEjb+0x4a>
	{
	  __new_nstart = this->_M_impl._M_map + (this->_M_impl._M_map_size
					 - __new_num_nodes) / 2
	                 + (__add_at_front ? __nodes_to_add : 0);
 800166c:	1b40      	subs	r0, r0, r5
 800166e:	0840      	lsrs	r0, r0, #1
 8001670:	0080      	lsls	r0, r0, #2
      const size_type __new_num_nodes = __old_num_nodes + __nodes_to_add;

      _Map_pointer __new_nstart;
      if (this->_M_impl._M_map_size > 2 * __new_num_nodes)
	{
	  __new_nstart = this->_M_impl._M_map + (this->_M_impl._M_map_size
 8001672:	6835      	ldr	r5, [r6, #0]
					 - __new_num_nodes) / 2
	                 + (__add_at_front ? __nodes_to_add : 0);
 8001674:	b10a      	cbz	r2, 800167a <_ZNSt5dequeIiSaIiEE17_M_reallocate_mapEjb+0x2e>
 8001676:	ea4f 0489 	mov.w	r4, r9, lsl #2
      const size_type __new_num_nodes = __old_num_nodes + __nodes_to_add;

      _Map_pointer __new_nstart;
      if (this->_M_impl._M_map_size > 2 * __new_num_nodes)
	{
	  __new_nstart = this->_M_impl._M_map + (this->_M_impl._M_map_size
 800167a:	1822      	adds	r2, r4, r0
 800167c:	18ac      	adds	r4, r5, r2
					 - __new_num_nodes) / 2
	                 + (__add_at_front ? __nodes_to_add : 0);
	  if (__new_nstart < this->_M_impl._M_start._M_node)
 800167e:	42a1      	cmp	r1, r4
#if __cplusplus >= 201103L
	  // trivial types can have deleted assignment
	  static_assert( is_copy_assignable<_Tp>::value,
	                 "type is not assignable" );
#endif
	  const ptrdiff_t _Num = __last - __first;
 8001680:	f103 0204 	add.w	r2, r3, #4
 8001684:	eba2 0201 	sub.w	r2, r2, r1
 8001688:	d93d      	bls.n	8001706 <_ZNSt5dequeIiSaIiEE17_M_reallocate_mapEjb+0xba>
	  if (_Num)
 800168a:	0893      	lsrs	r3, r2, #2
 800168c:	d027      	beq.n	80016de <_ZNSt5dequeIiSaIiEE17_M_reallocate_mapEjb+0x92>
	    __builtin_memmove(__result, __first, sizeof(_Tp) * _Num);
 800168e:	4620      	mov	r0, r4
 8001690:	f001 fb22 	bl	8002cd8 <memmove>
 8001694:	e023      	b.n	80016de <_ZNSt5dequeIiSaIiEE17_M_reallocate_mapEjb+0x92>
	}
      else
	{
	  size_type __new_map_size = this->_M_impl._M_map_size
	                             + std::max(this->_M_impl._M_map_size,
						__nodes_to_add) + 2;
 8001696:	f100 0802 	add.w	r8, r0, #2
 800169a:	4548      	cmp	r0, r9
 800169c:	bf2c      	ite	cs
 800169e:	4480      	addcs	r8, r0
 80016a0:	44c8      	addcc	r8, r9
      // NB: __n is permitted to be 0.  The C++ standard says nothing
      // about what the return value is when __n == 0.
      pointer
      allocate(size_type __n, const void* = 0)
      { 
	if (__n > this->max_size())
 80016a2:	f1b8 4f80 	cmp.w	r8, #1073741824	; 0x40000000
 80016a6:	d23b      	bcs.n	8001720 <_ZNSt5dequeIiSaIiEE17_M_reallocate_mapEjb+0xd4>
	  std::__throw_bad_alloc();

	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
 80016a8:	ea4f 0088 	mov.w	r0, r8, lsl #2
 80016ac:	f001 f95c 	bl	8002968 <_Znwj>
 80016b0:	4682      	mov	sl, r0

	  _Map_pointer __new_map = this->_M_allocate_map(__new_map_size);
	  __new_nstart = __new_map + (__new_map_size - __new_num_nodes) / 2
	                 + (__add_at_front ? __nodes_to_add : 0);
 80016b2:	ebc5 0008 	rsb	r0, r5, r8
 80016b6:	0840      	lsrs	r0, r0, #1
 80016b8:	0080      	lsls	r0, r0, #2
 80016ba:	b10c      	cbz	r4, 80016c0 <_ZNSt5dequeIiSaIiEE17_M_reallocate_mapEjb+0x74>
 80016bc:	ea4f 0489 	mov.w	r4, r9, lsl #2
#if __cplusplus >= 201103L
	  // trivial types can have deleted assignment
	  static_assert( is_copy_assignable<_Tp>::value,
	                 "type is not assignable" );
#endif
	  const ptrdiff_t _Num = __last - __first;
 80016c0:	6a72      	ldr	r2, [r6, #36]	; 0x24
	  std::copy(this->_M_impl._M_start._M_node,
 80016c2:	6971      	ldr	r1, [r6, #20]
 80016c4:	3204      	adds	r2, #4
 80016c6:	1a52      	subs	r2, r2, r1
	  size_type __new_map_size = this->_M_impl._M_map_size
	                             + std::max(this->_M_impl._M_map_size,
						__nodes_to_add) + 2;

	  _Map_pointer __new_map = this->_M_allocate_map(__new_map_size);
	  __new_nstart = __new_map + (__new_map_size - __new_num_nodes) / 2
 80016c8:	4404      	add	r4, r0
	  if (_Num)
 80016ca:	0893      	lsrs	r3, r2, #2
 80016cc:	4454      	add	r4, sl
 80016ce:	d123      	bne.n	8001718 <_ZNSt5dequeIiSaIiEE17_M_reallocate_mapEjb+0xcc>
      }

      // __p is not permitted to be a null pointer.
      void
      deallocate(pointer __p, size_type)
      { ::operator delete(__p); }
 80016d0:	6830      	ldr	r0, [r6, #0]
 80016d2:	f001 f95f 	bl	8002994 <_ZdlPv>
	  std::copy(this->_M_impl._M_start._M_node,
		    this->_M_impl._M_finish._M_node + 1,
		    __new_nstart);
	  _M_deallocate_map(this->_M_impl._M_map, this->_M_impl._M_map_size);

	  this->_M_impl._M_map = __new_map;
 80016d6:	f8c6 a000 	str.w	sl, [r6]
	  this->_M_impl._M_map_size = __new_map_size;
 80016da:	f8c6 8004 	str.w	r8, [r6, #4]
       *  immediately afterwards, based on _M_first and _M_last.
       */
      void
      _M_set_node(_Map_pointer __new_node) _GLIBCXX_NOEXCEPT
      {
	_M_node = __new_node;
 80016de:	6174      	str	r4, [r6, #20]
	_M_first = *__new_node;
 80016e0:	6822      	ldr	r2, [r4, #0]
	}

      this->_M_impl._M_start._M_set_node(__new_nstart);
      this->_M_impl._M_finish._M_set_node(__new_nstart + __old_num_nodes - 1);
 80016e2:	f107 4380 	add.w	r3, r7, #1073741824	; 0x40000000
 80016e6:	3b01      	subs	r3, #1
 80016e8:	eb04 0083 	add.w	r0, r4, r3, lsl #2
	_M_last = _M_first + difference_type(_S_buffer_size());
 80016ec:	f502 7100 	add.w	r1, r2, #512	; 0x200
       */
      void
      _M_set_node(_Map_pointer __new_node) _GLIBCXX_NOEXCEPT
      {
	_M_node = __new_node;
	_M_first = *__new_node;
 80016f0:	60f2      	str	r2, [r6, #12]
       *  immediately afterwards, based on _M_first and _M_last.
       */
      void
      _M_set_node(_Map_pointer __new_node) _GLIBCXX_NOEXCEPT
      {
	_M_node = __new_node;
 80016f2:	6270      	str	r0, [r6, #36]	; 0x24
	_M_first = *__new_node;
	_M_last = _M_first + difference_type(_S_buffer_size());
 80016f4:	6131      	str	r1, [r6, #16]
       */
      void
      _M_set_node(_Map_pointer __new_node) _GLIBCXX_NOEXCEPT
      {
	_M_node = __new_node;
	_M_first = *__new_node;
 80016f6:	f854 3023 	ldr.w	r3, [r4, r3, lsl #2]
	_M_last = _M_first + difference_type(_S_buffer_size());
 80016fa:	f503 7200 	add.w	r2, r3, #512	; 0x200
       */
      void
      _M_set_node(_Map_pointer __new_node) _GLIBCXX_NOEXCEPT
      {
	_M_node = __new_node;
	_M_first = *__new_node;
 80016fe:	61f3      	str	r3, [r6, #28]
	_M_last = _M_first + difference_type(_S_buffer_size());
 8001700:	6232      	str	r2, [r6, #32]
 8001702:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	  // trivial types can have deleted assignment
	  static_assert( is_copy_assignable<_Tp>::value,
	                 "type is not assignable" );
#endif
	  const ptrdiff_t _Num = __last - __first;
	  if (_Num)
 8001706:	0893      	lsrs	r3, r2, #2
	  if (__new_nstart < this->_M_impl._M_start._M_node)
	    std::copy(this->_M_impl._M_start._M_node,
		      this->_M_impl._M_finish._M_node + 1,
		      __new_nstart);
	  else
	    std::copy_backward(this->_M_impl._M_start._M_node,
 8001708:	ea4f 0087 	mov.w	r0, r7, lsl #2
 800170c:	d0e7      	beq.n	80016de <_ZNSt5dequeIiSaIiEE17_M_reallocate_mapEjb+0x92>
	    __builtin_memmove(__result - _Num, __first, sizeof(_Tp) * _Num);
 800170e:	1a80      	subs	r0, r0, r2
 8001710:	4420      	add	r0, r4
 8001712:	f001 fae1 	bl	8002cd8 <memmove>
 8001716:	e7e2      	b.n	80016de <_ZNSt5dequeIiSaIiEE17_M_reallocate_mapEjb+0x92>
	  static_assert( is_copy_assignable<_Tp>::value,
	                 "type is not assignable" );
#endif
	  const ptrdiff_t _Num = __last - __first;
	  if (_Num)
	    __builtin_memmove(__result, __first, sizeof(_Tp) * _Num);
 8001718:	4620      	mov	r0, r4
 800171a:	f001 fadd 	bl	8002cd8 <memmove>
 800171e:	e7d7      	b.n	80016d0 <_ZNSt5dequeIiSaIiEE17_M_reallocate_mapEjb+0x84>
      // about what the return value is when __n == 0.
      pointer
      allocate(size_type __n, const void* = 0)
      { 
	if (__n > this->max_size())
	  std::__throw_bad_alloc();
 8001720:	f001 f93a 	bl	8002998 <_ZSt17__throw_bad_allocv>

08001724 <_ZN10SPI2_class9storeByteEi>:
	}
	return byteToSend;
}

void SPI2_class::storeByte(int byte)
{
 8001724:	b570      	push	{r4, r5, r6, lr}
	if(m_inBuffer != 0)
 8001726:	6884      	ldr	r4, [r0, #8]
 8001728:	b14c      	cbz	r4, 800173e <_ZN10SPI2_class9storeByteEi+0x1a>
       *  done in constant time.
       */
      void
      push_back(const value_type& __x)
      {
	if (this->_M_impl._M_finish._M_cur
 800172a:	6a22      	ldr	r2, [r4, #32]
	    != this->_M_impl._M_finish._M_last - 1)
 800172c:	69a3      	ldr	r3, [r4, #24]
       *  done in constant time.
       */
      void
      push_back(const value_type& __x)
      {
	if (this->_M_impl._M_finish._M_cur
 800172e:	3a04      	subs	r2, #4
 8001730:	4293      	cmp	r3, r2
 8001732:	d009      	beq.n	8001748 <_ZN10SPI2_class9storeByteEi+0x24>
#else
      // _GLIBCXX_RESOLVE_LIB_DEFECTS
      // 402. wrong new expression in [some_] allocator::construct
      void 
      construct(pointer __p, const _Tp& __val) 
      { ::new((void *)__p) _Tp(__val); }
 8001734:	b103      	cbz	r3, 8001738 <_ZN10SPI2_class9storeByteEi+0x14>
 8001736:	6019      	str	r1, [r3, #0]
	    != this->_M_impl._M_finish._M_last - 1)
	  {
	    _Alloc_traits::construct(this->_M_impl,
	                             this->_M_impl._M_finish._M_cur, __x);
	    ++this->_M_impl._M_finish._M_cur;
 8001738:	3304      	adds	r3, #4
 800173a:	61a3      	str	r3, [r4, #24]
 800173c:	bd70      	pop	{r4, r5, r6, pc}
	{
		m_inBuffer->push(byte);
	}
	else
	{
		printf("m_inBuffer NULL\n\r");
 800173e:	4813      	ldr	r0, [pc, #76]	; (800178c <_ZN10SPI2_class9storeByteEi+0x68>)
	}
}
 8001740:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	{
		m_inBuffer->push(byte);
	}
	else
	{
		printf("m_inBuffer NULL\n\r");
 8001744:	f000 bf7c 	b.w	8002640 <iprintf>
       */
      void
      _M_reserve_map_at_back(size_type __nodes_to_add = 1)
      {
	if (__nodes_to_add + 1 > this->_M_impl._M_map_size
	    - (this->_M_impl._M_finish._M_node - this->_M_impl._M_map))
 8001748:	6a66      	ldr	r6, [r4, #36]	; 0x24
       *  (And consequently, %deque iterators.)
       */
      void
      _M_reserve_map_at_back(size_type __nodes_to_add = 1)
      {
	if (__nodes_to_add + 1 > this->_M_impl._M_map_size
 800174a:	e894 000c 	ldmia.w	r4, {r2, r3}
 800174e:	1ab2      	subs	r2, r6, r2
 8001750:	eba3 03a2 	sub.w	r3, r3, r2, asr #2
 8001754:	2b01      	cmp	r3, #1
 8001756:	460d      	mov	r5, r1
 8001758:	d911      	bls.n	800177e <_ZN10SPI2_class9storeByteEi+0x5a>
      allocate(size_type __n, const void* = 0)
      { 
	if (__n > this->max_size())
	  std::__throw_bad_alloc();

	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
 800175a:	f44f 7000 	mov.w	r0, #512	; 0x200
 800175e:	f001 f903 	bl	8002968 <_Znwj>
      deque<_Tp, _Alloc>::
      _M_push_back_aux(const value_type& __t)
#endif
      {
	_M_reserve_map_at_back();
	*(this->_M_impl._M_finish._M_node + 1) = this->_M_allocate_node();
 8001762:	6070      	str	r0, [r6, #4]
#if __cplusplus >= 201103L
	    _Alloc_traits::construct(this->_M_impl,
	                             this->_M_impl._M_finish._M_cur,
			             std::forward<_Args>(__args)...);
#else
	    this->_M_impl.construct(this->_M_impl._M_finish._M_cur, __t);
 8001764:	69a3      	ldr	r3, [r4, #24]
#else
      // _GLIBCXX_RESOLVE_LIB_DEFECTS
      // 402. wrong new expression in [some_] allocator::construct
      void 
      construct(pointer __p, const _Tp& __val) 
      { ::new((void *)__p) _Tp(__val); }
 8001766:	b103      	cbz	r3, 800176a <_ZN10SPI2_class9storeByteEi+0x46>
 8001768:	601d      	str	r5, [r3, #0]
#endif
	    this->_M_impl._M_finish._M_set_node(this->_M_impl._M_finish._M_node
						+ 1);
 800176a:	6a63      	ldr	r3, [r4, #36]	; 0x24
       *  immediately afterwards, based on _M_first and _M_last.
       */
      void
      _M_set_node(_Map_pointer __new_node) _GLIBCXX_NOEXCEPT
      {
	_M_node = __new_node;
 800176c:	1d1a      	adds	r2, r3, #4
 800176e:	6262      	str	r2, [r4, #36]	; 0x24
	_M_first = *__new_node;
 8001770:	685b      	ldr	r3, [r3, #4]
	_M_last = _M_first + difference_type(_S_buffer_size());
 8001772:	f503 7200 	add.w	r2, r3, #512	; 0x200
       */
      void
      _M_set_node(_Map_pointer __new_node) _GLIBCXX_NOEXCEPT
      {
	_M_node = __new_node;
	_M_first = *__new_node;
 8001776:	61e3      	str	r3, [r4, #28]
	    this->_M_impl._M_finish._M_cur = this->_M_impl._M_finish._M_first;
 8001778:	61a3      	str	r3, [r4, #24]
	_M_last = _M_first + difference_type(_S_buffer_size());
 800177a:	6222      	str	r2, [r4, #32]
 800177c:	bd70      	pop	{r4, r5, r6, pc}
      void
      _M_reserve_map_at_back(size_type __nodes_to_add = 1)
      {
	if (__nodes_to_add + 1 > this->_M_impl._M_map_size
	    - (this->_M_impl._M_finish._M_node - this->_M_impl._M_map))
	  _M_reallocate_map(__nodes_to_add, false);
 800177e:	2200      	movs	r2, #0
 8001780:	2101      	movs	r1, #1
 8001782:	4620      	mov	r0, r4
 8001784:	f7ff ff62 	bl	800164c <_ZNSt5dequeIiSaIiEE17_M_reallocate_mapEjb>
 8001788:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800178a:	e7e6      	b.n	800175a <_ZN10SPI2_class9storeByteEi+0x36>
 800178c:	08002fc0 	.word	0x08002fc0

08001790 <_ZL9storeBytei>:
static int (*pGetByte)() = 0;
static void (*pStoreByte)(int byte) = 0;
static void (*pDisableCS)() = 0;

static void storeByte(int byte)
{
 8001790:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	}
}

SPI2_class& SPI2_class::getInstance()
{
	static SPI2_class sp;
 8001792:	4d26      	ldr	r5, [pc, #152]	; (800182c <_ZL9storeBytei+0x9c>)
static int (*pGetByte)() = 0;
static void (*pStoreByte)(int byte) = 0;
static void (*pDisableCS)() = 0;

static void storeByte(int byte)
{
 8001794:	4606      	mov	r6, r0
	}
}

SPI2_class& SPI2_class::getInstance()
{
	static SPI2_class sp;
 8001796:	682b      	ldr	r3, [r5, #0]
	return sp;
}

SPI2_class::SPI2_class()
 8001798:	4c25      	ldr	r4, [pc, #148]	; (8001830 <_ZL9storeBytei+0xa0>)
	}
}

SPI2_class& SPI2_class::getInstance()
{
	static SPI2_class sp;
 800179a:	f013 0301 	ands.w	r3, r3, #1
 800179e:	d113      	bne.n	80017c8 <_ZL9storeBytei+0x38>

SPI2_class::SPI2_class()
{
	m_inBuffer = 0;
	m_outBuffer = 0;
	pStoreByte = ::storeByte;
 80017a0:	4924      	ldr	r1, [pc, #144]	; (8001834 <_ZL9storeBytei+0xa4>)
 80017a2:	4f25      	ldr	r7, [pc, #148]	; (8001838 <_ZL9storeBytei+0xa8>)
{
	static SPI2_class sp;
	return sp;
}

SPI2_class::SPI2_class()
 80017a4:	4825      	ldr	r0, [pc, #148]	; (800183c <_ZL9storeBytei+0xac>)
{
	m_inBuffer = 0;
	m_outBuffer = 0;
	pStoreByte = ::storeByte;
 80017a6:	600f      	str	r7, [r1, #0]
	pGetByte = ::getByte;
 80017a8:	4a25      	ldr	r2, [pc, #148]	; (8001840 <_ZL9storeBytei+0xb0>)
	pDisableCS = ::disableCS;
 80017aa:	4926      	ldr	r1, [pc, #152]	; (8001844 <_ZL9storeBytei+0xb4>)
	return sp;
}

SPI2_class::SPI2_class()
{
	m_inBuffer = 0;
 80017ac:	60a3      	str	r3, [r4, #8]
	m_outBuffer = 0;
 80017ae:	6063      	str	r3, [r4, #4]
	pStoreByte = ::storeByte;
	pGetByte = ::getByte;
	pDisableCS = ::disableCS;
 80017b0:	4f25      	ldr	r7, [pc, #148]	; (8001848 <_ZL9storeBytei+0xb8>)
SPI2_class::SPI2_class()
{
	m_inBuffer = 0;
	m_outBuffer = 0;
	pStoreByte = ::storeByte;
	pGetByte = ::getByte;
 80017b2:	4b26      	ldr	r3, [pc, #152]	; (800184c <_ZL9storeBytei+0xbc>)
{
	static SPI2_class sp;
	return sp;
}

SPI2_class::SPI2_class()
 80017b4:	6020      	str	r0, [r4, #0]
{
	m_inBuffer = 0;
	m_outBuffer = 0;
	pStoreByte = ::storeByte;
	pGetByte = ::getByte;
 80017b6:	6013      	str	r3, [r2, #0]
	pDisableCS = ::disableCS;
 80017b8:	600f      	str	r7, [r1, #0]
	}
}

SPI2_class& SPI2_class::getInstance()
{
	static SPI2_class sp;
 80017ba:	2301      	movs	r3, #1
 80017bc:	4620      	mov	r0, r4
 80017be:	4a24      	ldr	r2, [pc, #144]	; (8001850 <_ZL9storeBytei+0xc0>)
 80017c0:	4924      	ldr	r1, [pc, #144]	; (8001854 <_ZL9storeBytei+0xc4>)
 80017c2:	602b      	str	r3, [r5, #0]
 80017c4:	f001 f8e1 	bl	800298a <__aeabi_atexit>
	return byteToSend;
}

void SPI2_class::storeByte(int byte)
{
	if(m_inBuffer != 0)
 80017c8:	68a4      	ldr	r4, [r4, #8]
 80017ca:	b14c      	cbz	r4, 80017e0 <_ZL9storeBytei+0x50>
       *  done in constant time.
       */
      void
      push_back(const value_type& __x)
      {
	if (this->_M_impl._M_finish._M_cur
 80017cc:	6a22      	ldr	r2, [r4, #32]
	    != this->_M_impl._M_finish._M_last - 1)
 80017ce:	69a3      	ldr	r3, [r4, #24]
       *  done in constant time.
       */
      void
      push_back(const value_type& __x)
      {
	if (this->_M_impl._M_finish._M_cur
 80017d0:	3a04      	subs	r2, #4
 80017d2:	4293      	cmp	r3, r2
 80017d4:	d009      	beq.n	80017ea <_ZL9storeBytei+0x5a>
 80017d6:	b103      	cbz	r3, 80017da <_ZL9storeBytei+0x4a>
 80017d8:	601e      	str	r6, [r3, #0]
	    != this->_M_impl._M_finish._M_last - 1)
	  {
	    _Alloc_traits::construct(this->_M_impl,
	                             this->_M_impl._M_finish._M_cur, __x);
	    ++this->_M_impl._M_finish._M_cur;
 80017da:	3304      	adds	r3, #4
 80017dc:	61a3      	str	r3, [r4, #24]
 80017de:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	{
		m_inBuffer->push(byte);
	}
	else
	{
		printf("m_inBuffer NULL\n\r");
 80017e0:	481d      	ldr	r0, [pc, #116]	; (8001858 <_ZL9storeBytei+0xc8>)

static void storeByte(int byte)
{
	SPI2_class & sp = SPI2_class::getInstance();
	sp.storeByte(byte);
}
 80017e2:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	{
		m_inBuffer->push(byte);
	}
	else
	{
		printf("m_inBuffer NULL\n\r");
 80017e6:	f000 bf2b 	b.w	8002640 <iprintf>
       */
      void
      _M_reserve_map_at_back(size_type __nodes_to_add = 1)
      {
	if (__nodes_to_add + 1 > this->_M_impl._M_map_size
	    - (this->_M_impl._M_finish._M_node - this->_M_impl._M_map))
 80017ea:	6a65      	ldr	r5, [r4, #36]	; 0x24
       *  (And consequently, %deque iterators.)
       */
      void
      _M_reserve_map_at_back(size_type __nodes_to_add = 1)
      {
	if (__nodes_to_add + 1 > this->_M_impl._M_map_size
 80017ec:	e894 000c 	ldmia.w	r4, {r2, r3}
 80017f0:	1aaa      	subs	r2, r5, r2
 80017f2:	eba3 03a2 	sub.w	r3, r3, r2, asr #2
 80017f6:	2b01      	cmp	r3, #1
 80017f8:	d911      	bls.n	800181e <_ZL9storeBytei+0x8e>
      allocate(size_type __n, const void* = 0)
      { 
	if (__n > this->max_size())
	  std::__throw_bad_alloc();

	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
 80017fa:	f44f 7000 	mov.w	r0, #512	; 0x200
 80017fe:	f001 f8b3 	bl	8002968 <_Znwj>
      deque<_Tp, _Alloc>::
      _M_push_back_aux(const value_type& __t)
#endif
      {
	_M_reserve_map_at_back();
	*(this->_M_impl._M_finish._M_node + 1) = this->_M_allocate_node();
 8001802:	6068      	str	r0, [r5, #4]
#if __cplusplus >= 201103L
	    _Alloc_traits::construct(this->_M_impl,
	                             this->_M_impl._M_finish._M_cur,
			             std::forward<_Args>(__args)...);
#else
	    this->_M_impl.construct(this->_M_impl._M_finish._M_cur, __t);
 8001804:	69a3      	ldr	r3, [r4, #24]
#else
      // _GLIBCXX_RESOLVE_LIB_DEFECTS
      // 402. wrong new expression in [some_] allocator::construct
      void 
      construct(pointer __p, const _Tp& __val) 
      { ::new((void *)__p) _Tp(__val); }
 8001806:	b103      	cbz	r3, 800180a <_ZL9storeBytei+0x7a>
 8001808:	601e      	str	r6, [r3, #0]
#endif
	    this->_M_impl._M_finish._M_set_node(this->_M_impl._M_finish._M_node
						+ 1);
 800180a:	6a63      	ldr	r3, [r4, #36]	; 0x24
       *  immediately afterwards, based on _M_first and _M_last.
       */
      void
      _M_set_node(_Map_pointer __new_node) _GLIBCXX_NOEXCEPT
      {
	_M_node = __new_node;
 800180c:	1d1a      	adds	r2, r3, #4
 800180e:	6262      	str	r2, [r4, #36]	; 0x24
	_M_first = *__new_node;
 8001810:	685b      	ldr	r3, [r3, #4]
	_M_last = _M_first + difference_type(_S_buffer_size());
 8001812:	f503 7200 	add.w	r2, r3, #512	; 0x200
       */
      void
      _M_set_node(_Map_pointer __new_node) _GLIBCXX_NOEXCEPT
      {
	_M_node = __new_node;
	_M_first = *__new_node;
 8001816:	61e3      	str	r3, [r4, #28]
	    this->_M_impl._M_finish._M_cur = this->_M_impl._M_finish._M_first;
 8001818:	61a3      	str	r3, [r4, #24]
	_M_last = _M_first + difference_type(_S_buffer_size());
 800181a:	6222      	str	r2, [r4, #32]
 800181c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      void
      _M_reserve_map_at_back(size_type __nodes_to_add = 1)
      {
	if (__nodes_to_add + 1 > this->_M_impl._M_map_size
	    - (this->_M_impl._M_finish._M_node - this->_M_impl._M_map))
	  _M_reallocate_map(__nodes_to_add, false);
 800181e:	2200      	movs	r2, #0
 8001820:	2101      	movs	r1, #1
 8001822:	4620      	mov	r0, r4
 8001824:	f7ff ff12 	bl	800164c <_ZNSt5dequeIiSaIiEE17_M_reallocate_mapEjb>
 8001828:	6a65      	ldr	r5, [r4, #36]	; 0x24
 800182a:	e7e6      	b.n	80017fa <_ZL9storeBytei+0x6a>
 800182c:	200000e4 	.word	0x200000e4
 8001830:	200000e8 	.word	0x200000e8
 8001834:	200000d8 	.word	0x200000d8
 8001838:	08001791 	.word	0x08001791
 800183c:	08002f94 	.word	0x08002f94
 8001840:	200000dc 	.word	0x200000dc
 8001844:	200000e0 	.word	0x200000e0
 8001848:	080013d9 	.word	0x080013d9
 800184c:	08001479 	.word	0x08001479
 8001850:	20000000 	.word	0x20000000
 8001854:	08001311 	.word	0x08001311
 8001858:	08002fc0 	.word	0x08002fc0

0800185c <_ZN7DisplayD1Ev>:
}

Display::~Display()
{

}
 800185c:	4770      	bx	lr
 800185e:	bf00      	nop

08001860 <_ZN7DisplayD0Ev>:
	sp->storeCommand(CMD_NORMAL_BRIGHTNESS_DISPLAY_ON);//set display on

	sp->send();
}

Display::~Display()
 8001860:	b510      	push	{r4, lr}
 8001862:	4604      	mov	r4, r0
{

}
 8001864:	f001 f896 	bl	8002994 <_ZdlPv>
 8001868:	4620      	mov	r0, r4
 800186a:	bd10      	pop	{r4, pc}

0800186c <_ZN7DisplayC1Ev>:
#include <Display/Display.h>
#include "userSettings.h"
#include <stdio.h>


Display::Display() : sp(&SPI1_class::getInstance())
 800186c:	b570      	push	{r4, r5, r6, lr}
 800186e:	4b70      	ldr	r3, [pc, #448]	; (8001a30 <_ZN7DisplayC1Ev+0x1c4>)
 8001870:	b082      	sub	sp, #8
 8001872:	6003      	str	r3, [r0, #0]
 8001874:	4604      	mov	r4, r0
 8001876:	f7ff fc1d 	bl	80010b4 <_ZN10SPI1_class11getInstanceEv>
{
	/*setting of chip select for display*/
	CSsetS csSetting;
	csSetting.csPin = SPI1_CS_PIN;
	csSetting.gpioType = GPIOA;
 800187a:	4a6e      	ldr	r2, [pc, #440]	; (8001a34 <_ZN7DisplayC1Ev+0x1c8>)
 800187c:	ab02      	add	r3, sp, #8

Display::Display() : sp(&SPI1_class::getInstance())
{
	/*setting of chip select for display*/
	CSsetS csSetting;
	csSetting.csPin = SPI1_CS_PIN;
 800187e:	2510      	movs	r5, #16
	csSetting.gpioType = GPIOA;
 8001880:	f843 2d08 	str.w	r2, [r3, #-8]!

Display::Display() : sp(&SPI1_class::getInstance())
{
	/*setting of chip select for display*/
	CSsetS csSetting;
	csSetting.csPin = SPI1_CS_PIN;
 8001884:	f8ad 5004 	strh.w	r5, [sp, #4]
	csSetting.gpioType = GPIOA;
	sp->setCS(csSetting);

	GPIO_ResetBits(GPIOC, SPI1_RES_PIN);
 8001888:	4e6b      	ldr	r6, [pc, #428]	; (8001a38 <_ZN7DisplayC1Ev+0x1cc>)
{
	/*setting of chip select for display*/
	CSsetS csSetting;
	csSetting.csPin = SPI1_CS_PIN;
	csSetting.gpioType = GPIOA;
	sp->setCS(csSetting);
 800188a:	e893 0006 	ldmia.w	r3, {r1, r2}
#include <Display/Display.h>
#include "userSettings.h"
#include <stdio.h>


Display::Display() : sp(&SPI1_class::getInstance())
 800188e:	6060      	str	r0, [r4, #4]
{
	/*setting of chip select for display*/
	CSsetS csSetting;
	csSetting.csPin = SPI1_CS_PIN;
	csSetting.gpioType = GPIOA;
	sp->setCS(csSetting);
 8001890:	f7ff fc7a 	bl	8001188 <_ZN10SPI1_class5setCSE6CSsetS>

	GPIO_ResetBits(GPIOC, SPI1_RES_PIN);
 8001894:	4629      	mov	r1, r5
 8001896:	4630      	mov	r0, r6
 8001898:	f7ff f966 	bl	8000b68 <GPIO_ResetBits>
	GPIO_SetBits(GPIOC, SPI1_RES_PIN);
 800189c:	4629      	mov	r1, r5
 800189e:	4630      	mov	r0, r6
 80018a0:	f7ff f960 	bl	8000b64 <GPIO_SetBits>

	sp->storeCommand(CMD_DISPLAY_OFF);          //Display Off
 80018a4:	6860      	ldr	r0, [r4, #4]
 80018a6:	2200      	movs	r2, #0
 80018a8:	21ae      	movs	r1, #174	; 0xae
 80018aa:	f7ff fc79 	bl	80011a0 <_ZN10SPI1_class12storeCommandEi8CommandE>
	sp->storeCommand(CMD_SET_CONTRAST_A);       //Set contrast for color A
 80018ae:	6860      	ldr	r0, [r4, #4]
 80018b0:	2200      	movs	r2, #0
 80018b2:	2181      	movs	r1, #129	; 0x81
 80018b4:	f7ff fc74 	bl	80011a0 <_ZN10SPI1_class12storeCommandEi8CommandE>
	sp->storeCommand(0xFF);                     //255
 80018b8:	6860      	ldr	r0, [r4, #4]
 80018ba:	2200      	movs	r2, #0
 80018bc:	21ff      	movs	r1, #255	; 0xff
 80018be:	f7ff fc6f 	bl	80011a0 <_ZN10SPI1_class12storeCommandEi8CommandE>
	sp->storeCommand(CMD_SET_CONTRAST_B);       //Set contrast for color B
 80018c2:	6860      	ldr	r0, [r4, #4]
 80018c4:	2200      	movs	r2, #0
 80018c6:	2182      	movs	r1, #130	; 0x82
 80018c8:	f7ff fc6a 	bl	80011a0 <_ZN10SPI1_class12storeCommandEi8CommandE>
	sp->storeCommand(0xFF );                     //255
 80018cc:	6860      	ldr	r0, [r4, #4]
 80018ce:	2200      	movs	r2, #0
 80018d0:	21ff      	movs	r1, #255	; 0xff
 80018d2:	f7ff fc65 	bl	80011a0 <_ZN10SPI1_class12storeCommandEi8CommandE>
	sp->storeCommand(CMD_SET_CONTRAST_C);       //Set contrast for color C
 80018d6:	6860      	ldr	r0, [r4, #4]
 80018d8:	2200      	movs	r2, #0
 80018da:	2183      	movs	r1, #131	; 0x83
 80018dc:	f7ff fc60 	bl	80011a0 <_ZN10SPI1_class12storeCommandEi8CommandE>
	sp->storeCommand(0xFF);                     //255
 80018e0:	6860      	ldr	r0, [r4, #4]
 80018e2:	2200      	movs	r2, #0
 80018e4:	21ff      	movs	r1, #255	; 0xff
 80018e6:	f7ff fc5b 	bl	80011a0 <_ZN10SPI1_class12storeCommandEi8CommandE>
	sp->storeCommand(CMD_MASTER_CURRENT_CONTROL);//master current control
 80018ea:	6860      	ldr	r0, [r4, #4]
 80018ec:	2200      	movs	r2, #0
 80018ee:	2187      	movs	r1, #135	; 0x87
 80018f0:	f7ff fc56 	bl	80011a0 <_ZN10SPI1_class12storeCommandEi8CommandE>
	sp->storeCommand(0x06);                     //6
 80018f4:	6860      	ldr	r0, [r4, #4]
 80018f6:	2200      	movs	r2, #0
 80018f8:	2106      	movs	r1, #6
 80018fa:	f7ff fc51 	bl	80011a0 <_ZN10SPI1_class12storeCommandEi8CommandE>
	sp->storeCommand(CMD_SET_PRECHARGE_SPEED_A);//Set Second Pre-change Speed For ColorA
 80018fe:	6860      	ldr	r0, [r4, #4]
 8001900:	2200      	movs	r2, #0
 8001902:	218a      	movs	r1, #138	; 0x8a
 8001904:	f7ff fc4c 	bl	80011a0 <_ZN10SPI1_class12storeCommandEi8CommandE>
	sp->storeCommand(0x64);                     //100
 8001908:	6860      	ldr	r0, [r4, #4]
 800190a:	2200      	movs	r2, #0
 800190c:	2164      	movs	r1, #100	; 0x64
 800190e:	f7ff fc47 	bl	80011a0 <_ZN10SPI1_class12storeCommandEi8CommandE>
	sp->storeCommand(CMD_SET_PRECHARGE_SPEED_B);//Set Second Pre-change Speed For ColorB
 8001912:	6860      	ldr	r0, [r4, #4]
 8001914:	2200      	movs	r2, #0
 8001916:	218b      	movs	r1, #139	; 0x8b
 8001918:	f7ff fc42 	bl	80011a0 <_ZN10SPI1_class12storeCommandEi8CommandE>
	sp->storeCommand(0x78);                     //120
 800191c:	6860      	ldr	r0, [r4, #4]
 800191e:	2200      	movs	r2, #0
 8001920:	2178      	movs	r1, #120	; 0x78
 8001922:	f7ff fc3d 	bl	80011a0 <_ZN10SPI1_class12storeCommandEi8CommandE>
	sp->storeCommand(CMD_SET_PRECHARGE_SPEED_C);//Set Second Pre-change Speed For ColorC
 8001926:	6860      	ldr	r0, [r4, #4]
 8001928:	2200      	movs	r2, #0
 800192a:	218c      	movs	r1, #140	; 0x8c
 800192c:	f7ff fc38 	bl	80011a0 <_ZN10SPI1_class12storeCommandEi8CommandE>
	sp->storeCommand(0x64);                     //100
 8001930:	6860      	ldr	r0, [r4, #4]
 8001932:	2200      	movs	r2, #0
 8001934:	2164      	movs	r1, #100	; 0x64
 8001936:	f7ff fc33 	bl	80011a0 <_ZN10SPI1_class12storeCommandEi8CommandE>
	sp->storeCommand(CMD_SET_REMAP);            //set remap & data format
 800193a:	6860      	ldr	r0, [r4, #4]
 800193c:	2200      	movs	r2, #0
 800193e:	21a0      	movs	r1, #160	; 0xa0
 8001940:	f7ff fc2e 	bl	80011a0 <_ZN10SPI1_class12storeCommandEi8CommandE>
	sp->storeCommand(0x72);                     //0x72
 8001944:	6860      	ldr	r0, [r4, #4]
 8001946:	2200      	movs	r2, #0
 8001948:	2172      	movs	r1, #114	; 0x72
 800194a:	f7ff fc29 	bl	80011a0 <_ZN10SPI1_class12storeCommandEi8CommandE>
	sp->storeCommand(CMD_SET_DISPLAY_START_LINE);//Set display Start Line
 800194e:	6860      	ldr	r0, [r4, #4]
 8001950:	2200      	movs	r2, #0
 8001952:	21a1      	movs	r1, #161	; 0xa1
 8001954:	f7ff fc24 	bl	80011a0 <_ZN10SPI1_class12storeCommandEi8CommandE>
	sp->storeCommand(0x0);
 8001958:	2200      	movs	r2, #0
 800195a:	6860      	ldr	r0, [r4, #4]
 800195c:	4611      	mov	r1, r2
 800195e:	f7ff fc1f 	bl	80011a0 <_ZN10SPI1_class12storeCommandEi8CommandE>
	sp->storeCommand(CMD_SET_DISPLAY_OFFSET);   //Set display offset
 8001962:	6860      	ldr	r0, [r4, #4]
 8001964:	2200      	movs	r2, #0
 8001966:	21a2      	movs	r1, #162	; 0xa2
 8001968:	f7ff fc1a 	bl	80011a0 <_ZN10SPI1_class12storeCommandEi8CommandE>
	sp->storeCommand(0x0);
 800196c:	2200      	movs	r2, #0
 800196e:	6860      	ldr	r0, [r4, #4]
 8001970:	4611      	mov	r1, r2
 8001972:	f7ff fc15 	bl	80011a0 <_ZN10SPI1_class12storeCommandEi8CommandE>
	sp->storeCommand(CMD_NORMAL_DISPLAY);       //Set display mode
 8001976:	6860      	ldr	r0, [r4, #4]
 8001978:	2200      	movs	r2, #0
 800197a:	21a4      	movs	r1, #164	; 0xa4
 800197c:	f7ff fc10 	bl	80011a0 <_ZN10SPI1_class12storeCommandEi8CommandE>
	sp->storeCommand(CMD_SET_MULTIPLEX_RATIO);  //Set multiplex ratio
 8001980:	6860      	ldr	r0, [r4, #4]
 8001982:	2200      	movs	r2, #0
 8001984:	21a8      	movs	r1, #168	; 0xa8
 8001986:	f7ff fc0b 	bl	80011a0 <_ZN10SPI1_class12storeCommandEi8CommandE>
	sp->storeCommand(0x3F);
 800198a:	6860      	ldr	r0, [r4, #4]
 800198c:	2200      	movs	r2, #0
 800198e:	213f      	movs	r1, #63	; 0x3f
 8001990:	f7ff fc06 	bl	80011a0 <_ZN10SPI1_class12storeCommandEi8CommandE>
	sp->storeCommand(CMD_SET_MASTER_CONFIGURE); //Set master configuration
 8001994:	6860      	ldr	r0, [r4, #4]
 8001996:	2200      	movs	r2, #0
 8001998:	21ad      	movs	r1, #173	; 0xad
 800199a:	f7ff fc01 	bl	80011a0 <_ZN10SPI1_class12storeCommandEi8CommandE>
	sp->storeCommand(0x8E);
 800199e:	6860      	ldr	r0, [r4, #4]
 80019a0:	2200      	movs	r2, #0
 80019a2:	218e      	movs	r1, #142	; 0x8e
 80019a4:	f7ff fbfc 	bl	80011a0 <_ZN10SPI1_class12storeCommandEi8CommandE>
	sp->storeCommand(CMD_POWER_SAVE_MODE);      //Set Power Save Mode
 80019a8:	6860      	ldr	r0, [r4, #4]
 80019aa:	2200      	movs	r2, #0
 80019ac:	21b0      	movs	r1, #176	; 0xb0
 80019ae:	f7ff fbf7 	bl	80011a0 <_ZN10SPI1_class12storeCommandEi8CommandE>
	sp->storeCommand(0x00);                     //0x00
 80019b2:	2200      	movs	r2, #0
 80019b4:	6860      	ldr	r0, [r4, #4]
 80019b6:	4611      	mov	r1, r2
 80019b8:	f7ff fbf2 	bl	80011a0 <_ZN10SPI1_class12storeCommandEi8CommandE>
	sp->storeCommand(CMD_PHASE_PERIOD_ADJUSTMENT);//phase 1 and 2 period adjustment
 80019bc:	6860      	ldr	r0, [r4, #4]
 80019be:	2200      	movs	r2, #0
 80019c0:	21b1      	movs	r1, #177	; 0xb1
 80019c2:	f7ff fbed 	bl	80011a0 <_ZN10SPI1_class12storeCommandEi8CommandE>
	sp->storeCommand(0x31);                     //0x31
 80019c6:	6860      	ldr	r0, [r4, #4]
 80019c8:	2200      	movs	r2, #0
 80019ca:	2131      	movs	r1, #49	; 0x31
 80019cc:	f7ff fbe8 	bl	80011a0 <_ZN10SPI1_class12storeCommandEi8CommandE>
	sp->storeCommand(CMD_DISPLAY_CLOCK_DIV);    //display clock divider/oscillator frequency
 80019d0:	6860      	ldr	r0, [r4, #4]
 80019d2:	2200      	movs	r2, #0
 80019d4:	21b3      	movs	r1, #179	; 0xb3
 80019d6:	f7ff fbe3 	bl	80011a0 <_ZN10SPI1_class12storeCommandEi8CommandE>
	sp->storeCommand(0xF0);
 80019da:	6860      	ldr	r0, [r4, #4]
 80019dc:	2200      	movs	r2, #0
 80019de:	21f0      	movs	r1, #240	; 0xf0
 80019e0:	f7ff fbde 	bl	80011a0 <_ZN10SPI1_class12storeCommandEi8CommandE>
	sp->storeCommand(CMD_SET_PRECHARGE_VOLTAGE);//Set Pre-Change Level
 80019e4:	6860      	ldr	r0, [r4, #4]
 80019e6:	2200      	movs	r2, #0
 80019e8:	21bb      	movs	r1, #187	; 0xbb
 80019ea:	f7ff fbd9 	bl	80011a0 <_ZN10SPI1_class12storeCommandEi8CommandE>
	sp->storeCommand(0x3A);
 80019ee:	6860      	ldr	r0, [r4, #4]
 80019f0:	2200      	movs	r2, #0
 80019f2:	213a      	movs	r1, #58	; 0x3a
 80019f4:	f7ff fbd4 	bl	80011a0 <_ZN10SPI1_class12storeCommandEi8CommandE>
	sp->storeCommand(CMD_SET_V_VOLTAGE);        //Set vcomH
 80019f8:	6860      	ldr	r0, [r4, #4]
 80019fa:	2200      	movs	r2, #0
 80019fc:	21be      	movs	r1, #190	; 0xbe
 80019fe:	f7ff fbcf 	bl	80011a0 <_ZN10SPI1_class12storeCommandEi8CommandE>
	sp->storeCommand(0x3E);
 8001a02:	6860      	ldr	r0, [r4, #4]
 8001a04:	2200      	movs	r2, #0
 8001a06:	213e      	movs	r1, #62	; 0x3e
 8001a08:	f7ff fbca 	bl	80011a0 <_ZN10SPI1_class12storeCommandEi8CommandE>
	sp->storeCommand(CMD_DEACTIVE_SCROLLING);   //disable scrolling
 8001a0c:	6860      	ldr	r0, [r4, #4]
 8001a0e:	2200      	movs	r2, #0
 8001a10:	212e      	movs	r1, #46	; 0x2e
 8001a12:	f7ff fbc5 	bl	80011a0 <_ZN10SPI1_class12storeCommandEi8CommandE>
	sp->storeCommand(CMD_NORMAL_BRIGHTNESS_DISPLAY_ON);//set display on
 8001a16:	6860      	ldr	r0, [r4, #4]
 8001a18:	2200      	movs	r2, #0
 8001a1a:	21af      	movs	r1, #175	; 0xaf
 8001a1c:	f7ff fbc0 	bl	80011a0 <_ZN10SPI1_class12storeCommandEi8CommandE>

	sp->send();
 8001a20:	6860      	ldr	r0, [r4, #4]
 8001a22:	6803      	ldr	r3, [r0, #0]
 8001a24:	68db      	ldr	r3, [r3, #12]
 8001a26:	4798      	blx	r3
}
 8001a28:	4620      	mov	r0, r4
 8001a2a:	b002      	add	sp, #8
 8001a2c:	bd70      	pop	{r4, r5, r6, pc}
 8001a2e:	bf00      	nop
 8001a30:	08002fdc 	.word	0x08002fdc
 8001a34:	40010800 	.word	0x40010800
 8001a38:	40011000 	.word	0x40011000

08001a3c <_ZN7Display13setBackgroundEt>:

	sp->send();
}

void Display::setBackground(uint16_t color)
{
 8001a3c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001a40:	4604      	mov	r4, r0
 8001a42:	460d      	mov	r5, r1
	sp->storeCommand(CMD_FILL_WINDOW);//fill window
 8001a44:	6840      	ldr	r0, [r0, #4]
 8001a46:	2200      	movs	r2, #0
 8001a48:	2126      	movs	r1, #38	; 0x26
 8001a4a:	f7ff fba9 	bl	80011a0 <_ZN10SPI1_class12storeCommandEi8CommandE>
	sp->storeCommand(ENABLE_FILL);
 8001a4e:	6860      	ldr	r0, [r4, #4]
 8001a50:	2200      	movs	r2, #0
 8001a52:	2101      	movs	r1, #1
 8001a54:	f7ff fba4 	bl	80011a0 <_ZN10SPI1_class12storeCommandEi8CommandE>
	sp->storeCommand(CMD_DRAW_RECTANGLE);//draw rectangle
 8001a58:	6860      	ldr	r0, [r4, #4]
 8001a5a:	2200      	movs	r2, #0
 8001a5c:	2122      	movs	r1, #34	; 0x22
 8001a5e:	f7ff fb9f 	bl	80011a0 <_ZN10SPI1_class12storeCommandEi8CommandE>
	sp->storeCommand(0);//start column
 8001a62:	2200      	movs	r2, #0
 8001a64:	6860      	ldr	r0, [r4, #4]
 8001a66:	4611      	mov	r1, r2
 8001a68:	f7ff fb9a 	bl	80011a0 <_ZN10SPI1_class12storeCommandEi8CommandE>
	sp->storeCommand(0);//start row
 8001a6c:	2200      	movs	r2, #0
 8001a6e:	6860      	ldr	r0, [r4, #4]
 8001a70:	4611      	mov	r1, r2
 8001a72:	f7ff fb95 	bl	80011a0 <_ZN10SPI1_class12storeCommandEi8CommandE>
	sp->storeCommand(95);//end column
 8001a76:	6860      	ldr	r0, [r4, #4]
 8001a78:	2200      	movs	r2, #0
 8001a7a:	215f      	movs	r1, #95	; 0x5f
 8001a7c:	f7ff fb90 	bl	80011a0 <_ZN10SPI1_class12storeCommandEi8CommandE>
	sp->storeCommand(63);//end row

	//frame
	sp->storeCommand((color >> 9) & 0x3F);//R
 8001a80:	f3c5 2745 	ubfx	r7, r5, #9, #6
	sp->storeCommand(ENABLE_FILL);
	sp->storeCommand(CMD_DRAW_RECTANGLE);//draw rectangle
	sp->storeCommand(0);//start column
	sp->storeCommand(0);//start row
	sp->storeCommand(95);//end column
	sp->storeCommand(63);//end row
 8001a84:	6860      	ldr	r0, [r4, #4]
 8001a86:	2200      	movs	r2, #0
 8001a88:	213f      	movs	r1, #63	; 0x3f
 8001a8a:	f7ff fb89 	bl	80011a0 <_ZN10SPI1_class12storeCommandEi8CommandE>

	//frame
	sp->storeCommand((color >> 9) & 0x3F);//R
	sp->storeCommand((color >> 4) & 0x3F);//G
 8001a8e:	f3c5 1605 	ubfx	r6, r5, #4, #6
	sp->storeCommand(0);//start row
	sp->storeCommand(95);//end column
	sp->storeCommand(63);//end row

	//frame
	sp->storeCommand((color >> 9) & 0x3F);//R
 8001a92:	4639      	mov	r1, r7
 8001a94:	6860      	ldr	r0, [r4, #4]
 8001a96:	2200      	movs	r2, #0
	sp->storeCommand((color >> 4) & 0x3F);//G
	sp->storeCommand((color << 2) & 0x3F);//B
 8001a98:	00ad      	lsls	r5, r5, #2
	sp->storeCommand(0);//start row
	sp->storeCommand(95);//end column
	sp->storeCommand(63);//end row

	//frame
	sp->storeCommand((color >> 9) & 0x3F);//R
 8001a9a:	f7ff fb81 	bl	80011a0 <_ZN10SPI1_class12storeCommandEi8CommandE>
	sp->storeCommand((color >> 4) & 0x3F);//G
	sp->storeCommand((color << 2) & 0x3F);//B
 8001a9e:	f005 053f 	and.w	r5, r5, #63	; 0x3f
	sp->storeCommand(95);//end column
	sp->storeCommand(63);//end row

	//frame
	sp->storeCommand((color >> 9) & 0x3F);//R
	sp->storeCommand((color >> 4) & 0x3F);//G
 8001aa2:	4631      	mov	r1, r6
 8001aa4:	6860      	ldr	r0, [r4, #4]
 8001aa6:	2200      	movs	r2, #0
 8001aa8:	f7ff fb7a 	bl	80011a0 <_ZN10SPI1_class12storeCommandEi8CommandE>
	sp->storeCommand((color << 2) & 0x3F);//B
 8001aac:	4629      	mov	r1, r5
 8001aae:	6860      	ldr	r0, [r4, #4]
 8001ab0:	2200      	movs	r2, #0
 8001ab2:	f7ff fb75 	bl	80011a0 <_ZN10SPI1_class12storeCommandEi8CommandE>

	//fill
	sp->storeCommand((color >> 9) & 0x3F);//R
 8001ab6:	4639      	mov	r1, r7
 8001ab8:	6860      	ldr	r0, [r4, #4]
 8001aba:	2200      	movs	r2, #0
 8001abc:	f7ff fb70 	bl	80011a0 <_ZN10SPI1_class12storeCommandEi8CommandE>
	sp->storeCommand((color >> 4) & 0x3F);//G
 8001ac0:	4631      	mov	r1, r6
 8001ac2:	6860      	ldr	r0, [r4, #4]
 8001ac4:	2200      	movs	r2, #0
 8001ac6:	f7ff fb6b 	bl	80011a0 <_ZN10SPI1_class12storeCommandEi8CommandE>
	sp->storeCommand((color << 2) & 0x3F);//B
 8001aca:	6860      	ldr	r0, [r4, #4]
 8001acc:	4629      	mov	r1, r5
 8001ace:	2200      	movs	r2, #0
 8001ad0:	f7ff fb66 	bl	80011a0 <_ZN10SPI1_class12storeCommandEi8CommandE>
	sp->send();
 8001ad4:	6860      	ldr	r0, [r4, #4]
}
 8001ad6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}

	//fill
	sp->storeCommand((color >> 9) & 0x3F);//R
	sp->storeCommand((color >> 4) & 0x3F);//G
	sp->storeCommand((color << 2) & 0x3F);//B
	sp->send();
 8001ada:	6803      	ldr	r3, [r0, #0]
 8001adc:	68db      	ldr	r3, [r3, #12]
 8001ade:	4718      	bx	r3

08001ae0 <_ZN7HIH6030D1Ev>:
	m_csSetting.csPin = GPIO_Pin_12;
	m_sp->setBuffers(&m_inBuf,&m_outBuf);
	m_sp->setCS(m_csSetting);
}

HIH6030::~HIH6030()
 8001ae0:	b570      	push	{r4, r5, r6, lr}
 8001ae2:	4606      	mov	r6, r0
 8001ae4:	4b11      	ldr	r3, [pc, #68]	; (8001b2c <_ZN7HIH6030D1Ev+0x4c>)

  template<typename _Tp, typename _Alloc>
    _Deque_base<_Tp, _Alloc>::
    ~_Deque_base() _GLIBCXX_NOEXCEPT
    {
      if (this->_M_impl._M_map)
 8001ae6:	6b40      	ldr	r0, [r0, #52]	; 0x34
 8001ae8:	6033      	str	r3, [r6, #0]
 8001aea:	b168      	cbz	r0, 8001b08 <_ZN7HIH6030D1Ev+0x28>
	{
	  _M_destroy_nodes(this->_M_impl._M_start._M_node,
 8001aec:	6db5      	ldr	r5, [r6, #88]	; 0x58
 8001aee:	6cb4      	ldr	r4, [r6, #72]	; 0x48
 8001af0:	3504      	adds	r5, #4
    void
    _Deque_base<_Tp, _Alloc>::
    _M_destroy_nodes(_Map_pointer __nstart,
		     _Map_pointer __nfinish) _GLIBCXX_NOEXCEPT
    {
      for (_Map_pointer __n = __nstart; __n < __nfinish; ++__n)
 8001af2:	42ac      	cmp	r4, r5
 8001af4:	d206      	bcs.n	8001b04 <_ZN7HIH6030D1Ev+0x24>
      }

      // __p is not permitted to be a null pointer.
      void
      deallocate(pointer __p, size_type)
      { ::operator delete(__p); }
 8001af6:	f854 0b04 	ldr.w	r0, [r4], #4
 8001afa:	f000 ff4b 	bl	8002994 <_ZdlPv>
 8001afe:	42a5      	cmp	r5, r4
 8001b00:	d8f9      	bhi.n	8001af6 <_ZN7HIH6030D1Ev+0x16>
 8001b02:	6b70      	ldr	r0, [r6, #52]	; 0x34
 8001b04:	f000 ff46 	bl	8002994 <_ZdlPv>

  template<typename _Tp, typename _Alloc>
    _Deque_base<_Tp, _Alloc>::
    ~_Deque_base() _GLIBCXX_NOEXCEPT
    {
      if (this->_M_impl._M_map)
 8001b08:	68f0      	ldr	r0, [r6, #12]
 8001b0a:	b168      	cbz	r0, 8001b28 <_ZN7HIH6030D1Ev+0x48>
	{
	  _M_destroy_nodes(this->_M_impl._M_start._M_node,
 8001b0c:	6b35      	ldr	r5, [r6, #48]	; 0x30
 8001b0e:	6a34      	ldr	r4, [r6, #32]
 8001b10:	3504      	adds	r5, #4
    void
    _Deque_base<_Tp, _Alloc>::
    _M_destroy_nodes(_Map_pointer __nstart,
		     _Map_pointer __nfinish) _GLIBCXX_NOEXCEPT
    {
      for (_Map_pointer __n = __nstart; __n < __nfinish; ++__n)
 8001b12:	42ac      	cmp	r4, r5
 8001b14:	d206      	bcs.n	8001b24 <_ZN7HIH6030D1Ev+0x44>
 8001b16:	f854 0b04 	ldr.w	r0, [r4], #4
 8001b1a:	f000 ff3b 	bl	8002994 <_ZdlPv>
 8001b1e:	42a5      	cmp	r5, r4
 8001b20:	d8f9      	bhi.n	8001b16 <_ZN7HIH6030D1Ev+0x36>
 8001b22:	68f0      	ldr	r0, [r6, #12]
 8001b24:	f000 ff36 	bl	8002994 <_ZdlPv>
{

}
 8001b28:	4630      	mov	r0, r6
 8001b2a:	bd70      	pop	{r4, r5, r6, pc}
 8001b2c:	08002fec 	.word	0x08002fec

08001b30 <_ZN7HIH6030D0Ev>:
	m_csSetting.csPin = GPIO_Pin_12;
	m_sp->setBuffers(&m_inBuf,&m_outBuf);
	m_sp->setCS(m_csSetting);
}

HIH6030::~HIH6030()
 8001b30:	b570      	push	{r4, r5, r6, lr}
 8001b32:	4606      	mov	r6, r0
 8001b34:	4b13      	ldr	r3, [pc, #76]	; (8001b84 <_ZN7HIH6030D0Ev+0x54>)

  template<typename _Tp, typename _Alloc>
    _Deque_base<_Tp, _Alloc>::
    ~_Deque_base() _GLIBCXX_NOEXCEPT
    {
      if (this->_M_impl._M_map)
 8001b36:	6b40      	ldr	r0, [r0, #52]	; 0x34
 8001b38:	6033      	str	r3, [r6, #0]
 8001b3a:	b168      	cbz	r0, 8001b58 <_ZN7HIH6030D0Ev+0x28>
	{
	  _M_destroy_nodes(this->_M_impl._M_start._M_node,
 8001b3c:	6db5      	ldr	r5, [r6, #88]	; 0x58
 8001b3e:	6cb4      	ldr	r4, [r6, #72]	; 0x48
 8001b40:	3504      	adds	r5, #4
    void
    _Deque_base<_Tp, _Alloc>::
    _M_destroy_nodes(_Map_pointer __nstart,
		     _Map_pointer __nfinish) _GLIBCXX_NOEXCEPT
    {
      for (_Map_pointer __n = __nstart; __n < __nfinish; ++__n)
 8001b42:	42ac      	cmp	r4, r5
 8001b44:	d206      	bcs.n	8001b54 <_ZN7HIH6030D0Ev+0x24>
 8001b46:	f854 0b04 	ldr.w	r0, [r4], #4
 8001b4a:	f000 ff23 	bl	8002994 <_ZdlPv>
 8001b4e:	42a5      	cmp	r5, r4
 8001b50:	d8f9      	bhi.n	8001b46 <_ZN7HIH6030D0Ev+0x16>
 8001b52:	6b70      	ldr	r0, [r6, #52]	; 0x34
 8001b54:	f000 ff1e 	bl	8002994 <_ZdlPv>

  template<typename _Tp, typename _Alloc>
    _Deque_base<_Tp, _Alloc>::
    ~_Deque_base() _GLIBCXX_NOEXCEPT
    {
      if (this->_M_impl._M_map)
 8001b58:	68f0      	ldr	r0, [r6, #12]
 8001b5a:	b168      	cbz	r0, 8001b78 <_ZN7HIH6030D0Ev+0x48>
	{
	  _M_destroy_nodes(this->_M_impl._M_start._M_node,
 8001b5c:	6b35      	ldr	r5, [r6, #48]	; 0x30
 8001b5e:	6a34      	ldr	r4, [r6, #32]
 8001b60:	3504      	adds	r5, #4
    void
    _Deque_base<_Tp, _Alloc>::
    _M_destroy_nodes(_Map_pointer __nstart,
		     _Map_pointer __nfinish) _GLIBCXX_NOEXCEPT
    {
      for (_Map_pointer __n = __nstart; __n < __nfinish; ++__n)
 8001b62:	42ac      	cmp	r4, r5
 8001b64:	d206      	bcs.n	8001b74 <_ZN7HIH6030D0Ev+0x44>
 8001b66:	f854 0b04 	ldr.w	r0, [r4], #4
 8001b6a:	f000 ff13 	bl	8002994 <_ZdlPv>
 8001b6e:	42a5      	cmp	r5, r4
 8001b70:	d8f9      	bhi.n	8001b66 <_ZN7HIH6030D0Ev+0x36>
 8001b72:	68f0      	ldr	r0, [r6, #12]
 8001b74:	f000 ff0e 	bl	8002994 <_ZdlPv>
{

}
 8001b78:	4630      	mov	r0, r6
 8001b7a:	f000 ff0b 	bl	8002994 <_ZdlPv>
 8001b7e:	4630      	mov	r0, r6
 8001b80:	bd70      	pop	{r4, r5, r6, pc}
 8001b82:	bf00      	nop
 8001b84:	08002fec 	.word	0x08002fec

08001b88 <_ZN7HIH6030C1Ev>:
#include <stdio.h>

HIH6030::HIH6030():
	 m_temperature(0)
	,m_humidity(0)
	,m_sp(&SPI2_class::getInstance())
 8001b88:	4a4a      	ldr	r2, [pc, #296]	; (8001cb4 <_ZN7HIH6030C1Ev+0x12c>)
 */

#include <Sensors/HIH6030.h>
#include <stdio.h>

HIH6030::HIH6030():
 8001b8a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	 m_temperature(0)
	,m_humidity(0)
	,m_sp(&SPI2_class::getInstance())
 8001b8c:	2300      	movs	r3, #0
 */

#include <Sensors/HIH6030.h>
#include <stdio.h>

HIH6030::HIH6030():
 8001b8e:	4604      	mov	r4, r0
	 m_temperature(0)
	,m_humidity(0)
	,m_sp(&SPI2_class::getInstance())
 8001b90:	6002      	str	r2, [r0, #0]
 8001b92:	6043      	str	r3, [r0, #4]
 8001b94:	6083      	str	r3, [r0, #8]
      allocate(size_type __n, const void* = 0)
      { 
	if (__n > this->max_size())
	  std::__throw_bad_alloc();

	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
 8001b96:	2020      	movs	r0, #32
 8001b98:	f000 fee6 	bl	8002968 <_Znwj>
 8001b9c:	4605      	mov	r5, r0
 8001b9e:	f44f 7000 	mov.w	r0, #512	; 0x200
 8001ba2:	f000 fee1 	bl	8002968 <_Znwj>
	  _M_start(), _M_finish()
	{ }

	_Deque_impl(const _Tp_alloc_type& __a) _GLIBCXX_NOEXCEPT
	: _Tp_alloc_type(__a), _M_map(), _M_map_size(0),
	  _M_start(), _M_finish()
 8001ba6:	2300      	movs	r3, #0
    _M_initialize_map(size_t __num_elements)
    {
      const size_t __num_nodes = (__num_elements/ __deque_buf_size(sizeof(_Tp))
				  + 1);

      this->_M_impl._M_map_size = std::max((size_t) _S_initial_map_size,
 8001ba8:	2208      	movs	r2, #8
 8001baa:	6122      	str	r2, [r4, #16]
	  _M_start(), _M_finish()
	{ }

	_Deque_impl(const _Tp_alloc_type& __a) _GLIBCXX_NOEXCEPT
	: _Tp_alloc_type(__a), _M_map(), _M_map_size(0),
	  _M_start(), _M_finish()
 8001bac:	60e3      	str	r3, [r4, #12]
      _Deque_iterator(_Elt_pointer __x, _Map_pointer __y) _GLIBCXX_NOEXCEPT
      : _M_cur(__x), _M_first(*__y),
        _M_last(*__y + _S_buffer_size()), _M_node(__y) { }

      _Deque_iterator() _GLIBCXX_NOEXCEPT
      : _M_cur(), _M_first(), _M_last(), _M_node() { }
 8001bae:	6163      	str	r3, [r4, #20]
 8001bb0:	61a3      	str	r3, [r4, #24]
 8001bb2:	61e3      	str	r3, [r4, #28]
 8001bb4:	6223      	str	r3, [r4, #32]
 8001bb6:	6263      	str	r3, [r4, #36]	; 0x24
 8001bb8:	62a3      	str	r3, [r4, #40]	; 0x28
 8001bba:	62e3      	str	r3, [r4, #44]	; 0x2c
 8001bbc:	6323      	str	r3, [r4, #48]	; 0x30
    {
      _Map_pointer __cur;
      __try
	{
	  for (__cur = __nstart; __cur < __nfinish; ++__cur)
	    *__cur = this->_M_allocate_node();
 8001bbe:	60e8      	str	r0, [r5, #12]
 8001bc0:	2020      	movs	r0, #32
 8001bc2:	f000 fed1 	bl	8002968 <_Znwj>
 8001bc6:	4607      	mov	r7, r0
      const size_t __num_nodes = (__num_elements/ __deque_buf_size(sizeof(_Tp))
				  + 1);

      this->_M_impl._M_map_size = std::max((size_t) _S_initial_map_size,
					   size_t(__num_nodes + 2));
      this->_M_impl._M_map = _M_allocate_map(this->_M_impl._M_map_size);
 8001bc8:	60e0      	str	r0, [r4, #12]
 8001bca:	f44f 7000 	mov.w	r0, #512	; 0x200
      // starts in the middle elements and grows outwards.  So nstart may be
      // the beginning of _M_map, but for small maps it may be as far in as
      // _M_map+3.

      _Map_pointer __nstart = (this->_M_impl._M_map
			       + (this->_M_impl._M_map_size - __num_nodes) / 2);
 8001bce:	6926      	ldr	r6, [r4, #16]
 8001bd0:	f000 feca 	bl	8002968 <_Znwj>
 8001bd4:	3e01      	subs	r6, #1
 8001bd6:	0876      	lsrs	r6, r6, #1
    _Deque_base<_Tp, _Alloc>::
    ~_Deque_base() _GLIBCXX_NOEXCEPT
    {
      if (this->_M_impl._M_map)
	{
	  _M_destroy_nodes(this->_M_impl._M_start._M_node,
 8001bd8:	f105 0e10 	add.w	lr, r5, #16
    void
    _Deque_base<_Tp, _Alloc>::
    _M_destroy_nodes(_Map_pointer __nstart,
		     _Map_pointer __nfinish) _GLIBCXX_NOEXCEPT
    {
      for (_Map_pointer __n = __nstart; __n < __nfinish; ++__n)
 8001bdc:	f105 010c 	add.w	r1, r5, #12
      // starts in the middle elements and grows outwards.  So nstart may be
      // the beginning of _M_map, but for small maps it may be as far in as
      // _M_map+3.

      _Map_pointer __nstart = (this->_M_impl._M_map
			       + (this->_M_impl._M_map_size - __num_nodes) / 2);
 8001be0:	eb07 0286 	add.w	r2, r7, r6, lsl #2
      void
      _M_set_node(_Map_pointer __new_node) _GLIBCXX_NOEXCEPT
      {
	_M_node = __new_node;
	_M_first = *__new_node;
	_M_last = _M_first + difference_type(_S_buffer_size());
 8001be4:	f500 7300 	add.w	r3, r0, #512	; 0x200
    void
    _Deque_base<_Tp, _Alloc>::
    _M_destroy_nodes(_Map_pointer __nstart,
		     _Map_pointer __nfinish) _GLIBCXX_NOEXCEPT
    {
      for (_Map_pointer __n = __nstart; __n < __nfinish; ++__n)
 8001be8:	458e      	cmp	lr, r1
    {
      _Map_pointer __cur;
      __try
	{
	  for (__cur = __nstart; __cur < __nfinish; ++__cur)
	    *__cur = this->_M_allocate_node();
 8001bea:	f847 0026 	str.w	r0, [r7, r6, lsl #2]
       *  immediately afterwards, based on _M_first and _M_last.
       */
      void
      _M_set_node(_Map_pointer __new_node) _GLIBCXX_NOEXCEPT
      {
	_M_node = __new_node;
 8001bee:	6222      	str	r2, [r4, #32]
 8001bf0:	6322      	str	r2, [r4, #48]	; 0x30
	_M_first = *__new_node;
 8001bf2:	61a0      	str	r0, [r4, #24]
 8001bf4:	62a0      	str	r0, [r4, #40]	; 0x28
	  __throw_exception_again;
	}

      this->_M_impl._M_start._M_set_node(__nstart);
      this->_M_impl._M_finish._M_set_node(__nfinish - 1);
      this->_M_impl._M_start._M_cur = _M_impl._M_start._M_first;
 8001bf6:	6160      	str	r0, [r4, #20]
      this->_M_impl._M_finish._M_cur = (this->_M_impl._M_finish._M_first
 8001bf8:	6260      	str	r0, [r4, #36]	; 0x24
      void
      _M_set_node(_Map_pointer __new_node) _GLIBCXX_NOEXCEPT
      {
	_M_node = __new_node;
	_M_first = *__new_node;
	_M_last = _M_first + difference_type(_S_buffer_size());
 8001bfa:	61e3      	str	r3, [r4, #28]
 8001bfc:	62e3      	str	r3, [r4, #44]	; 0x2c
    void
    _Deque_base<_Tp, _Alloc>::
    _M_destroy_nodes(_Map_pointer __nstart,
		     _Map_pointer __nfinish) _GLIBCXX_NOEXCEPT
    {
      for (_Map_pointer __n = __nstart; __n < __nfinish; ++__n)
 8001bfe:	d902      	bls.n	8001c06 <_ZN7HIH6030C1Ev+0x7e>
      }

      // __p is not permitted to be a null pointer.
      void
      deallocate(pointer __p, size_type)
      { ::operator delete(__p); }
 8001c00:	68e8      	ldr	r0, [r5, #12]
 8001c02:	f000 fec7 	bl	8002994 <_ZdlPv>
 8001c06:	4628      	mov	r0, r5
 8001c08:	f000 fec4 	bl	8002994 <_ZdlPv>
      allocate(size_type __n, const void* = 0)
      { 
	if (__n > this->max_size())
	  std::__throw_bad_alloc();

	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
 8001c0c:	2020      	movs	r0, #32
 8001c0e:	f000 feab 	bl	8002968 <_Znwj>
 8001c12:	4606      	mov	r6, r0
 8001c14:	f44f 7000 	mov.w	r0, #512	; 0x200
 8001c18:	f000 fea6 	bl	8002968 <_Znwj>
	  _M_start(), _M_finish()
	{ }

	_Deque_impl(const _Tp_alloc_type& __a) _GLIBCXX_NOEXCEPT
	: _Tp_alloc_type(__a), _M_map(), _M_map_size(0),
	  _M_start(), _M_finish()
 8001c1c:	2300      	movs	r3, #0
    _M_initialize_map(size_t __num_elements)
    {
      const size_t __num_nodes = (__num_elements/ __deque_buf_size(sizeof(_Tp))
				  + 1);

      this->_M_impl._M_map_size = std::max((size_t) _S_initial_map_size,
 8001c1e:	2208      	movs	r2, #8
	  _M_start(), _M_finish()
	{ }

	_Deque_impl(const _Tp_alloc_type& __a) _GLIBCXX_NOEXCEPT
	: _Tp_alloc_type(__a), _M_map(), _M_map_size(0),
	  _M_start(), _M_finish()
 8001c20:	6363      	str	r3, [r4, #52]	; 0x34
      _Deque_iterator(_Elt_pointer __x, _Map_pointer __y) _GLIBCXX_NOEXCEPT
      : _M_cur(__x), _M_first(*__y),
        _M_last(*__y + _S_buffer_size()), _M_node(__y) { }

      _Deque_iterator() _GLIBCXX_NOEXCEPT
      : _M_cur(), _M_first(), _M_last(), _M_node() { }
 8001c22:	63e3      	str	r3, [r4, #60]	; 0x3c
 8001c24:	6423      	str	r3, [r4, #64]	; 0x40
 8001c26:	6463      	str	r3, [r4, #68]	; 0x44
 8001c28:	64a3      	str	r3, [r4, #72]	; 0x48
 8001c2a:	64e3      	str	r3, [r4, #76]	; 0x4c
 8001c2c:	6523      	str	r3, [r4, #80]	; 0x50
 8001c2e:	6563      	str	r3, [r4, #84]	; 0x54
 8001c30:	65a3      	str	r3, [r4, #88]	; 0x58
    _M_initialize_map(size_t __num_elements)
    {
      const size_t __num_nodes = (__num_elements/ __deque_buf_size(sizeof(_Tp))
				  + 1);

      this->_M_impl._M_map_size = std::max((size_t) _S_initial_map_size,
 8001c32:	63a2      	str	r2, [r4, #56]	; 0x38
    {
      _Map_pointer __cur;
      __try
	{
	  for (__cur = __nstart; __cur < __nfinish; ++__cur)
	    *__cur = this->_M_allocate_node();
 8001c34:	60f0      	str	r0, [r6, #12]
 8001c36:	2020      	movs	r0, #32
 8001c38:	f000 fe96 	bl	8002968 <_Znwj>
 8001c3c:	4607      	mov	r7, r0
      const size_t __num_nodes = (__num_elements/ __deque_buf_size(sizeof(_Tp))
				  + 1);

      this->_M_impl._M_map_size = std::max((size_t) _S_initial_map_size,
					   size_t(__num_nodes + 2));
      this->_M_impl._M_map = _M_allocate_map(this->_M_impl._M_map_size);
 8001c3e:	6360      	str	r0, [r4, #52]	; 0x34
 8001c40:	f44f 7000 	mov.w	r0, #512	; 0x200
      // starts in the middle elements and grows outwards.  So nstart may be
      // the beginning of _M_map, but for small maps it may be as far in as
      // _M_map+3.

      _Map_pointer __nstart = (this->_M_impl._M_map
			       + (this->_M_impl._M_map_size - __num_nodes) / 2);
 8001c44:	6ba5      	ldr	r5, [r4, #56]	; 0x38
 8001c46:	f000 fe8f 	bl	8002968 <_Znwj>
 8001c4a:	3d01      	subs	r5, #1
 8001c4c:	086d      	lsrs	r5, r5, #1
    _Deque_base<_Tp, _Alloc>::
    ~_Deque_base() _GLIBCXX_NOEXCEPT
    {
      if (this->_M_impl._M_map)
	{
	  _M_destroy_nodes(this->_M_impl._M_start._M_node,
 8001c4e:	f106 0e10 	add.w	lr, r6, #16
    void
    _Deque_base<_Tp, _Alloc>::
    _M_destroy_nodes(_Map_pointer __nstart,
		     _Map_pointer __nfinish) _GLIBCXX_NOEXCEPT
    {
      for (_Map_pointer __n = __nstart; __n < __nfinish; ++__n)
 8001c52:	f106 010c 	add.w	r1, r6, #12
      // starts in the middle elements and grows outwards.  So nstart may be
      // the beginning of _M_map, but for small maps it may be as far in as
      // _M_map+3.

      _Map_pointer __nstart = (this->_M_impl._M_map
			       + (this->_M_impl._M_map_size - __num_nodes) / 2);
 8001c56:	eb07 0285 	add.w	r2, r7, r5, lsl #2
      void
      _M_set_node(_Map_pointer __new_node) _GLIBCXX_NOEXCEPT
      {
	_M_node = __new_node;
	_M_first = *__new_node;
	_M_last = _M_first + difference_type(_S_buffer_size());
 8001c5a:	f500 7300 	add.w	r3, r0, #512	; 0x200
    void
    _Deque_base<_Tp, _Alloc>::
    _M_destroy_nodes(_Map_pointer __nstart,
		     _Map_pointer __nfinish) _GLIBCXX_NOEXCEPT
    {
      for (_Map_pointer __n = __nstart; __n < __nfinish; ++__n)
 8001c5e:	458e      	cmp	lr, r1
    {
      _Map_pointer __cur;
      __try
	{
	  for (__cur = __nstart; __cur < __nfinish; ++__cur)
	    *__cur = this->_M_allocate_node();
 8001c60:	f847 0025 	str.w	r0, [r7, r5, lsl #2]
       *  immediately afterwards, based on _M_first and _M_last.
       */
      void
      _M_set_node(_Map_pointer __new_node) _GLIBCXX_NOEXCEPT
      {
	_M_node = __new_node;
 8001c64:	64a2      	str	r2, [r4, #72]	; 0x48
 8001c66:	65a2      	str	r2, [r4, #88]	; 0x58
	_M_first = *__new_node;
 8001c68:	6420      	str	r0, [r4, #64]	; 0x40
 8001c6a:	6520      	str	r0, [r4, #80]	; 0x50
	  __throw_exception_again;
	}

      this->_M_impl._M_start._M_set_node(__nstart);
      this->_M_impl._M_finish._M_set_node(__nfinish - 1);
      this->_M_impl._M_start._M_cur = _M_impl._M_start._M_first;
 8001c6c:	63e0      	str	r0, [r4, #60]	; 0x3c
      this->_M_impl._M_finish._M_cur = (this->_M_impl._M_finish._M_first
 8001c6e:	64e0      	str	r0, [r4, #76]	; 0x4c
      void
      _M_set_node(_Map_pointer __new_node) _GLIBCXX_NOEXCEPT
      {
	_M_node = __new_node;
	_M_first = *__new_node;
	_M_last = _M_first + difference_type(_S_buffer_size());
 8001c70:	6463      	str	r3, [r4, #68]	; 0x44
 8001c72:	6563      	str	r3, [r4, #84]	; 0x54
    void
    _Deque_base<_Tp, _Alloc>::
    _M_destroy_nodes(_Map_pointer __nstart,
		     _Map_pointer __nfinish) _GLIBCXX_NOEXCEPT
    {
      for (_Map_pointer __n = __nstart; __n < __nfinish; ++__n)
 8001c74:	d902      	bls.n	8001c7c <_ZN7HIH6030C1Ev+0xf4>
      }

      // __p is not permitted to be a null pointer.
      void
      deallocate(pointer __p, size_type)
      { ::operator delete(__p); }
 8001c76:	68f0      	ldr	r0, [r6, #12]
 8001c78:	f000 fe8c 	bl	8002994 <_ZdlPv>
 8001c7c:	4630      	mov	r0, r6
 8001c7e:	f000 fe89 	bl	8002994 <_ZdlPv>
 8001c82:	f7ff fc6b 	bl	800155c <_ZN10SPI2_class11getInstanceEv>
{
	m_csSetting.gpioType = GPIOB;
 8001c86:	4a0c      	ldr	r2, [pc, #48]	; (8001cb8 <_ZN7HIH6030C1Ev+0x130>)
	m_csSetting.csPin = GPIO_Pin_12;
 8001c88:	f44f 5380 	mov.w	r3, #4096	; 0x1000
#include <stdio.h>

HIH6030::HIH6030():
	 m_temperature(0)
	,m_humidity(0)
	,m_sp(&SPI2_class::getInstance())
 8001c8c:	6660      	str	r0, [r4, #100]	; 0x64
{
	m_csSetting.gpioType = GPIOB;
 8001c8e:	65e2      	str	r2, [r4, #92]	; 0x5c
	m_csSetting.csPin = GPIO_Pin_12;
 8001c90:	f8a4 3060 	strh.w	r3, [r4, #96]	; 0x60
	m_sp->setBuffers(&m_inBuf,&m_outBuf);
 8001c94:	f104 020c 	add.w	r2, r4, #12
 8001c98:	f104 0134 	add.w	r1, r4, #52	; 0x34
 8001c9c:	f7ff fc92 	bl	80015c4 <_ZN10SPI2_class10setBuffersEPSt5queueIiSt5dequeIiSaIiEEES5_>
	m_sp->setCS(m_csSetting);
 8001ca0:	f104 035c 	add.w	r3, r4, #92	; 0x5c
 8001ca4:	6e60      	ldr	r0, [r4, #100]	; 0x64
 8001ca6:	e893 0006 	ldmia.w	r3, {r1, r2}
 8001caa:	f7ff fc8f 	bl	80015cc <_ZN10SPI2_class5setCSE6CSsetS>
}
 8001cae:	4620      	mov	r0, r4
 8001cb0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001cb2:	bf00      	nop
 8001cb4:	08002fec 	.word	0x08002fec
 8001cb8:	40010c00 	.word	0x40010c00

08001cbc <_ZN7HIH603014getTemperatureEv>:
{

}

int HIH6030::getTemperature()
{
 8001cbc:	b508      	push	{r3, lr}
	return (m_temperature * 100);
 8001cbe:	4903      	ldr	r1, [pc, #12]	; (8001ccc <_ZN7HIH603014getTemperatureEv+0x10>)
 8001cc0:	6840      	ldr	r0, [r0, #4]
 8001cc2:	f7fe fbb3 	bl	800042c <__aeabi_fmul>
 8001cc6:	f7fe fd01 	bl	80006cc <__aeabi_f2iz>
}
 8001cca:	bd08      	pop	{r3, pc}
 8001ccc:	42c80000 	.word	0x42c80000

08001cd0 <_ZN7HIH603011getHumidityEv>:

int HIH6030::getHumidity()
{
 8001cd0:	b508      	push	{r3, lr}
	return (m_humidity * 100);
 8001cd2:	4903      	ldr	r1, [pc, #12]	; (8001ce0 <_ZN7HIH603011getHumidityEv+0x10>)
 8001cd4:	6880      	ldr	r0, [r0, #8]
 8001cd6:	f7fe fba9 	bl	800042c <__aeabi_fmul>
 8001cda:	f7fe fcf7 	bl	80006cc <__aeabi_f2iz>
}
 8001cde:	bd08      	pop	{r3, pc}
 8001ce0:	42c80000 	.word	0x42c80000

08001ce4 <_ZNSt5dequeIiSaIiEE16_M_push_back_auxERKi>:
      void
      deque<_Tp, _Alloc>::
      _M_push_back_aux(_Args&&... __args)
#else
      void
      deque<_Tp, _Alloc>::
 8001ce4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
       */
      void
      _M_reserve_map_at_back(size_type __nodes_to_add = 1)
      {
	if (__nodes_to_add + 1 > this->_M_impl._M_map_size
	    - (this->_M_impl._M_finish._M_node - this->_M_impl._M_map))
 8001ce8:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8001cea:	6806      	ldr	r6, [r0, #0]
 8001cec:	6842      	ldr	r2, [r0, #4]
       *  (And consequently, %deque iterators.)
       */
      void
      _M_reserve_map_at_back(size_type __nodes_to_add = 1)
      {
	if (__nodes_to_add + 1 > this->_M_impl._M_map_size
 8001cee:	1bab      	subs	r3, r5, r6
 8001cf0:	eba2 03a3 	sub.w	r3, r2, r3, asr #2
 8001cf4:	2b01      	cmp	r3, #1
 8001cf6:	4604      	mov	r4, r0
 8001cf8:	460f      	mov	r7, r1
 8001cfa:	d913      	bls.n	8001d24 <_ZNSt5dequeIiSaIiEE16_M_push_back_auxERKi+0x40>
      allocate(size_type __n, const void* = 0)
      { 
	if (__n > this->max_size())
	  std::__throw_bad_alloc();

	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
 8001cfc:	f44f 7000 	mov.w	r0, #512	; 0x200
 8001d00:	f000 fe32 	bl	8002968 <_Znwj>
      _M_push_back_aux(const value_type& __t)
#endif
      {
	_M_reserve_map_at_back();
	*(this->_M_impl._M_finish._M_node + 1) = this->_M_allocate_node();
 8001d04:	6068      	str	r0, [r5, #4]
#if __cplusplus >= 201103L
	    _Alloc_traits::construct(this->_M_impl,
	                             this->_M_impl._M_finish._M_cur,
			             std::forward<_Args>(__args)...);
#else
	    this->_M_impl.construct(this->_M_impl._M_finish._M_cur, __t);
 8001d06:	69a3      	ldr	r3, [r4, #24]
#else
      // _GLIBCXX_RESOLVE_LIB_DEFECTS
      // 402. wrong new expression in [some_] allocator::construct
      void 
      construct(pointer __p, const _Tp& __val) 
      { ::new((void *)__p) _Tp(__val); }
 8001d08:	b10b      	cbz	r3, 8001d0e <_ZNSt5dequeIiSaIiEE16_M_push_back_auxERKi+0x2a>
 8001d0a:	683a      	ldr	r2, [r7, #0]
 8001d0c:	601a      	str	r2, [r3, #0]
#endif
	    this->_M_impl._M_finish._M_set_node(this->_M_impl._M_finish._M_node
						+ 1);
 8001d0e:	6a63      	ldr	r3, [r4, #36]	; 0x24
       *  immediately afterwards, based on _M_first and _M_last.
       */
      void
      _M_set_node(_Map_pointer __new_node) _GLIBCXX_NOEXCEPT
      {
	_M_node = __new_node;
 8001d10:	1d1a      	adds	r2, r3, #4
 8001d12:	6262      	str	r2, [r4, #36]	; 0x24
	_M_first = *__new_node;
 8001d14:	685b      	ldr	r3, [r3, #4]
	_M_last = _M_first + difference_type(_S_buffer_size());
 8001d16:	f503 7200 	add.w	r2, r3, #512	; 0x200
       */
      void
      _M_set_node(_Map_pointer __new_node) _GLIBCXX_NOEXCEPT
      {
	_M_node = __new_node;
	_M_first = *__new_node;
 8001d1a:	61e3      	str	r3, [r4, #28]
	    this->_M_impl._M_finish._M_cur = this->_M_impl._M_finish._M_first;
 8001d1c:	61a3      	str	r3, [r4, #24]
	_M_last = _M_first + difference_type(_S_buffer_size());
 8001d1e:	6222      	str	r2, [r4, #32]
 8001d20:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    void
    deque<_Tp, _Alloc>::
    _M_reallocate_map(size_type __nodes_to_add, bool __add_at_front)
    {
      const size_type __old_num_nodes
	= this->_M_impl._M_finish._M_node - this->_M_impl._M_start._M_node + 1;
 8001d24:	6941      	ldr	r1, [r0, #20]
 8001d26:	ebc1 0805 	rsb	r8, r1, r5
 8001d2a:	ea4f 08a8 	mov.w	r8, r8, asr #2
 8001d2e:	f108 0801 	add.w	r8, r8, #1
      const size_type __new_num_nodes = __old_num_nodes + __nodes_to_add;
 8001d32:	f108 0901 	add.w	r9, r8, #1

      _Map_pointer __new_nstart;
      if (this->_M_impl._M_map_size > 2 * __new_num_nodes)
 8001d36:	ebb2 0f49 	cmp.w	r2, r9, lsl #1
 8001d3a:	d82f      	bhi.n	8001d9c <_ZNSt5dequeIiSaIiEE16_M_push_back_auxERKi+0xb8>
    max(const _Tp& __a, const _Tp& __b)
    {
      // concept requirements
      __glibcxx_function_requires(_LessThanComparableConcept<_Tp>)
      //return  __a < __b ? __b : __a;
      if (__a < __b)
 8001d3c:	2a00      	cmp	r2, #0
 8001d3e:	d03e      	beq.n	8001dbe <_ZNSt5dequeIiSaIiEE16_M_push_back_auxERKi+0xda>
	}
      else
	{
	  size_type __new_map_size = this->_M_impl._M_map_size
	                             + std::max(this->_M_impl._M_map_size,
						__nodes_to_add) + 2;
 8001d40:	0055      	lsls	r5, r2, #1
 8001d42:	3502      	adds	r5, #2
      // NB: __n is permitted to be 0.  The C++ standard says nothing
      // about what the return value is when __n == 0.
      pointer
      allocate(size_type __n, const void* = 0)
      { 
	if (__n > this->max_size())
 8001d44:	f1b5 4f80 	cmp.w	r5, #1073741824	; 0x40000000
 8001d48:	d248      	bcs.n	8001ddc <_ZNSt5dequeIiSaIiEE16_M_push_back_auxERKi+0xf8>
	  std::__throw_bad_alloc();

	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
 8001d4a:	00a8      	lsls	r0, r5, #2
 8001d4c:	f000 fe0c 	bl	8002968 <_Znwj>
#if __cplusplus >= 201103L
	  // trivial types can have deleted assignment
	  static_assert( is_copy_assignable<_Tp>::value,
	                 "type is not assignable" );
#endif
	  const ptrdiff_t _Num = __last - __first;
 8001d50:	6a62      	ldr	r2, [r4, #36]	; 0x24

	  _Map_pointer __new_map = this->_M_allocate_map(__new_map_size);
	  __new_nstart = __new_map + (__new_map_size - __new_num_nodes) / 2
	                 + (__add_at_front ? __nodes_to_add : 0);
	  std::copy(this->_M_impl._M_start._M_node,
 8001d52:	6961      	ldr	r1, [r4, #20]
 8001d54:	3204      	adds	r2, #4
	  size_type __new_map_size = this->_M_impl._M_map_size
	                             + std::max(this->_M_impl._M_map_size,
						__nodes_to_add) + 2;

	  _Map_pointer __new_map = this->_M_allocate_map(__new_map_size);
	  __new_nstart = __new_map + (__new_map_size - __new_num_nodes) / 2
 8001d56:	ebc9 0605 	rsb	r6, r9, r5
 8001d5a:	1a52      	subs	r2, r2, r1
 8001d5c:	0876      	lsrs	r6, r6, #1
	  if (_Num)
 8001d5e:	0893      	lsrs	r3, r2, #2
 8001d60:	4682      	mov	sl, r0
 8001d62:	eb00 0686 	add.w	r6, r0, r6, lsl #2
 8001d66:	d12c      	bne.n	8001dc2 <_ZNSt5dequeIiSaIiEE16_M_push_back_auxERKi+0xde>
      }

      // __p is not permitted to be a null pointer.
      void
      deallocate(pointer __p, size_type)
      { ::operator delete(__p); }
 8001d68:	6820      	ldr	r0, [r4, #0]
 8001d6a:	f000 fe13 	bl	8002994 <_ZdlPv>
	  std::copy(this->_M_impl._M_start._M_node,
		    this->_M_impl._M_finish._M_node + 1,
		    __new_nstart);
	  _M_deallocate_map(this->_M_impl._M_map, this->_M_impl._M_map_size);

	  this->_M_impl._M_map = __new_map;
 8001d6e:	f8c4 a000 	str.w	sl, [r4]
	  this->_M_impl._M_map_size = __new_map_size;
 8001d72:	6065      	str	r5, [r4, #4]
       *  immediately afterwards, based on _M_first and _M_last.
       */
      void
      _M_set_node(_Map_pointer __new_node) _GLIBCXX_NOEXCEPT
      {
	_M_node = __new_node;
 8001d74:	6166      	str	r6, [r4, #20]
	_M_first = *__new_node;
 8001d76:	6833      	ldr	r3, [r6, #0]
	}

      this->_M_impl._M_start._M_set_node(__new_nstart);
      this->_M_impl._M_finish._M_set_node(__new_nstart + __old_num_nodes - 1);
 8001d78:	f108 4880 	add.w	r8, r8, #1073741824	; 0x40000000
 8001d7c:	f108 38ff 	add.w	r8, r8, #4294967295
	_M_last = _M_first + difference_type(_S_buffer_size());
 8001d80:	f503 7200 	add.w	r2, r3, #512	; 0x200
 8001d84:	eb06 0588 	add.w	r5, r6, r8, lsl #2
 8001d88:	6122      	str	r2, [r4, #16]
       *  immediately afterwards, based on _M_first and _M_last.
       */
      void
      _M_set_node(_Map_pointer __new_node) _GLIBCXX_NOEXCEPT
      {
	_M_node = __new_node;
 8001d8a:	6265      	str	r5, [r4, #36]	; 0x24
	_M_first = *__new_node;
 8001d8c:	60e3      	str	r3, [r4, #12]
 8001d8e:	f856 3028 	ldr.w	r3, [r6, r8, lsl #2]
	_M_last = _M_first + difference_type(_S_buffer_size());
 8001d92:	f503 7200 	add.w	r2, r3, #512	; 0x200
       */
      void
      _M_set_node(_Map_pointer __new_node) _GLIBCXX_NOEXCEPT
      {
	_M_node = __new_node;
	_M_first = *__new_node;
 8001d96:	61e3      	str	r3, [r4, #28]
	_M_last = _M_first + difference_type(_S_buffer_size());
 8001d98:	6222      	str	r2, [r4, #32]
 8001d9a:	e7af      	b.n	8001cfc <_ZNSt5dequeIiSaIiEE16_M_push_back_auxERKi+0x18>
      const size_type __new_num_nodes = __old_num_nodes + __nodes_to_add;

      _Map_pointer __new_nstart;
      if (this->_M_impl._M_map_size > 2 * __new_num_nodes)
	{
	  __new_nstart = this->_M_impl._M_map + (this->_M_impl._M_map_size
 8001d9c:	ebc9 0202 	rsb	r2, r9, r2
 8001da0:	0852      	lsrs	r2, r2, #1
 8001da2:	eb06 0682 	add.w	r6, r6, r2, lsl #2
					 - __new_num_nodes) / 2
	                 + (__add_at_front ? __nodes_to_add : 0);
	  if (__new_nstart < this->_M_impl._M_start._M_node)
 8001da6:	42b1      	cmp	r1, r6
#if __cplusplus >= 201103L
	  // trivial types can have deleted assignment
	  static_assert( is_copy_assignable<_Tp>::value,
	                 "type is not assignable" );
#endif
	  const ptrdiff_t _Num = __last - __first;
 8001da8:	f105 0204 	add.w	r2, r5, #4
 8001dac:	eba2 0201 	sub.w	r2, r2, r1
 8001db0:	d90b      	bls.n	8001dca <_ZNSt5dequeIiSaIiEE16_M_push_back_auxERKi+0xe6>
	  if (_Num)
 8001db2:	0893      	lsrs	r3, r2, #2
 8001db4:	d0de      	beq.n	8001d74 <_ZNSt5dequeIiSaIiEE16_M_push_back_auxERKi+0x90>
	    __builtin_memmove(__result, __first, sizeof(_Tp) * _Num);
 8001db6:	4630      	mov	r0, r6
 8001db8:	f000 ff8e 	bl	8002cd8 <memmove>
 8001dbc:	e7da      	b.n	8001d74 <_ZNSt5dequeIiSaIiEE16_M_push_back_auxERKi+0x90>
	}
      else
	{
	  size_type __new_map_size = this->_M_impl._M_map_size
	                             + std::max(this->_M_impl._M_map_size,
						__nodes_to_add) + 2;
 8001dbe:	2503      	movs	r5, #3
 8001dc0:	e7c3      	b.n	8001d4a <_ZNSt5dequeIiSaIiEE16_M_push_back_auxERKi+0x66>
 8001dc2:	4630      	mov	r0, r6
 8001dc4:	f000 ff88 	bl	8002cd8 <memmove>
 8001dc8:	e7ce      	b.n	8001d68 <_ZNSt5dequeIiSaIiEE16_M_push_back_auxERKi+0x84>
	  // trivial types can have deleted assignment
	  static_assert( is_copy_assignable<_Tp>::value,
	                 "type is not assignable" );
#endif
	  const ptrdiff_t _Num = __last - __first;
	  if (_Num)
 8001dca:	0890      	lsrs	r0, r2, #2
	  if (__new_nstart < this->_M_impl._M_start._M_node)
	    std::copy(this->_M_impl._M_start._M_node,
		      this->_M_impl._M_finish._M_node + 1,
		      __new_nstart);
	  else
	    std::copy_backward(this->_M_impl._M_start._M_node,
 8001dcc:	ea4f 0388 	mov.w	r3, r8, lsl #2
 8001dd0:	d0d0      	beq.n	8001d74 <_ZNSt5dequeIiSaIiEE16_M_push_back_auxERKi+0x90>
	    __builtin_memmove(__result - _Num, __first, sizeof(_Tp) * _Num);
 8001dd2:	1a98      	subs	r0, r3, r2
 8001dd4:	4430      	add	r0, r6
 8001dd6:	f000 ff7f 	bl	8002cd8 <memmove>
 8001dda:	e7cb      	b.n	8001d74 <_ZNSt5dequeIiSaIiEE16_M_push_back_auxERKi+0x90>
      // about what the return value is when __n == 0.
      pointer
      allocate(size_type __n, const void* = 0)
      { 
	if (__n > this->max_size())
	  std::__throw_bad_alloc();
 8001ddc:	f000 fddc 	bl	8002998 <_ZSt17__throw_bad_allocv>

08001de0 <_ZN7HIH603014measureRequestEv>:

void HIH6030::measureRequest()
{
 8001de0:	b510      	push	{r4, lr}
 8001de2:	4604      	mov	r4, r0
	if(m_sp->isBusy() ==  false)
 8001de4:	6e40      	ldr	r0, [r0, #100]	; 0x64
{
	return (m_humidity * 100);
}

void HIH6030::measureRequest()
{
 8001de6:	b082      	sub	sp, #8
	if(m_sp->isBusy() ==  false)
 8001de8:	6803      	ldr	r3, [r0, #0]
 8001dea:	681b      	ldr	r3, [r3, #0]
 8001dec:	4798      	blx	r3
 8001dee:	b140      	cbz	r0, 8001e02 <_ZN7HIH603014measureRequestEv+0x22>
       *  needed, it should be retrieved before pop_front() is called.
       */
      void
      pop_front() _GLIBCXX_NOEXCEPT
      {
	if (this->_M_impl._M_start._M_cur
 8001df0:	6c62      	ldr	r2, [r4, #68]	; 0x44
	    != this->_M_impl._M_start._M_last - 1)
 8001df2:	6be3      	ldr	r3, [r4, #60]	; 0x3c
       *  needed, it should be retrieved before pop_front() is called.
       */
      void
      pop_front() _GLIBCXX_NOEXCEPT
      {
	if (this->_M_impl._M_start._M_cur
 8001df4:	3a04      	subs	r2, #4
 8001df6:	4293      	cmp	r3, r2
 8001df8:	d017      	beq.n	8001e2a <_ZN7HIH603014measureRequestEv+0x4a>
	    != this->_M_impl._M_start._M_last - 1)
	  {
	    _Alloc_traits::destroy(this->_M_impl,
	                           this->_M_impl._M_start._M_cur);
	    ++this->_M_impl._M_start._M_cur;
 8001dfa:	3304      	adds	r3, #4
 8001dfc:	63e3      	str	r3, [r4, #60]	; 0x3c
	{
		m_outBuf.push(0xAA);
		m_sp->send();
	}
	m_inBuf.pop();
}
 8001dfe:	b002      	add	sp, #8
 8001e00:	bd10      	pop	{r4, pc}
       *  done in constant time.
       */
      void
      push_back(const value_type& __x)
      {
	if (this->_M_impl._M_finish._M_cur
 8001e02:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
	    != this->_M_impl._M_finish._M_last - 1)
 8001e04:	6a63      	ldr	r3, [r4, #36]	; 0x24
       *  done in constant time.
       */
      void
      push_back(const value_type& __x)
      {
	if (this->_M_impl._M_finish._M_cur
 8001e06:	3a04      	subs	r2, #4

void HIH6030::measureRequest()
{
	if(m_sp->isBusy() ==  false)
	{
		m_outBuf.push(0xAA);
 8001e08:	21aa      	movs	r1, #170	; 0xaa
 8001e0a:	4293      	cmp	r3, r2
 8001e0c:	9101      	str	r1, [sp, #4]
 8001e0e:	d01a      	beq.n	8001e46 <_ZN7HIH603014measureRequestEv+0x66>
#else
      // _GLIBCXX_RESOLVE_LIB_DEFECTS
      // 402. wrong new expression in [some_] allocator::construct
      void 
      construct(pointer __p, const _Tp& __val) 
      { ::new((void *)__p) _Tp(__val); }
 8001e10:	b103      	cbz	r3, 8001e14 <_ZN7HIH603014measureRequestEv+0x34>
 8001e12:	6019      	str	r1, [r3, #0]
	    != this->_M_impl._M_finish._M_last - 1)
	  {
	    _Alloc_traits::construct(this->_M_impl,
	                             this->_M_impl._M_finish._M_cur, __x);
	    ++this->_M_impl._M_finish._M_cur;
 8001e14:	3304      	adds	r3, #4
 8001e16:	6263      	str	r3, [r4, #36]	; 0x24
		m_sp->send();
 8001e18:	6e60      	ldr	r0, [r4, #100]	; 0x64
 8001e1a:	6803      	ldr	r3, [r0, #0]
 8001e1c:	68db      	ldr	r3, [r3, #12]
 8001e1e:	4798      	blx	r3
       *  needed, it should be retrieved before pop_front() is called.
       */
      void
      pop_front() _GLIBCXX_NOEXCEPT
      {
	if (this->_M_impl._M_start._M_cur
 8001e20:	6c62      	ldr	r2, [r4, #68]	; 0x44
	    != this->_M_impl._M_start._M_last - 1)
 8001e22:	6be3      	ldr	r3, [r4, #60]	; 0x3c
       *  needed, it should be retrieved before pop_front() is called.
       */
      void
      pop_front() _GLIBCXX_NOEXCEPT
      {
	if (this->_M_impl._M_start._M_cur
 8001e24:	3a04      	subs	r2, #4
 8001e26:	4293      	cmp	r3, r2
 8001e28:	d1e7      	bne.n	8001dfa <_ZN7HIH603014measureRequestEv+0x1a>
      }

      // __p is not permitted to be a null pointer.
      void
      deallocate(pointer __p, size_type)
      { ::operator delete(__p); }
 8001e2a:	6c20      	ldr	r0, [r4, #64]	; 0x40
 8001e2c:	f000 fdb2 	bl	8002994 <_ZdlPv>
    _M_pop_front_aux()
    {
      _Alloc_traits::destroy(_M_get_Tp_allocator(),
			     this->_M_impl._M_start._M_cur);
      _M_deallocate_node(this->_M_impl._M_start._M_first);
      this->_M_impl._M_start._M_set_node(this->_M_impl._M_start._M_node + 1);
 8001e30:	6ca3      	ldr	r3, [r4, #72]	; 0x48
       *  immediately afterwards, based on _M_first and _M_last.
       */
      void
      _M_set_node(_Map_pointer __new_node) _GLIBCXX_NOEXCEPT
      {
	_M_node = __new_node;
 8001e32:	1d1a      	adds	r2, r3, #4
 8001e34:	64a2      	str	r2, [r4, #72]	; 0x48
	_M_first = *__new_node;
 8001e36:	685b      	ldr	r3, [r3, #4]
	_M_last = _M_first + difference_type(_S_buffer_size());
 8001e38:	f503 7200 	add.w	r2, r3, #512	; 0x200
       */
      void
      _M_set_node(_Map_pointer __new_node) _GLIBCXX_NOEXCEPT
      {
	_M_node = __new_node;
	_M_first = *__new_node;
 8001e3c:	6423      	str	r3, [r4, #64]	; 0x40
      this->_M_impl._M_start._M_cur = this->_M_impl._M_start._M_first;
 8001e3e:	63e3      	str	r3, [r4, #60]	; 0x3c
	_M_last = _M_first + difference_type(_S_buffer_size());
 8001e40:	6462      	str	r2, [r4, #68]	; 0x44
	}
	m_inBuf.pop();
}
 8001e42:	b002      	add	sp, #8
 8001e44:	bd10      	pop	{r4, pc}
	    _Alloc_traits::construct(this->_M_impl,
	                             this->_M_impl._M_finish._M_cur, __x);
	    ++this->_M_impl._M_finish._M_cur;
	  }
	else
	  _M_push_back_aux(__x);
 8001e46:	a901      	add	r1, sp, #4
 8001e48:	f104 000c 	add.w	r0, r4, #12
 8001e4c:	f7ff ff4a 	bl	8001ce4 <_ZNSt5dequeIiSaIiEE16_M_push_back_auxERKi>
 8001e50:	e7e2      	b.n	8001e18 <_ZN7HIH603014measureRequestEv+0x38>
 8001e52:	bf00      	nop

08001e54 <_ZN7HIH603015getMeasurementsEv>:

void HIH6030::getMeasurements()
{
 8001e54:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001e56:	4604      	mov	r4, r0
	if(m_sp->isBusy() ==  false)
 8001e58:	6e40      	ldr	r0, [r0, #100]	; 0x64
	}
	m_inBuf.pop();
}

void HIH6030::getMeasurements()
{
 8001e5a:	b083      	sub	sp, #12
	if(m_sp->isBusy() ==  false)
 8001e5c:	6803      	ldr	r3, [r0, #0]
 8001e5e:	681b      	ldr	r3, [r3, #0]
 8001e60:	4798      	blx	r3
 8001e62:	2800      	cmp	r0, #0
 8001e64:	d046      	beq.n	8001ef4 <_ZN7HIH603015getMeasurementsEv+0xa0>
 8001e66:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 8001e68:	6c67      	ldr	r7, [r4, #68]	; 0x44
	}
	m_inBuf.pop();
}

void HIH6030::getMeasurements()
{
 8001e6a:	2500      	movs	r5, #0
       *  needed, it should be retrieved before pop_front() is called.
       */
      void
      pop_front() _GLIBCXX_NOEXCEPT
      {
	if (this->_M_impl._M_start._M_cur
 8001e6c:	1f3b      	subs	r3, r7, #4
 8001e6e:	4299      	cmp	r1, r3

	int tmp = 0;
	unsigned int pomiar = 0;
	do
	{
		tmp = m_inBuf.front();
 8001e70:	680e      	ldr	r6, [r1, #0]
	    != this->_M_impl._M_start._M_last - 1)
	  {
	    _Alloc_traits::destroy(this->_M_impl,
	                           this->_M_impl._M_start._M_cur);
	    ++this->_M_impl._M_start._M_cur;
 8001e72:	f101 0104 	add.w	r1, r1, #4
       *  needed, it should be retrieved before pop_front() is called.
       */
      void
      pop_front() _GLIBCXX_NOEXCEPT
      {
	if (this->_M_impl._M_start._M_cur
 8001e76:	d02d      	beq.n	8001ed4 <_ZN7HIH603015getMeasurementsEv+0x80>
 8001e78:	6ca0      	ldr	r0, [r4, #72]	; 0x48
	    != this->_M_impl._M_start._M_last - 1)
	  {
	    _Alloc_traits::destroy(this->_M_impl,
	                           this->_M_impl._M_start._M_cur);
	    ++this->_M_impl._M_start._M_cur;
 8001e7a:	63e1      	str	r1, [r4, #60]	; 0x3c
		m_sp->send();
	}

	int tmp = 0;
	unsigned int pomiar = 0;
	do
 8001e7c:	6da2      	ldr	r2, [r4, #88]	; 0x58
 8001e7e:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 8001e80:	1a12      	subs	r2, r2, r0
 8001e82:	6d20      	ldr	r0, [r4, #80]	; 0x50
 8001e84:	1092      	asrs	r2, r2, #2
 8001e86:	1a1b      	subs	r3, r3, r0
 8001e88:	3a01      	subs	r2, #1
 8001e8a:	109b      	asrs	r3, r3, #2
 8001e8c:	eb03 13c2 	add.w	r3, r3, r2, lsl #7
 8001e90:	1a7a      	subs	r2, r7, r1
 8001e92:	eb03 03a2 	add.w	r3, r3, r2, asr #2
	{
		tmp = m_inBuf.front();
		m_inBuf.pop();
		pomiar = (pomiar << 8);
		pomiar |= tmp;
 8001e96:	ea46 2505 	orr.w	r5, r6, r5, lsl #8
		m_sp->send();
	}

	int tmp = 0;
	unsigned int pomiar = 0;
	do
 8001e9a:	2b00      	cmp	r3, #0
 8001e9c:	d1e6      	bne.n	8001e6c <_ZN7HIH603015getMeasurementsEv+0x18>
	}while(m_inBuf.size());

	int h = (pomiar >> 16 ) & 0x3FFF;
	int t = (pomiar >> 2 ) & 0x3FFF;

	m_humidity 	= (((float)h * 100) / 16382);
 8001e9e:	f3c5 400d 	ubfx	r0, r5, #16, #14
 8001ea2:	f7fe fa6f 	bl	8000384 <__aeabi_i2f>
 8001ea6:	4937      	ldr	r1, [pc, #220]	; (8001f84 <_ZN7HIH603015getMeasurementsEv+0x130>)
 8001ea8:	f7fe fac0 	bl	800042c <__aeabi_fmul>
 8001eac:	4936      	ldr	r1, [pc, #216]	; (8001f88 <_ZN7HIH603015getMeasurementsEv+0x134>)
 8001eae:	f7fe fb71 	bl	8000594 <__aeabi_fdiv>
 8001eb2:	60a0      	str	r0, [r4, #8]
	m_temperature = (((float)t * 165) / 16382)-40;
 8001eb4:	f3c5 008d 	ubfx	r0, r5, #2, #14
 8001eb8:	f7fe fa64 	bl	8000384 <__aeabi_i2f>
 8001ebc:	4933      	ldr	r1, [pc, #204]	; (8001f8c <_ZN7HIH603015getMeasurementsEv+0x138>)
 8001ebe:	f7fe fab5 	bl	800042c <__aeabi_fmul>
 8001ec2:	4931      	ldr	r1, [pc, #196]	; (8001f88 <_ZN7HIH603015getMeasurementsEv+0x134>)
 8001ec4:	f7fe fb66 	bl	8000594 <__aeabi_fdiv>
 8001ec8:	4931      	ldr	r1, [pc, #196]	; (8001f90 <_ZN7HIH603015getMeasurementsEv+0x13c>)
 8001eca:	f7fe f9a5 	bl	8000218 <__aeabi_fsub>
 8001ece:	6060      	str	r0, [r4, #4]
}
 8001ed0:	b003      	add	sp, #12
 8001ed2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001ed4:	6c20      	ldr	r0, [r4, #64]	; 0x40
 8001ed6:	f000 fd5d 	bl	8002994 <_ZdlPv>
    _M_pop_front_aux()
    {
      _Alloc_traits::destroy(_M_get_Tp_allocator(),
			     this->_M_impl._M_start._M_cur);
      _M_deallocate_node(this->_M_impl._M_start._M_first);
      this->_M_impl._M_start._M_set_node(this->_M_impl._M_start._M_node + 1);
 8001eda:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 8001edc:	1d1a      	adds	r2, r3, #4
       *  immediately afterwards, based on _M_first and _M_last.
       */
      void
      _M_set_node(_Map_pointer __new_node) _GLIBCXX_NOEXCEPT
      {
	_M_node = __new_node;
 8001ede:	64a2      	str	r2, [r4, #72]	; 0x48
	_M_first = *__new_node;
 8001ee0:	685b      	ldr	r3, [r3, #4]
      this->_M_impl._M_start._M_cur = this->_M_impl._M_start._M_first;
 8001ee2:	4610      	mov	r0, r2
	_M_last = _M_first + difference_type(_S_buffer_size());
 8001ee4:	f503 7200 	add.w	r2, r3, #512	; 0x200
 8001ee8:	4617      	mov	r7, r2
 8001eea:	4619      	mov	r1, r3
       */
      void
      _M_set_node(_Map_pointer __new_node) _GLIBCXX_NOEXCEPT
      {
	_M_node = __new_node;
	_M_first = *__new_node;
 8001eec:	6423      	str	r3, [r4, #64]	; 0x40
 8001eee:	63e3      	str	r3, [r4, #60]	; 0x3c
	_M_last = _M_first + difference_type(_S_buffer_size());
 8001ef0:	6462      	str	r2, [r4, #68]	; 0x44
 8001ef2:	e7c3      	b.n	8001e7c <_ZN7HIH603015getMeasurementsEv+0x28>
       */
      void
      push_back(const value_type& __x)
      {
	if (this->_M_impl._M_finish._M_cur
	    != this->_M_impl._M_finish._M_last - 1)
 8001ef4:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8001ef6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8001ef8:	3a04      	subs	r2, #4

void HIH6030::getMeasurements()
{
	if(m_sp->isBusy() ==  false)
	{
		m_outBuf.push(0xFF);
 8001efa:	21ff      	movs	r1, #255	; 0xff
       *  done in constant time.
       */
      void
      push_back(const value_type& __x)
      {
	if (this->_M_impl._M_finish._M_cur
 8001efc:	4293      	cmp	r3, r2
 8001efe:	9101      	str	r1, [sp, #4]
       *  to it.  The time complexity of the operation depends on the
       *  underlying sequence.
       */
      void
      push(const value_type& __x)
      { c.push_back(__x); }
 8001f00:	f104 050c 	add.w	r5, r4, #12
 8001f04:	d020      	beq.n	8001f48 <_ZN7HIH603015getMeasurementsEv+0xf4>
#else
      // _GLIBCXX_RESOLVE_LIB_DEFECTS
      // 402. wrong new expression in [some_] allocator::construct
      void 
      construct(pointer __p, const _Tp& __val) 
      { ::new((void *)__p) _Tp(__val); }
 8001f06:	b103      	cbz	r3, 8001f0a <_ZN7HIH603015getMeasurementsEv+0xb6>
 8001f08:	6019      	str	r1, [r3, #0]
	    != this->_M_impl._M_finish._M_last - 1)
	  {
	    _Alloc_traits::construct(this->_M_impl,
	                             this->_M_impl._M_finish._M_cur, __x);
	    ++this->_M_impl._M_finish._M_cur;
 8001f0a:	3304      	adds	r3, #4
 8001f0c:	6263      	str	r3, [r4, #36]	; 0x24
		m_outBuf.push(0xFF);
 8001f0e:	21ff      	movs	r1, #255	; 0xff
       *  done in constant time.
       */
      void
      push_back(const value_type& __x)
      {
	if (this->_M_impl._M_finish._M_cur
 8001f10:	4293      	cmp	r3, r2
 8001f12:	9101      	str	r1, [sp, #4]
 8001f14:	d020      	beq.n	8001f58 <_ZN7HIH603015getMeasurementsEv+0x104>
 8001f16:	b103      	cbz	r3, 8001f1a <_ZN7HIH603015getMeasurementsEv+0xc6>
 8001f18:	6019      	str	r1, [r3, #0]
	    != this->_M_impl._M_finish._M_last - 1)
	  {
	    _Alloc_traits::construct(this->_M_impl,
	                             this->_M_impl._M_finish._M_cur, __x);
	    ++this->_M_impl._M_finish._M_cur;
 8001f1a:	3304      	adds	r3, #4
 8001f1c:	6263      	str	r3, [r4, #36]	; 0x24
		m_outBuf.push(0xFF);
 8001f1e:	21ff      	movs	r1, #255	; 0xff
       *  done in constant time.
       */
      void
      push_back(const value_type& __x)
      {
	if (this->_M_impl._M_finish._M_cur
 8001f20:	4293      	cmp	r3, r2
 8001f22:	9101      	str	r1, [sp, #4]
 8001f24:	d020      	beq.n	8001f68 <_ZN7HIH603015getMeasurementsEv+0x114>
 8001f26:	b103      	cbz	r3, 8001f2a <_ZN7HIH603015getMeasurementsEv+0xd6>
 8001f28:	6019      	str	r1, [r3, #0]
	    != this->_M_impl._M_finish._M_last - 1)
	  {
	    _Alloc_traits::construct(this->_M_impl,
	                             this->_M_impl._M_finish._M_cur, __x);
	    ++this->_M_impl._M_finish._M_cur;
 8001f2a:	3304      	adds	r3, #4
 8001f2c:	6263      	str	r3, [r4, #36]	; 0x24
		m_outBuf.push(0xFF);
 8001f2e:	21ff      	movs	r1, #255	; 0xff
       *  done in constant time.
       */
      void
      push_back(const value_type& __x)
      {
	if (this->_M_impl._M_finish._M_cur
 8001f30:	4293      	cmp	r3, r2
 8001f32:	9101      	str	r1, [sp, #4]
 8001f34:	d020      	beq.n	8001f78 <_ZN7HIH603015getMeasurementsEv+0x124>
 8001f36:	b103      	cbz	r3, 8001f3a <_ZN7HIH603015getMeasurementsEv+0xe6>
 8001f38:	6019      	str	r1, [r3, #0]
	    != this->_M_impl._M_finish._M_last - 1)
	  {
	    _Alloc_traits::construct(this->_M_impl,
	                             this->_M_impl._M_finish._M_cur, __x);
	    ++this->_M_impl._M_finish._M_cur;
 8001f3a:	3304      	adds	r3, #4
 8001f3c:	6263      	str	r3, [r4, #36]	; 0x24
		m_sp->send();
 8001f3e:	6e60      	ldr	r0, [r4, #100]	; 0x64
 8001f40:	6803      	ldr	r3, [r0, #0]
 8001f42:	68db      	ldr	r3, [r3, #12]
 8001f44:	4798      	blx	r3
 8001f46:	e78e      	b.n	8001e66 <_ZN7HIH603015getMeasurementsEv+0x12>
	  }
	else
	  _M_push_back_aux(__x);
 8001f48:	a901      	add	r1, sp, #4
 8001f4a:	4628      	mov	r0, r5
 8001f4c:	f7ff feca 	bl	8001ce4 <_ZNSt5dequeIiSaIiEE16_M_push_back_auxERKi>
 8001f50:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8001f52:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8001f54:	3a04      	subs	r2, #4
 8001f56:	e7da      	b.n	8001f0e <_ZN7HIH603015getMeasurementsEv+0xba>
 8001f58:	a901      	add	r1, sp, #4
 8001f5a:	4628      	mov	r0, r5
 8001f5c:	f7ff fec2 	bl	8001ce4 <_ZNSt5dequeIiSaIiEE16_M_push_back_auxERKi>
 8001f60:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8001f62:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8001f64:	3a04      	subs	r2, #4
 8001f66:	e7da      	b.n	8001f1e <_ZN7HIH603015getMeasurementsEv+0xca>
 8001f68:	a901      	add	r1, sp, #4
 8001f6a:	4628      	mov	r0, r5
 8001f6c:	f7ff feba 	bl	8001ce4 <_ZNSt5dequeIiSaIiEE16_M_push_back_auxERKi>
 8001f70:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8001f72:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8001f74:	3a04      	subs	r2, #4
 8001f76:	e7da      	b.n	8001f2e <_ZN7HIH603015getMeasurementsEv+0xda>
 8001f78:	4628      	mov	r0, r5
 8001f7a:	a901      	add	r1, sp, #4
 8001f7c:	f7ff feb2 	bl	8001ce4 <_ZNSt5dequeIiSaIiEE16_M_push_back_auxERKi>
 8001f80:	e7dd      	b.n	8001f3e <_ZN7HIH603015getMeasurementsEv+0xea>
 8001f82:	bf00      	nop
 8001f84:	42c80000 	.word	0x42c80000
 8001f88:	467ff800 	.word	0x467ff800
 8001f8c:	43250000 	.word	0x43250000
 8001f90:	42200000 	.word	0x42200000

08001f94 <_Z6pomiarv>:
}

Display ds;

void pomiar()
{
 8001f94:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	static HIH6030 humSens;
 8001f96:	4c29      	ldr	r4, [pc, #164]	; (800203c <_Z6pomiarv+0xa8>)
 8001f98:	6823      	ldr	r3, [r4, #0]
 8001f9a:	07da      	lsls	r2, r3, #31
 8001f9c:	d542      	bpl.n	8002024 <_Z6pomiarv+0x90>
	static int i = 0;
	if(i%2)
 8001f9e:	4d28      	ldr	r5, [pc, #160]	; (8002040 <_Z6pomiarv+0xac>)
	{
		humSens.measureRequest();
 8001fa0:	4828      	ldr	r0, [pc, #160]	; (8002044 <_Z6pomiarv+0xb0>)

void pomiar()
{
	static HIH6030 humSens;
	static int i = 0;
	if(i%2)
 8001fa2:	682b      	ldr	r3, [r5, #0]
 8001fa4:	07db      	lsls	r3, r3, #31
 8001fa6:	d437      	bmi.n	8002018 <_Z6pomiarv+0x84>
	{
		humSens.measureRequest();
	}
	else
	{
		humSens.getMeasurements();
 8001fa8:	f7ff ff54 	bl	8001e54 <_ZN7HIH603015getMeasurementsEv>

		printf("temperatura[%i.%i *C]\n\r",(humSens.getTemperature()/100),abs(humSens.getTemperature()%100));
 8001fac:	4825      	ldr	r0, [pc, #148]	; (8002044 <_Z6pomiarv+0xb0>)
 8001fae:	f7ff fe85 	bl	8001cbc <_ZN7HIH603014getTemperatureEv>
 8001fb2:	4606      	mov	r6, r0
 8001fb4:	4823      	ldr	r0, [pc, #140]	; (8002044 <_Z6pomiarv+0xb0>)
 8001fb6:	f7ff fe81 	bl	8001cbc <_ZN7HIH603014getTemperatureEv>
 8001fba:	4c23      	ldr	r4, [pc, #140]	; (8002048 <_Z6pomiarv+0xb4>)
 8001fbc:	17c3      	asrs	r3, r0, #31
 8001fbe:	fb84 1200 	smull	r1, r2, r4, r0
 8001fc2:	2764      	movs	r7, #100	; 0x64
 8001fc4:	ebc3 1362 	rsb	r3, r3, r2, asr #5
 8001fc8:	fb07 0213 	mls	r2, r7, r3, r0
 8001fcc:	fb84 3106 	smull	r3, r1, r4, r6
 8001fd0:	2a00      	cmp	r2, #0
 8001fd2:	ea4f 76e6 	mov.w	r6, r6, asr #31
 8001fd6:	bfb8      	it	lt
 8001fd8:	4252      	neglt	r2, r2
 8001fda:	ebc6 1161 	rsb	r1, r6, r1, asr #5
 8001fde:	481b      	ldr	r0, [pc, #108]	; (800204c <_Z6pomiarv+0xb8>)
 8001fe0:	f000 fb2e 	bl	8002640 <iprintf>
		printf("Wilgotnosc[%i.%i %c]\n\r",(humSens.getHumidity()/100),(humSens.getHumidity()%100),'%');
 8001fe4:	4817      	ldr	r0, [pc, #92]	; (8002044 <_Z6pomiarv+0xb0>)
 8001fe6:	f7ff fe73 	bl	8001cd0 <_ZN7HIH603011getHumidityEv>
 8001fea:	4606      	mov	r6, r0
 8001fec:	4815      	ldr	r0, [pc, #84]	; (8002044 <_Z6pomiarv+0xb0>)
 8001fee:	f7ff fe6f 	bl	8001cd0 <_ZN7HIH603011getHumidityEv>
 8001ff2:	fb84 3200 	smull	r3, r2, r4, r0
 8001ff6:	fb84 3406 	smull	r3, r4, r4, r6
 8001ffa:	17c3      	asrs	r3, r0, #31
 8001ffc:	ebc3 1262 	rsb	r2, r3, r2, asr #5
 8002000:	17f1      	asrs	r1, r6, #31
 8002002:	fb07 0212 	mls	r2, r7, r2, r0
 8002006:	2325      	movs	r3, #37	; 0x25
 8002008:	ebc1 1164 	rsb	r1, r1, r4, asr #5
 800200c:	4810      	ldr	r0, [pc, #64]	; (8002050 <_Z6pomiarv+0xbc>)
 800200e:	f000 fb17 	bl	8002640 <iprintf>
 8002012:	2301      	movs	r3, #1
		i=0;
	}
	++i;
 8002014:	602b      	str	r3, [r5, #0]
 8002016:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
{
	static HIH6030 humSens;
	static int i = 0;
	if(i%2)
	{
		humSens.measureRequest();
 8002018:	f7ff fee2 	bl	8001de0 <_ZN7HIH603014measureRequestEv>
 800201c:	682b      	ldr	r3, [r5, #0]
 800201e:	3301      	adds	r3, #1

		printf("temperatura[%i.%i *C]\n\r",(humSens.getTemperature()/100),abs(humSens.getTemperature()%100));
		printf("Wilgotnosc[%i.%i %c]\n\r",(humSens.getHumidity()/100),(humSens.getHumidity()%100),'%');
		i=0;
	}
	++i;
 8002020:	602b      	str	r3, [r5, #0]
 8002022:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

Display ds;

void pomiar()
{
	static HIH6030 humSens;
 8002024:	4807      	ldr	r0, [pc, #28]	; (8002044 <_Z6pomiarv+0xb0>)
 8002026:	f7ff fdaf 	bl	8001b88 <_ZN7HIH6030C1Ev>
 800202a:	2301      	movs	r3, #1
 800202c:	4a09      	ldr	r2, [pc, #36]	; (8002054 <_Z6pomiarv+0xc0>)
 800202e:	490a      	ldr	r1, [pc, #40]	; (8002058 <_Z6pomiarv+0xc4>)
 8002030:	4804      	ldr	r0, [pc, #16]	; (8002044 <_Z6pomiarv+0xb0>)
 8002032:	6023      	str	r3, [r4, #0]
 8002034:	f000 fca9 	bl	800298a <__aeabi_atexit>
 8002038:	e7b1      	b.n	8001f9e <_Z6pomiarv+0xa>
 800203a:	bf00      	nop
 800203c:	20000164 	.word	0x20000164
 8002040:	20000168 	.word	0x20000168
 8002044:	200000fc 	.word	0x200000fc
 8002048:	51eb851f 	.word	0x51eb851f
 800204c:	08002ff4 	.word	0x08002ff4
 8002050:	0800300c 	.word	0x0800300c
 8002054:	20000000 	.word	0x20000000
 8002058:	08001ae1 	.word	0x08001ae1

0800205c <main>:

extern void (*wsk2)();


int main(void)
{
 800205c:	b508      	push	{r3, lr}
	wsk2 = pomiar;
 800205e:	4a06      	ldr	r2, [pc, #24]	; (8002078 <main+0x1c>)
 8002060:	4b06      	ldr	r3, [pc, #24]	; (800207c <main+0x20>)
 8002062:	601a      	str	r2, [r3, #0]
	init();
 8002064:	f000 fc64 	bl	8002930 <_Z4initv>
	printf("Witaj !\n\r");
 8002068:	4805      	ldr	r0, [pc, #20]	; (8002080 <main+0x24>)
 800206a:	f000 fae9 	bl	8002640 <iprintf>
//	ds.setBackground(BLACK);
//	ds.drawPixel(10,10,RGB_MACRO(255,0,0));
	ds.setBackground(BLUE);
 800206e:	211f      	movs	r1, #31
 8002070:	4804      	ldr	r0, [pc, #16]	; (8002084 <main+0x28>)
 8002072:	f7ff fce3 	bl	8001a3c <_ZN7Display13setBackgroundEt>
 8002076:	e7fe      	b.n	8002076 <main+0x1a>
 8002078:	08001f95 	.word	0x08001f95
 800207c:	200002ac 	.word	0x200002ac
 8002080:	08003024 	.word	0x08003024
 8002084:	2000016c 	.word	0x2000016c

08002088 <_GLOBAL__sub_I_ds>:
 * Minimal __assert() uses __assert__func()
 * */
extern "C" void __assert(const char *file, int line, const char *failedexpr)
{
   __assert_func (file, line, NULL, failedexpr);
}
 8002088:	b510      	push	{r4, lr}
T abs(T var)
{
	return ((var > 0)? var : (-1 * var));
}

Display ds;
 800208a:	4c05      	ldr	r4, [pc, #20]	; (80020a0 <_GLOBAL__sub_I_ds+0x18>)
 800208c:	4620      	mov	r0, r4
 800208e:	f7ff fbed 	bl	800186c <_ZN7DisplayC1Ev>
 8002092:	4620      	mov	r0, r4
 * Minimal __assert() uses __assert__func()
 * */
extern "C" void __assert(const char *file, int line, const char *failedexpr)
{
   __assert_func (file, line, NULL, failedexpr);
}
 8002094:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
T abs(T var)
{
	return ((var > 0)? var : (-1 * var));
}

Display ds;
 8002098:	4a02      	ldr	r2, [pc, #8]	; (80020a4 <_GLOBAL__sub_I_ds+0x1c>)
 800209a:	4903      	ldr	r1, [pc, #12]	; (80020a8 <_GLOBAL__sub_I_ds+0x20>)
 800209c:	f000 bc75 	b.w	800298a <__aeabi_atexit>
 80020a0:	2000016c 	.word	0x2000016c
 80020a4:	20000000 	.word	0x20000000
 80020a8:	0800185d 	.word	0x0800185d

080020ac <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 80020ac:	f8df d034 	ldr.w	sp, [pc, #52]	; 80020e4 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 80020b0:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 80020b2:	e003      	b.n	80020bc <LoopCopyDataInit>

080020b4 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 80020b4:	4b0c      	ldr	r3, [pc, #48]	; (80020e8 <LoopFillZerobss+0x18>)
	ldr	r3, [r3, r1]
 80020b6:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 80020b8:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 80020ba:	3104      	adds	r1, #4

080020bc <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 80020bc:	480b      	ldr	r0, [pc, #44]	; (80020ec <LoopFillZerobss+0x1c>)
	ldr	r3, =_edata
 80020be:	4b0c      	ldr	r3, [pc, #48]	; (80020f0 <LoopFillZerobss+0x20>)
	adds	r2, r0, r1
 80020c0:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 80020c2:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 80020c4:	d3f6      	bcc.n	80020b4 <CopyDataInit>
	ldr	r2, =_sbss
 80020c6:	4a0b      	ldr	r2, [pc, #44]	; (80020f4 <LoopFillZerobss+0x24>)
	b	LoopFillZerobss
 80020c8:	e002      	b.n	80020d0 <LoopFillZerobss>

080020ca <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 80020ca:	2300      	movs	r3, #0
	str	r3, [r2], #4
 80020cc:	f842 3b04 	str.w	r3, [r2], #4

080020d0 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 80020d0:	4b09      	ldr	r3, [pc, #36]	; (80020f8 <LoopFillZerobss+0x28>)
	cmp	r2, r3
 80020d2:	429a      	cmp	r2, r3
	bcc	FillZerobss
 80020d4:	d3f9      	bcc.n	80020ca <FillZerobss>
	
/* Call the clock system intitialization function.*/
  bl  SystemInit 
 80020d6:	f000 f911 	bl	80022fc <SystemInit>
/* Call static constructors */
  bl __libc_init_array  
 80020da:	f000 fdc7 	bl	8002c6c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80020de:	f7ff ffbd 	bl	800205c <main>
	bx	lr
 80020e2:	4770      	bx	lr

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 80020e4:	20002000 	.word	0x20002000
/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
  b	LoopCopyDataInit

CopyDataInit:
	ldr	r3, =_sidata
 80020e8:	080030b0 	.word	0x080030b0
	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
	adds	r1, r1, #4

LoopCopyDataInit:
	ldr	r0, =_sdata
 80020ec:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 80020f0:	2000007c 	.word	0x2000007c
	adds	r2, r0, r1
	cmp	r2, r3
	bcc	CopyDataInit
	ldr	r2, =_sbss
 80020f4:	2000007c 	.word	0x2000007c
FillZerobss:
	movs	r3, #0
	str	r3, [r2], #4

LoopFillZerobss:
	ldr	r3, = _ebss
 80020f8:	200002b4 	.word	0x200002b4

080020fc <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80020fc:	e7fe      	b.n	80020fc <ADC1_IRQHandler>
	...

08002100 <NMI_Handler>:
 8002100:	4770      	bx	lr
 8002102:	bf00      	nop

08002104 <HardFault_Handler>:
  * @brief  This function handles Hard Fault exception.
  * @param  None
  * @retval None
  */
void HardFault_Handler(void)
{
 8002104:	e7fe      	b.n	8002104 <HardFault_Handler>
 8002106:	bf00      	nop

08002108 <MemManage_Handler>:
  * @brief  This function handles Memory Manage exception.
  * @param  None
  * @retval None
  */
void MemManage_Handler(void)
{
 8002108:	e7fe      	b.n	8002108 <MemManage_Handler>
 800210a:	bf00      	nop

0800210c <BusFault_Handler>:
  * @brief  This function handles Bus Fault exception.
  * @param  None
  * @retval None
  */
void BusFault_Handler(void)
{
 800210c:	e7fe      	b.n	800210c <BusFault_Handler>
 800210e:	bf00      	nop

08002110 <UsageFault_Handler>:
  * @brief  This function handles Usage Fault exception.
  * @param  None
  * @retval None
  */
void UsageFault_Handler(void)
{
 8002110:	e7fe      	b.n	8002110 <UsageFault_Handler>
 8002112:	bf00      	nop

08002114 <SVC_Handler>:
 8002114:	4770      	bx	lr
 8002116:	bf00      	nop

08002118 <DebugMon_Handler>:
 8002118:	4770      	bx	lr
 800211a:	bf00      	nop

0800211c <PendSV_Handler>:
  * @brief  This function handles PendSVC exception.
  * @param  None
  * @retval None
  */
void PendSV_Handler(void)
{
 800211c:	4770      	bx	lr
 800211e:	bf00      	nop

08002120 <_write>:
}


int _write(int fd, char *str, int len)
{
	while(len)
 8002120:	2a00      	cmp	r2, #0
 8002122:	d04b      	beq.n	80021bc <_write+0x9c>
    return cap;
}


int _write(int fd, char *str, int len)
{
 8002124:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002128:	4d25      	ldr	r5, [pc, #148]	; (80021c0 <_write+0xa0>)
 800212a:	4617      	mov	r7, r2


uint8_t getBufferCapacity(BufferS_t* buf)
{
    uint8_t cap = BUFFER_SIZE;
    if(buf->startIndex > buf->endIntex)
 800212c:	f895 3041 	ldrb.w	r3, [r5, #65]	; 0x41
 8002130:	f895 2040 	ldrb.w	r2, [r5, #64]	; 0x40
 8002134:	460c      	mov	r4, r1
 8002136:	429a      	cmp	r2, r3
		int i = 0;

		for(i = 0; i < capacity; ++i)
		{
			outBuffer.endIntex = (outBuffer.endIntex % BUFFER_SIZE);
			outBuffer.buffer[outBuffer.endIntex++] = *(str++);
 8002138:	462e      	mov	r6, r5


uint8_t getBufferCapacity(BufferS_t* buf)
{
    uint8_t cap = BUFFER_SIZE;
    if(buf->startIndex > buf->endIntex)
 800213a:	d928      	bls.n	800218e <_write+0x6e>
 800213c:	1e51      	subs	r1, r2, #1
 800213e:	1ac9      	subs	r1, r1, r3
 8002140:	b2c9      	uxtb	r1, r1
int _write(int fd, char *str, int len)
{
	while(len)
	{
		int capacity = getBufferCapacity(&outBuffer);
		capacity = (capacity > len) ? len : capacity;
 8002142:	42b9      	cmp	r1, r7
 8002144:	bfa8      	it	ge
 8002146:	4639      	movge	r1, r7
		int i = 0;

		for(i = 0; i < capacity; ++i)
 8002148:	2900      	cmp	r1, #0
 800214a:	dd2b      	ble.n	80021a4 <_write+0x84>
 800214c:	f895 0042 	ldrb.w	r0, [r5, #66]	; 0x42
 8002150:	eb04 0801 	add.w	r8, r4, r1
		{
			outBuffer.endIntex = (outBuffer.endIntex % BUFFER_SIZE);
			outBuffer.buffer[outBuffer.endIntex++] = *(str++);
 8002154:	f814 2b01 	ldrb.w	r2, [r4], #1
		capacity = (capacity > len) ? len : capacity;
		int i = 0;

		for(i = 0; i < capacity; ++i)
		{
			outBuffer.endIntex = (outBuffer.endIntex % BUFFER_SIZE);
 8002158:	f003 033f 	and.w	r3, r3, #63	; 0x3f
	{
		int capacity = getBufferCapacity(&outBuffer);
		capacity = (capacity > len) ? len : capacity;
		int i = 0;

		for(i = 0; i < capacity; ++i)
 800215c:	4544      	cmp	r4, r8
		{
			outBuffer.endIntex = (outBuffer.endIntex % BUFFER_SIZE);
			outBuffer.buffer[outBuffer.endIntex++] = *(str++);
 800215e:	54ea      	strb	r2, [r5, r3]
 8002160:	f103 0301 	add.w	r3, r3, #1
	{
		int capacity = getBufferCapacity(&outBuffer);
		capacity = (capacity > len) ? len : capacity;
		int i = 0;

		for(i = 0; i < capacity; ++i)
 8002164:	d1f6      	bne.n	8002154 <_write+0x34>
 8002166:	180c      	adds	r4, r1, r0
 8002168:	1a7f      	subs	r7, r7, r1
			outBuffer.endIntex = (outBuffer.endIntex % BUFFER_SIZE);
			outBuffer.buffer[outBuffer.endIntex++] = *(str++);
			outBuffer.wordCount++;
			len--;
		}
		USART_ITConfig(USART1, USART_IT_TXE, ENABLE);
 800216a:	2201      	movs	r2, #1
 800216c:	f240 7127 	movw	r1, #1831	; 0x727
 8002170:	4814      	ldr	r0, [pc, #80]	; (80021c4 <_write+0xa4>)
 8002172:	f886 4042 	strb.w	r4, [r6, #66]	; 0x42
 8002176:	f886 3041 	strb.w	r3, [r6, #65]	; 0x41
 800217a:	f7fe fe4b 	bl	8000e14 <USART_ITConfig>
}


int _write(int fd, char *str, int len)
{
	while(len)
 800217e:	b1d7      	cbz	r7, 80021b6 <_write+0x96>
			outBuffer.endIntex = (outBuffer.endIntex % BUFFER_SIZE);
			outBuffer.buffer[outBuffer.endIntex++] = *(str++);
			outBuffer.wordCount++;
			len--;
		}
		USART_ITConfig(USART1, USART_IT_TXE, ENABLE);
 8002180:	4644      	mov	r4, r8


uint8_t getBufferCapacity(BufferS_t* buf)
{
    uint8_t cap = BUFFER_SIZE;
    if(buf->startIndex > buf->endIntex)
 8002182:	f895 2040 	ldrb.w	r2, [r5, #64]	; 0x40
 8002186:	f895 3041 	ldrb.w	r3, [r5, #65]	; 0x41
 800218a:	429a      	cmp	r2, r3
 800218c:	d8d6      	bhi.n	800213c <_write+0x1c>
 800218e:	bf3d      	ittte	cc
 8002190:	f102 013f 	addcc.w	r1, r2, #63	; 0x3f
 8002194:	1ac9      	subcc	r1, r1, r3
 8002196:	b2c9      	uxtbcc	r1, r1
    {
        cap = buf->startIndex - (buf->endIntex + 1);
    }
    else if(buf->startIndex < buf->endIntex)
 8002198:	2140      	movcs	r1, #64	; 0x40
int _write(int fd, char *str, int len)
{
	while(len)
	{
		int capacity = getBufferCapacity(&outBuffer);
		capacity = (capacity > len) ? len : capacity;
 800219a:	42b9      	cmp	r1, r7
 800219c:	bfa8      	it	ge
 800219e:	4639      	movge	r1, r7
		int i = 0;

		for(i = 0; i < capacity; ++i)
 80021a0:	2900      	cmp	r1, #0
 80021a2:	dcd3      	bgt.n	800214c <_write+0x2c>
			outBuffer.endIntex = (outBuffer.endIntex % BUFFER_SIZE);
			outBuffer.buffer[outBuffer.endIntex++] = *(str++);
			outBuffer.wordCount++;
			len--;
		}
		USART_ITConfig(USART1, USART_IT_TXE, ENABLE);
 80021a4:	46a0      	mov	r8, r4
 80021a6:	2201      	movs	r2, #1
 80021a8:	f240 7127 	movw	r1, #1831	; 0x727
 80021ac:	4805      	ldr	r0, [pc, #20]	; (80021c4 <_write+0xa4>)
 80021ae:	f7fe fe31 	bl	8000e14 <USART_ITConfig>
 80021b2:	4644      	mov	r4, r8
 80021b4:	e7e5      	b.n	8002182 <_write+0x62>
	}
	return 0;
}
 80021b6:	2000      	movs	r0, #0
 80021b8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80021bc:	2000      	movs	r0, #0
 80021be:	4770      	bx	lr
 80021c0:	200001b8 	.word	0x200001b8
 80021c4:	40013800 	.word	0x40013800

080021c8 <SysTick_Handler>:

void SysTick_Handler(void)
{
	wsk2();
 80021c8:	4b01      	ldr	r3, [pc, #4]	; (80021d0 <SysTick_Handler+0x8>)
 80021ca:	681b      	ldr	r3, [r3, #0]
 80021cc:	4718      	bx	r3
 80021ce:	bf00      	nop
 80021d0:	200002ac 	.word	0x200002ac

080021d4 <USART1_IRQHandler>:
}

void USART1_IRQHandler()
{
 80021d4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    if (USART_GetITStatus(USART1, USART_IT_RXNE) != RESET)
 80021d8:	f240 5125 	movw	r1, #1317	; 0x525
 80021dc:	4844      	ldr	r0, [pc, #272]	; (80022f0 <USART1_IRQHandler+0x11c>)
 80021de:	f7fe fe3d 	bl	8000e5c <USART_GetITStatus>
 80021e2:	bb40      	cbnz	r0, 8002236 <USART1_IRQHandler+0x62>
    		inBuffer.wordCount++;

    		USART_SendData(USART1,tmpChar);
    	}
    }
    if (USART_GetITStatus(USART1, USART_IT_TXE) != RESET)
 80021e4:	f240 7127 	movw	r1, #1831	; 0x727
 80021e8:	4841      	ldr	r0, [pc, #260]	; (80022f0 <USART1_IRQHandler+0x11c>)
 80021ea:	f7fe fe37 	bl	8000e5c <USART_GetITStatus>
 80021ee:	b150      	cbz	r0, 8002206 <USART1_IRQHandler+0x32>
    {
    	if(outBuffer.wordCount > 0)
 80021f0:	4c40      	ldr	r4, [pc, #256]	; (80022f4 <USART1_IRQHandler+0x120>)
 80021f2:	f894 2042 	ldrb.w	r2, [r4, #66]	; 0x42
 80021f6:	b942      	cbnz	r2, 800220a <USART1_IRQHandler+0x36>
    	{
    		USART_ITConfig(USART1, USART_IT_TXE, DISABLE);
    	}

    }
}
 80021f8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    		outBuffer.startIndex = (outBuffer.startIndex % BUFFER_SIZE);
    		outBuffer.wordCount--;
    	}
    	else
    	{
    		USART_ITConfig(USART1, USART_IT_TXE, DISABLE);
 80021fc:	f240 7127 	movw	r1, #1831	; 0x727
 8002200:	483b      	ldr	r0, [pc, #236]	; (80022f0 <USART1_IRQHandler+0x11c>)
 8002202:	f7fe be07 	b.w	8000e14 <USART_ITConfig>
 8002206:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    }
    if (USART_GetITStatus(USART1, USART_IT_TXE) != RESET)
    {
    	if(outBuffer.wordCount > 0)
    	{
    		USART_SendData(USART1,outBuffer.buffer[outBuffer.startIndex++]);
 800220a:	f894 3040 	ldrb.w	r3, [r4, #64]	; 0x40
 800220e:	4838      	ldr	r0, [pc, #224]	; (80022f0 <USART1_IRQHandler+0x11c>)
 8002210:	1c5a      	adds	r2, r3, #1
 8002212:	5ce1      	ldrb	r1, [r4, r3]
 8002214:	f884 2040 	strb.w	r2, [r4, #64]	; 0x40
 8002218:	f7fe fe18 	bl	8000e4c <USART_SendData>
    		outBuffer.startIndex = (outBuffer.startIndex % BUFFER_SIZE);
 800221c:	f894 2040 	ldrb.w	r2, [r4, #64]	; 0x40
    		outBuffer.wordCount--;
 8002220:	f894 3042 	ldrb.w	r3, [r4, #66]	; 0x42
    if (USART_GetITStatus(USART1, USART_IT_TXE) != RESET)
    {
    	if(outBuffer.wordCount > 0)
    	{
    		USART_SendData(USART1,outBuffer.buffer[outBuffer.startIndex++]);
    		outBuffer.startIndex = (outBuffer.startIndex % BUFFER_SIZE);
 8002224:	f002 023f 	and.w	r2, r2, #63	; 0x3f
    		outBuffer.wordCount--;
 8002228:	3b01      	subs	r3, #1
    if (USART_GetITStatus(USART1, USART_IT_TXE) != RESET)
    {
    	if(outBuffer.wordCount > 0)
    	{
    		USART_SendData(USART1,outBuffer.buffer[outBuffer.startIndex++]);
    		outBuffer.startIndex = (outBuffer.startIndex % BUFFER_SIZE);
 800222a:	f884 2040 	strb.w	r2, [r4, #64]	; 0x40
    		outBuffer.wordCount--;
 800222e:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8002232:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
void USART1_IRQHandler()
{
    if (USART_GetITStatus(USART1, USART_IT_RXNE) != RESET)
    {
    	char tmpChar;
    	tmpChar = USART_ReceiveData(USART1);
 8002236:	482e      	ldr	r0, [pc, #184]	; (80022f0 <USART1_IRQHandler+0x11c>)
 8002238:	f7fe fe0c 	bl	8000e54 <USART_ReceiveData>
 800223c:	b2c4      	uxtb	r4, r0

    	if((uint16_t)tmpChar == ENTER)
 800223e:	2c0d      	cmp	r4, #13
 8002240:	d012      	beq.n	8002268 <USART1_IRQHandler+0x94>
    		inBuffer.endIntex = 0;
    		inBuffer.startIndex = 0;
    	}
    	else
    	{
    		inBuffer.endIntex = (inBuffer.endIntex % BUFFER_SIZE);
 8002242:	4b2d      	ldr	r3, [pc, #180]	; (80022f8 <USART1_IRQHandler+0x124>)
    		inBuffer.buffer[inBuffer.endIntex++] = tmpChar;
    		inBuffer.wordCount++;

    		USART_SendData(USART1,tmpChar);
 8002244:	4621      	mov	r1, r4
    		inBuffer.endIntex = 0;
    		inBuffer.startIndex = 0;
    	}
    	else
    	{
    		inBuffer.endIntex = (inBuffer.endIntex % BUFFER_SIZE);
 8002246:	f893 2041 	ldrb.w	r2, [r3, #65]	; 0x41
    		inBuffer.buffer[inBuffer.endIntex++] = tmpChar;
    		inBuffer.wordCount++;
 800224a:	f893 5042 	ldrb.w	r5, [r3, #66]	; 0x42
    		inBuffer.endIntex = 0;
    		inBuffer.startIndex = 0;
    	}
    	else
    	{
    		inBuffer.endIntex = (inBuffer.endIntex % BUFFER_SIZE);
 800224e:	f002 023f 	and.w	r2, r2, #63	; 0x3f
    		inBuffer.buffer[inBuffer.endIntex++] = tmpChar;
 8002252:	1c56      	adds	r6, r2, #1
    		inBuffer.wordCount++;
 8002254:	3501      	adds	r5, #1

    		USART_SendData(USART1,tmpChar);
 8002256:	4826      	ldr	r0, [pc, #152]	; (80022f0 <USART1_IRQHandler+0x11c>)
    		inBuffer.startIndex = 0;
    	}
    	else
    	{
    		inBuffer.endIntex = (inBuffer.endIntex % BUFFER_SIZE);
    		inBuffer.buffer[inBuffer.endIntex++] = tmpChar;
 8002258:	549c      	strb	r4, [r3, r2]
 800225a:	f883 6041 	strb.w	r6, [r3, #65]	; 0x41
    		inBuffer.wordCount++;
 800225e:	f883 5042 	strb.w	r5, [r3, #66]	; 0x42

    		USART_SendData(USART1,tmpChar);
 8002262:	f7fe fdf3 	bl	8000e4c <USART_SendData>
 8002266:	e7bd      	b.n	80021e4 <USART1_IRQHandler+0x10>
    	char tmpChar;
    	tmpChar = USART_ReceiveData(USART1);

    	if((uint16_t)tmpChar == ENTER)
    	{
    		_write(0,inBuffer.buffer,inBuffer.wordCount);
 8002268:	4f23      	ldr	r7, [pc, #140]	; (80022f8 <USART1_IRQHandler+0x124>)
 800226a:	f897 8042 	ldrb.w	r8, [r7, #66]	; 0x42
}


int _write(int fd, char *str, int len)
{
	while(len)
 800226e:	f1b8 0f00 	cmp.w	r8, #0
 8002272:	d02d      	beq.n	80022d0 <USART1_IRQHandler+0xfc>
 8002274:	4d1f      	ldr	r5, [pc, #124]	; (80022f4 <USART1_IRQHandler+0x120>)
 8002276:	463c      	mov	r4, r7
		int i = 0;

		for(i = 0; i < capacity; ++i)
		{
			outBuffer.endIntex = (outBuffer.endIntex % BUFFER_SIZE);
			outBuffer.buffer[outBuffer.endIntex++] = *(str++);
 8002278:	462e      	mov	r6, r5


uint8_t getBufferCapacity(BufferS_t* buf)
{
    uint8_t cap = BUFFER_SIZE;
    if(buf->startIndex > buf->endIntex)
 800227a:	f895 2040 	ldrb.w	r2, [r5, #64]	; 0x40
 800227e:	f895 3041 	ldrb.w	r3, [r5, #65]	; 0x41
 8002282:	429a      	cmp	r2, r3
 8002284:	d92c      	bls.n	80022e0 <USART1_IRQHandler+0x10c>
 8002286:	1e51      	subs	r1, r2, #1
 8002288:	1ac9      	subs	r1, r1, r3
 800228a:	b2c9      	uxtb	r1, r1
int _write(int fd, char *str, int len)
{
	while(len)
	{
		int capacity = getBufferCapacity(&outBuffer);
		capacity = (capacity > len) ? len : capacity;
 800228c:	4541      	cmp	r1, r8
 800228e:	bfa8      	it	ge
 8002290:	4641      	movge	r1, r8
		int i = 0;

		for(i = 0; i < capacity; ++i)
 8002292:	2900      	cmp	r1, #0
 8002294:	dd13      	ble.n	80022be <USART1_IRQHandler+0xea>
 8002296:	f895 e042 	ldrb.w	lr, [r5, #66]	; 0x42
 800229a:	1860      	adds	r0, r4, r1
		{
			outBuffer.endIntex = (outBuffer.endIntex % BUFFER_SIZE);
			outBuffer.buffer[outBuffer.endIntex++] = *(str++);
 800229c:	f814 2b01 	ldrb.w	r2, [r4], #1
		capacity = (capacity > len) ? len : capacity;
		int i = 0;

		for(i = 0; i < capacity; ++i)
		{
			outBuffer.endIntex = (outBuffer.endIntex % BUFFER_SIZE);
 80022a0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
	{
		int capacity = getBufferCapacity(&outBuffer);
		capacity = (capacity > len) ? len : capacity;
		int i = 0;

		for(i = 0; i < capacity; ++i)
 80022a4:	4284      	cmp	r4, r0
		{
			outBuffer.endIntex = (outBuffer.endIntex % BUFFER_SIZE);
			outBuffer.buffer[outBuffer.endIntex++] = *(str++);
 80022a6:	54ea      	strb	r2, [r5, r3]
 80022a8:	f103 0301 	add.w	r3, r3, #1
	{
		int capacity = getBufferCapacity(&outBuffer);
		capacity = (capacity > len) ? len : capacity;
		int i = 0;

		for(i = 0; i < capacity; ++i)
 80022ac:	d1f6      	bne.n	800229c <USART1_IRQHandler+0xc8>
 80022ae:	eb01 020e 	add.w	r2, r1, lr
 80022b2:	f886 2042 	strb.w	r2, [r6, #66]	; 0x42
 80022b6:	ebc1 0808 	rsb	r8, r1, r8
 80022ba:	f886 3041 	strb.w	r3, [r6, #65]	; 0x41
			outBuffer.endIntex = (outBuffer.endIntex % BUFFER_SIZE);
			outBuffer.buffer[outBuffer.endIntex++] = *(str++);
			outBuffer.wordCount++;
			len--;
		}
		USART_ITConfig(USART1, USART_IT_TXE, ENABLE);
 80022be:	2201      	movs	r2, #1
 80022c0:	f240 7127 	movw	r1, #1831	; 0x727
 80022c4:	480a      	ldr	r0, [pc, #40]	; (80022f0 <USART1_IRQHandler+0x11c>)
 80022c6:	f7fe fda5 	bl	8000e14 <USART_ITConfig>
}


int _write(int fd, char *str, int len)
{
	while(len)
 80022ca:	f1b8 0f00 	cmp.w	r8, #0
 80022ce:	d1d4      	bne.n	800227a <USART1_IRQHandler+0xa6>
    	tmpChar = USART_ReceiveData(USART1);

    	if((uint16_t)tmpChar == ENTER)
    	{
    		_write(0,inBuffer.buffer,inBuffer.wordCount);
    		inBuffer.wordCount = 0;
 80022d0:	2300      	movs	r3, #0
 80022d2:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
    		inBuffer.endIntex = 0;
 80022d6:	f887 3041 	strb.w	r3, [r7, #65]	; 0x41
    		inBuffer.startIndex = 0;
 80022da:	f887 3040 	strb.w	r3, [r7, #64]	; 0x40
 80022de:	e781      	b.n	80021e4 <USART1_IRQHandler+0x10>
 80022e0:	bf3d      	ittte	cc
 80022e2:	f102 013f 	addcc.w	r1, r2, #63	; 0x3f
 80022e6:	1ac9      	subcc	r1, r1, r3
 80022e8:	b2c9      	uxtbcc	r1, r1
    uint8_t cap = BUFFER_SIZE;
    if(buf->startIndex > buf->endIntex)
    {
        cap = buf->startIndex - (buf->endIntex + 1);
    }
    else if(buf->startIndex < buf->endIntex)
 80022ea:	2140      	movcs	r1, #64	; 0x40
 80022ec:	e7ce      	b.n	800228c <USART1_IRQHandler+0xb8>
 80022ee:	bf00      	nop
 80022f0:	40013800 	.word	0x40013800
 80022f4:	200001b8 	.word	0x200001b8
 80022f8:	20000174 	.word	0x20000174

080022fc <SystemInit>:
  */
void SystemInit (void)
{
  /* Reset the RCC clock configuration to the default reset state(for debug purpose) */
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 80022fc:	4b35      	ldr	r3, [pc, #212]	; (80023d4 <SystemInit+0xd8>)
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80022fe:	b430      	push	{r4, r5}
  /* Reset the RCC clock configuration to the default reset state(for debug purpose) */
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 8002300:	6818      	ldr	r0, [r3, #0]

  /* Reset SW, HPRE, PPRE1, PPRE2, ADCPRE and MCO bits */
#ifndef STM32F10X_CL
  RCC->CFGR &= (uint32_t)0xF8FF0000;
 8002302:	4935      	ldr	r1, [pc, #212]	; (80023d8 <SystemInit+0xdc>)
  */
void SystemInit (void)
{
  /* Reset the RCC clock configuration to the default reset state(for debug purpose) */
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 8002304:	f040 0001 	orr.w	r0, r0, #1
 8002308:	6018      	str	r0, [r3, #0]

  /* Reset SW, HPRE, PPRE1, PPRE2, ADCPRE and MCO bits */
#ifndef STM32F10X_CL
  RCC->CFGR &= (uint32_t)0xF8FF0000;
 800230a:	685d      	ldr	r5, [r3, #4]
#elif defined (STM32F10X_LD_VL) || defined (STM32F10X_MD_VL) || (defined STM32F10X_HD_VL)
  /* Disable all interrupts and clear pending bits  */
  RCC->CIR = 0x009F0000;

  /* Reset CFGR2 register */
  RCC->CFGR2 = 0x00000000;      
 800230c:	2000      	movs	r0, #0
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;

  /* Reset SW, HPRE, PPRE1, PPRE2, ADCPRE and MCO bits */
#ifndef STM32F10X_CL
  RCC->CFGR &= (uint32_t)0xF8FF0000;
 800230e:	4029      	ands	r1, r5
 8002310:	6059      	str	r1, [r3, #4]
#else
  RCC->CFGR &= (uint32_t)0xF0FF0000;
#endif /* STM32F10X_CL */   
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 8002312:	6819      	ldr	r1, [r3, #0]
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8002314:	b082      	sub	sp, #8
#else
  RCC->CFGR &= (uint32_t)0xF0FF0000;
#endif /* STM32F10X_CL */   
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 8002316:	f021 7184 	bic.w	r1, r1, #17301504	; 0x1080000
 800231a:	f421 3180 	bic.w	r1, r1, #65536	; 0x10000
 800231e:	6019      	str	r1, [r3, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8002320:	6819      	ldr	r1, [r3, #0]

  /* Reset CFGR2 register */
  RCC->CFGR2 = 0x00000000;
#elif defined (STM32F10X_LD_VL) || defined (STM32F10X_MD_VL) || (defined STM32F10X_HD_VL)
  /* Disable all interrupts and clear pending bits  */
  RCC->CIR = 0x009F0000;
 8002322:	f44f 041f 	mov.w	r4, #10420224	; 0x9f0000
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8002326:	f421 2180 	bic.w	r1, r1, #262144	; 0x40000
 800232a:	6019      	str	r1, [r3, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE/OTGFSPRE bits */
  RCC->CFGR &= (uint32_t)0xFF80FFFF;
 800232c:	6859      	ldr	r1, [r3, #4]
  RCC->CR |= ((uint32_t)RCC_CR_HSEON);
 
  /* Wait till HSE is ready and if Time out is reached exit */
  do
  {
    HSEStatus = RCC->CR & RCC_CR_HSERDY;
 800232e:	461a      	mov	r2, r3

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE/OTGFSPRE bits */
  RCC->CFGR &= (uint32_t)0xFF80FFFF;
 8002330:	f421 01fe 	bic.w	r1, r1, #8323072	; 0x7f0000
 8002334:	6059      	str	r1, [r3, #4]

  /* Reset CFGR2 register */
  RCC->CFGR2 = 0x00000000;
#elif defined (STM32F10X_LD_VL) || defined (STM32F10X_MD_VL) || (defined STM32F10X_HD_VL)
  /* Disable all interrupts and clear pending bits  */
  RCC->CIR = 0x009F0000;
 8002336:	609c      	str	r4, [r3, #8]

  /* Reset CFGR2 register */
  RCC->CFGR2 = 0x00000000;      
 8002338:	62d8      	str	r0, [r3, #44]	; 0x2c
  * @param  None
  * @retval None
  */
static void SetSysClockTo24(void)
{
  __IO uint32_t StartUpCounter = 0, HSEStatus = 0;
 800233a:	9000      	str	r0, [sp, #0]
 800233c:	9001      	str	r0, [sp, #4]
  
  /* SYSCLK, HCLK, PCLK2 and PCLK1 configuration ---------------------------*/    
  /* Enable HSE */    
  RCC->CR |= ((uint32_t)RCC_CR_HSEON);
 800233e:	6819      	ldr	r1, [r3, #0]
 8002340:	f441 3180 	orr.w	r1, r1, #65536	; 0x10000
 8002344:	6019      	str	r1, [r3, #0]
 8002346:	e003      	b.n	8002350 <SystemInit+0x54>
  /* Wait till HSE is ready and if Time out is reached exit */
  do
  {
    HSEStatus = RCC->CR & RCC_CR_HSERDY;
    StartUpCounter++;  
  } while((HSEStatus == 0) && (StartUpCounter != HSE_STARTUP_TIMEOUT));
 8002348:	9b00      	ldr	r3, [sp, #0]
 800234a:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
 800234e:	d009      	beq.n	8002364 <SystemInit+0x68>
  RCC->CR |= ((uint32_t)RCC_CR_HSEON);
 
  /* Wait till HSE is ready and if Time out is reached exit */
  do
  {
    HSEStatus = RCC->CR & RCC_CR_HSERDY;
 8002350:	6813      	ldr	r3, [r2, #0]
 8002352:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002356:	9301      	str	r3, [sp, #4]
    StartUpCounter++;  
 8002358:	9b00      	ldr	r3, [sp, #0]
 800235a:	3301      	adds	r3, #1
 800235c:	9300      	str	r3, [sp, #0]
  } while((HSEStatus == 0) && (StartUpCounter != HSE_STARTUP_TIMEOUT));
 800235e:	9b01      	ldr	r3, [sp, #4]
 8002360:	2b00      	cmp	r3, #0
 8002362:	d0f1      	beq.n	8002348 <SystemInit+0x4c>

  if ((RCC->CR & RCC_CR_HSERDY) != RESET)
 8002364:	4b1b      	ldr	r3, [pc, #108]	; (80023d4 <SystemInit+0xd8>)
 8002366:	681b      	ldr	r3, [r3, #0]
 8002368:	f413 3300 	ands.w	r3, r3, #131072	; 0x20000
  {
    HSEStatus = (uint32_t)0x01;
 800236c:	bf18      	it	ne
 800236e:	2301      	movne	r3, #1
  }
  else
  {
    HSEStatus = (uint32_t)0x00;
 8002370:	9301      	str	r3, [sp, #4]
  }  

  if (HSEStatus == (uint32_t)0x01)
 8002372:	9b01      	ldr	r3, [sp, #4]
 8002374:	2b01      	cmp	r3, #1
 8002376:	d006      	beq.n	8002386 <SystemInit+0x8a>
  SetSysClock();

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 8002378:	4b18      	ldr	r3, [pc, #96]	; (80023dc <SystemInit+0xe0>)
 800237a:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800237e:	609a      	str	r2, [r3, #8]
#endif 

}
 8002380:	b002      	add	sp, #8
 8002382:	bc30      	pop	{r4, r5}
 8002384:	4770      	bx	lr
    FLASH->ACR &= (uint32_t)((uint32_t)~FLASH_ACR_LATENCY);
    FLASH->ACR |= (uint32_t)FLASH_ACR_LATENCY_0;    
#endif
 
    /* HCLK = SYSCLK */
    RCC->CFGR |= (uint32_t)RCC_CFGR_HPRE_DIV1;
 8002386:	4b13      	ldr	r3, [pc, #76]	; (80023d4 <SystemInit+0xd8>)

    /* Enable PLL */
    RCC->CR |= RCC_CR_PLLON;

    /* Wait till PLL is ready */
    while((RCC->CR & RCC_CR_PLLRDY) == 0)
 8002388:	4619      	mov	r1, r3
    FLASH->ACR &= (uint32_t)((uint32_t)~FLASH_ACR_LATENCY);
    FLASH->ACR |= (uint32_t)FLASH_ACR_LATENCY_0;    
#endif
 
    /* HCLK = SYSCLK */
    RCC->CFGR |= (uint32_t)RCC_CFGR_HPRE_DIV1;
 800238a:	685a      	ldr	r2, [r3, #4]
 800238c:	605a      	str	r2, [r3, #4]
      
    /* PCLK2 = HCLK */
    RCC->CFGR |= (uint32_t)RCC_CFGR_PPRE2_DIV1;
 800238e:	685a      	ldr	r2, [r3, #4]
 8002390:	605a      	str	r2, [r3, #4]
    
    /* PCLK1 = HCLK */
    RCC->CFGR |= (uint32_t)RCC_CFGR_PPRE1_DIV1;
 8002392:	685a      	ldr	r2, [r3, #4]
 8002394:	605a      	str	r2, [r3, #4]
    while((RCC->CR & RCC_CR_PLL2RDY) == 0)
    {
    }   
#elif defined (STM32F10X_LD_VL) || defined (STM32F10X_MD_VL) || defined (STM32F10X_HD_VL)
    /*  PLL configuration:  = (HSE / 2) * 6 = 24 MHz */
    RCC->CFGR &= (uint32_t)((uint32_t)~(RCC_CFGR_PLLSRC | RCC_CFGR_PLLXTPRE | RCC_CFGR_PLLMULL));
 8002396:	685a      	ldr	r2, [r3, #4]
 8002398:	f422 127c 	bic.w	r2, r2, #4128768	; 0x3f0000
 800239c:	605a      	str	r2, [r3, #4]
    RCC->CFGR |= (uint32_t)(RCC_CFGR_PLLSRC_PREDIV1 | RCC_CFGR_PLLXTPRE_PREDIV1_Div2 | RCC_CFGR_PLLMULL6);
 800239e:	685a      	ldr	r2, [r3, #4]
 80023a0:	f442 1298 	orr.w	r2, r2, #1245184	; 0x130000
 80023a4:	605a      	str	r2, [r3, #4]
    RCC->CFGR &= (uint32_t)((uint32_t)~(RCC_CFGR_PLLSRC | RCC_CFGR_PLLXTPRE | RCC_CFGR_PLLMULL));
    RCC->CFGR |= (uint32_t)(RCC_CFGR_PLLSRC_HSE | RCC_CFGR_PLLXTPRE_HSE_Div2 | RCC_CFGR_PLLMULL6);
#endif /* STM32F10X_CL */

    /* Enable PLL */
    RCC->CR |= RCC_CR_PLLON;
 80023a6:	681a      	ldr	r2, [r3, #0]
 80023a8:	f042 7280 	orr.w	r2, r2, #16777216	; 0x1000000
 80023ac:	601a      	str	r2, [r3, #0]

    /* Wait till PLL is ready */
    while((RCC->CR & RCC_CR_PLLRDY) == 0)
 80023ae:	680b      	ldr	r3, [r1, #0]
 80023b0:	4a08      	ldr	r2, [pc, #32]	; (80023d4 <SystemInit+0xd8>)
 80023b2:	019b      	lsls	r3, r3, #6
 80023b4:	d5fb      	bpl.n	80023ae <SystemInit+0xb2>
    /* Select PLL as system clock source */
    RCC->CFGR &= (uint32_t)((uint32_t)~(RCC_CFGR_SW));
    RCC->CFGR |= (uint32_t)RCC_CFGR_SW_PLL;    

    /* Wait till PLL is used as system clock source */
    while ((RCC->CFGR & (uint32_t)RCC_CFGR_SWS) != (uint32_t)0x08)
 80023b6:	4611      	mov	r1, r2
    while((RCC->CR & RCC_CR_PLLRDY) == 0)
    {
    }

    /* Select PLL as system clock source */
    RCC->CFGR &= (uint32_t)((uint32_t)~(RCC_CFGR_SW));
 80023b8:	6853      	ldr	r3, [r2, #4]
 80023ba:	f023 0303 	bic.w	r3, r3, #3
 80023be:	6053      	str	r3, [r2, #4]
    RCC->CFGR |= (uint32_t)RCC_CFGR_SW_PLL;    
 80023c0:	6853      	ldr	r3, [r2, #4]
 80023c2:	f043 0302 	orr.w	r3, r3, #2
 80023c6:	6053      	str	r3, [r2, #4]

    /* Wait till PLL is used as system clock source */
    while ((RCC->CFGR & (uint32_t)RCC_CFGR_SWS) != (uint32_t)0x08)
 80023c8:	684b      	ldr	r3, [r1, #4]
 80023ca:	f003 030c 	and.w	r3, r3, #12
 80023ce:	2b08      	cmp	r3, #8
 80023d0:	d1fa      	bne.n	80023c8 <SystemInit+0xcc>
 80023d2:	e7d1      	b.n	8002378 <SystemInit+0x7c>
 80023d4:	40021000 	.word	0x40021000
 80023d8:	f8ff0000 	.word	0xf8ff0000
 80023dc:	e000ed00 	.word	0xe000ed00

080023e0 <ts_formatstring>:
**---------------------------------------------------------------------------
*/
int ts_formatstring(char *buf, const char *fmt, va_list va)
{
	char *start_buf = buf;
	while(*fmt)
 80023e0:	4603      	mov	r3, r0
**  Abstract: Writes arguments va to buffer buf according to format fmt
**  Returns:  Length of string
**---------------------------------------------------------------------------
*/
int ts_formatstring(char *buf, const char *fmt, va_list va)
{
 80023e2:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}

	while (div != 0)
	{
		int num = d/div;
		d = d%div;
		div /= base;
 80023e6:	4f58      	ldr	r7, [pc, #352]	; (8002548 <ts_formatstring+0x168>)
				{
					signed int val = va_arg(va, signed int);
					if (val < 0)
					{
						val *= -1;
						*buf++ = '-';
 80023e8:	f04f 0e2d 	mov.w	lr, #45	; 0x2d
**---------------------------------------------------------------------------
*/
int ts_formatstring(char *buf, const char *fmt, va_list va)
{
	char *start_buf = buf;
	while(*fmt)
 80023ec:	780c      	ldrb	r4, [r1, #0]
 80023ee:	b13c      	cbz	r4, 8002400 <ts_formatstring+0x20>
	{
		/* Character needs formating? */
		if (*fmt == '%')
 80023f0:	2c25      	cmp	r4, #37	; 0x25
 80023f2:	d009      	beq.n	8002408 <ts_formatstring+0x28>
			fmt++;
		}
		/* Else just copy */
		else
		{
			*buf++ = *fmt++;
 80023f4:	701c      	strb	r4, [r3, #0]
 80023f6:	3101      	adds	r1, #1
**---------------------------------------------------------------------------
*/
int ts_formatstring(char *buf, const char *fmt, va_list va)
{
	char *start_buf = buf;
	while(*fmt)
 80023f8:	780c      	ldrb	r4, [r1, #0]
			fmt++;
		}
		/* Else just copy */
		else
		{
			*buf++ = *fmt++;
 80023fa:	3301      	adds	r3, #1
**---------------------------------------------------------------------------
*/
int ts_formatstring(char *buf, const char *fmt, va_list va)
{
	char *start_buf = buf;
	while(*fmt)
 80023fc:	2c00      	cmp	r4, #0
 80023fe:	d1f7      	bne.n	80023f0 <ts_formatstring+0x10>
		else
		{
			*buf++ = *fmt++;
		}
	}
	*buf = 0;
 8002400:	701c      	strb	r4, [r3, #0]

	return (int)(buf - start_buf);
}
 8002402:	1a18      	subs	r0, r3, r0
 8002404:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	while(*fmt)
	{
		/* Character needs formating? */
		if (*fmt == '%')
		{
			switch (*(++fmt))
 8002408:	784c      	ldrb	r4, [r1, #1]
 800240a:	2c64      	cmp	r4, #100	; 0x64
 800240c:	d06d      	beq.n	80024ea <ts_formatstring+0x10a>
 800240e:	d929      	bls.n	8002464 <ts_formatstring+0x84>
 8002410:	2c73      	cmp	r4, #115	; 0x73
 8002412:	d05b      	beq.n	80024cc <ts_formatstring+0xec>
 8002414:	d967      	bls.n	80024e6 <ts_formatstring+0x106>
 8002416:	2c75      	cmp	r4, #117	; 0x75
 8002418:	d12e      	bne.n	8002478 <ts_formatstring+0x98>
						*buf++ = *arg++;
					}
				}
				break;
			  case 'u':
					ts_itoa(&buf, va_arg(va, unsigned int), 10);
 800241a:	6816      	ldr	r6, [r2, #0]
**---------------------------------------------------------------------------
*/
void ts_itoa(char **buf, unsigned int d, int base)
{
	int div = 1;
	while (d/div >= base)
 800241c:	2401      	movs	r4, #1
 800241e:	2e09      	cmp	r6, #9
						*buf++ = *arg++;
					}
				}
				break;
			  case 'u':
					ts_itoa(&buf, va_arg(va, unsigned int), 10);
 8002420:	f102 0204 	add.w	r2, r2, #4
**---------------------------------------------------------------------------
*/
void ts_itoa(char **buf, unsigned int d, int base)
{
	int div = 1;
	while (d/div >= base)
 8002424:	d906      	bls.n	8002434 <ts_formatstring+0x54>
		div *= base;
 8002426:	eb04 0484 	add.w	r4, r4, r4, lsl #2
 800242a:	0064      	lsls	r4, r4, #1
**---------------------------------------------------------------------------
*/
void ts_itoa(char **buf, unsigned int d, int base)
{
	int div = 1;
	while (d/div >= base)
 800242c:	fbb6 f5f4 	udiv	r5, r6, r4
 8002430:	2d09      	cmp	r5, #9
 8002432:	d8f8      	bhi.n	8002426 <ts_formatstring+0x46>
		div *= base;

	while (div != 0)
	{
		int num = d/div;
 8002434:	fbb6 f8f4 	udiv	r8, r6, r4
		d = d%div;
		div /= base;
		if (num > 9)
			*((*buf)++) = (num-10) + 'A';
 8002438:	fa5f f588 	uxtb.w	r5, r8
 800243c:	f105 0c37 	add.w	ip, r5, #55	; 0x37
 8002440:	3530      	adds	r5, #48	; 0x30
 8002442:	f1b8 0f09 	cmp.w	r8, #9
 8002446:	bfc8      	it	gt
 8002448:	4665      	movgt	r5, ip

	while (div != 0)
	{
		int num = d/div;
		d = d%div;
		div /= base;
 800244a:	fb87 c904 	smull	ip, r9, r7, r4
 800244e:	ea4f 7ce4 	mov.w	ip, r4, asr #31
		div *= base;

	while (div != 0)
	{
		int num = d/div;
		d = d%div;
 8002452:	fb04 6618 	mls	r6, r4, r8, r6
{
	int div = 1;
	while (d/div >= base)
		div *= base;

	while (div != 0)
 8002456:	ebdc 04a9 	rsbs	r4, ip, r9, asr #2
 800245a:	f803 5b01 	strb.w	r5, [r3], #1
 800245e:	d1e9      	bne.n	8002434 <ts_formatstring+0x54>
				break;
			  case '%':
				  *buf++ = '%';
				  break;
			}
			fmt++;
 8002460:	3102      	adds	r1, #2
 8002462:	e7c3      	b.n	80023ec <ts_formatstring+0xc>
	while(*fmt)
	{
		/* Character needs formating? */
		if (*fmt == '%')
		{
			switch (*(++fmt))
 8002464:	2c58      	cmp	r4, #88	; 0x58
 8002466:	d009      	beq.n	800247c <ts_formatstring+0x9c>
 8002468:	2c63      	cmp	r4, #99	; 0x63
 800246a:	d028      	beq.n	80024be <ts_formatstring+0xde>
 800246c:	2c25      	cmp	r4, #37	; 0x25
 800246e:	d1f7      	bne.n	8002460 <ts_formatstring+0x80>
			  case 'x':
			  case 'X':
					ts_itoa(&buf, va_arg(va, int), 16);
				break;
			  case '%':
				  *buf++ = '%';
 8002470:	701c      	strb	r4, [r3, #0]
				  break;
			}
			fmt++;
 8002472:	3102      	adds	r1, #2
			  case 'x':
			  case 'X':
					ts_itoa(&buf, va_arg(va, int), 16);
				break;
			  case '%':
				  *buf++ = '%';
 8002474:	3301      	adds	r3, #1
 8002476:	e7b9      	b.n	80023ec <ts_formatstring+0xc>
	while(*fmt)
	{
		/* Character needs formating? */
		if (*fmt == '%')
		{
			switch (*(++fmt))
 8002478:	2c78      	cmp	r4, #120	; 0x78
 800247a:	d1f1      	bne.n	8002460 <ts_formatstring+0x80>
			  case 'u':
					ts_itoa(&buf, va_arg(va, unsigned int), 10);
				break;
			  case 'x':
			  case 'X':
					ts_itoa(&buf, va_arg(va, int), 16);
 800247c:	f8d2 c000 	ldr.w	ip, [r2]
 8002480:	3204      	adds	r2, #4
**---------------------------------------------------------------------------
*/
void ts_itoa(char **buf, unsigned int d, int base)
{
	int div = 1;
	while (d/div >= base)
 8002482:	f1bc 0f0f 	cmp.w	ip, #15
 8002486:	d95b      	bls.n	8002540 <ts_formatstring+0x160>
 8002488:	2401      	movs	r4, #1
		div *= base;
 800248a:	0124      	lsls	r4, r4, #4
**---------------------------------------------------------------------------
*/
void ts_itoa(char **buf, unsigned int d, int base)
{
	int div = 1;
	while (d/div >= base)
 800248c:	fbbc f5f4 	udiv	r5, ip, r4
 8002490:	2d0f      	cmp	r5, #15
 8002492:	d8fa      	bhi.n	800248a <ts_formatstring+0xaa>
 8002494:	e001      	b.n	800249a <ts_formatstring+0xba>
 8002496:	fbbc f5f4 	udiv	r5, ip, r4
	{
		int num = d/div;
		d = d%div;
		div /= base;
		if (num > 9)
			*((*buf)++) = (num-10) + 'A';
 800249a:	b2ee      	uxtb	r6, r5
 800249c:	f106 0837 	add.w	r8, r6, #55	; 0x37
		div *= base;

	while (div != 0)
	{
		int num = d/div;
		d = d%div;
 80024a0:	fb04 cc15 	mls	ip, r4, r5, ip
 80024a4:	3630      	adds	r6, #48	; 0x30
		div /= base;
 80024a6:	2c00      	cmp	r4, #0
 80024a8:	bfb8      	it	lt
 80024aa:	340f      	addlt	r4, #15
 80024ac:	2d09      	cmp	r5, #9
 80024ae:	bfc8      	it	gt
 80024b0:	4646      	movgt	r6, r8
{
	int div = 1;
	while (d/div >= base)
		div *= base;

	while (div != 0)
 80024b2:	1124      	asrs	r4, r4, #4
 80024b4:	f803 6b01 	strb.w	r6, [r3], #1
 80024b8:	d1ed      	bne.n	8002496 <ts_formatstring+0xb6>
				break;
			  case '%':
				  *buf++ = '%';
				  break;
			}
			fmt++;
 80024ba:	3102      	adds	r1, #2
 80024bc:	e796      	b.n	80023ec <ts_formatstring+0xc>
		if (*fmt == '%')
		{
			switch (*(++fmt))
			{
			  case 'c':
				*buf++ = va_arg(va, int);
 80024be:	6814      	ldr	r4, [r2, #0]
 80024c0:	3301      	adds	r3, #1
 80024c2:	f803 4c01 	strb.w	r4, [r3, #-1]
 80024c6:	3204      	adds	r2, #4
				break;
			  case '%':
				  *buf++ = '%';
				  break;
			}
			fmt++;
 80024c8:	3102      	adds	r1, #2
 80024ca:	e78f      	b.n	80023ec <ts_formatstring+0xc>
					ts_itoa(&buf, val, 10);
				}
				break;
			  case 's':
				{
					char * arg = va_arg(va, char *);
 80024cc:	6815      	ldr	r5, [r2, #0]
 80024ce:	3204      	adds	r2, #4
					while (*arg)
 80024d0:	782c      	ldrb	r4, [r5, #0]
 80024d2:	2c00      	cmp	r4, #0
 80024d4:	d0c4      	beq.n	8002460 <ts_formatstring+0x80>
					{
						*buf++ = *arg++;
 80024d6:	f803 4b01 	strb.w	r4, [r3], #1
				}
				break;
			  case 's':
				{
					char * arg = va_arg(va, char *);
					while (*arg)
 80024da:	f815 4f01 	ldrb.w	r4, [r5, #1]!
 80024de:	2c00      	cmp	r4, #0
 80024e0:	d1f9      	bne.n	80024d6 <ts_formatstring+0xf6>
				break;
			  case '%':
				  *buf++ = '%';
				  break;
			}
			fmt++;
 80024e2:	3102      	adds	r1, #2
 80024e4:	e782      	b.n	80023ec <ts_formatstring+0xc>
	while(*fmt)
	{
		/* Character needs formating? */
		if (*fmt == '%')
		{
			switch (*(++fmt))
 80024e6:	2c69      	cmp	r4, #105	; 0x69
 80024e8:	d1ba      	bne.n	8002460 <ts_formatstring+0x80>
				*buf++ = va_arg(va, int);
				break;
			  case 'd':
			  case 'i':
				{
					signed int val = va_arg(va, signed int);
 80024ea:	6816      	ldr	r6, [r2, #0]
 80024ec:	3204      	adds	r2, #4
					if (val < 0)
 80024ee:	2e00      	cmp	r6, #0
 80024f0:	db21      	blt.n	8002536 <ts_formatstring+0x156>
**---------------------------------------------------------------------------
*/
void ts_itoa(char **buf, unsigned int d, int base)
{
	int div = 1;
	while (d/div >= base)
 80024f2:	2e09      	cmp	r6, #9
					if (val < 0)
					{
						val *= -1;
						*buf++ = '-';
					}
					ts_itoa(&buf, val, 10);
 80024f4:	46b0      	mov	r8, r6
**---------------------------------------------------------------------------
*/
void ts_itoa(char **buf, unsigned int d, int base)
{
	int div = 1;
	while (d/div >= base)
 80024f6:	f04f 0401 	mov.w	r4, #1
 80024fa:	dd06      	ble.n	800250a <ts_formatstring+0x12a>
		div *= base;
 80024fc:	eb04 0484 	add.w	r4, r4, r4, lsl #2
 8002500:	0064      	lsls	r4, r4, #1
**---------------------------------------------------------------------------
*/
void ts_itoa(char **buf, unsigned int d, int base)
{
	int div = 1;
	while (d/div >= base)
 8002502:	fbb6 f5f4 	udiv	r5, r6, r4
 8002506:	2d09      	cmp	r5, #9
 8002508:	d8f8      	bhi.n	80024fc <ts_formatstring+0x11c>
		div *= base;

	while (div != 0)
	{
		int num = d/div;
 800250a:	fbb8 fcf4 	udiv	ip, r8, r4
		d = d%div;
		div /= base;
		if (num > 9)
			*((*buf)++) = (num-10) + 'A';
 800250e:	fa5f f58c 	uxtb.w	r5, ip
 8002512:	f105 0637 	add.w	r6, r5, #55	; 0x37
 8002516:	3530      	adds	r5, #48	; 0x30
 8002518:	f1bc 0f09 	cmp.w	ip, #9
 800251c:	bfc8      	it	gt
 800251e:	4635      	movgt	r5, r6

	while (div != 0)
	{
		int num = d/div;
		d = d%div;
		div /= base;
 8002520:	fb87 6904 	smull	r6, r9, r7, r4
 8002524:	17e6      	asrs	r6, r4, #31
		div *= base;

	while (div != 0)
	{
		int num = d/div;
		d = d%div;
 8002526:	fb04 881c 	mls	r8, r4, ip, r8
{
	int div = 1;
	while (d/div >= base)
		div *= base;

	while (div != 0)
 800252a:	ebd6 04a9 	rsbs	r4, r6, r9, asr #2
 800252e:	f803 5b01 	strb.w	r5, [r3], #1
 8002532:	d1ea      	bne.n	800250a <ts_formatstring+0x12a>
 8002534:	e794      	b.n	8002460 <ts_formatstring+0x80>
				{
					signed int val = va_arg(va, signed int);
					if (val < 0)
					{
						val *= -1;
						*buf++ = '-';
 8002536:	f883 e000 	strb.w	lr, [r3]
			  case 'i':
				{
					signed int val = va_arg(va, signed int);
					if (val < 0)
					{
						val *= -1;
 800253a:	4276      	negs	r6, r6
						*buf++ = '-';
 800253c:	3301      	adds	r3, #1
 800253e:	e7d8      	b.n	80024f2 <ts_formatstring+0x112>
 8002540:	4665      	mov	r5, ip
**  Returns:  void
**---------------------------------------------------------------------------
*/
void ts_itoa(char **buf, unsigned int d, int base)
{
	int div = 1;
 8002542:	2401      	movs	r4, #1
 8002544:	e7a9      	b.n	800249a <ts_formatstring+0xba>
 8002546:	bf00      	nop
 8002548:	66666667 	.word	0x66666667

0800254c <ts_formatlength>:
**---------------------------------------------------------------------------
*/
int ts_formatlength(const char *fmt, va_list va)
{
	int length = 0;
	while (*fmt)
 800254c:	7803      	ldrb	r3, [r0, #0]
 800254e:	2b00      	cmp	r3, #0
 8002550:	d073      	beq.n	800263a <ts_formatlength+0xee>
**            format string and va_list va
**  Returns:  Maximum length
**---------------------------------------------------------------------------
*/
int ts_formatlength(const char *fmt, va_list va)
{
 8002552:	b430      	push	{r4, r5}
	int length = 0;
	while (*fmt)
 8002554:	2200      	movs	r2, #0
 8002556:	e004      	b.n	8002562 <ts_formatlength+0x16>
				  break;
			}
		}
		else
		{
			++length;
 8002558:	3201      	adds	r2, #1
**---------------------------------------------------------------------------
*/
int ts_formatlength(const char *fmt, va_list va)
{
	int length = 0;
	while (*fmt)
 800255a:	7843      	ldrb	r3, [r0, #1]
		}
		else
		{
			++length;
		}
		++fmt;
 800255c:	3001      	adds	r0, #1
**---------------------------------------------------------------------------
*/
int ts_formatlength(const char *fmt, va_list va)
{
	int length = 0;
	while (*fmt)
 800255e:	2b00      	cmp	r3, #0
 8002560:	d04c      	beq.n	80025fc <ts_formatlength+0xb0>
	{
		if (*fmt == '%')
 8002562:	2b25      	cmp	r3, #37	; 0x25
 8002564:	d1f8      	bne.n	8002558 <ts_formatlength+0xc>
		{
			++fmt;
			switch (*fmt)
 8002566:	7843      	ldrb	r3, [r0, #1]
	int length = 0;
	while (*fmt)
	{
		if (*fmt == '%')
		{
			++fmt;
 8002568:	3001      	adds	r0, #1
			switch (*fmt)
 800256a:	3b58      	subs	r3, #88	; 0x58
 800256c:	2b20      	cmp	r3, #32
 800256e:	d8f3      	bhi.n	8002558 <ts_formatlength+0xc>
 8002570:	a401      	add	r4, pc, #4	; (adr r4, 8002578 <ts_formatlength+0x2c>)
 8002572:	f854 f023 	ldr.w	pc, [r4, r3, lsl #2]
 8002576:	bf00      	nop
 8002578:	08002635 	.word	0x08002635
 800257c:	08002559 	.word	0x08002559
 8002580:	08002559 	.word	0x08002559
 8002584:	08002559 	.word	0x08002559
 8002588:	08002559 	.word	0x08002559
 800258c:	08002559 	.word	0x08002559
 8002590:	08002559 	.word	0x08002559
 8002594:	08002559 	.word	0x08002559
 8002598:	08002559 	.word	0x08002559
 800259c:	08002559 	.word	0x08002559
 80025a0:	08002559 	.word	0x08002559
 80025a4:	0800262f 	.word	0x0800262f
 80025a8:	08002629 	.word	0x08002629
 80025ac:	08002559 	.word	0x08002559
 80025b0:	0800261d 	.word	0x0800261d
 80025b4:	08002559 	.word	0x08002559
 80025b8:	08002559 	.word	0x08002559
 80025bc:	08002629 	.word	0x08002629
 80025c0:	08002559 	.word	0x08002559
 80025c4:	08002559 	.word	0x08002559
 80025c8:	08002559 	.word	0x08002559
 80025cc:	08002559 	.word	0x08002559
 80025d0:	08002559 	.word	0x08002559
 80025d4:	08002559 	.word	0x08002559
 80025d8:	08002559 	.word	0x08002559
 80025dc:	08002559 	.word	0x08002559
 80025e0:	08002559 	.word	0x08002559
 80025e4:	08002603 	.word	0x08002603
 80025e8:	08002559 	.word	0x08002559
 80025ec:	08002629 	.word	0x08002629
 80025f0:	08002559 	.word	0x08002559
 80025f4:	08002559 	.word	0x08002559
 80025f8:	08002635 	.word	0x08002635
			++length;
		}
		++fmt;
	}
	return length;
}
 80025fc:	4610      	mov	r0, r2
 80025fe:	bc30      	pop	{r4, r5}
 8002600:	4770      	bx	lr
				  length += 11;
				  va_arg(va, int);
				  break;
			  case 's':
			  	  {
			  		  char * str = va_arg(va, char *);
 8002602:	680d      	ldr	r5, [r1, #0]
 8002604:	3104      	adds	r1, #4
			  		  while (*str++)
 8002606:	782c      	ldrb	r4, [r5, #0]
 8002608:	1c6b      	adds	r3, r5, #1
 800260a:	2c00      	cmp	r4, #0
 800260c:	d0a5      	beq.n	800255a <ts_formatlength+0xe>
 800260e:	1b55      	subs	r5, r2, r5
 8002610:	195a      	adds	r2, r3, r5
 8002612:	f813 4b01 	ldrb.w	r4, [r3], #1
 8002616:	2c00      	cmp	r4, #0
 8002618:	d1fa      	bne.n	8002610 <ts_formatlength+0xc4>
 800261a:	e79e      	b.n	800255a <ts_formatlength+0xe>
		{
			++fmt;
			switch (*fmt)
			{
			  case 'f':
				  va_arg(va,double);
 800261c:	3107      	adds	r1, #7
 800261e:	f021 0107 	bic.w	r1, r1, #7
 8002622:	3108      	adds	r1, #8
				  ++length;
 8002624:	3201      	adds	r2, #1
				  break;
 8002626:	e798      	b.n	800255a <ts_formatlength+0xe>
				  break;
			  case 'd':
			  case 'i':
			  case 'u':
				  /* 32 bits integer is max 11 characters with minus sign */
				  length += 11;
 8002628:	320b      	adds	r2, #11
				  va_arg(va, int);
 800262a:	3104      	adds	r1, #4
				  break;
 800262c:	e795      	b.n	800255a <ts_formatlength+0xe>
			  case 'f':
				  va_arg(va,double);
				  ++length;
				  break;
			  case 'c':
		  		  va_arg(va, int);
 800262e:	3104      	adds	r1, #4
				  ++length;
 8002630:	3201      	adds	r2, #1
				  break;
 8002632:	e792      	b.n	800255a <ts_formatlength+0xe>
			  	  }
				  break;
			  case 'x':
			  case 'X':
				  /* 32 bits integer as hex is max 8 characters */
				  length += 8;
 8002634:	3208      	adds	r2, #8
				  va_arg(va, unsigned int);
 8002636:	3104      	adds	r1, #4
				  break;
 8002638:	e78f      	b.n	800255a <ts_formatlength+0xe>
			++length;
		}
		++fmt;
	}
	return length;
}
 800263a:	4618      	mov	r0, r3
 800263c:	4770      	bx	lr
 800263e:	bf00      	nop

08002640 <iprintf>:
**  Returns:  Number of bytes written
**
**===========================================================================
*/
int iprintf(const char *fmt, ...)
{
 8002640:	b40f      	push	{r0, r1, r2, r3}
 8002642:	b5b0      	push	{r4, r5, r7, lr}
 8002644:	b082      	sub	sp, #8
 8002646:	af00      	add	r7, sp, #0
 8002648:	f107 0418 	add.w	r4, r7, #24
 800264c:	f854 5b04 	ldr.w	r5, [r4], #4
	int length = 0;
	va_list va;
	va_start(va, fmt);
	length = ts_formatlength(fmt, va);
 8002650:	4621      	mov	r1, r4
 8002652:	4628      	mov	r0, r5
*/
int iprintf(const char *fmt, ...)
{
	int length = 0;
	va_list va;
	va_start(va, fmt);
 8002654:	607c      	str	r4, [r7, #4]
	length = ts_formatlength(fmt, va);
 8002656:	f7ff ff79 	bl	800254c <ts_formatlength>
	va_end(va);
	{
		char buf[length];
 800265a:	3007      	adds	r0, #7
 800265c:	f020 0007 	bic.w	r0, r0, #7
 8002660:	ebad 0d00 	sub.w	sp, sp, r0
		va_start(va, fmt);
		length = ts_formatstring(buf, fmt, va);
 8002664:	4629      	mov	r1, r5
 8002666:	4622      	mov	r2, r4
 8002668:	4668      	mov	r0, sp
	va_start(va, fmt);
	length = ts_formatlength(fmt, va);
	va_end(va);
	{
		char buf[length];
		va_start(va, fmt);
 800266a:	607c      	str	r4, [r7, #4]
		length = ts_formatstring(buf, fmt, va);
 800266c:	f7ff feb8 	bl	80023e0 <ts_formatstring>
		length = _write(1, buf, length);
 8002670:	4669      	mov	r1, sp
 8002672:	4602      	mov	r2, r0
 8002674:	2001      	movs	r0, #1
 8002676:	f7ff fd53 	bl	8002120 <_write>
		va_end(va);
	}
	return length;
}
 800267a:	3708      	adds	r7, #8
 800267c:	46bd      	mov	sp, r7
 800267e:	e8bd 40b0 	ldmia.w	sp!, {r4, r5, r7, lr}
 8002682:	b004      	add	sp, #16
 8002684:	4770      	bx	lr
 8002686:	bf00      	nop

08002688 <_Z9initUsartv>:
	initSPI();
	SysTick_Config(8000000);
}

void initUsart()
{
 8002688:	b5f0      	push	{r4, r5, r6, r7, lr}
	RCC_APB2PeriphClockCmd (RCC_APB2Periph_USART1 | RCC_APB2Periph_GPIOA| RCC_APB2Periph_AFIO , ENABLE);
	GPIO_InitTypeDef usartPinTx;
	usartPinTx.GPIO_Pin = USART1_TX;
	usartPinTx.GPIO_Mode = GPIO_Mode_AF_PP;
	usartPinTx.GPIO_Speed = GPIO_Speed_10MHz;
	GPIO_Init(GPIOA,&usartPinTx);
 800268a:	4d32      	ldr	r5, [pc, #200]	; (8002754 <_Z9initUsartv+0xcc>)
	initSPI();
	SysTick_Config(8000000);
}

void initUsart()
{
 800268c:	b089      	sub	sp, #36	; 0x24
	RCC_APB2PeriphClockCmd (RCC_APB2Periph_USART1 | RCC_APB2Periph_GPIOA| RCC_APB2Periph_AFIO , ENABLE);
 800268e:	2101      	movs	r1, #1
 8002690:	f244 0005 	movw	r0, #16389	; 0x4005
 8002694:	f7fe fac0 	bl	8000c18 <RCC_APB2PeriphClockCmd>
	GPIO_InitTypeDef usartPinTx;
	usartPinTx.GPIO_Pin = USART1_TX;
	usartPinTx.GPIO_Mode = GPIO_Mode_AF_PP;
	usartPinTx.GPIO_Speed = GPIO_Speed_10MHz;
 8002698:	2401      	movs	r4, #1

void initUsart()
{
	RCC_APB2PeriphClockCmd (RCC_APB2Periph_USART1 | RCC_APB2Periph_GPIOA| RCC_APB2Periph_AFIO , ENABLE);
	GPIO_InitTypeDef usartPinTx;
	usartPinTx.GPIO_Pin = USART1_TX;
 800269a:	f44f 7600 	mov.w	r6, #512	; 0x200
	usartPinTx.GPIO_Mode = GPIO_Mode_AF_PP;
	usartPinTx.GPIO_Speed = GPIO_Speed_10MHz;
	GPIO_Init(GPIOA,&usartPinTx);
 800269e:	4628      	mov	r0, r5
void initUsart()
{
	RCC_APB2PeriphClockCmd (RCC_APB2Periph_USART1 | RCC_APB2Periph_GPIOA| RCC_APB2Periph_AFIO , ENABLE);
	GPIO_InitTypeDef usartPinTx;
	usartPinTx.GPIO_Pin = USART1_TX;
	usartPinTx.GPIO_Mode = GPIO_Mode_AF_PP;
 80026a0:	2318      	movs	r3, #24
	usartPinTx.GPIO_Speed = GPIO_Speed_10MHz;
	GPIO_Init(GPIOA,&usartPinTx);
 80026a2:	4669      	mov	r1, sp

void initUsart()
{
	RCC_APB2PeriphClockCmd (RCC_APB2Periph_USART1 | RCC_APB2Periph_GPIOA| RCC_APB2Periph_AFIO , ENABLE);
	GPIO_InitTypeDef usartPinTx;
	usartPinTx.GPIO_Pin = USART1_TX;
 80026a4:	f8ad 6000 	strh.w	r6, [sp]
	usartPinTx.GPIO_Mode = GPIO_Mode_AF_PP;
 80026a8:	f88d 3003 	strb.w	r3, [sp, #3]
	usartPinTx.GPIO_Speed = GPIO_Speed_10MHz;
 80026ac:	f88d 4002 	strb.w	r4, [sp, #2]
	GPIO_Init(GPIOA,&usartPinTx);
 80026b0:	f7fe f872 	bl	8000798 <GPIO_Init>

	GPIO_InitTypeDef usartPinRx;
	usartPinRx.GPIO_Pin = USART1_RX;
	usartPinRx.GPIO_Mode = GPIO_Mode_IN_FLOATING;
 80026b4:	2304      	movs	r3, #4
	GPIO_Init(GPIOA,&usartPinRx);
 80026b6:	eb0d 0103 	add.w	r1, sp, r3
	usartPinTx.GPIO_Mode = GPIO_Mode_AF_PP;
	usartPinTx.GPIO_Speed = GPIO_Speed_10MHz;
	GPIO_Init(GPIOA,&usartPinTx);

	GPIO_InitTypeDef usartPinRx;
	usartPinRx.GPIO_Pin = USART1_RX;
 80026ba:	f44f 6280 	mov.w	r2, #1024	; 0x400
	usartPinRx.GPIO_Mode = GPIO_Mode_IN_FLOATING;
	GPIO_Init(GPIOA,&usartPinRx);
 80026be:	4628      	mov	r0, r5
	usartPinTx.GPIO_Mode = GPIO_Mode_AF_PP;
	usartPinTx.GPIO_Speed = GPIO_Speed_10MHz;
	GPIO_Init(GPIOA,&usartPinTx);

	GPIO_InitTypeDef usartPinRx;
	usartPinRx.GPIO_Pin = USART1_RX;
 80026c0:	f8ad 2004 	strh.w	r2, [sp, #4]
	usartPinRx.GPIO_Mode = GPIO_Mode_IN_FLOATING;
 80026c4:	f88d 3007 	strb.w	r3, [sp, #7]
	GPIO_Init(GPIOA,&usartPinRx);
 80026c8:	f7fe f866 	bl	8000798 <GPIO_Init>

	RCC_APB2PeriphClockCmd(RCC_APB2Periph_GPIOC, ENABLE);
 80026cc:	4621      	mov	r1, r4
 80026ce:	2010      	movs	r0, #16
 80026d0:	f7fe faa2 	bl	8000c18 <RCC_APB2PeriphClockCmd>
	initStruct.USART_HardwareFlowControl	= USART_HardwareFlowControl_None;
	initStruct.USART_Mode 					= USART_Mode_Rx | USART_Mode_Tx;
	initStruct.USART_Parity 				= USART_Parity_No;
	initStruct.USART_StopBits 				= USART_StopBits_2;
	initStruct.USART_WordLength 			= USART_WordLength_8b;
	USART_Init(USART1,&initStruct);
 80026d4:	f505 5540 	add.w	r5, r5, #12288	; 0x3000
	GPIO_Init(GPIOA,&usartPinRx);

	RCC_APB2PeriphClockCmd(RCC_APB2Periph_GPIOC, ENABLE);
	GPIO_InitTypeDef usartCtrPin;
	usartCtrPin.GPIO_Pin = GPIO_Pin_9;
	usartCtrPin.GPIO_Mode = GPIO_Mode_Out_PP;
 80026d8:	2210      	movs	r2, #16
	usartCtrPin.GPIO_Speed = GPIO_Speed_2MHz;
 80026da:	2302      	movs	r3, #2
	GPIO_Init(GPIOC,&usartCtrPin);
 80026dc:	a902      	add	r1, sp, #8
 80026de:	481e      	ldr	r0, [pc, #120]	; (8002758 <_Z9initUsartv+0xd0>)
	usartPinRx.GPIO_Mode = GPIO_Mode_IN_FLOATING;
	GPIO_Init(GPIOA,&usartPinRx);

	RCC_APB2PeriphClockCmd(RCC_APB2Periph_GPIOC, ENABLE);
	GPIO_InitTypeDef usartCtrPin;
	usartCtrPin.GPIO_Pin = GPIO_Pin_9;
 80026e0:	f8ad 6008 	strh.w	r6, [sp, #8]
	usartCtrPin.GPIO_Mode = GPIO_Mode_Out_PP;
 80026e4:	f88d 200b 	strb.w	r2, [sp, #11]
	usartCtrPin.GPIO_Speed = GPIO_Speed_2MHz;
 80026e8:	f88d 300a 	strb.w	r3, [sp, #10]

	USART_InitTypeDef initStruct;
	initStruct.USART_BaudRate 				= 19200;
//	initStruct.USART_BaudRate 				= 115200;
	initStruct.USART_HardwareFlowControl	= USART_HardwareFlowControl_None;
	initStruct.USART_Mode 					= USART_Mode_Rx | USART_Mode_Tx;
 80026ec:	260c      	movs	r6, #12
	RCC_APB2PeriphClockCmd(RCC_APB2Periph_GPIOC, ENABLE);
	GPIO_InitTypeDef usartCtrPin;
	usartCtrPin.GPIO_Pin = GPIO_Pin_9;
	usartCtrPin.GPIO_Mode = GPIO_Mode_Out_PP;
	usartCtrPin.GPIO_Speed = GPIO_Speed_2MHz;
	GPIO_Init(GPIOC,&usartCtrPin);
 80026ee:	f7fe f853 	bl	8000798 <GPIO_Init>

	USART_InitTypeDef initStruct;
	initStruct.USART_BaudRate 				= 19200;
 80026f2:	f44f 4796 	mov.w	r7, #19200	; 0x4b00
//	initStruct.USART_BaudRate 				= 115200;
	initStruct.USART_HardwareFlowControl	= USART_HardwareFlowControl_None;
 80026f6:	2300      	movs	r3, #0
	initStruct.USART_Mode 					= USART_Mode_Rx | USART_Mode_Tx;
	initStruct.USART_Parity 				= USART_Parity_No;
	initStruct.USART_StopBits 				= USART_StopBits_2;
 80026f8:	f44f 5200 	mov.w	r2, #8192	; 0x2000
	initStruct.USART_WordLength 			= USART_WordLength_8b;
	USART_Init(USART1,&initStruct);
 80026fc:	4628      	mov	r0, r5
 80026fe:	a904      	add	r1, sp, #16
	GPIO_Init(GPIOC,&usartCtrPin);

	USART_InitTypeDef initStruct;
	initStruct.USART_BaudRate 				= 19200;
//	initStruct.USART_BaudRate 				= 115200;
	initStruct.USART_HardwareFlowControl	= USART_HardwareFlowControl_None;
 8002700:	f8ad 301c 	strh.w	r3, [sp, #28]
	initStruct.USART_Mode 					= USART_Mode_Rx | USART_Mode_Tx;
	initStruct.USART_Parity 				= USART_Parity_No;
 8002704:	f8ad 3018 	strh.w	r3, [sp, #24]
	initStruct.USART_StopBits 				= USART_StopBits_2;
	initStruct.USART_WordLength 			= USART_WordLength_8b;
 8002708:	f8ad 3014 	strh.w	r3, [sp, #20]
	initStruct.USART_BaudRate 				= 19200;
//	initStruct.USART_BaudRate 				= 115200;
	initStruct.USART_HardwareFlowControl	= USART_HardwareFlowControl_None;
	initStruct.USART_Mode 					= USART_Mode_Rx | USART_Mode_Tx;
	initStruct.USART_Parity 				= USART_Parity_No;
	initStruct.USART_StopBits 				= USART_StopBits_2;
 800270c:	f8ad 2016 	strh.w	r2, [sp, #22]
	usartCtrPin.GPIO_Mode = GPIO_Mode_Out_PP;
	usartCtrPin.GPIO_Speed = GPIO_Speed_2MHz;
	GPIO_Init(GPIOC,&usartCtrPin);

	USART_InitTypeDef initStruct;
	initStruct.USART_BaudRate 				= 19200;
 8002710:	9704      	str	r7, [sp, #16]
//	initStruct.USART_BaudRate 				= 115200;
	initStruct.USART_HardwareFlowControl	= USART_HardwareFlowControl_None;
	initStruct.USART_Mode 					= USART_Mode_Rx | USART_Mode_Tx;
 8002712:	f8ad 601a 	strh.w	r6, [sp, #26]
	initStruct.USART_Parity 				= USART_Parity_No;
	initStruct.USART_StopBits 				= USART_StopBits_2;
	initStruct.USART_WordLength 			= USART_WordLength_8b;
	USART_Init(USART1,&initStruct);
 8002716:	f7fe fb11 	bl	8000d3c <USART_Init>
	USART_Cmd(USART1, ENABLE);
 800271a:	4621      	mov	r1, r4
 800271c:	4628      	mov	r0, r5
 800271e:	f7fe fb6b 	bl	8000df8 <USART_Cmd>

	USART_ITConfig(USART1, USART_IT_RXNE, ENABLE);
 8002722:	4622      	mov	r2, r4
 8002724:	4628      	mov	r0, r5
 8002726:	f240 5125 	movw	r1, #1317	; 0x525
 800272a:	f7fe fb73 	bl	8000e14 <USART_ITConfig>
	NVIC_InitTypeDef NVIC_InitStructure;
	NVIC_InitStructure.NVIC_IRQChannel = USART1_IRQn;
 800272e:	2225      	movs	r2, #37	; 0x25
	NVIC_InitStructure.NVIC_IRQChannelPreemptionPriority = 1;
	NVIC_InitStructure.NVIC_IRQChannelSubPriority = 6;
 8002730:	2306      	movs	r3, #6
	NVIC_InitStructure.NVIC_IRQChannelCmd = ENABLE;
	NVIC_Init(&NVIC_InitStructure);
 8002732:	eb0d 0006 	add.w	r0, sp, r6
	USART_Init(USART1,&initStruct);
	USART_Cmd(USART1, ENABLE);

	USART_ITConfig(USART1, USART_IT_RXNE, ENABLE);
	NVIC_InitTypeDef NVIC_InitStructure;
	NVIC_InitStructure.NVIC_IRQChannel = USART1_IRQn;
 8002736:	f88d 200c 	strb.w	r2, [sp, #12]
	NVIC_InitStructure.NVIC_IRQChannelPreemptionPriority = 1;
	NVIC_InitStructure.NVIC_IRQChannelSubPriority = 6;
 800273a:	f88d 300e 	strb.w	r3, [sp, #14]
	USART_Cmd(USART1, ENABLE);

	USART_ITConfig(USART1, USART_IT_RXNE, ENABLE);
	NVIC_InitTypeDef NVIC_InitStructure;
	NVIC_InitStructure.NVIC_IRQChannel = USART1_IRQn;
	NVIC_InitStructure.NVIC_IRQChannelPreemptionPriority = 1;
 800273e:	f88d 400d 	strb.w	r4, [sp, #13]
	NVIC_InitStructure.NVIC_IRQChannelSubPriority = 6;
	NVIC_InitStructure.NVIC_IRQChannelCmd = ENABLE;
 8002742:	f88d 400f 	strb.w	r4, [sp, #15]
	NVIC_Init(&NVIC_InitStructure);
 8002746:	f7fd fff1 	bl	800072c <NVIC_Init>

    \param [in]      IRQn  Number of the external interrupt to enable
 */
static __INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
  NVIC->ISER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* enable interrupt */
 800274a:	4b04      	ldr	r3, [pc, #16]	; (800275c <_Z9initUsartv+0xd4>)
 800274c:	2220      	movs	r2, #32
 800274e:	605a      	str	r2, [r3, #4]
	NVIC_EnableIRQ(USART1_IRQn);
}
 8002750:	b009      	add	sp, #36	; 0x24
 8002752:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002754:	40010800 	.word	0x40010800
 8002758:	40011000 	.word	0x40011000
 800275c:	e000e100 	.word	0xe000e100

08002760 <_Z7initSPIv>:

void initSPI()
{
 8002760:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}

	/*------------------SPI1------------------------------------------------*/
	RCC_APB2PeriphClockCmd(RCC_APB2Periph_SPI1 | RCC_APB2Periph_AFIO,ENABLE);
 8002764:	2101      	movs	r1, #1
	NVIC_Init(&NVIC_InitStructure);
	NVIC_EnableIRQ(USART1_IRQn);
}

void initSPI()
{
 8002766:	b08b      	sub	sp, #44	; 0x2c

	/*------------------SPI1------------------------------------------------*/
	RCC_APB2PeriphClockCmd(RCC_APB2Periph_SPI1 | RCC_APB2Periph_AFIO,ENABLE);
 8002768:	f241 0001 	movw	r0, #4097	; 0x1001
 800276c:	f7fe fa54 	bl	8000c18 <RCC_APB2PeriphClockCmd>

	GPIO_InitTypeDef spiGpio;
	spiGpio.GPIO_Mode =		GPIO_Mode_AF_PP;
	spiGpio.GPIO_Pin = 		SPI1_MOSI_PIN | SPI1_CLK_PIN ;
	spiGpio.GPIO_Speed = 	GPIO_Speed_50MHz;
	GPIO_Init(GPIOA,&spiGpio);
 8002770:	4c6b      	ldr	r4, [pc, #428]	; (8002920 <_Z7initSPIv+0x1c0>)
void initSPI()
{

	/*------------------SPI1------------------------------------------------*/
	RCC_APB2PeriphClockCmd(RCC_APB2Periph_SPI1 | RCC_APB2Periph_AFIO,ENABLE);
	RCC_APB2PeriphClockCmd(RCC_APB2Periph_GPIOA, ENABLE);
 8002772:	2101      	movs	r1, #1
 8002774:	2004      	movs	r0, #4
 8002776:	f7fe fa4f 	bl	8000c18 <RCC_APB2PeriphClockCmd>
	GPIO_Init(GPIOA,&spiGpio);

	spiGpio.GPIO_Mode = 	GPIO_Mode_Out_PP;
	spiGpio.GPIO_Pin =		SPI1_RES_PIN;
	spiGpio.GPIO_Speed = 	GPIO_Speed_50MHz;
	GPIO_Init(GPIOC,&spiGpio);
 800277a:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 800292c <_Z7initSPIv+0x1cc>
{

	/*------------------SPI1------------------------------------------------*/
	RCC_APB2PeriphClockCmd(RCC_APB2Periph_SPI1 | RCC_APB2Periph_AFIO,ENABLE);
	RCC_APB2PeriphClockCmd(RCC_APB2Periph_GPIOA, ENABLE);
	RCC_APB2PeriphClockCmd(RCC_APB2Periph_GPIOC, ENABLE);
 800277e:	2101      	movs	r1, #1
 8002780:	2010      	movs	r0, #16
 8002782:	f7fe fa49 	bl	8000c18 <RCC_APB2PeriphClockCmd>


	GPIO_InitTypeDef spiGpio;
	spiGpio.GPIO_Mode =		GPIO_Mode_AF_PP;
	spiGpio.GPIO_Pin = 		SPI1_MOSI_PIN | SPI1_CLK_PIN ;
	spiGpio.GPIO_Speed = 	GPIO_Speed_50MHz;
 8002786:	2703      	movs	r7, #3
	RCC_APB2PeriphClockCmd(RCC_APB2Periph_GPIOA, ENABLE);
	RCC_APB2PeriphClockCmd(RCC_APB2Periph_GPIOC, ENABLE);


	GPIO_InitTypeDef spiGpio;
	spiGpio.GPIO_Mode =		GPIO_Mode_AF_PP;
 8002788:	2318      	movs	r3, #24
	spiGpio.GPIO_Pin = 		SPI1_MOSI_PIN | SPI1_CLK_PIN ;
 800278a:	22a0      	movs	r2, #160	; 0xa0
	spiGpio.GPIO_Speed = 	GPIO_Speed_50MHz;
	GPIO_Init(GPIOA,&spiGpio);
 800278c:	4620      	mov	r0, r4
 800278e:	a903      	add	r1, sp, #12

	spiGpio.GPIO_Mode = 	GPIO_Mode_Out_PP;
 8002790:	2610      	movs	r6, #16
	RCC_APB2PeriphClockCmd(RCC_APB2Periph_GPIOA, ENABLE);
	RCC_APB2PeriphClockCmd(RCC_APB2Periph_GPIOC, ENABLE);


	GPIO_InitTypeDef spiGpio;
	spiGpio.GPIO_Mode =		GPIO_Mode_AF_PP;
 8002792:	f88d 300f 	strb.w	r3, [sp, #15]
 8002796:	9301      	str	r3, [sp, #4]
	spiGpio.GPIO_Pin = 		SPI1_MOSI_PIN | SPI1_CLK_PIN ;
 8002798:	f8ad 200c 	strh.w	r2, [sp, #12]
	spiGpio.GPIO_Speed = 	GPIO_Speed_50MHz;
 800279c:	f88d 700e 	strb.w	r7, [sp, #14]
	GPIO_Init(GPIOA,&spiGpio);
 80027a0:	f7fd fffa 	bl	8000798 <GPIO_Init>

	spiGpio.GPIO_Mode = 	GPIO_Mode_Out_PP;
	spiGpio.GPIO_Pin =		SPI1_RES_PIN;
	spiGpio.GPIO_Speed = 	GPIO_Speed_50MHz;
	GPIO_Init(GPIOC,&spiGpio);
 80027a4:	a903      	add	r1, sp, #12
 80027a6:	4640      	mov	r0, r8
	spiGpio.GPIO_Speed = 	GPIO_Speed_50MHz;
	GPIO_Init(GPIOA,&spiGpio);

	spiGpio.GPIO_Mode = 	GPIO_Mode_Out_PP;
	spiGpio.GPIO_Pin =		SPI1_RES_PIN;
	spiGpio.GPIO_Speed = 	GPIO_Speed_50MHz;
 80027a8:	f88d 700e 	strb.w	r7, [sp, #14]
	GPIO_Init(GPIOC,&spiGpio);

	spiGpio.GPIO_Mode = 	GPIO_Mode_Out_PP;
	spiGpio.GPIO_Pin =		SPI1_D_C_PIN | SPI1_CS_PIN ;
 80027ac:	2550      	movs	r5, #80	; 0x50
	spiGpio.GPIO_Mode =		GPIO_Mode_AF_PP;
	spiGpio.GPIO_Pin = 		SPI1_MOSI_PIN | SPI1_CLK_PIN ;
	spiGpio.GPIO_Speed = 	GPIO_Speed_50MHz;
	GPIO_Init(GPIOA,&spiGpio);

	spiGpio.GPIO_Mode = 	GPIO_Mode_Out_PP;
 80027ae:	f88d 600f 	strb.w	r6, [sp, #15]
	spiGpio.GPIO_Pin =		SPI1_RES_PIN;
 80027b2:	f8ad 600c 	strh.w	r6, [sp, #12]
	spiGpio.GPIO_Speed = 	GPIO_Speed_50MHz;
	GPIO_Init(GPIOC,&spiGpio);
 80027b6:	f7fd ffef 	bl	8000798 <GPIO_Init>

	spiGpio.GPIO_Mode = 	GPIO_Mode_Out_PP;
	spiGpio.GPIO_Pin =		SPI1_D_C_PIN | SPI1_CS_PIN ;
	spiGpio.GPIO_Speed = 	GPIO_Speed_50MHz;
	GPIO_Init(GPIOA,&spiGpio);
 80027ba:	a903      	add	r1, sp, #12
 80027bc:	4620      	mov	r0, r4
	spiGpio.GPIO_Speed = 	GPIO_Speed_50MHz;
	GPIO_Init(GPIOC,&spiGpio);

	spiGpio.GPIO_Mode = 	GPIO_Mode_Out_PP;
	spiGpio.GPIO_Pin =		SPI1_D_C_PIN | SPI1_CS_PIN ;
	spiGpio.GPIO_Speed = 	GPIO_Speed_50MHz;
 80027be:	f88d 700e 	strb.w	r7, [sp, #14]
	spiGpio.GPIO_Pin =		SPI1_RES_PIN;
	spiGpio.GPIO_Speed = 	GPIO_Speed_50MHz;
	GPIO_Init(GPIOC,&spiGpio);

	spiGpio.GPIO_Mode = 	GPIO_Mode_Out_PP;
	spiGpio.GPIO_Pin =		SPI1_D_C_PIN | SPI1_CS_PIN ;
 80027c2:	f8ad 500c 	strh.w	r5, [sp, #12]
	spiGpio.GPIO_Mode = 	GPIO_Mode_Out_PP;
	spiGpio.GPIO_Pin =		SPI1_RES_PIN;
	spiGpio.GPIO_Speed = 	GPIO_Speed_50MHz;
	GPIO_Init(GPIOC,&spiGpio);

	spiGpio.GPIO_Mode = 	GPIO_Mode_Out_PP;
 80027c6:	f88d 600f 	strb.w	r6, [sp, #15]
	spiGpio.GPIO_Pin =		SPI1_D_C_PIN | SPI1_CS_PIN ;
	spiGpio.GPIO_Speed = 	GPIO_Speed_50MHz;
	GPIO_Init(GPIOA,&spiGpio);
 80027ca:	f7fd ffe5 	bl	8000798 <GPIO_Init>

	GPIO_SetBits(GPIOC, SPI1_RES_PIN);
 80027ce:	4631      	mov	r1, r6
 80027d0:	4640      	mov	r0, r8
 80027d2:	f7fe f9c7 	bl	8000b64 <GPIO_SetBits>
	GPIO_SetBits(GPIOA, SPI1_D_C_PIN | SPI1_CS_PIN );
 80027d6:	4629      	mov	r1, r5
 80027d8:	4620      	mov	r0, r4
 80027da:	f7fe f9c3 	bl	8000b64 <GPIO_SetBits>

	SPI_InitTypeDef spiConfig;
	SPI_StructInit(&spiConfig);
 80027de:	a805      	add	r0, sp, #20
 80027e0:	f7fe fa56 	bl	8000c90 <SPI_StructInit>
	spiConfig.SPI_DataSize = SPI_DataSize_8b;
	spiConfig.SPI_Direction = SPI_Direction_1Line_Tx;
	spiConfig.SPI_FirstBit = SPI_FirstBit_MSB;
	spiConfig.SPI_CPOL = SPI_CPOL_High;
	spiConfig.SPI_CPHA = SPI_CPHA_2Edge;
	spiConfig.SPI_CRCPolynomial = 7;
 80027e4:	f04f 0307 	mov.w	r3, #7
	SPI_Init(SPI1,&spiConfig);
 80027e8:	f508 5800 	add.w	r8, r8, #8192	; 0x2000
	spiConfig.SPI_Mode = SPI_Mode_Master;
	spiConfig.SPI_NSS = SPI_NSS_Soft;
	spiConfig.SPI_DataSize = SPI_DataSize_8b;
	spiConfig.SPI_Direction = SPI_Direction_1Line_Tx;
	spiConfig.SPI_FirstBit = SPI_FirstBit_MSB;
	spiConfig.SPI_CPOL = SPI_CPOL_High;
 80027ec:	2202      	movs	r2, #2
	spiConfig.SPI_CPHA = SPI_CPHA_2Edge;
 80027ee:	2401      	movs	r4, #1
	GPIO_SetBits(GPIOC, SPI1_RES_PIN);
	GPIO_SetBits(GPIOA, SPI1_D_C_PIN | SPI1_CS_PIN );

	SPI_InitTypeDef spiConfig;
	SPI_StructInit(&spiConfig);
	spiConfig.SPI_BaudRatePrescaler = SPI_BaudRatePrescaler_2;
 80027f0:	2500      	movs	r5, #0
	spiConfig.SPI_Mode = SPI_Mode_Master;
	spiConfig.SPI_NSS = SPI_NSS_Soft;
	spiConfig.SPI_DataSize = SPI_DataSize_8b;
	spiConfig.SPI_Direction = SPI_Direction_1Line_Tx;
 80027f2:	f44f 4e40 	mov.w	lr, #49152	; 0xc000
	spiConfig.SPI_FirstBit = SPI_FirstBit_MSB;
	spiConfig.SPI_CPOL = SPI_CPOL_High;
	spiConfig.SPI_CPHA = SPI_CPHA_2Edge;
	spiConfig.SPI_CRCPolynomial = 7;
	SPI_Init(SPI1,&spiConfig);
 80027f6:	a905      	add	r1, sp, #20
 80027f8:	4640      	mov	r0, r8
	GPIO_SetBits(GPIOA, SPI1_D_C_PIN | SPI1_CS_PIN );

	SPI_InitTypeDef spiConfig;
	SPI_StructInit(&spiConfig);
	spiConfig.SPI_BaudRatePrescaler = SPI_BaudRatePrescaler_2;
	spiConfig.SPI_Mode = SPI_Mode_Master;
 80027fa:	f44f 7b82 	mov.w	fp, #260	; 0x104
	spiConfig.SPI_NSS = SPI_NSS_Soft;
 80027fe:	f44f 7900 	mov.w	r9, #512	; 0x200
	spiConfig.SPI_DataSize = SPI_DataSize_8b;
	spiConfig.SPI_Direction = SPI_Direction_1Line_Tx;
	spiConfig.SPI_FirstBit = SPI_FirstBit_MSB;
	spiConfig.SPI_CPOL = SPI_CPOL_High;
 8002802:	f8ad 201a 	strh.w	r2, [sp, #26]
 8002806:	9200      	str	r2, [sp, #0]
	SPI_StructInit(&spiConfig);
	spiConfig.SPI_BaudRatePrescaler = SPI_BaudRatePrescaler_2;
	spiConfig.SPI_Mode = SPI_Mode_Master;
	spiConfig.SPI_NSS = SPI_NSS_Soft;
	spiConfig.SPI_DataSize = SPI_DataSize_8b;
	spiConfig.SPI_Direction = SPI_Direction_1Line_Tx;
 8002808:	f8ad e014 	strh.w	lr, [sp, #20]
	spiConfig.SPI_FirstBit = SPI_FirstBit_MSB;
	spiConfig.SPI_CPOL = SPI_CPOL_High;
	spiConfig.SPI_CPHA = SPI_CPHA_2Edge;
	spiConfig.SPI_CRCPolynomial = 7;
 800280c:	f8ad 3024 	strh.w	r3, [sp, #36]	; 0x24
	GPIO_SetBits(GPIOC, SPI1_RES_PIN);
	GPIO_SetBits(GPIOA, SPI1_D_C_PIN | SPI1_CS_PIN );

	SPI_InitTypeDef spiConfig;
	SPI_StructInit(&spiConfig);
	spiConfig.SPI_BaudRatePrescaler = SPI_BaudRatePrescaler_2;
 8002810:	f8ad 5020 	strh.w	r5, [sp, #32]
	spiConfig.SPI_Mode = SPI_Mode_Master;
	spiConfig.SPI_NSS = SPI_NSS_Soft;
	spiConfig.SPI_DataSize = SPI_DataSize_8b;
 8002814:	f8ad 5018 	strh.w	r5, [sp, #24]
	spiConfig.SPI_Direction = SPI_Direction_1Line_Tx;
	spiConfig.SPI_FirstBit = SPI_FirstBit_MSB;
 8002818:	f8ad 5022 	strh.w	r5, [sp, #34]	; 0x22
	GPIO_SetBits(GPIOA, SPI1_D_C_PIN | SPI1_CS_PIN );

	SPI_InitTypeDef spiConfig;
	SPI_StructInit(&spiConfig);
	spiConfig.SPI_BaudRatePrescaler = SPI_BaudRatePrescaler_2;
	spiConfig.SPI_Mode = SPI_Mode_Master;
 800281c:	f8ad b016 	strh.w	fp, [sp, #22]
	spiConfig.SPI_NSS = SPI_NSS_Soft;
 8002820:	f8ad 901e 	strh.w	r9, [sp, #30]
	spiConfig.SPI_DataSize = SPI_DataSize_8b;
	spiConfig.SPI_Direction = SPI_Direction_1Line_Tx;
	spiConfig.SPI_FirstBit = SPI_FirstBit_MSB;
	spiConfig.SPI_CPOL = SPI_CPOL_High;
	spiConfig.SPI_CPHA = SPI_CPHA_2Edge;
 8002824:	f8ad 401c 	strh.w	r4, [sp, #28]
	spiConfig.SPI_CRCPolynomial = 7;
	SPI_Init(SPI1,&spiConfig);
 8002828:	f7fe fa12 	bl	8000c50 <SPI_Init>
	SPI_SSOutputCmd(SPI1,ENABLE);
 800282c:	4621      	mov	r1, r4
 800282e:	4640      	mov	r0, r8
 8002830:	f7fe fa5e 	bl	8000cf0 <SPI_SSOutputCmd>
	SPI_Cmd(SPI1,ENABLE);
 8002834:	4621      	mov	r1, r4
 8002836:	4640      	mov	r0, r8
 8002838:	f7fe fa36 	bl	8000ca8 <SPI_Cmd>
	NVIC_InitTypeDef NVIC_InitStructure;
	NVIC_InitStructure.NVIC_IRQChannel = SPI1_IRQn;
	NVIC_InitStructure.NVIC_IRQChannelPreemptionPriority = 0;
	NVIC_InitStructure.NVIC_IRQChannelSubPriority = 0;
	NVIC_InitStructure.NVIC_IRQChannelCmd = ENABLE;
	NVIC_Init(&NVIC_InitStructure);
 800283c:	eb0d 0006 	add.w	r0, sp, r6
	SPI_SSOutputCmd(SPI1,ENABLE);
	SPI_Cmd(SPI1,ENABLE);


	NVIC_InitTypeDef NVIC_InitStructure;
	NVIC_InitStructure.NVIC_IRQChannel = SPI1_IRQn;
 8002840:	2123      	movs	r1, #35	; 0x23
 8002842:	f88d 1010 	strb.w	r1, [sp, #16]
	NVIC_InitStructure.NVIC_IRQChannelPreemptionPriority = 0;
 8002846:	f88d 5011 	strb.w	r5, [sp, #17]
	NVIC_InitStructure.NVIC_IRQChannelSubPriority = 0;
 800284a:	f88d 5012 	strb.w	r5, [sp, #18]
	NVIC_InitStructure.NVIC_IRQChannelCmd = ENABLE;
 800284e:	f88d 4013 	strb.w	r4, [sp, #19]
	NVIC_Init(&NVIC_InitStructure);
 8002852:	f7fd ff6b 	bl	800072c <NVIC_Init>
 8002856:	4b33      	ldr	r3, [pc, #204]	; (8002924 <_Z7initSPIv+0x1c4>)
 8002858:	f04f 0a08 	mov.w	sl, #8
 800285c:	f8c3 a004 	str.w	sl, [r3, #4]

	NVIC_EnableIRQ(SPI1_IRQn);

	/*------------------SPI2------------------------------------------------*/
	RCC_APB1PeriphClockCmd(RCC_APB1Periph_SPI2,ENABLE);
 8002860:	4621      	mov	r1, r4
 8002862:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8002866:	f7fe f9e5 	bl	8000c34 <RCC_APB1PeriphClockCmd>
	RCC_APB2PeriphClockCmd(RCC_APB2Periph_GPIOB, ENABLE);
 800286a:	4621      	mov	r1, r4
 800286c:	4650      	mov	r0, sl
 800286e:	f7fe f9d3 	bl	8000c18 <RCC_APB2PeriphClockCmd>

	spiGpio.GPIO_Mode =	GPIO_Mode_AF_PP;
	spiGpio.GPIO_Pin = 	SPI2_MOSI_PIN | SPI2_CLK_PIN | SPI2_MISO_PIN;
	spiGpio.GPIO_Speed = 	GPIO_Speed_50MHz;
	GPIO_Init(GPIOB,&spiGpio);
 8002872:	f5a8 5810 	sub.w	r8, r8, #9216	; 0x2400

	/*------------------SPI2------------------------------------------------*/
	RCC_APB1PeriphClockCmd(RCC_APB1Periph_SPI2,ENABLE);
	RCC_APB2PeriphClockCmd(RCC_APB2Periph_GPIOB, ENABLE);

	spiGpio.GPIO_Mode =	GPIO_Mode_AF_PP;
 8002876:	9b01      	ldr	r3, [sp, #4]
	spiGpio.GPIO_Pin = 	SPI2_MOSI_PIN | SPI2_CLK_PIN | SPI2_MISO_PIN;
 8002878:	f44f 4e60 	mov.w	lr, #57344	; 0xe000
	spiGpio.GPIO_Speed = 	GPIO_Speed_50MHz;
	GPIO_Init(GPIOB,&spiGpio);
 800287c:	a903      	add	r1, sp, #12
 800287e:	4640      	mov	r0, r8
	/*------------------SPI2------------------------------------------------*/
	RCC_APB1PeriphClockCmd(RCC_APB1Periph_SPI2,ENABLE);
	RCC_APB2PeriphClockCmd(RCC_APB2Periph_GPIOB, ENABLE);

	spiGpio.GPIO_Mode =	GPIO_Mode_AF_PP;
	spiGpio.GPIO_Pin = 	SPI2_MOSI_PIN | SPI2_CLK_PIN | SPI2_MISO_PIN;
 8002880:	f8ad e00c 	strh.w	lr, [sp, #12]

	/*------------------SPI2------------------------------------------------*/
	RCC_APB1PeriphClockCmd(RCC_APB1Periph_SPI2,ENABLE);
	RCC_APB2PeriphClockCmd(RCC_APB2Periph_GPIOB, ENABLE);

	spiGpio.GPIO_Mode =	GPIO_Mode_AF_PP;
 8002884:	f88d 300f 	strb.w	r3, [sp, #15]
	spiGpio.GPIO_Pin = 	SPI2_MOSI_PIN | SPI2_CLK_PIN | SPI2_MISO_PIN;
	spiGpio.GPIO_Speed = 	GPIO_Speed_50MHz;
 8002888:	f88d 700e 	strb.w	r7, [sp, #14]
	GPIO_Init(GPIOB,&spiGpio);

	spiGpio.GPIO_Mode = 	GPIO_Mode_Out_PP;
	spiGpio.GPIO_Pin =		SPI2_CS_PIN;
 800288c:	f44f 5a80 	mov.w	sl, #4096	; 0x1000
	RCC_APB2PeriphClockCmd(RCC_APB2Periph_GPIOB, ENABLE);

	spiGpio.GPIO_Mode =	GPIO_Mode_AF_PP;
	spiGpio.GPIO_Pin = 	SPI2_MOSI_PIN | SPI2_CLK_PIN | SPI2_MISO_PIN;
	spiGpio.GPIO_Speed = 	GPIO_Speed_50MHz;
	GPIO_Init(GPIOB,&spiGpio);
 8002890:	f7fd ff82 	bl	8000798 <GPIO_Init>

	spiGpio.GPIO_Mode = 	GPIO_Mode_Out_PP;
	spiGpio.GPIO_Pin =		SPI2_CS_PIN;
	spiGpio.GPIO_Speed = 	GPIO_Speed_50MHz;
	GPIO_Init(GPIOB,&spiGpio);
 8002894:	a903      	add	r1, sp, #12
 8002896:	4640      	mov	r0, r8
	spiGpio.GPIO_Speed = 	GPIO_Speed_50MHz;
	GPIO_Init(GPIOB,&spiGpio);

	spiGpio.GPIO_Mode = 	GPIO_Mode_Out_PP;
	spiGpio.GPIO_Pin =		SPI2_CS_PIN;
	spiGpio.GPIO_Speed = 	GPIO_Speed_50MHz;
 8002898:	f88d 700e 	strb.w	r7, [sp, #14]
	spiGpio.GPIO_Mode =	GPIO_Mode_AF_PP;
	spiGpio.GPIO_Pin = 	SPI2_MOSI_PIN | SPI2_CLK_PIN | SPI2_MISO_PIN;
	spiGpio.GPIO_Speed = 	GPIO_Speed_50MHz;
	GPIO_Init(GPIOB,&spiGpio);

	spiGpio.GPIO_Mode = 	GPIO_Mode_Out_PP;
 800289c:	f88d 600f 	strb.w	r6, [sp, #15]
	spiGpio.GPIO_Pin =		SPI2_CS_PIN;
 80028a0:	f8ad a00c 	strh.w	sl, [sp, #12]
	spiGpio.GPIO_Speed = 	GPIO_Speed_50MHz;
	GPIO_Init(GPIOB,&spiGpio);
 80028a4:	f7fd ff78 	bl	8000798 <GPIO_Init>

	GPIO_SetBits(GPIOB, SPI2_CS_PIN);
 80028a8:	4651      	mov	r1, sl
 80028aa:	4640      	mov	r0, r8
 80028ac:	f7fe f95a 	bl	8000b64 <GPIO_SetBits>

	SPI_StructInit(&spiConfig);
 80028b0:	a805      	add	r0, sp, #20
 80028b2:	f7fe f9ed 	bl	8000c90 <SPI_StructInit>
	spiConfig.SPI_DataSize = SPI_DataSize_8b;
	spiConfig.SPI_Direction = SPI_Direction_2Lines_FullDuplex;
	spiConfig.SPI_FirstBit = SPI_FirstBit_MSB;
	spiConfig.SPI_CPOL = SPI_CPOL_High;
	spiConfig.SPI_CPHA = SPI_CPHA_2Edge;
	spiConfig.SPI_CRCPolynomial = 7;
 80028b6:	f04f 0307 	mov.w	r3, #7
	SPI_Init(SPI2,&spiConfig);
 80028ba:	4f1b      	ldr	r7, [pc, #108]	; (8002928 <_Z7initSPIv+0x1c8>)
	spiConfig.SPI_Mode = SPI_Mode_Master;
	spiConfig.SPI_NSS = SPI_NSS_Soft;
	spiConfig.SPI_DataSize = SPI_DataSize_8b;
	spiConfig.SPI_Direction = SPI_Direction_2Lines_FullDuplex;
	spiConfig.SPI_FirstBit = SPI_FirstBit_MSB;
	spiConfig.SPI_CPOL = SPI_CPOL_High;
 80028bc:	9a00      	ldr	r2, [sp, #0]
	spiConfig.SPI_CPHA = SPI_CPHA_2Edge;
	spiConfig.SPI_CRCPolynomial = 7;
	SPI_Init(SPI2,&spiConfig);
 80028be:	a905      	add	r1, sp, #20
 80028c0:	4638      	mov	r0, r7
	spiConfig.SPI_Mode = SPI_Mode_Master;
	spiConfig.SPI_NSS = SPI_NSS_Soft;
	spiConfig.SPI_DataSize = SPI_DataSize_8b;
	spiConfig.SPI_Direction = SPI_Direction_2Lines_FullDuplex;
	spiConfig.SPI_FirstBit = SPI_FirstBit_MSB;
	spiConfig.SPI_CPOL = SPI_CPOL_High;
 80028c2:	f8ad 201a 	strh.w	r2, [sp, #26]
	spiConfig.SPI_CPHA = SPI_CPHA_2Edge;
	spiConfig.SPI_CRCPolynomial = 7;
 80028c6:	f8ad 3024 	strh.w	r3, [sp, #36]	; 0x24

	GPIO_SetBits(GPIOB, SPI2_CS_PIN);

	SPI_StructInit(&spiConfig);
	spiConfig.SPI_BaudRatePrescaler = SPI_BaudRatePrescaler_8;
	spiConfig.SPI_Mode = SPI_Mode_Master;
 80028ca:	f8ad b016 	strh.w	fp, [sp, #22]
	GPIO_Init(GPIOB,&spiGpio);

	GPIO_SetBits(GPIOB, SPI2_CS_PIN);

	SPI_StructInit(&spiConfig);
	spiConfig.SPI_BaudRatePrescaler = SPI_BaudRatePrescaler_8;
 80028ce:	f8ad 6020 	strh.w	r6, [sp, #32]
	spiConfig.SPI_Mode = SPI_Mode_Master;
	spiConfig.SPI_NSS = SPI_NSS_Soft;
 80028d2:	f8ad 901e 	strh.w	r9, [sp, #30]
	spiConfig.SPI_DataSize = SPI_DataSize_8b;
 80028d6:	f8ad 5018 	strh.w	r5, [sp, #24]
	spiConfig.SPI_Direction = SPI_Direction_2Lines_FullDuplex;
 80028da:	f8ad 5014 	strh.w	r5, [sp, #20]
	spiConfig.SPI_FirstBit = SPI_FirstBit_MSB;
 80028de:	f8ad 5022 	strh.w	r5, [sp, #34]	; 0x22
	spiConfig.SPI_CPOL = SPI_CPOL_High;
	spiConfig.SPI_CPHA = SPI_CPHA_2Edge;
 80028e2:	f8ad 401c 	strh.w	r4, [sp, #28]
	spiConfig.SPI_CRCPolynomial = 7;
	SPI_Init(SPI2,&spiConfig);
 80028e6:	f7fe f9b3 	bl	8000c50 <SPI_Init>
	SPI_SSOutputCmd(SPI2,ENABLE);
 80028ea:	4621      	mov	r1, r4
 80028ec:	4638      	mov	r0, r7
 80028ee:	f7fe f9ff 	bl	8000cf0 <SPI_SSOutputCmd>
	SPI_Cmd(SPI2,ENABLE);
 80028f2:	4621      	mov	r1, r4
 80028f4:	4638      	mov	r0, r7
 80028f6:	f7fe f9d7 	bl	8000ca8 <SPI_Cmd>

	NVIC_InitStructure.NVIC_IRQChannel = SPI2_IRQn;
 80028fa:	2324      	movs	r3, #36	; 0x24
	NVIC_InitStructure.NVIC_IRQChannelPreemptionPriority = 0;
	NVIC_InitStructure.NVIC_IRQChannelSubPriority = 1;
	NVIC_InitStructure.NVIC_IRQChannelCmd = ENABLE;
	NVIC_Init(&NVIC_InitStructure);
 80028fc:	eb0d 0006 	add.w	r0, sp, r6
	spiConfig.SPI_CRCPolynomial = 7;
	SPI_Init(SPI2,&spiConfig);
	SPI_SSOutputCmd(SPI2,ENABLE);
	SPI_Cmd(SPI2,ENABLE);

	NVIC_InitStructure.NVIC_IRQChannel = SPI2_IRQn;
 8002900:	f88d 3010 	strb.w	r3, [sp, #16]
	NVIC_InitStructure.NVIC_IRQChannelPreemptionPriority = 0;
 8002904:	f88d 5011 	strb.w	r5, [sp, #17]
	NVIC_InitStructure.NVIC_IRQChannelSubPriority = 1;
 8002908:	f88d 4012 	strb.w	r4, [sp, #18]
	NVIC_InitStructure.NVIC_IRQChannelCmd = ENABLE;
 800290c:	f88d 4013 	strb.w	r4, [sp, #19]
	NVIC_Init(&NVIC_InitStructure);
 8002910:	f7fd ff0c 	bl	800072c <NVIC_Init>
 8002914:	4b03      	ldr	r3, [pc, #12]	; (8002924 <_Z7initSPIv+0x1c4>)
 8002916:	605e      	str	r6, [r3, #4]

	NVIC_EnableIRQ(SPI2_IRQn);
	/*------------------SPI3------------------------------------------------*/
}
 8002918:	b00b      	add	sp, #44	; 0x2c
 800291a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800291e:	bf00      	nop
 8002920:	40010800 	.word	0x40010800
 8002924:	e000e100 	.word	0xe000e100
 8002928:	40003800 	.word	0x40003800
 800292c:	40011000 	.word	0x40011000

08002930 <_Z4initv>:
#include "stm32f10x_usart.h"
#include "stm32f10x_gpio.h"
#include "userSettings.h"
#define CLK_FREQ 24000000
void init()
{
 8002930:	b538      	push	{r3, r4, r5, lr}
	NVIC_PriorityGroupConfig(NVIC_PriorityGroup_1);
 8002932:	f44f 60c0 	mov.w	r0, #1536	; 0x600
 8002936:	f7fd feef 	bl	8000718 <NVIC_PriorityGroupConfig>
 */
static __INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if (ticks > SysTick_LOAD_RELOAD_Msk)  return (1);            /* Reload value impossible */

  SysTick->LOAD  = (ticks & SysTick_LOAD_RELOAD_Msk) - 1;      /* set reload register */
 800293a:	4d08      	ldr	r5, [pc, #32]	; (800295c <_Z4initv+0x2c>)
	initUsart();
 800293c:	f7ff fea4 	bl	8002688 <_Z9initUsartv>
	initSPI();
 8002940:	f7ff ff0e 	bl	8002760 <_Z7initSPIv>
 8002944:	4b06      	ldr	r3, [pc, #24]	; (8002960 <_Z4initv+0x30>)
    \param [in]  priority  Priority to set
 */
static __INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if(IRQn < 0) {
    SCB->SHP[((uint32_t)(IRQn) & 0xF)-4] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set Priority for Cortex-M  System Interrupts */
 8002946:	4807      	ldr	r0, [pc, #28]	; (8002964 <_Z4initv+0x34>)
 8002948:	24f0      	movs	r4, #240	; 0xf0
 */
static __INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if (ticks > SysTick_LOAD_RELOAD_Msk)  return (1);            /* Reload value impossible */

  SysTick->LOAD  = (ticks & SysTick_LOAD_RELOAD_Msk) - 1;      /* set reload register */
 800294a:	605d      	str	r5, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1<<__NVIC_PRIO_BITS) - 1);  /* set Priority for Cortex-M0 System Interrupts */
  SysTick->VAL   = 0;                                          /* Load the SysTick Counter Value */
 800294c:	2100      	movs	r1, #0
    \param [in]  priority  Priority to set
 */
static __INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if(IRQn < 0) {
    SCB->SHP[((uint32_t)(IRQn) & 0xF)-4] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set Priority for Cortex-M  System Interrupts */
 800294e:	f880 4023 	strb.w	r4, [r0, #35]	; 0x23
  SysTick->LOAD  = (ticks & SysTick_LOAD_RELOAD_Msk) - 1;      /* set reload register */
  NVIC_SetPriority (SysTick_IRQn, (1<<__NVIC_PRIO_BITS) - 1);  /* set Priority for Cortex-M0 System Interrupts */
  SysTick->VAL   = 0;                                          /* Load the SysTick Counter Value */
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                    /* Enable SysTick IRQ and SysTick Timer */
 8002952:	2207      	movs	r2, #7
{
  if (ticks > SysTick_LOAD_RELOAD_Msk)  return (1);            /* Reload value impossible */

  SysTick->LOAD  = (ticks & SysTick_LOAD_RELOAD_Msk) - 1;      /* set reload register */
  NVIC_SetPriority (SysTick_IRQn, (1<<__NVIC_PRIO_BITS) - 1);  /* set Priority for Cortex-M0 System Interrupts */
  SysTick->VAL   = 0;                                          /* Load the SysTick Counter Value */
 8002954:	6099      	str	r1, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                    /* Enable SysTick IRQ and SysTick Timer */
 8002956:	601a      	str	r2, [r3, #0]
 8002958:	bd38      	pop	{r3, r4, r5, pc}
 800295a:	bf00      	nop
 800295c:	007a11ff 	.word	0x007a11ff
 8002960:	e000e010 	.word	0xe000e010
 8002964:	e000ed00 	.word	0xe000ed00

08002968 <_Znwj>:
 8002968:	b510      	push	{r4, lr}
 800296a:	2800      	cmp	r0, #0
 800296c:	bf14      	ite	ne
 800296e:	4604      	movne	r4, r0
 8002970:	2401      	moveq	r4, #1
 8002972:	4620      	mov	r0, r4
 8002974:	f000 f9a0 	bl	8002cb8 <malloc>
 8002978:	b930      	cbnz	r0, 8002988 <_Znwj+0x20>
 800297a:	f000 f811 	bl	80029a0 <_ZSt15get_new_handlerv>
 800297e:	b908      	cbnz	r0, 8002984 <_Znwj+0x1c>
 8002980:	f000 f95e 	bl	8002c40 <abort>
 8002984:	4780      	blx	r0
 8002986:	e7f4      	b.n	8002972 <_Znwj+0xa>
 8002988:	bd10      	pop	{r4, pc}

0800298a <__aeabi_atexit>:
 800298a:	460b      	mov	r3, r1
 800298c:	4601      	mov	r1, r0
 800298e:	4618      	mov	r0, r3
 8002990:	f000 b95e 	b.w	8002c50 <__cxa_atexit>

08002994 <_ZdlPv>:
 8002994:	f000 b998 	b.w	8002cc8 <free>

08002998 <_ZSt17__throw_bad_allocv>:
 8002998:	b508      	push	{r3, lr}
 800299a:	f000 f951 	bl	8002c40 <abort>
	...

080029a0 <_ZSt15get_new_handlerv>:
 80029a0:	4b02      	ldr	r3, [pc, #8]	; (80029ac <_ZSt15get_new_handlerv+0xc>)
 80029a2:	6818      	ldr	r0, [r3, #0]
 80029a4:	f3bf 8f5f 	dmb	sy
 80029a8:	4770      	bx	lr
 80029aa:	bf00      	nop
 80029ac:	200001fc 	.word	0x200001fc

080029b0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj>:
 80029b0:	4b24      	ldr	r3, [pc, #144]	; (8002a44 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0x94>)
 80029b2:	681a      	ldr	r2, [r3, #0]
 80029b4:	07d0      	lsls	r0, r2, #31
 80029b6:	bf5c      	itt	pl
 80029b8:	2201      	movpl	r2, #1
 80029ba:	601a      	strpl	r2, [r3, #0]
 80029bc:	4b22      	ldr	r3, [pc, #136]	; (8002a48 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0x98>)
 80029be:	681a      	ldr	r2, [r3, #0]
 80029c0:	07d1      	lsls	r1, r2, #31
 80029c2:	bf5c      	itt	pl
 80029c4:	2201      	movpl	r2, #1
 80029c6:	601a      	strpl	r2, [r3, #0]
 80029c8:	4b20      	ldr	r3, [pc, #128]	; (8002a4c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0x9c>)
 80029ca:	681a      	ldr	r2, [r3, #0]
 80029cc:	07d2      	lsls	r2, r2, #31
 80029ce:	bf5c      	itt	pl
 80029d0:	2201      	movpl	r2, #1
 80029d2:	601a      	strpl	r2, [r3, #0]
 80029d4:	4b1e      	ldr	r3, [pc, #120]	; (8002a50 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xa0>)
 80029d6:	681a      	ldr	r2, [r3, #0]
 80029d8:	07d0      	lsls	r0, r2, #31
 80029da:	bf5c      	itt	pl
 80029dc:	2201      	movpl	r2, #1
 80029de:	601a      	strpl	r2, [r3, #0]
 80029e0:	4b1c      	ldr	r3, [pc, #112]	; (8002a54 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xa4>)
 80029e2:	681a      	ldr	r2, [r3, #0]
 80029e4:	07d1      	lsls	r1, r2, #31
 80029e6:	bf5c      	itt	pl
 80029e8:	2201      	movpl	r2, #1
 80029ea:	601a      	strpl	r2, [r3, #0]
 80029ec:	4b1a      	ldr	r3, [pc, #104]	; (8002a58 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xa8>)
 80029ee:	681a      	ldr	r2, [r3, #0]
 80029f0:	07d2      	lsls	r2, r2, #31
 80029f2:	bf5c      	itt	pl
 80029f4:	2201      	movpl	r2, #1
 80029f6:	601a      	strpl	r2, [r3, #0]
 80029f8:	4b18      	ldr	r3, [pc, #96]	; (8002a5c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xac>)
 80029fa:	681a      	ldr	r2, [r3, #0]
 80029fc:	07d0      	lsls	r0, r2, #31
 80029fe:	bf5c      	itt	pl
 8002a00:	2201      	movpl	r2, #1
 8002a02:	601a      	strpl	r2, [r3, #0]
 8002a04:	4b16      	ldr	r3, [pc, #88]	; (8002a60 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xb0>)
 8002a06:	681a      	ldr	r2, [r3, #0]
 8002a08:	07d1      	lsls	r1, r2, #31
 8002a0a:	bf5c      	itt	pl
 8002a0c:	2201      	movpl	r2, #1
 8002a0e:	601a      	strpl	r2, [r3, #0]
 8002a10:	4b14      	ldr	r3, [pc, #80]	; (8002a64 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xb4>)
 8002a12:	681a      	ldr	r2, [r3, #0]
 8002a14:	07d2      	lsls	r2, r2, #31
 8002a16:	bf5c      	itt	pl
 8002a18:	2201      	movpl	r2, #1
 8002a1a:	601a      	strpl	r2, [r3, #0]
 8002a1c:	4b12      	ldr	r3, [pc, #72]	; (8002a68 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xb8>)
 8002a1e:	681a      	ldr	r2, [r3, #0]
 8002a20:	07d0      	lsls	r0, r2, #31
 8002a22:	bf5c      	itt	pl
 8002a24:	2201      	movpl	r2, #1
 8002a26:	601a      	strpl	r2, [r3, #0]
 8002a28:	4b10      	ldr	r3, [pc, #64]	; (8002a6c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xbc>)
 8002a2a:	681a      	ldr	r2, [r3, #0]
 8002a2c:	07d1      	lsls	r1, r2, #31
 8002a2e:	bf5c      	itt	pl
 8002a30:	2201      	movpl	r2, #1
 8002a32:	601a      	strpl	r2, [r3, #0]
 8002a34:	4b0e      	ldr	r3, [pc, #56]	; (8002a70 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xc0>)
 8002a36:	681a      	ldr	r2, [r3, #0]
 8002a38:	07d2      	lsls	r2, r2, #31
 8002a3a:	bf5c      	itt	pl
 8002a3c:	2201      	movpl	r2, #1
 8002a3e:	601a      	strpl	r2, [r3, #0]
 8002a40:	4770      	bx	lr
 8002a42:	bf00      	nop
 8002a44:	2000022c 	.word	0x2000022c
 8002a48:	20000228 	.word	0x20000228
 8002a4c:	20000224 	.word	0x20000224
 8002a50:	20000220 	.word	0x20000220
 8002a54:	2000021c 	.word	0x2000021c
 8002a58:	20000218 	.word	0x20000218
 8002a5c:	20000214 	.word	0x20000214
 8002a60:	20000210 	.word	0x20000210
 8002a64:	2000020c 	.word	0x2000020c
 8002a68:	20000208 	.word	0x20000208
 8002a6c:	20000204 	.word	0x20000204
 8002a70:	20000200 	.word	0x20000200

08002a74 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj>:
 8002a74:	4b24      	ldr	r3, [pc, #144]	; (8002b08 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0x94>)
 8002a76:	681a      	ldr	r2, [r3, #0]
 8002a78:	07d0      	lsls	r0, r2, #31
 8002a7a:	bf5c      	itt	pl
 8002a7c:	2201      	movpl	r2, #1
 8002a7e:	601a      	strpl	r2, [r3, #0]
 8002a80:	4b22      	ldr	r3, [pc, #136]	; (8002b0c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0x98>)
 8002a82:	681a      	ldr	r2, [r3, #0]
 8002a84:	07d1      	lsls	r1, r2, #31
 8002a86:	bf5c      	itt	pl
 8002a88:	2201      	movpl	r2, #1
 8002a8a:	601a      	strpl	r2, [r3, #0]
 8002a8c:	4b20      	ldr	r3, [pc, #128]	; (8002b10 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0x9c>)
 8002a8e:	681a      	ldr	r2, [r3, #0]
 8002a90:	07d2      	lsls	r2, r2, #31
 8002a92:	bf5c      	itt	pl
 8002a94:	2201      	movpl	r2, #1
 8002a96:	601a      	strpl	r2, [r3, #0]
 8002a98:	4b1e      	ldr	r3, [pc, #120]	; (8002b14 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xa0>)
 8002a9a:	681a      	ldr	r2, [r3, #0]
 8002a9c:	07d0      	lsls	r0, r2, #31
 8002a9e:	bf5c      	itt	pl
 8002aa0:	2201      	movpl	r2, #1
 8002aa2:	601a      	strpl	r2, [r3, #0]
 8002aa4:	4b1c      	ldr	r3, [pc, #112]	; (8002b18 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xa4>)
 8002aa6:	681a      	ldr	r2, [r3, #0]
 8002aa8:	07d1      	lsls	r1, r2, #31
 8002aaa:	bf5c      	itt	pl
 8002aac:	2201      	movpl	r2, #1
 8002aae:	601a      	strpl	r2, [r3, #0]
 8002ab0:	4b1a      	ldr	r3, [pc, #104]	; (8002b1c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xa8>)
 8002ab2:	681a      	ldr	r2, [r3, #0]
 8002ab4:	07d2      	lsls	r2, r2, #31
 8002ab6:	bf5c      	itt	pl
 8002ab8:	2201      	movpl	r2, #1
 8002aba:	601a      	strpl	r2, [r3, #0]
 8002abc:	4b18      	ldr	r3, [pc, #96]	; (8002b20 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xac>)
 8002abe:	681a      	ldr	r2, [r3, #0]
 8002ac0:	07d0      	lsls	r0, r2, #31
 8002ac2:	bf5c      	itt	pl
 8002ac4:	2201      	movpl	r2, #1
 8002ac6:	601a      	strpl	r2, [r3, #0]
 8002ac8:	4b16      	ldr	r3, [pc, #88]	; (8002b24 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xb0>)
 8002aca:	681a      	ldr	r2, [r3, #0]
 8002acc:	07d1      	lsls	r1, r2, #31
 8002ace:	bf5c      	itt	pl
 8002ad0:	2201      	movpl	r2, #1
 8002ad2:	601a      	strpl	r2, [r3, #0]
 8002ad4:	4b14      	ldr	r3, [pc, #80]	; (8002b28 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xb4>)
 8002ad6:	681a      	ldr	r2, [r3, #0]
 8002ad8:	07d2      	lsls	r2, r2, #31
 8002ada:	bf5c      	itt	pl
 8002adc:	2201      	movpl	r2, #1
 8002ade:	601a      	strpl	r2, [r3, #0]
 8002ae0:	4b12      	ldr	r3, [pc, #72]	; (8002b2c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xb8>)
 8002ae2:	681a      	ldr	r2, [r3, #0]
 8002ae4:	07d0      	lsls	r0, r2, #31
 8002ae6:	bf5c      	itt	pl
 8002ae8:	2201      	movpl	r2, #1
 8002aea:	601a      	strpl	r2, [r3, #0]
 8002aec:	4b10      	ldr	r3, [pc, #64]	; (8002b30 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xbc>)
 8002aee:	681a      	ldr	r2, [r3, #0]
 8002af0:	07d1      	lsls	r1, r2, #31
 8002af2:	bf5c      	itt	pl
 8002af4:	2201      	movpl	r2, #1
 8002af6:	601a      	strpl	r2, [r3, #0]
 8002af8:	4b0e      	ldr	r3, [pc, #56]	; (8002b34 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xc0>)
 8002afa:	681a      	ldr	r2, [r3, #0]
 8002afc:	07d2      	lsls	r2, r2, #31
 8002afe:	bf5c      	itt	pl
 8002b00:	2201      	movpl	r2, #1
 8002b02:	601a      	strpl	r2, [r3, #0]
 8002b04:	4770      	bx	lr
 8002b06:	bf00      	nop
 8002b08:	2000025c 	.word	0x2000025c
 8002b0c:	20000258 	.word	0x20000258
 8002b10:	20000254 	.word	0x20000254
 8002b14:	20000250 	.word	0x20000250
 8002b18:	2000024c 	.word	0x2000024c
 8002b1c:	20000248 	.word	0x20000248
 8002b20:	20000244 	.word	0x20000244
 8002b24:	20000240 	.word	0x20000240
 8002b28:	2000023c 	.word	0x2000023c
 8002b2c:	20000238 	.word	0x20000238
 8002b30:	20000234 	.word	0x20000234
 8002b34:	20000230 	.word	0x20000230

08002b38 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj>:
 8002b38:	4b18      	ldr	r3, [pc, #96]	; (8002b9c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x64>)
 8002b3a:	681a      	ldr	r2, [r3, #0]
 8002b3c:	07d1      	lsls	r1, r2, #31
 8002b3e:	bf5c      	itt	pl
 8002b40:	2201      	movpl	r2, #1
 8002b42:	601a      	strpl	r2, [r3, #0]
 8002b44:	4b16      	ldr	r3, [pc, #88]	; (8002ba0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x68>)
 8002b46:	681a      	ldr	r2, [r3, #0]
 8002b48:	07d2      	lsls	r2, r2, #31
 8002b4a:	bf5c      	itt	pl
 8002b4c:	2201      	movpl	r2, #1
 8002b4e:	601a      	strpl	r2, [r3, #0]
 8002b50:	4b14      	ldr	r3, [pc, #80]	; (8002ba4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x6c>)
 8002b52:	681a      	ldr	r2, [r3, #0]
 8002b54:	07d0      	lsls	r0, r2, #31
 8002b56:	bf5c      	itt	pl
 8002b58:	2201      	movpl	r2, #1
 8002b5a:	601a      	strpl	r2, [r3, #0]
 8002b5c:	4b12      	ldr	r3, [pc, #72]	; (8002ba8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x70>)
 8002b5e:	681a      	ldr	r2, [r3, #0]
 8002b60:	07d1      	lsls	r1, r2, #31
 8002b62:	bf5c      	itt	pl
 8002b64:	2201      	movpl	r2, #1
 8002b66:	601a      	strpl	r2, [r3, #0]
 8002b68:	4b10      	ldr	r3, [pc, #64]	; (8002bac <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x74>)
 8002b6a:	681a      	ldr	r2, [r3, #0]
 8002b6c:	07d2      	lsls	r2, r2, #31
 8002b6e:	bf5c      	itt	pl
 8002b70:	2201      	movpl	r2, #1
 8002b72:	601a      	strpl	r2, [r3, #0]
 8002b74:	4b0e      	ldr	r3, [pc, #56]	; (8002bb0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x78>)
 8002b76:	681a      	ldr	r2, [r3, #0]
 8002b78:	07d0      	lsls	r0, r2, #31
 8002b7a:	bf5c      	itt	pl
 8002b7c:	2201      	movpl	r2, #1
 8002b7e:	601a      	strpl	r2, [r3, #0]
 8002b80:	4b0c      	ldr	r3, [pc, #48]	; (8002bb4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x7c>)
 8002b82:	681a      	ldr	r2, [r3, #0]
 8002b84:	07d1      	lsls	r1, r2, #31
 8002b86:	bf5c      	itt	pl
 8002b88:	2201      	movpl	r2, #1
 8002b8a:	601a      	strpl	r2, [r3, #0]
 8002b8c:	4b0a      	ldr	r3, [pc, #40]	; (8002bb8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x80>)
 8002b8e:	681a      	ldr	r2, [r3, #0]
 8002b90:	07d2      	lsls	r2, r2, #31
 8002b92:	bf5c      	itt	pl
 8002b94:	2201      	movpl	r2, #1
 8002b96:	601a      	strpl	r2, [r3, #0]
 8002b98:	4770      	bx	lr
 8002b9a:	bf00      	nop
 8002b9c:	2000027c 	.word	0x2000027c
 8002ba0:	20000278 	.word	0x20000278
 8002ba4:	20000274 	.word	0x20000274
 8002ba8:	20000270 	.word	0x20000270
 8002bac:	2000026c 	.word	0x2000026c
 8002bb0:	20000268 	.word	0x20000268
 8002bb4:	20000264 	.word	0x20000264
 8002bb8:	20000260 	.word	0x20000260

08002bbc <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj>:
 8002bbc:	4b18      	ldr	r3, [pc, #96]	; (8002c20 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x64>)
 8002bbe:	681a      	ldr	r2, [r3, #0]
 8002bc0:	07d1      	lsls	r1, r2, #31
 8002bc2:	bf5c      	itt	pl
 8002bc4:	2201      	movpl	r2, #1
 8002bc6:	601a      	strpl	r2, [r3, #0]
 8002bc8:	4b16      	ldr	r3, [pc, #88]	; (8002c24 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x68>)
 8002bca:	681a      	ldr	r2, [r3, #0]
 8002bcc:	07d2      	lsls	r2, r2, #31
 8002bce:	bf5c      	itt	pl
 8002bd0:	2201      	movpl	r2, #1
 8002bd2:	601a      	strpl	r2, [r3, #0]
 8002bd4:	4b14      	ldr	r3, [pc, #80]	; (8002c28 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x6c>)
 8002bd6:	681a      	ldr	r2, [r3, #0]
 8002bd8:	07d0      	lsls	r0, r2, #31
 8002bda:	bf5c      	itt	pl
 8002bdc:	2201      	movpl	r2, #1
 8002bde:	601a      	strpl	r2, [r3, #0]
 8002be0:	4b12      	ldr	r3, [pc, #72]	; (8002c2c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x70>)
 8002be2:	681a      	ldr	r2, [r3, #0]
 8002be4:	07d1      	lsls	r1, r2, #31
 8002be6:	bf5c      	itt	pl
 8002be8:	2201      	movpl	r2, #1
 8002bea:	601a      	strpl	r2, [r3, #0]
 8002bec:	4b10      	ldr	r3, [pc, #64]	; (8002c30 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x74>)
 8002bee:	681a      	ldr	r2, [r3, #0]
 8002bf0:	07d2      	lsls	r2, r2, #31
 8002bf2:	bf5c      	itt	pl
 8002bf4:	2201      	movpl	r2, #1
 8002bf6:	601a      	strpl	r2, [r3, #0]
 8002bf8:	4b0e      	ldr	r3, [pc, #56]	; (8002c34 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x78>)
 8002bfa:	681a      	ldr	r2, [r3, #0]
 8002bfc:	07d0      	lsls	r0, r2, #31
 8002bfe:	bf5c      	itt	pl
 8002c00:	2201      	movpl	r2, #1
 8002c02:	601a      	strpl	r2, [r3, #0]
 8002c04:	4b0c      	ldr	r3, [pc, #48]	; (8002c38 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x7c>)
 8002c06:	681a      	ldr	r2, [r3, #0]
 8002c08:	07d1      	lsls	r1, r2, #31
 8002c0a:	bf5c      	itt	pl
 8002c0c:	2201      	movpl	r2, #1
 8002c0e:	601a      	strpl	r2, [r3, #0]
 8002c10:	4b0a      	ldr	r3, [pc, #40]	; (8002c3c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x80>)
 8002c12:	681a      	ldr	r2, [r3, #0]
 8002c14:	07d2      	lsls	r2, r2, #31
 8002c16:	bf5c      	itt	pl
 8002c18:	2201      	movpl	r2, #1
 8002c1a:	601a      	strpl	r2, [r3, #0]
 8002c1c:	4770      	bx	lr
 8002c1e:	bf00      	nop
 8002c20:	2000029c 	.word	0x2000029c
 8002c24:	20000298 	.word	0x20000298
 8002c28:	20000294 	.word	0x20000294
 8002c2c:	20000290 	.word	0x20000290
 8002c30:	2000028c 	.word	0x2000028c
 8002c34:	20000288 	.word	0x20000288
 8002c38:	20000284 	.word	0x20000284
 8002c3c:	20000280 	.word	0x20000280

08002c40 <abort>:
 8002c40:	b508      	push	{r3, lr}
 8002c42:	2006      	movs	r0, #6
 8002c44:	f000 f948 	bl	8002ed8 <raise>
 8002c48:	2001      	movs	r0, #1
 8002c4a:	f000 f981 	bl	8002f50 <_exit>
	...

08002c50 <__cxa_atexit>:
 8002c50:	b510      	push	{r4, lr}
 8002c52:	4c05      	ldr	r4, [pc, #20]	; (8002c68 <__cxa_atexit+0x18>)
 8002c54:	4613      	mov	r3, r2
 8002c56:	b12c      	cbz	r4, 8002c64 <__cxa_atexit+0x14>
 8002c58:	460a      	mov	r2, r1
 8002c5a:	4601      	mov	r1, r0
 8002c5c:	2002      	movs	r0, #2
 8002c5e:	f3af 8000 	nop.w
 8002c62:	bd10      	pop	{r4, pc}
 8002c64:	4620      	mov	r0, r4
 8002c66:	bd10      	pop	{r4, pc}
 8002c68:	00000000 	.word	0x00000000

08002c6c <__libc_init_array>:
 8002c6c:	4b0e      	ldr	r3, [pc, #56]	; (8002ca8 <__libc_init_array+0x3c>)
 8002c6e:	b570      	push	{r4, r5, r6, lr}
 8002c70:	461e      	mov	r6, r3
 8002c72:	4c0e      	ldr	r4, [pc, #56]	; (8002cac <__libc_init_array+0x40>)
 8002c74:	2500      	movs	r5, #0
 8002c76:	1ae4      	subs	r4, r4, r3
 8002c78:	10a4      	asrs	r4, r4, #2
 8002c7a:	42a5      	cmp	r5, r4
 8002c7c:	d004      	beq.n	8002c88 <__libc_init_array+0x1c>
 8002c7e:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8002c82:	4798      	blx	r3
 8002c84:	3501      	adds	r5, #1
 8002c86:	e7f8      	b.n	8002c7a <__libc_init_array+0xe>
 8002c88:	f000 f964 	bl	8002f54 <_init>
 8002c8c:	4b08      	ldr	r3, [pc, #32]	; (8002cb0 <__libc_init_array+0x44>)
 8002c8e:	4c09      	ldr	r4, [pc, #36]	; (8002cb4 <__libc_init_array+0x48>)
 8002c90:	461e      	mov	r6, r3
 8002c92:	1ae4      	subs	r4, r4, r3
 8002c94:	10a4      	asrs	r4, r4, #2
 8002c96:	2500      	movs	r5, #0
 8002c98:	42a5      	cmp	r5, r4
 8002c9a:	d004      	beq.n	8002ca6 <__libc_init_array+0x3a>
 8002c9c:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8002ca0:	4798      	blx	r3
 8002ca2:	3501      	adds	r5, #1
 8002ca4:	e7f8      	b.n	8002c98 <__libc_init_array+0x2c>
 8002ca6:	bd70      	pop	{r4, r5, r6, pc}
 8002ca8:	08003094 	.word	0x08003094
 8002cac:	08003094 	.word	0x08003094
 8002cb0:	08003094 	.word	0x08003094
 8002cb4:	080030ac 	.word	0x080030ac

08002cb8 <malloc>:
 8002cb8:	4b02      	ldr	r3, [pc, #8]	; (8002cc4 <malloc+0xc>)
 8002cba:	4601      	mov	r1, r0
 8002cbc:	6818      	ldr	r0, [r3, #0]
 8002cbe:	f000 b873 	b.w	8002da8 <_malloc_r>
 8002cc2:	bf00      	nop
 8002cc4:	20000078 	.word	0x20000078

08002cc8 <free>:
 8002cc8:	4b02      	ldr	r3, [pc, #8]	; (8002cd4 <free+0xc>)
 8002cca:	4601      	mov	r1, r0
 8002ccc:	6818      	ldr	r0, [r3, #0]
 8002cce:	f000 b81f 	b.w	8002d10 <_free_r>
 8002cd2:	bf00      	nop
 8002cd4:	20000078 	.word	0x20000078

08002cd8 <memmove>:
 8002cd8:	4288      	cmp	r0, r1
 8002cda:	b510      	push	{r4, lr}
 8002cdc:	eb01 0302 	add.w	r3, r1, r2
 8002ce0:	d801      	bhi.n	8002ce6 <memmove+0xe>
 8002ce2:	1e42      	subs	r2, r0, #1
 8002ce4:	e00b      	b.n	8002cfe <memmove+0x26>
 8002ce6:	4298      	cmp	r0, r3
 8002ce8:	d2fb      	bcs.n	8002ce2 <memmove+0xa>
 8002cea:	1881      	adds	r1, r0, r2
 8002cec:	1ad2      	subs	r2, r2, r3
 8002cee:	42d3      	cmn	r3, r2
 8002cf0:	d004      	beq.n	8002cfc <memmove+0x24>
 8002cf2:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8002cf6:	f801 4d01 	strb.w	r4, [r1, #-1]!
 8002cfa:	e7f8      	b.n	8002cee <memmove+0x16>
 8002cfc:	bd10      	pop	{r4, pc}
 8002cfe:	4299      	cmp	r1, r3
 8002d00:	d004      	beq.n	8002d0c <memmove+0x34>
 8002d02:	f811 4b01 	ldrb.w	r4, [r1], #1
 8002d06:	f802 4f01 	strb.w	r4, [r2, #1]!
 8002d0a:	e7f8      	b.n	8002cfe <memmove+0x26>
 8002d0c:	bd10      	pop	{r4, pc}
	...

08002d10 <_free_r>:
 8002d10:	b538      	push	{r3, r4, r5, lr}
 8002d12:	4605      	mov	r5, r0
 8002d14:	2900      	cmp	r1, #0
 8002d16:	d044      	beq.n	8002da2 <_free_r+0x92>
 8002d18:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8002d1c:	1f0c      	subs	r4, r1, #4
 8002d1e:	2b00      	cmp	r3, #0
 8002d20:	bfb8      	it	lt
 8002d22:	18e4      	addlt	r4, r4, r3
 8002d24:	f000 f8f4 	bl	8002f10 <__malloc_lock>
 8002d28:	4a1e      	ldr	r2, [pc, #120]	; (8002da4 <_free_r+0x94>)
 8002d2a:	6813      	ldr	r3, [r2, #0]
 8002d2c:	4611      	mov	r1, r2
 8002d2e:	b913      	cbnz	r3, 8002d36 <_free_r+0x26>
 8002d30:	6063      	str	r3, [r4, #4]
 8002d32:	6014      	str	r4, [r2, #0]
 8002d34:	e030      	b.n	8002d98 <_free_r+0x88>
 8002d36:	42a3      	cmp	r3, r4
 8002d38:	d90d      	bls.n	8002d56 <_free_r+0x46>
 8002d3a:	6822      	ldr	r2, [r4, #0]
 8002d3c:	18a0      	adds	r0, r4, r2
 8002d3e:	4283      	cmp	r3, r0
 8002d40:	bf01      	itttt	eq
 8002d42:	6818      	ldreq	r0, [r3, #0]
 8002d44:	685b      	ldreq	r3, [r3, #4]
 8002d46:	1812      	addeq	r2, r2, r0
 8002d48:	6022      	streq	r2, [r4, #0]
 8002d4a:	6063      	str	r3, [r4, #4]
 8002d4c:	600c      	str	r4, [r1, #0]
 8002d4e:	e023      	b.n	8002d98 <_free_r+0x88>
 8002d50:	42a2      	cmp	r2, r4
 8002d52:	d803      	bhi.n	8002d5c <_free_r+0x4c>
 8002d54:	4613      	mov	r3, r2
 8002d56:	685a      	ldr	r2, [r3, #4]
 8002d58:	2a00      	cmp	r2, #0
 8002d5a:	d1f9      	bne.n	8002d50 <_free_r+0x40>
 8002d5c:	6818      	ldr	r0, [r3, #0]
 8002d5e:	1819      	adds	r1, r3, r0
 8002d60:	42a1      	cmp	r1, r4
 8002d62:	d10b      	bne.n	8002d7c <_free_r+0x6c>
 8002d64:	6821      	ldr	r1, [r4, #0]
 8002d66:	4401      	add	r1, r0
 8002d68:	1858      	adds	r0, r3, r1
 8002d6a:	4282      	cmp	r2, r0
 8002d6c:	6019      	str	r1, [r3, #0]
 8002d6e:	d113      	bne.n	8002d98 <_free_r+0x88>
 8002d70:	6810      	ldr	r0, [r2, #0]
 8002d72:	6852      	ldr	r2, [r2, #4]
 8002d74:	4401      	add	r1, r0
 8002d76:	6019      	str	r1, [r3, #0]
 8002d78:	605a      	str	r2, [r3, #4]
 8002d7a:	e00d      	b.n	8002d98 <_free_r+0x88>
 8002d7c:	d902      	bls.n	8002d84 <_free_r+0x74>
 8002d7e:	230c      	movs	r3, #12
 8002d80:	602b      	str	r3, [r5, #0]
 8002d82:	e009      	b.n	8002d98 <_free_r+0x88>
 8002d84:	6821      	ldr	r1, [r4, #0]
 8002d86:	1860      	adds	r0, r4, r1
 8002d88:	4282      	cmp	r2, r0
 8002d8a:	bf01      	itttt	eq
 8002d8c:	6810      	ldreq	r0, [r2, #0]
 8002d8e:	6852      	ldreq	r2, [r2, #4]
 8002d90:	1809      	addeq	r1, r1, r0
 8002d92:	6021      	streq	r1, [r4, #0]
 8002d94:	6062      	str	r2, [r4, #4]
 8002d96:	605c      	str	r4, [r3, #4]
 8002d98:	4628      	mov	r0, r5
 8002d9a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8002d9e:	f000 b8b8 	b.w	8002f12 <__malloc_unlock>
 8002da2:	bd38      	pop	{r3, r4, r5, pc}
 8002da4:	200002a4 	.word	0x200002a4

08002da8 <_malloc_r>:
 8002da8:	b570      	push	{r4, r5, r6, lr}
 8002daa:	1ccd      	adds	r5, r1, #3
 8002dac:	f025 0503 	bic.w	r5, r5, #3
 8002db0:	3508      	adds	r5, #8
 8002db2:	2d0c      	cmp	r5, #12
 8002db4:	bf38      	it	cc
 8002db6:	250c      	movcc	r5, #12
 8002db8:	2d00      	cmp	r5, #0
 8002dba:	4606      	mov	r6, r0
 8002dbc:	db01      	blt.n	8002dc2 <_malloc_r+0x1a>
 8002dbe:	42a9      	cmp	r1, r5
 8002dc0:	d902      	bls.n	8002dc8 <_malloc_r+0x20>
 8002dc2:	230c      	movs	r3, #12
 8002dc4:	6033      	str	r3, [r6, #0]
 8002dc6:	e046      	b.n	8002e56 <_malloc_r+0xae>
 8002dc8:	f000 f8a2 	bl	8002f10 <__malloc_lock>
 8002dcc:	4b23      	ldr	r3, [pc, #140]	; (8002e5c <_malloc_r+0xb4>)
 8002dce:	681c      	ldr	r4, [r3, #0]
 8002dd0:	461a      	mov	r2, r3
 8002dd2:	4621      	mov	r1, r4
 8002dd4:	b1a1      	cbz	r1, 8002e00 <_malloc_r+0x58>
 8002dd6:	680b      	ldr	r3, [r1, #0]
 8002dd8:	1b5b      	subs	r3, r3, r5
 8002dda:	d40e      	bmi.n	8002dfa <_malloc_r+0x52>
 8002ddc:	2b0b      	cmp	r3, #11
 8002dde:	d903      	bls.n	8002de8 <_malloc_r+0x40>
 8002de0:	600b      	str	r3, [r1, #0]
 8002de2:	18cc      	adds	r4, r1, r3
 8002de4:	50cd      	str	r5, [r1, r3]
 8002de6:	e01e      	b.n	8002e26 <_malloc_r+0x7e>
 8002de8:	428c      	cmp	r4, r1
 8002dea:	bf0b      	itete	eq
 8002dec:	6863      	ldreq	r3, [r4, #4]
 8002dee:	684b      	ldrne	r3, [r1, #4]
 8002df0:	6013      	streq	r3, [r2, #0]
 8002df2:	6063      	strne	r3, [r4, #4]
 8002df4:	bf18      	it	ne
 8002df6:	460c      	movne	r4, r1
 8002df8:	e015      	b.n	8002e26 <_malloc_r+0x7e>
 8002dfa:	460c      	mov	r4, r1
 8002dfc:	6849      	ldr	r1, [r1, #4]
 8002dfe:	e7e9      	b.n	8002dd4 <_malloc_r+0x2c>
 8002e00:	4c17      	ldr	r4, [pc, #92]	; (8002e60 <_malloc_r+0xb8>)
 8002e02:	6823      	ldr	r3, [r4, #0]
 8002e04:	b91b      	cbnz	r3, 8002e0e <_malloc_r+0x66>
 8002e06:	4630      	mov	r0, r6
 8002e08:	f000 f82c 	bl	8002e64 <_sbrk_r>
 8002e0c:	6020      	str	r0, [r4, #0]
 8002e0e:	4629      	mov	r1, r5
 8002e10:	4630      	mov	r0, r6
 8002e12:	f000 f827 	bl	8002e64 <_sbrk_r>
 8002e16:	1c43      	adds	r3, r0, #1
 8002e18:	d018      	beq.n	8002e4c <_malloc_r+0xa4>
 8002e1a:	1cc4      	adds	r4, r0, #3
 8002e1c:	f024 0403 	bic.w	r4, r4, #3
 8002e20:	42a0      	cmp	r0, r4
 8002e22:	d10d      	bne.n	8002e40 <_malloc_r+0x98>
 8002e24:	6025      	str	r5, [r4, #0]
 8002e26:	4630      	mov	r0, r6
 8002e28:	f000 f873 	bl	8002f12 <__malloc_unlock>
 8002e2c:	f104 000b 	add.w	r0, r4, #11
 8002e30:	1d23      	adds	r3, r4, #4
 8002e32:	f020 0007 	bic.w	r0, r0, #7
 8002e36:	1ac3      	subs	r3, r0, r3
 8002e38:	d00e      	beq.n	8002e58 <_malloc_r+0xb0>
 8002e3a:	425a      	negs	r2, r3
 8002e3c:	50e2      	str	r2, [r4, r3]
 8002e3e:	bd70      	pop	{r4, r5, r6, pc}
 8002e40:	1a21      	subs	r1, r4, r0
 8002e42:	4630      	mov	r0, r6
 8002e44:	f000 f80e 	bl	8002e64 <_sbrk_r>
 8002e48:	3001      	adds	r0, #1
 8002e4a:	d1eb      	bne.n	8002e24 <_malloc_r+0x7c>
 8002e4c:	230c      	movs	r3, #12
 8002e4e:	6033      	str	r3, [r6, #0]
 8002e50:	4630      	mov	r0, r6
 8002e52:	f000 f85e 	bl	8002f12 <__malloc_unlock>
 8002e56:	2000      	movs	r0, #0
 8002e58:	bd70      	pop	{r4, r5, r6, pc}
 8002e5a:	bf00      	nop
 8002e5c:	200002a4 	.word	0x200002a4
 8002e60:	200002a0 	.word	0x200002a0

08002e64 <_sbrk_r>:
 8002e64:	b538      	push	{r3, r4, r5, lr}
 8002e66:	4c06      	ldr	r4, [pc, #24]	; (8002e80 <_sbrk_r+0x1c>)
 8002e68:	2300      	movs	r3, #0
 8002e6a:	4605      	mov	r5, r0
 8002e6c:	4608      	mov	r0, r1
 8002e6e:	6023      	str	r3, [r4, #0]
 8002e70:	f000 f860 	bl	8002f34 <_sbrk>
 8002e74:	1c43      	adds	r3, r0, #1
 8002e76:	d102      	bne.n	8002e7e <_sbrk_r+0x1a>
 8002e78:	6823      	ldr	r3, [r4, #0]
 8002e7a:	b103      	cbz	r3, 8002e7e <_sbrk_r+0x1a>
 8002e7c:	602b      	str	r3, [r5, #0]
 8002e7e:	bd38      	pop	{r3, r4, r5, pc}
 8002e80:	200002b0 	.word	0x200002b0

08002e84 <_raise_r>:
 8002e84:	291f      	cmp	r1, #31
 8002e86:	b538      	push	{r3, r4, r5, lr}
 8002e88:	4604      	mov	r4, r0
 8002e8a:	460d      	mov	r5, r1
 8002e8c:	d904      	bls.n	8002e98 <_raise_r+0x14>
 8002e8e:	2316      	movs	r3, #22
 8002e90:	6003      	str	r3, [r0, #0]
 8002e92:	f04f 30ff 	mov.w	r0, #4294967295
 8002e96:	bd38      	pop	{r3, r4, r5, pc}
 8002e98:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8002e9a:	b112      	cbz	r2, 8002ea2 <_raise_r+0x1e>
 8002e9c:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8002ea0:	b94b      	cbnz	r3, 8002eb6 <_raise_r+0x32>
 8002ea2:	4620      	mov	r0, r4
 8002ea4:	f000 f832 	bl	8002f0c <_getpid_r>
 8002ea8:	462a      	mov	r2, r5
 8002eaa:	4601      	mov	r1, r0
 8002eac:	4620      	mov	r0, r4
 8002eae:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8002eb2:	f000 b819 	b.w	8002ee8 <_kill_r>
 8002eb6:	2b01      	cmp	r3, #1
 8002eb8:	d00c      	beq.n	8002ed4 <_raise_r+0x50>
 8002eba:	1c59      	adds	r1, r3, #1
 8002ebc:	d103      	bne.n	8002ec6 <_raise_r+0x42>
 8002ebe:	2316      	movs	r3, #22
 8002ec0:	6003      	str	r3, [r0, #0]
 8002ec2:	2001      	movs	r0, #1
 8002ec4:	bd38      	pop	{r3, r4, r5, pc}
 8002ec6:	2400      	movs	r4, #0
 8002ec8:	4628      	mov	r0, r5
 8002eca:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8002ece:	4798      	blx	r3
 8002ed0:	4620      	mov	r0, r4
 8002ed2:	bd38      	pop	{r3, r4, r5, pc}
 8002ed4:	2000      	movs	r0, #0
 8002ed6:	bd38      	pop	{r3, r4, r5, pc}

08002ed8 <raise>:
 8002ed8:	4b02      	ldr	r3, [pc, #8]	; (8002ee4 <raise+0xc>)
 8002eda:	4601      	mov	r1, r0
 8002edc:	6818      	ldr	r0, [r3, #0]
 8002ede:	f7ff bfd1 	b.w	8002e84 <_raise_r>
 8002ee2:	bf00      	nop
 8002ee4:	20000078 	.word	0x20000078

08002ee8 <_kill_r>:
 8002ee8:	b538      	push	{r3, r4, r5, lr}
 8002eea:	4c07      	ldr	r4, [pc, #28]	; (8002f08 <_kill_r+0x20>)
 8002eec:	2300      	movs	r3, #0
 8002eee:	4605      	mov	r5, r0
 8002ef0:	4608      	mov	r0, r1
 8002ef2:	4611      	mov	r1, r2
 8002ef4:	6023      	str	r3, [r4, #0]
 8002ef6:	f000 f815 	bl	8002f24 <_kill>
 8002efa:	1c43      	adds	r3, r0, #1
 8002efc:	d102      	bne.n	8002f04 <_kill_r+0x1c>
 8002efe:	6823      	ldr	r3, [r4, #0]
 8002f00:	b103      	cbz	r3, 8002f04 <_kill_r+0x1c>
 8002f02:	602b      	str	r3, [r5, #0]
 8002f04:	bd38      	pop	{r3, r4, r5, pc}
 8002f06:	bf00      	nop
 8002f08:	200002b0 	.word	0x200002b0

08002f0c <_getpid_r>:
 8002f0c:	f000 b802 	b.w	8002f14 <_getpid>

08002f10 <__malloc_lock>:
 8002f10:	4770      	bx	lr

08002f12 <__malloc_unlock>:
 8002f12:	4770      	bx	lr

08002f14 <_getpid>:
 8002f14:	4b02      	ldr	r3, [pc, #8]	; (8002f20 <_getpid+0xc>)
 8002f16:	2258      	movs	r2, #88	; 0x58
 8002f18:	601a      	str	r2, [r3, #0]
 8002f1a:	f04f 30ff 	mov.w	r0, #4294967295
 8002f1e:	4770      	bx	lr
 8002f20:	200002b0 	.word	0x200002b0

08002f24 <_kill>:
 8002f24:	4b02      	ldr	r3, [pc, #8]	; (8002f30 <_kill+0xc>)
 8002f26:	2258      	movs	r2, #88	; 0x58
 8002f28:	601a      	str	r2, [r3, #0]
 8002f2a:	f04f 30ff 	mov.w	r0, #4294967295
 8002f2e:	4770      	bx	lr
 8002f30:	200002b0 	.word	0x200002b0

08002f34 <_sbrk>:
 8002f34:	4b04      	ldr	r3, [pc, #16]	; (8002f48 <_sbrk+0x14>)
 8002f36:	4602      	mov	r2, r0
 8002f38:	6819      	ldr	r1, [r3, #0]
 8002f3a:	b909      	cbnz	r1, 8002f40 <_sbrk+0xc>
 8002f3c:	4903      	ldr	r1, [pc, #12]	; (8002f4c <_sbrk+0x18>)
 8002f3e:	6019      	str	r1, [r3, #0]
 8002f40:	6818      	ldr	r0, [r3, #0]
 8002f42:	4402      	add	r2, r0
 8002f44:	601a      	str	r2, [r3, #0]
 8002f46:	4770      	bx	lr
 8002f48:	200002a8 	.word	0x200002a8
 8002f4c:	200002b4 	.word	0x200002b4

08002f50 <_exit>:
 8002f50:	e7fe      	b.n	8002f50 <_exit>
	...

08002f54 <_init>:
 8002f54:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002f56:	bf00      	nop
 8002f58:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002f5a:	bc08      	pop	{r3}
 8002f5c:	469e      	mov	lr, r3
 8002f5e:	4770      	bx	lr

08002f60 <_fini>:
 8002f60:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002f62:	bf00      	nop
 8002f64:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002f66:	bc08      	pop	{r3}
 8002f68:	469e      	mov	lr, r3
 8002f6a:	4770      	bx	lr
